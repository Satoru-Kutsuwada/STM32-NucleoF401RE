
TEST001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000baec  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010e8  0800bc8c  0800bc8c  0001bc8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd74  0800cd74  000200c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800cd74  0800cd74  0001cd74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cd7c  0800cd7c  000200c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd7c  0800cd7c  0001cd7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cd80  0800cd80  0001cd80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  0800cd84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000064a4  200000c4  0800ce48  000200c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006568  0800ce48  00026568  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002024e  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004961  00000000  00000000  00040342  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001980  00000000  00000000  00044ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017e0  00000000  00000000  00046628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a631  00000000  00000000  00047e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001deab  00000000  00000000  00062439  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009fdc3  00000000  00000000  000802e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001200a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000074a4  00000000  00000000  001200f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000c4 	.word	0x200000c4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bc74 	.word	0x0800bc74

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000c8 	.word	0x200000c8
 80001dc:	0800bc74 	.word	0x0800bc74

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_dmul>:
 80002b0:	b570      	push	{r4, r5, r6, lr}
 80002b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002be:	bf1d      	ittte	ne
 80002c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002c4:	ea94 0f0c 	teqne	r4, ip
 80002c8:	ea95 0f0c 	teqne	r5, ip
 80002cc:	f000 f8de 	bleq	800048c <__aeabi_dmul+0x1dc>
 80002d0:	442c      	add	r4, r5
 80002d2:	ea81 0603 	eor.w	r6, r1, r3
 80002d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002e2:	bf18      	it	ne
 80002e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002f0:	d038      	beq.n	8000364 <__aeabi_dmul+0xb4>
 80002f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002f6:	f04f 0500 	mov.w	r5, #0
 80002fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000302:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000306:	f04f 0600 	mov.w	r6, #0
 800030a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800030e:	f09c 0f00 	teq	ip, #0
 8000312:	bf18      	it	ne
 8000314:	f04e 0e01 	orrne.w	lr, lr, #1
 8000318:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800031c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000320:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000324:	d204      	bcs.n	8000330 <__aeabi_dmul+0x80>
 8000326:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800032a:	416d      	adcs	r5, r5
 800032c:	eb46 0606 	adc.w	r6, r6, r6
 8000330:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000334:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000338:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800033c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000340:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000344:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000348:	bf88      	it	hi
 800034a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800034e:	d81e      	bhi.n	800038e <__aeabi_dmul+0xde>
 8000350:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000368:	ea46 0101 	orr.w	r1, r6, r1
 800036c:	ea40 0002 	orr.w	r0, r0, r2
 8000370:	ea81 0103 	eor.w	r1, r1, r3
 8000374:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000378:	bfc2      	ittt	gt
 800037a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800037e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000382:	bd70      	popgt	{r4, r5, r6, pc}
 8000384:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000388:	f04f 0e00 	mov.w	lr, #0
 800038c:	3c01      	subs	r4, #1
 800038e:	f300 80ab 	bgt.w	80004e8 <__aeabi_dmul+0x238>
 8000392:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000396:	bfde      	ittt	le
 8000398:	2000      	movle	r0, #0
 800039a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800039e:	bd70      	pople	{r4, r5, r6, pc}
 80003a0:	f1c4 0400 	rsb	r4, r4, #0
 80003a4:	3c20      	subs	r4, #32
 80003a6:	da35      	bge.n	8000414 <__aeabi_dmul+0x164>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc1b      	bgt.n	80003e4 <__aeabi_dmul+0x134>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0520 	rsb	r5, r4, #32
 80003b4:	fa00 f305 	lsl.w	r3, r0, r5
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f205 	lsl.w	r2, r1, r5
 80003c0:	ea40 0002 	orr.w	r0, r0, r2
 80003c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d0:	fa21 f604 	lsr.w	r6, r1, r4
 80003d4:	eb42 0106 	adc.w	r1, r2, r6
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 040c 	rsb	r4, r4, #12
 80003e8:	f1c4 0520 	rsb	r5, r4, #32
 80003ec:	fa00 f304 	lsl.w	r3, r0, r4
 80003f0:	fa20 f005 	lsr.w	r0, r0, r5
 80003f4:	fa01 f204 	lsl.w	r2, r1, r4
 80003f8:	ea40 0002 	orr.w	r0, r0, r2
 80003fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000400:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000404:	f141 0100 	adc.w	r1, r1, #0
 8000408:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800040c:	bf08      	it	eq
 800040e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f1c4 0520 	rsb	r5, r4, #32
 8000418:	fa00 f205 	lsl.w	r2, r0, r5
 800041c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000420:	fa20 f304 	lsr.w	r3, r0, r4
 8000424:	fa01 f205 	lsl.w	r2, r1, r5
 8000428:	ea43 0302 	orr.w	r3, r3, r2
 800042c:	fa21 f004 	lsr.w	r0, r1, r4
 8000430:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000434:	fa21 f204 	lsr.w	r2, r1, r4
 8000438:	ea20 0002 	bic.w	r0, r0, r2
 800043c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000440:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000444:	bf08      	it	eq
 8000446:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	f094 0f00 	teq	r4, #0
 8000450:	d10f      	bne.n	8000472 <__aeabi_dmul+0x1c2>
 8000452:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000456:	0040      	lsls	r0, r0, #1
 8000458:	eb41 0101 	adc.w	r1, r1, r1
 800045c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3c01      	subeq	r4, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1a6>
 8000466:	ea41 0106 	orr.w	r1, r1, r6
 800046a:	f095 0f00 	teq	r5, #0
 800046e:	bf18      	it	ne
 8000470:	4770      	bxne	lr
 8000472:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000476:	0052      	lsls	r2, r2, #1
 8000478:	eb43 0303 	adc.w	r3, r3, r3
 800047c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000480:	bf08      	it	eq
 8000482:	3d01      	subeq	r5, #1
 8000484:	d0f7      	beq.n	8000476 <__aeabi_dmul+0x1c6>
 8000486:	ea43 0306 	orr.w	r3, r3, r6
 800048a:	4770      	bx	lr
 800048c:	ea94 0f0c 	teq	r4, ip
 8000490:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000494:	bf18      	it	ne
 8000496:	ea95 0f0c 	teqne	r5, ip
 800049a:	d00c      	beq.n	80004b6 <__aeabi_dmul+0x206>
 800049c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004a0:	bf18      	it	ne
 80004a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a6:	d1d1      	bne.n	800044c <__aeabi_dmul+0x19c>
 80004a8:	ea81 0103 	eor.w	r1, r1, r3
 80004ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004b0:	f04f 0000 	mov.w	r0, #0
 80004b4:	bd70      	pop	{r4, r5, r6, pc}
 80004b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ba:	bf06      	itte	eq
 80004bc:	4610      	moveq	r0, r2
 80004be:	4619      	moveq	r1, r3
 80004c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004c4:	d019      	beq.n	80004fa <__aeabi_dmul+0x24a>
 80004c6:	ea94 0f0c 	teq	r4, ip
 80004ca:	d102      	bne.n	80004d2 <__aeabi_dmul+0x222>
 80004cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004d0:	d113      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004d2:	ea95 0f0c 	teq	r5, ip
 80004d6:	d105      	bne.n	80004e4 <__aeabi_dmul+0x234>
 80004d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004dc:	bf1c      	itt	ne
 80004de:	4610      	movne	r0, r2
 80004e0:	4619      	movne	r1, r3
 80004e2:	d10a      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004e4:	ea81 0103 	eor.w	r1, r1, r3
 80004e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd70      	pop	{r4, r5, r6, pc}
 80004fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000502:	bd70      	pop	{r4, r5, r6, pc}

08000504 <__aeabi_drsub>:
 8000504:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e002      	b.n	8000510 <__adddf3>
 800050a:	bf00      	nop

0800050c <__aeabi_dsub>:
 800050c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000510 <__adddf3>:
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000516:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800051a:	ea94 0f05 	teq	r4, r5
 800051e:	bf08      	it	eq
 8000520:	ea90 0f02 	teqeq	r0, r2
 8000524:	bf1f      	itttt	ne
 8000526:	ea54 0c00 	orrsne.w	ip, r4, r0
 800052a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800052e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000532:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000536:	f000 80e2 	beq.w	80006fe <__adddf3+0x1ee>
 800053a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800053e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000542:	bfb8      	it	lt
 8000544:	426d      	neglt	r5, r5
 8000546:	dd0c      	ble.n	8000562 <__adddf3+0x52>
 8000548:	442c      	add	r4, r5
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	ea82 0000 	eor.w	r0, r2, r0
 8000556:	ea83 0101 	eor.w	r1, r3, r1
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	2d36      	cmp	r5, #54	; 0x36
 8000564:	bf88      	it	hi
 8000566:	bd30      	pophi	{r4, r5, pc}
 8000568:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800056c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000570:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000574:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000578:	d002      	beq.n	8000580 <__adddf3+0x70>
 800057a:	4240      	negs	r0, r0
 800057c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000580:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000584:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000588:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800058c:	d002      	beq.n	8000594 <__adddf3+0x84>
 800058e:	4252      	negs	r2, r2
 8000590:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000594:	ea94 0f05 	teq	r4, r5
 8000598:	f000 80a7 	beq.w	80006ea <__adddf3+0x1da>
 800059c:	f1a4 0401 	sub.w	r4, r4, #1
 80005a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005a4:	db0d      	blt.n	80005c2 <__adddf3+0xb2>
 80005a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005aa:	fa22 f205 	lsr.w	r2, r2, r5
 80005ae:	1880      	adds	r0, r0, r2
 80005b0:	f141 0100 	adc.w	r1, r1, #0
 80005b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005b8:	1880      	adds	r0, r0, r2
 80005ba:	fa43 f305 	asr.w	r3, r3, r5
 80005be:	4159      	adcs	r1, r3
 80005c0:	e00e      	b.n	80005e0 <__adddf3+0xd0>
 80005c2:	f1a5 0520 	sub.w	r5, r5, #32
 80005c6:	f10e 0e20 	add.w	lr, lr, #32
 80005ca:	2a01      	cmp	r2, #1
 80005cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005d0:	bf28      	it	cs
 80005d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005d6:	fa43 f305 	asr.w	r3, r3, r5
 80005da:	18c0      	adds	r0, r0, r3
 80005dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	d507      	bpl.n	80005f6 <__adddf3+0xe6>
 80005e6:	f04f 0e00 	mov.w	lr, #0
 80005ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005fa:	d31b      	bcc.n	8000634 <__adddf3+0x124>
 80005fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000600:	d30c      	bcc.n	800061c <__adddf3+0x10c>
 8000602:	0849      	lsrs	r1, r1, #1
 8000604:	ea5f 0030 	movs.w	r0, r0, rrx
 8000608:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800060c:	f104 0401 	add.w	r4, r4, #1
 8000610:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000614:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000618:	f080 809a 	bcs.w	8000750 <__adddf3+0x240>
 800061c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	ea41 0105 	orr.w	r1, r1, r5
 8000632:	bd30      	pop	{r4, r5, pc}
 8000634:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000638:	4140      	adcs	r0, r0
 800063a:	eb41 0101 	adc.w	r1, r1, r1
 800063e:	3c01      	subs	r4, #1
 8000640:	bf28      	it	cs
 8000642:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000646:	d2e9      	bcs.n	800061c <__adddf3+0x10c>
 8000648:	f091 0f00 	teq	r1, #0
 800064c:	bf04      	itt	eq
 800064e:	4601      	moveq	r1, r0
 8000650:	2000      	moveq	r0, #0
 8000652:	fab1 f381 	clz	r3, r1
 8000656:	bf08      	it	eq
 8000658:	3320      	addeq	r3, #32
 800065a:	f1a3 030b 	sub.w	r3, r3, #11
 800065e:	f1b3 0220 	subs.w	r2, r3, #32
 8000662:	da0c      	bge.n	800067e <__adddf3+0x16e>
 8000664:	320c      	adds	r2, #12
 8000666:	dd08      	ble.n	800067a <__adddf3+0x16a>
 8000668:	f102 0c14 	add.w	ip, r2, #20
 800066c:	f1c2 020c 	rsb	r2, r2, #12
 8000670:	fa01 f00c 	lsl.w	r0, r1, ip
 8000674:	fa21 f102 	lsr.w	r1, r1, r2
 8000678:	e00c      	b.n	8000694 <__adddf3+0x184>
 800067a:	f102 0214 	add.w	r2, r2, #20
 800067e:	bfd8      	it	le
 8000680:	f1c2 0c20 	rsble	ip, r2, #32
 8000684:	fa01 f102 	lsl.w	r1, r1, r2
 8000688:	fa20 fc0c 	lsr.w	ip, r0, ip
 800068c:	bfdc      	itt	le
 800068e:	ea41 010c 	orrle.w	r1, r1, ip
 8000692:	4090      	lslle	r0, r2
 8000694:	1ae4      	subs	r4, r4, r3
 8000696:	bfa2      	ittt	ge
 8000698:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800069c:	4329      	orrge	r1, r5
 800069e:	bd30      	popge	{r4, r5, pc}
 80006a0:	ea6f 0404 	mvn.w	r4, r4
 80006a4:	3c1f      	subs	r4, #31
 80006a6:	da1c      	bge.n	80006e2 <__adddf3+0x1d2>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc0e      	bgt.n	80006ca <__adddf3+0x1ba>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0220 	rsb	r2, r4, #32
 80006b4:	fa20 f004 	lsr.w	r0, r0, r4
 80006b8:	fa01 f302 	lsl.w	r3, r1, r2
 80006bc:	ea40 0003 	orr.w	r0, r0, r3
 80006c0:	fa21 f304 	lsr.w	r3, r1, r4
 80006c4:	ea45 0103 	orr.w	r1, r5, r3
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f1c4 040c 	rsb	r4, r4, #12
 80006ce:	f1c4 0220 	rsb	r2, r4, #32
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 f304 	lsl.w	r3, r1, r4
 80006da:	ea40 0003 	orr.w	r0, r0, r3
 80006de:	4629      	mov	r1, r5
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	fa21 f004 	lsr.w	r0, r1, r4
 80006e6:	4629      	mov	r1, r5
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	f094 0f00 	teq	r4, #0
 80006ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006f2:	bf06      	itte	eq
 80006f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006f8:	3401      	addeq	r4, #1
 80006fa:	3d01      	subne	r5, #1
 80006fc:	e74e      	b.n	800059c <__adddf3+0x8c>
 80006fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000702:	bf18      	it	ne
 8000704:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000708:	d029      	beq.n	800075e <__adddf3+0x24e>
 800070a:	ea94 0f05 	teq	r4, r5
 800070e:	bf08      	it	eq
 8000710:	ea90 0f02 	teqeq	r0, r2
 8000714:	d005      	beq.n	8000722 <__adddf3+0x212>
 8000716:	ea54 0c00 	orrs.w	ip, r4, r0
 800071a:	bf04      	itt	eq
 800071c:	4619      	moveq	r1, r3
 800071e:	4610      	moveq	r0, r2
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	ea91 0f03 	teq	r1, r3
 8000726:	bf1e      	ittt	ne
 8000728:	2100      	movne	r1, #0
 800072a:	2000      	movne	r0, #0
 800072c:	bd30      	popne	{r4, r5, pc}
 800072e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000732:	d105      	bne.n	8000740 <__adddf3+0x230>
 8000734:	0040      	lsls	r0, r0, #1
 8000736:	4149      	adcs	r1, r1
 8000738:	bf28      	it	cs
 800073a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800073e:	bd30      	pop	{r4, r5, pc}
 8000740:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000744:	bf3c      	itt	cc
 8000746:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800074a:	bd30      	popcc	{r4, r5, pc}
 800074c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000750:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000754:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd30      	pop	{r4, r5, pc}
 800075e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000762:	bf1a      	itte	ne
 8000764:	4619      	movne	r1, r3
 8000766:	4610      	movne	r0, r2
 8000768:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800076c:	bf1c      	itt	ne
 800076e:	460b      	movne	r3, r1
 8000770:	4602      	movne	r2, r0
 8000772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000776:	bf06      	itte	eq
 8000778:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800077c:	ea91 0f03 	teqeq	r1, r3
 8000780:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000784:	bd30      	pop	{r4, r5, pc}
 8000786:	bf00      	nop

08000788 <__aeabi_ui2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f04f 0500 	mov.w	r5, #0
 80007a0:	f04f 0100 	mov.w	r1, #0
 80007a4:	e750      	b.n	8000648 <__adddf3+0x138>
 80007a6:	bf00      	nop

080007a8 <__aeabi_i2d>:
 80007a8:	f090 0f00 	teq	r0, #0
 80007ac:	bf04      	itt	eq
 80007ae:	2100      	moveq	r1, #0
 80007b0:	4770      	bxeq	lr
 80007b2:	b530      	push	{r4, r5, lr}
 80007b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007c0:	bf48      	it	mi
 80007c2:	4240      	negmi	r0, r0
 80007c4:	f04f 0100 	mov.w	r1, #0
 80007c8:	e73e      	b.n	8000648 <__adddf3+0x138>
 80007ca:	bf00      	nop

080007cc <__aeabi_f2d>:
 80007cc:	0042      	lsls	r2, r0, #1
 80007ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007da:	bf1f      	itttt	ne
 80007dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007e8:	4770      	bxne	lr
 80007ea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ee:	bf08      	it	eq
 80007f0:	4770      	bxeq	lr
 80007f2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007f6:	bf04      	itt	eq
 80007f8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007fc:	4770      	bxeq	lr
 80007fe:	b530      	push	{r4, r5, lr}
 8000800:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000804:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000808:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800080c:	e71c      	b.n	8000648 <__adddf3+0x138>
 800080e:	bf00      	nop

08000810 <__aeabi_ul2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f04f 0500 	mov.w	r5, #0
 800081e:	e00a      	b.n	8000836 <__aeabi_l2d+0x16>

08000820 <__aeabi_l2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800082e:	d502      	bpl.n	8000836 <__aeabi_l2d+0x16>
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800083a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800083e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000842:	f43f aed8 	beq.w	80005f6 <__adddf3+0xe6>
 8000846:	f04f 0203 	mov.w	r2, #3
 800084a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800084e:	bf18      	it	ne
 8000850:	3203      	addne	r2, #3
 8000852:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000856:	bf18      	it	ne
 8000858:	3203      	addne	r2, #3
 800085a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800085e:	f1c2 0320 	rsb	r3, r2, #32
 8000862:	fa00 fc03 	lsl.w	ip, r0, r3
 8000866:	fa20 f002 	lsr.w	r0, r0, r2
 800086a:	fa01 fe03 	lsl.w	lr, r1, r3
 800086e:	ea40 000e 	orr.w	r0, r0, lr
 8000872:	fa21 f102 	lsr.w	r1, r1, r2
 8000876:	4414      	add	r4, r2
 8000878:	e6bd      	b.n	80005f6 <__adddf3+0xe6>
 800087a:	bf00      	nop

0800087c <__gedf2>:
 800087c:	f04f 3cff 	mov.w	ip, #4294967295
 8000880:	e006      	b.n	8000890 <__cmpdf2+0x4>
 8000882:	bf00      	nop

08000884 <__ledf2>:
 8000884:	f04f 0c01 	mov.w	ip, #1
 8000888:	e002      	b.n	8000890 <__cmpdf2+0x4>
 800088a:	bf00      	nop

0800088c <__cmpdf2>:
 800088c:	f04f 0c01 	mov.w	ip, #1
 8000890:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000894:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000898:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800089c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008a0:	bf18      	it	ne
 80008a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80008a6:	d01b      	beq.n	80008e0 <__cmpdf2+0x54>
 80008a8:	b001      	add	sp, #4
 80008aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80008ae:	bf0c      	ite	eq
 80008b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80008b4:	ea91 0f03 	teqne	r1, r3
 80008b8:	bf02      	ittt	eq
 80008ba:	ea90 0f02 	teqeq	r0, r2
 80008be:	2000      	moveq	r0, #0
 80008c0:	4770      	bxeq	lr
 80008c2:	f110 0f00 	cmn.w	r0, #0
 80008c6:	ea91 0f03 	teq	r1, r3
 80008ca:	bf58      	it	pl
 80008cc:	4299      	cmppl	r1, r3
 80008ce:	bf08      	it	eq
 80008d0:	4290      	cmpeq	r0, r2
 80008d2:	bf2c      	ite	cs
 80008d4:	17d8      	asrcs	r0, r3, #31
 80008d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008da:	f040 0001 	orr.w	r0, r0, #1
 80008de:	4770      	bx	lr
 80008e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008e8:	d102      	bne.n	80008f0 <__cmpdf2+0x64>
 80008ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008ee:	d107      	bne.n	8000900 <__cmpdf2+0x74>
 80008f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008f8:	d1d6      	bne.n	80008a8 <__cmpdf2+0x1c>
 80008fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008fe:	d0d3      	beq.n	80008a8 <__cmpdf2+0x1c>
 8000900:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop

08000908 <__aeabi_cdrcmple>:
 8000908:	4684      	mov	ip, r0
 800090a:	4610      	mov	r0, r2
 800090c:	4662      	mov	r2, ip
 800090e:	468c      	mov	ip, r1
 8000910:	4619      	mov	r1, r3
 8000912:	4663      	mov	r3, ip
 8000914:	e000      	b.n	8000918 <__aeabi_cdcmpeq>
 8000916:	bf00      	nop

08000918 <__aeabi_cdcmpeq>:
 8000918:	b501      	push	{r0, lr}
 800091a:	f7ff ffb7 	bl	800088c <__cmpdf2>
 800091e:	2800      	cmp	r0, #0
 8000920:	bf48      	it	mi
 8000922:	f110 0f00 	cmnmi.w	r0, #0
 8000926:	bd01      	pop	{r0, pc}

08000928 <__aeabi_dcmpeq>:
 8000928:	f84d ed08 	str.w	lr, [sp, #-8]!
 800092c:	f7ff fff4 	bl	8000918 <__aeabi_cdcmpeq>
 8000930:	bf0c      	ite	eq
 8000932:	2001      	moveq	r0, #1
 8000934:	2000      	movne	r0, #0
 8000936:	f85d fb08 	ldr.w	pc, [sp], #8
 800093a:	bf00      	nop

0800093c <__aeabi_dcmplt>:
 800093c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000940:	f7ff ffea 	bl	8000918 <__aeabi_cdcmpeq>
 8000944:	bf34      	ite	cc
 8000946:	2001      	movcc	r0, #1
 8000948:	2000      	movcs	r0, #0
 800094a:	f85d fb08 	ldr.w	pc, [sp], #8
 800094e:	bf00      	nop

08000950 <__aeabi_dcmple>:
 8000950:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000954:	f7ff ffe0 	bl	8000918 <__aeabi_cdcmpeq>
 8000958:	bf94      	ite	ls
 800095a:	2001      	movls	r0, #1
 800095c:	2000      	movhi	r0, #0
 800095e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000962:	bf00      	nop

08000964 <__aeabi_dcmpge>:
 8000964:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000968:	f7ff ffce 	bl	8000908 <__aeabi_cdrcmple>
 800096c:	bf94      	ite	ls
 800096e:	2001      	movls	r0, #1
 8000970:	2000      	movhi	r0, #0
 8000972:	f85d fb08 	ldr.w	pc, [sp], #8
 8000976:	bf00      	nop

08000978 <__aeabi_dcmpgt>:
 8000978:	f84d ed08 	str.w	lr, [sp, #-8]!
 800097c:	f7ff ffc4 	bl	8000908 <__aeabi_cdrcmple>
 8000980:	bf34      	ite	cc
 8000982:	2001      	movcc	r0, #1
 8000984:	2000      	movcs	r0, #0
 8000986:	f85d fb08 	ldr.w	pc, [sp], #8
 800098a:	bf00      	nop

0800098c <__aeabi_d2iz>:
 800098c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000990:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000994:	d215      	bcs.n	80009c2 <__aeabi_d2iz+0x36>
 8000996:	d511      	bpl.n	80009bc <__aeabi_d2iz+0x30>
 8000998:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800099c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009a0:	d912      	bls.n	80009c8 <__aeabi_d2iz+0x3c>
 80009a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009b2:	fa23 f002 	lsr.w	r0, r3, r2
 80009b6:	bf18      	it	ne
 80009b8:	4240      	negne	r0, r0
 80009ba:	4770      	bx	lr
 80009bc:	f04f 0000 	mov.w	r0, #0
 80009c0:	4770      	bx	lr
 80009c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009c6:	d105      	bne.n	80009d4 <__aeabi_d2iz+0x48>
 80009c8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009cc:	bf08      	it	eq
 80009ce:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009d2:	4770      	bx	lr
 80009d4:	f04f 0000 	mov.w	r0, #0
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <__aeabi_uldivmod>:
 80009dc:	b953      	cbnz	r3, 80009f4 <__aeabi_uldivmod+0x18>
 80009de:	b94a      	cbnz	r2, 80009f4 <__aeabi_uldivmod+0x18>
 80009e0:	2900      	cmp	r1, #0
 80009e2:	bf08      	it	eq
 80009e4:	2800      	cmpeq	r0, #0
 80009e6:	bf1c      	itt	ne
 80009e8:	f04f 31ff 	movne.w	r1, #4294967295
 80009ec:	f04f 30ff 	movne.w	r0, #4294967295
 80009f0:	f000 b974 	b.w	8000cdc <__aeabi_idiv0>
 80009f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009fc:	f000 f806 	bl	8000a0c <__udivmoddi4>
 8000a00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a08:	b004      	add	sp, #16
 8000a0a:	4770      	bx	lr

08000a0c <__udivmoddi4>:
 8000a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a10:	9d08      	ldr	r5, [sp, #32]
 8000a12:	4604      	mov	r4, r0
 8000a14:	468e      	mov	lr, r1
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d14d      	bne.n	8000ab6 <__udivmoddi4+0xaa>
 8000a1a:	428a      	cmp	r2, r1
 8000a1c:	4694      	mov	ip, r2
 8000a1e:	d969      	bls.n	8000af4 <__udivmoddi4+0xe8>
 8000a20:	fab2 f282 	clz	r2, r2
 8000a24:	b152      	cbz	r2, 8000a3c <__udivmoddi4+0x30>
 8000a26:	fa01 f302 	lsl.w	r3, r1, r2
 8000a2a:	f1c2 0120 	rsb	r1, r2, #32
 8000a2e:	fa20 f101 	lsr.w	r1, r0, r1
 8000a32:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a36:	ea41 0e03 	orr.w	lr, r1, r3
 8000a3a:	4094      	lsls	r4, r2
 8000a3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a40:	0c21      	lsrs	r1, r4, #16
 8000a42:	fbbe f6f8 	udiv	r6, lr, r8
 8000a46:	fa1f f78c 	uxth.w	r7, ip
 8000a4a:	fb08 e316 	mls	r3, r8, r6, lr
 8000a4e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a52:	fb06 f107 	mul.w	r1, r6, r7
 8000a56:	4299      	cmp	r1, r3
 8000a58:	d90a      	bls.n	8000a70 <__udivmoddi4+0x64>
 8000a5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a5e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a62:	f080 811f 	bcs.w	8000ca4 <__udivmoddi4+0x298>
 8000a66:	4299      	cmp	r1, r3
 8000a68:	f240 811c 	bls.w	8000ca4 <__udivmoddi4+0x298>
 8000a6c:	3e02      	subs	r6, #2
 8000a6e:	4463      	add	r3, ip
 8000a70:	1a5b      	subs	r3, r3, r1
 8000a72:	b2a4      	uxth	r4, r4
 8000a74:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a78:	fb08 3310 	mls	r3, r8, r0, r3
 8000a7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a80:	fb00 f707 	mul.w	r7, r0, r7
 8000a84:	42a7      	cmp	r7, r4
 8000a86:	d90a      	bls.n	8000a9e <__udivmoddi4+0x92>
 8000a88:	eb1c 0404 	adds.w	r4, ip, r4
 8000a8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a90:	f080 810a 	bcs.w	8000ca8 <__udivmoddi4+0x29c>
 8000a94:	42a7      	cmp	r7, r4
 8000a96:	f240 8107 	bls.w	8000ca8 <__udivmoddi4+0x29c>
 8000a9a:	4464      	add	r4, ip
 8000a9c:	3802      	subs	r0, #2
 8000a9e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000aa2:	1be4      	subs	r4, r4, r7
 8000aa4:	2600      	movs	r6, #0
 8000aa6:	b11d      	cbz	r5, 8000ab0 <__udivmoddi4+0xa4>
 8000aa8:	40d4      	lsrs	r4, r2
 8000aaa:	2300      	movs	r3, #0
 8000aac:	e9c5 4300 	strd	r4, r3, [r5]
 8000ab0:	4631      	mov	r1, r6
 8000ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ab6:	428b      	cmp	r3, r1
 8000ab8:	d909      	bls.n	8000ace <__udivmoddi4+0xc2>
 8000aba:	2d00      	cmp	r5, #0
 8000abc:	f000 80ef 	beq.w	8000c9e <__udivmoddi4+0x292>
 8000ac0:	2600      	movs	r6, #0
 8000ac2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ac6:	4630      	mov	r0, r6
 8000ac8:	4631      	mov	r1, r6
 8000aca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ace:	fab3 f683 	clz	r6, r3
 8000ad2:	2e00      	cmp	r6, #0
 8000ad4:	d14a      	bne.n	8000b6c <__udivmoddi4+0x160>
 8000ad6:	428b      	cmp	r3, r1
 8000ad8:	d302      	bcc.n	8000ae0 <__udivmoddi4+0xd4>
 8000ada:	4282      	cmp	r2, r0
 8000adc:	f200 80f9 	bhi.w	8000cd2 <__udivmoddi4+0x2c6>
 8000ae0:	1a84      	subs	r4, r0, r2
 8000ae2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ae6:	2001      	movs	r0, #1
 8000ae8:	469e      	mov	lr, r3
 8000aea:	2d00      	cmp	r5, #0
 8000aec:	d0e0      	beq.n	8000ab0 <__udivmoddi4+0xa4>
 8000aee:	e9c5 4e00 	strd	r4, lr, [r5]
 8000af2:	e7dd      	b.n	8000ab0 <__udivmoddi4+0xa4>
 8000af4:	b902      	cbnz	r2, 8000af8 <__udivmoddi4+0xec>
 8000af6:	deff      	udf	#255	; 0xff
 8000af8:	fab2 f282 	clz	r2, r2
 8000afc:	2a00      	cmp	r2, #0
 8000afe:	f040 8092 	bne.w	8000c26 <__udivmoddi4+0x21a>
 8000b02:	eba1 010c 	sub.w	r1, r1, ip
 8000b06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b0a:	fa1f fe8c 	uxth.w	lr, ip
 8000b0e:	2601      	movs	r6, #1
 8000b10:	0c20      	lsrs	r0, r4, #16
 8000b12:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b16:	fb07 1113 	mls	r1, r7, r3, r1
 8000b1a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b1e:	fb0e f003 	mul.w	r0, lr, r3
 8000b22:	4288      	cmp	r0, r1
 8000b24:	d908      	bls.n	8000b38 <__udivmoddi4+0x12c>
 8000b26:	eb1c 0101 	adds.w	r1, ip, r1
 8000b2a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b2e:	d202      	bcs.n	8000b36 <__udivmoddi4+0x12a>
 8000b30:	4288      	cmp	r0, r1
 8000b32:	f200 80cb 	bhi.w	8000ccc <__udivmoddi4+0x2c0>
 8000b36:	4643      	mov	r3, r8
 8000b38:	1a09      	subs	r1, r1, r0
 8000b3a:	b2a4      	uxth	r4, r4
 8000b3c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b40:	fb07 1110 	mls	r1, r7, r0, r1
 8000b44:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b48:	fb0e fe00 	mul.w	lr, lr, r0
 8000b4c:	45a6      	cmp	lr, r4
 8000b4e:	d908      	bls.n	8000b62 <__udivmoddi4+0x156>
 8000b50:	eb1c 0404 	adds.w	r4, ip, r4
 8000b54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b58:	d202      	bcs.n	8000b60 <__udivmoddi4+0x154>
 8000b5a:	45a6      	cmp	lr, r4
 8000b5c:	f200 80bb 	bhi.w	8000cd6 <__udivmoddi4+0x2ca>
 8000b60:	4608      	mov	r0, r1
 8000b62:	eba4 040e 	sub.w	r4, r4, lr
 8000b66:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b6a:	e79c      	b.n	8000aa6 <__udivmoddi4+0x9a>
 8000b6c:	f1c6 0720 	rsb	r7, r6, #32
 8000b70:	40b3      	lsls	r3, r6
 8000b72:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b76:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b7a:	fa20 f407 	lsr.w	r4, r0, r7
 8000b7e:	fa01 f306 	lsl.w	r3, r1, r6
 8000b82:	431c      	orrs	r4, r3
 8000b84:	40f9      	lsrs	r1, r7
 8000b86:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b8a:	fa00 f306 	lsl.w	r3, r0, r6
 8000b8e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b92:	0c20      	lsrs	r0, r4, #16
 8000b94:	fa1f fe8c 	uxth.w	lr, ip
 8000b98:	fb09 1118 	mls	r1, r9, r8, r1
 8000b9c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ba0:	fb08 f00e 	mul.w	r0, r8, lr
 8000ba4:	4288      	cmp	r0, r1
 8000ba6:	fa02 f206 	lsl.w	r2, r2, r6
 8000baa:	d90b      	bls.n	8000bc4 <__udivmoddi4+0x1b8>
 8000bac:	eb1c 0101 	adds.w	r1, ip, r1
 8000bb0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bb4:	f080 8088 	bcs.w	8000cc8 <__udivmoddi4+0x2bc>
 8000bb8:	4288      	cmp	r0, r1
 8000bba:	f240 8085 	bls.w	8000cc8 <__udivmoddi4+0x2bc>
 8000bbe:	f1a8 0802 	sub.w	r8, r8, #2
 8000bc2:	4461      	add	r1, ip
 8000bc4:	1a09      	subs	r1, r1, r0
 8000bc6:	b2a4      	uxth	r4, r4
 8000bc8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bcc:	fb09 1110 	mls	r1, r9, r0, r1
 8000bd0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bd8:	458e      	cmp	lr, r1
 8000bda:	d908      	bls.n	8000bee <__udivmoddi4+0x1e2>
 8000bdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000be0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000be4:	d26c      	bcs.n	8000cc0 <__udivmoddi4+0x2b4>
 8000be6:	458e      	cmp	lr, r1
 8000be8:	d96a      	bls.n	8000cc0 <__udivmoddi4+0x2b4>
 8000bea:	3802      	subs	r0, #2
 8000bec:	4461      	add	r1, ip
 8000bee:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bf2:	fba0 9402 	umull	r9, r4, r0, r2
 8000bf6:	eba1 010e 	sub.w	r1, r1, lr
 8000bfa:	42a1      	cmp	r1, r4
 8000bfc:	46c8      	mov	r8, r9
 8000bfe:	46a6      	mov	lr, r4
 8000c00:	d356      	bcc.n	8000cb0 <__udivmoddi4+0x2a4>
 8000c02:	d053      	beq.n	8000cac <__udivmoddi4+0x2a0>
 8000c04:	b15d      	cbz	r5, 8000c1e <__udivmoddi4+0x212>
 8000c06:	ebb3 0208 	subs.w	r2, r3, r8
 8000c0a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c0e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c12:	fa22 f306 	lsr.w	r3, r2, r6
 8000c16:	40f1      	lsrs	r1, r6
 8000c18:	431f      	orrs	r7, r3
 8000c1a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c1e:	2600      	movs	r6, #0
 8000c20:	4631      	mov	r1, r6
 8000c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c26:	f1c2 0320 	rsb	r3, r2, #32
 8000c2a:	40d8      	lsrs	r0, r3
 8000c2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c30:	fa21 f303 	lsr.w	r3, r1, r3
 8000c34:	4091      	lsls	r1, r2
 8000c36:	4301      	orrs	r1, r0
 8000c38:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c3c:	fa1f fe8c 	uxth.w	lr, ip
 8000c40:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c44:	fb07 3610 	mls	r6, r7, r0, r3
 8000c48:	0c0b      	lsrs	r3, r1, #16
 8000c4a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c4e:	fb00 f60e 	mul.w	r6, r0, lr
 8000c52:	429e      	cmp	r6, r3
 8000c54:	fa04 f402 	lsl.w	r4, r4, r2
 8000c58:	d908      	bls.n	8000c6c <__udivmoddi4+0x260>
 8000c5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c62:	d22f      	bcs.n	8000cc4 <__udivmoddi4+0x2b8>
 8000c64:	429e      	cmp	r6, r3
 8000c66:	d92d      	bls.n	8000cc4 <__udivmoddi4+0x2b8>
 8000c68:	3802      	subs	r0, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	b289      	uxth	r1, r1
 8000c70:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c74:	fb07 3316 	mls	r3, r7, r6, r3
 8000c78:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c7c:	fb06 f30e 	mul.w	r3, r6, lr
 8000c80:	428b      	cmp	r3, r1
 8000c82:	d908      	bls.n	8000c96 <__udivmoddi4+0x28a>
 8000c84:	eb1c 0101 	adds.w	r1, ip, r1
 8000c88:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c8c:	d216      	bcs.n	8000cbc <__udivmoddi4+0x2b0>
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d914      	bls.n	8000cbc <__udivmoddi4+0x2b0>
 8000c92:	3e02      	subs	r6, #2
 8000c94:	4461      	add	r1, ip
 8000c96:	1ac9      	subs	r1, r1, r3
 8000c98:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c9c:	e738      	b.n	8000b10 <__udivmoddi4+0x104>
 8000c9e:	462e      	mov	r6, r5
 8000ca0:	4628      	mov	r0, r5
 8000ca2:	e705      	b.n	8000ab0 <__udivmoddi4+0xa4>
 8000ca4:	4606      	mov	r6, r0
 8000ca6:	e6e3      	b.n	8000a70 <__udivmoddi4+0x64>
 8000ca8:	4618      	mov	r0, r3
 8000caa:	e6f8      	b.n	8000a9e <__udivmoddi4+0x92>
 8000cac:	454b      	cmp	r3, r9
 8000cae:	d2a9      	bcs.n	8000c04 <__udivmoddi4+0x1f8>
 8000cb0:	ebb9 0802 	subs.w	r8, r9, r2
 8000cb4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000cb8:	3801      	subs	r0, #1
 8000cba:	e7a3      	b.n	8000c04 <__udivmoddi4+0x1f8>
 8000cbc:	4646      	mov	r6, r8
 8000cbe:	e7ea      	b.n	8000c96 <__udivmoddi4+0x28a>
 8000cc0:	4620      	mov	r0, r4
 8000cc2:	e794      	b.n	8000bee <__udivmoddi4+0x1e2>
 8000cc4:	4640      	mov	r0, r8
 8000cc6:	e7d1      	b.n	8000c6c <__udivmoddi4+0x260>
 8000cc8:	46d0      	mov	r8, sl
 8000cca:	e77b      	b.n	8000bc4 <__udivmoddi4+0x1b8>
 8000ccc:	3b02      	subs	r3, #2
 8000cce:	4461      	add	r1, ip
 8000cd0:	e732      	b.n	8000b38 <__udivmoddi4+0x12c>
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	e709      	b.n	8000aea <__udivmoddi4+0xde>
 8000cd6:	4464      	add	r4, ip
 8000cd8:	3802      	subs	r0, #2
 8000cda:	e742      	b.n	8000b62 <__udivmoddi4+0x156>

08000cdc <__aeabi_idiv0>:
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop

08000ce0 <debu_main>:

//=============================================================================
//
//=============================================================================
void debu_main(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
	//char ch;
	//SKprintf("debu_main:001\r\n");
	if(read_line_streem() == INPUT_DATA_FIX){
 8000ce4:	f000 fd72 	bl	80017cc <read_line_streem>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b02      	cmp	r3, #2
 8000cec:	d12e      	bne.n	8000d4c <debu_main+0x6c>

		input_char_step = INPUT_INIT;
 8000cee:	4b18      	ldr	r3, [pc, #96]	; (8000d50 <debu_main+0x70>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	701a      	strb	r2, [r3, #0]

		//SKprintf("debu_main:001\r\n");

		switch(dev_menue_type){
 8000cf4:	4b17      	ldr	r3, [pc, #92]	; (8000d54 <debu_main+0x74>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	2b05      	cmp	r3, #5
 8000cfa:	d821      	bhi.n	8000d40 <debu_main+0x60>
 8000cfc:	a201      	add	r2, pc, #4	; (adr r2, 8000d04 <debu_main+0x24>)
 8000cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d02:	bf00      	nop
 8000d04:	08000d1d 	.word	0x08000d1d
 8000d08:	08000d23 	.word	0x08000d23
 8000d0c:	08000d29 	.word	0x08000d29
 8000d10:	08000d2f 	.word	0x08000d2f
 8000d14:	08000d35 	.word	0x08000d35
 8000d18:	08000d3b 	.word	0x08000d3b
		case DEB_PROMPT_MODE:
			DBmanue_prompt();
 8000d1c:	f000 f850 	bl	8000dc0 <DBmanue_prompt>
			break;
 8000d20:	e00f      	b.n	8000d42 <debu_main+0x62>
		case DEB_LOG_MENUE:
			DBmanue_log();
 8000d22:	f000 f94f 	bl	8000fc4 <DBmanue_log>
			break;
 8000d26:	e00c      	b.n	8000d42 <debu_main+0x62>
		case DEB_RS485_MENUE:
			DBmanue_rs485();
 8000d28:	f000 f9be 	bl	80010a8 <DBmanue_rs485>
			break;
 8000d2c:	e009      	b.n	8000d42 <debu_main+0x62>
		case DEB_MEM_MENUE:
			DBmanue_memdump();
 8000d2e:	f000 fa1d 	bl	800116c <DBmanue_memdump>
			break;
 8000d32:	e006      	b.n	8000d42 <debu_main+0x62>
		case DEB_MEM_INPUT_MENUE:
			DBmanue_mem_input();
 8000d34:	f000 fb12 	bl	800135c <DBmanue_mem_input>
			break;
 8000d38:	e003      	b.n	8000d42 <debu_main+0x62>
		case DEB_RS485_SCAN_MENUE:
			DBmanue_rs485_scan();
 8000d3a:	f000 f86d 	bl	8000e18 <DBmanue_rs485_scan>
			break;
 8000d3e:	e000      	b.n	8000d42 <debu_main+0x62>
		default:
			break;
 8000d40:	bf00      	nop
		}

		//SKprintf("debu_main:002\r\n");
        // メニュを表示する
        DispMenue(dev_menue_type);
 8000d42:	4b04      	ldr	r3, [pc, #16]	; (8000d54 <debu_main+0x74>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	4618      	mov	r0, r3
 8000d48:	f000 f806 	bl	8000d58 <DispMenue>
        //SKprintf("debu_main:003\r\n");

	}
}
 8000d4c:	bf00      	nop
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	200000e8 	.word	0x200000e8
 8000d54:	2000016c 	.word	0x2000016c

08000d58 <DispMenue>:
//==============================================================================
//
//==============================================================================
void DispMenue(uint8_t type)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	71fb      	strb	r3, [r7, #7]
    uint8_t i;
    if( type==DEB_PROMPT_MODE ){
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d103      	bne.n	8000d70 <DispMenue+0x18>
        SKprintf("ST> ");
 8000d68:	4812      	ldr	r0, [pc, #72]	; (8000db4 <DispMenue+0x5c>)
 8000d6a:	f002 fec1 	bl	8003af0 <SKprintf>
    else{
        for( i=0; i<MenueList[type-1].clumn; i++){
            SKprintf("%s", &MenueList[type-1].pt[i].name[0]);
        }
    }
}
 8000d6e:	e01d      	b.n	8000dac <DispMenue+0x54>
        for( i=0; i<MenueList[type-1].clumn; i++){
 8000d70:	2300      	movs	r3, #0
 8000d72:	73fb      	strb	r3, [r7, #15]
 8000d74:	e011      	b.n	8000d9a <DispMenue+0x42>
            SKprintf("%s", &MenueList[type-1].pt[i].name[0]);
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	3b01      	subs	r3, #1
 8000d7a:	4a0f      	ldr	r2, [pc, #60]	; (8000db8 <DispMenue+0x60>)
 8000d7c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8000d80:	7bfa      	ldrb	r2, [r7, #15]
 8000d82:	4613      	mov	r3, r2
 8000d84:	011b      	lsls	r3, r3, #4
 8000d86:	1a9b      	subs	r3, r3, r2
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	440b      	add	r3, r1
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	480b      	ldr	r0, [pc, #44]	; (8000dbc <DispMenue+0x64>)
 8000d90:	f002 feae 	bl	8003af0 <SKprintf>
        for( i=0; i<MenueList[type-1].clumn; i++){
 8000d94:	7bfb      	ldrb	r3, [r7, #15]
 8000d96:	3301      	adds	r3, #1
 8000d98:	73fb      	strb	r3, [r7, #15]
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	3b01      	subs	r3, #1
 8000d9e:	4a06      	ldr	r2, [pc, #24]	; (8000db8 <DispMenue+0x60>)
 8000da0:	00db      	lsls	r3, r3, #3
 8000da2:	4413      	add	r3, r2
 8000da4:	791b      	ldrb	r3, [r3, #4]
 8000da6:	7bfa      	ldrb	r2, [r7, #15]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d3e4      	bcc.n	8000d76 <DispMenue+0x1e>
}
 8000dac:	bf00      	nop
 8000dae:	3710      	adds	r7, #16
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	0800bc8c 	.word	0x0800bc8c
 8000db8:	0800ca80 	.word	0x0800ca80
 8000dbc:	0800bc94 	.word	0x0800bc94

08000dc0 <DBmanue_prompt>:
//=============================================================================
extern osMessageQueueId_t myQueue01Handle;


void DBmanue_prompt(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0


//	size_t 	lsize2;
//	size_t 	lsize1;

	switch( input2menu() ){
 8000dc4:	f000 fbfe 	bl	80015c4 <input2menu>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b04      	cmp	r3, #4
 8000dcc:	d81f      	bhi.n	8000e0e <DBmanue_prompt+0x4e>
 8000dce:	a201      	add	r2, pc, #4	; (adr r2, 8000dd4 <DBmanue_prompt+0x14>)
 8000dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dd4:	08000de9 	.word	0x08000de9
 8000dd8:	08000def 	.word	0x08000def
 8000ddc:	08000df7 	.word	0x08000df7
 8000de0:	08000dff 	.word	0x08000dff
 8000de4:	08000e07 	.word	0x08000e07
    case CMD_RTC:
    	rtc_display();
 8000de8:	f001 fcbe 	bl	8002768 <rtc_display>
        break;
 8000dec:	e010      	b.n	8000e10 <DBmanue_prompt+0x50>
    case CMD_LOG:
        dev_menue_type = DEB_LOG_MENUE;
 8000dee:	4b09      	ldr	r3, [pc, #36]	; (8000e14 <DBmanue_prompt+0x54>)
 8000df0:	2201      	movs	r2, #1
 8000df2:	701a      	strb	r2, [r3, #0]
        break;
 8000df4:	e00c      	b.n	8000e10 <DBmanue_prompt+0x50>
    case CMD_RS485:
        dev_menue_type = DEB_RS485_MENUE;
 8000df6:	4b07      	ldr	r3, [pc, #28]	; (8000e14 <DBmanue_prompt+0x54>)
 8000df8:	2202      	movs	r2, #2
 8000dfa:	701a      	strb	r2, [r3, #0]
        break;
 8000dfc:	e008      	b.n	8000e10 <DBmanue_prompt+0x50>
    case CMD_MEM_DUMP:
        dev_menue_type = DEB_MEM_MENUE;
 8000dfe:	4b05      	ldr	r3, [pc, #20]	; (8000e14 <DBmanue_prompt+0x54>)
 8000e00:	2203      	movs	r2, #3
 8000e02:	701a      	strb	r2, [r3, #0]
    	break;
 8000e04:	e004      	b.n	8000e10 <DBmanue_prompt+0x50>
    case CMD_MSG_QUE:
    	dev_menue_type = DEB_RS485_SCAN_MENUE;
 8000e06:	4b03      	ldr	r3, [pc, #12]	; (8000e14 <DBmanue_prompt+0x54>)
 8000e08:	2205      	movs	r2, #5
 8000e0a:	701a      	strb	r2, [r3, #0]
    	break;
 8000e0c:	e000      	b.n	8000e10 <DBmanue_prompt+0x50>

    default:
        break;
 8000e0e:	bf00      	nop
    }
}
 8000e10:	bf00      	nop
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	2000016c 	.word	0x2000016c

08000e18 <DBmanue_rs485_scan>:

//=============================================================================
//
//=============================================================================
void DBmanue_rs485_scan(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
	osStatus_t 			osStatus;
	MESSAGE_QUE_DATA	*msg;

	switch( input_string.main[0] ){
 8000e1e:	4b65      	ldr	r3, [pc, #404]	; (8000fb4 <DBmanue_rs485_scan+0x19c>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	2b52      	cmp	r3, #82	; 0x52
 8000e24:	dc4e      	bgt.n	8000ec4 <DBmanue_rs485_scan+0xac>
 8000e26:	2b31      	cmp	r3, #49	; 0x31
 8000e28:	f2c0 80be 	blt.w	8000fa8 <DBmanue_rs485_scan+0x190>
 8000e2c:	3b31      	subs	r3, #49	; 0x31
 8000e2e:	2b21      	cmp	r3, #33	; 0x21
 8000e30:	f200 80ba 	bhi.w	8000fa8 <DBmanue_rs485_scan+0x190>
 8000e34:	a201      	add	r2, pc, #4	; (adr r2, 8000e3c <DBmanue_rs485_scan+0x24>)
 8000e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e3a:	bf00      	nop
 8000e3c:	08000ecb 	.word	0x08000ecb
 8000e40:	08000f37 	.word	0x08000f37
 8000e44:	08000fa9 	.word	0x08000fa9
 8000e48:	08000fa9 	.word	0x08000fa9
 8000e4c:	08000fa9 	.word	0x08000fa9
 8000e50:	08000fa9 	.word	0x08000fa9
 8000e54:	08000fa9 	.word	0x08000fa9
 8000e58:	08000fa9 	.word	0x08000fa9
 8000e5c:	08000fa9 	.word	0x08000fa9
 8000e60:	08000fa9 	.word	0x08000fa9
 8000e64:	08000fa9 	.word	0x08000fa9
 8000e68:	08000fa9 	.word	0x08000fa9
 8000e6c:	08000fa9 	.word	0x08000fa9
 8000e70:	08000fa9 	.word	0x08000fa9
 8000e74:	08000fa9 	.word	0x08000fa9
 8000e78:	08000fa9 	.word	0x08000fa9
 8000e7c:	08000fa9 	.word	0x08000fa9
 8000e80:	08000fa9 	.word	0x08000fa9
 8000e84:	08000fa9 	.word	0x08000fa9
 8000e88:	08000fa9 	.word	0x08000fa9
 8000e8c:	08000fa9 	.word	0x08000fa9
 8000e90:	08000fa9 	.word	0x08000fa9
 8000e94:	08000fa9 	.word	0x08000fa9
 8000e98:	08000fa9 	.word	0x08000fa9
 8000e9c:	08000fa9 	.word	0x08000fa9
 8000ea0:	08000fa9 	.word	0x08000fa9
 8000ea4:	08000fa9 	.word	0x08000fa9
 8000ea8:	08000fa9 	.word	0x08000fa9
 8000eac:	08000fa9 	.word	0x08000fa9
 8000eb0:	08000fa9 	.word	0x08000fa9
 8000eb4:	08000fa9 	.word	0x08000fa9
 8000eb8:	08000fa9 	.word	0x08000fa9
 8000ebc:	08000fa9 	.word	0x08000fa9
 8000ec0:	08000fa3 	.word	0x08000fa3
 8000ec4:	2b72      	cmp	r3, #114	; 0x72
 8000ec6:	d06c      	beq.n	8000fa2 <DBmanue_rs485_scan+0x18a>
		break;
	case 'r':
	case 'R':
		dev_menue_type = DEB_PROMPT_MODE;
	default:
		break;
 8000ec8:	e06e      	b.n	8000fa8 <DBmanue_rs485_scan+0x190>
		    	msg = (MESSAGE_QUE_DATA *)pvPortMalloc(sizeof(MESSAGE_QUE_DATA));
 8000eca:	200c      	movs	r0, #12
 8000ecc:	f009 fb84 	bl	800a5d8 <pvPortMalloc>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	607b      	str	r3, [r7, #4]
		    	msg->u.cmd_msg.event = RT_EVENT_START_REQ;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	715a      	strb	r2, [r3, #5]
		    	msg->send_task = 0xfe;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	22fe      	movs	r2, #254	; 0xfe
 8000ede:	711a      	strb	r2, [r3, #4]
		    	msg->maroc_ptr = (void *)msg;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	687a      	ldr	r2, [r7, #4]
 8000ee4:	601a      	str	r2, [r3, #0]
		    	msg->u.cmd_msg.address = RS485_AD_SLEVE01;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2201      	movs	r2, #1
 8000eea:	725a      	strb	r2, [r3, #9]
				msg->u.cmd_msg.command = RS485_CMD_MESUR_DATA;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2204      	movs	r2, #4
 8000ef0:	71da      	strb	r2, [r3, #7]
				msg->u.cmd_msg.command_sub = 1;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	721a      	strb	r2, [r3, #8]
				msg->u.cmd_msg.sub1 = 0;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2200      	movs	r2, #0
 8000efc:	729a      	strb	r2, [r3, #10]
		    	SKprintf("event=0x%x, task=0x%x,msgpt=%p\r\n", msg->u.cmd_msg.event, msg->send_task, msg->maroc_ptr);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	795b      	ldrb	r3, [r3, #5]
 8000f02:	4619      	mov	r1, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	791b      	ldrb	r3, [r3, #4]
 8000f08:	461a      	mov	r2, r3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	482a      	ldr	r0, [pc, #168]	; (8000fb8 <DBmanue_rs485_scan+0x1a0>)
 8000f10:	f002 fdee 	bl	8003af0 <SKprintf>
		    	osStatus = osMessageQueuePut (GetMessageQue(SK_TASK_sub2), (void *)msg->maroc_ptr, 0,0);
 8000f14:	2002      	movs	r0, #2
 8000f16:	f001 f9e5 	bl	80022e4 <GetMessageQue>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6819      	ldr	r1, [r3, #0]
 8000f22:	2300      	movs	r3, #0
 8000f24:	2200      	movs	r2, #0
 8000f26:	f006 ff71 	bl	8007e0c <osMessageQueuePut>
 8000f2a:	6038      	str	r0, [r7, #0]
		    	SKprintf("osStatus=%d\r\n",osStatus);
 8000f2c:	6839      	ldr	r1, [r7, #0]
 8000f2e:	4823      	ldr	r0, [pc, #140]	; (8000fbc <DBmanue_rs485_scan+0x1a4>)
 8000f30:	f002 fdde 	bl	8003af0 <SKprintf>
		break;
 8000f34:	e039      	b.n	8000faa <DBmanue_rs485_scan+0x192>
		    	msg = (MESSAGE_QUE_DATA *)pvPortMalloc(sizeof(MESSAGE_QUE_DATA));
 8000f36:	200c      	movs	r0, #12
 8000f38:	f009 fb4e 	bl	800a5d8 <pvPortMalloc>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	607b      	str	r3, [r7, #4]
		    	msg->u.cmd_msg.event = RT_EVENT_START_REQ;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2200      	movs	r2, #0
 8000f44:	715a      	strb	r2, [r3, #5]
		    	msg->send_task = 0xfe;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	22fe      	movs	r2, #254	; 0xfe
 8000f4a:	711a      	strb	r2, [r3, #4]
		    	msg->maroc_ptr = (void *)msg;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	601a      	str	r2, [r3, #0]
		    	msg->u.cmd_msg.address = RS485_AD_SLEVE01;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2201      	movs	r2, #1
 8000f56:	725a      	strb	r2, [r3, #9]
				msg->u.cmd_msg.command = RS485_CMD_MESUR_DATA;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2204      	movs	r2, #4
 8000f5c:	71da      	strb	r2, [r3, #7]
				msg->u.cmd_msg.command_sub = 3;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2203      	movs	r2, #3
 8000f62:	721a      	strb	r2, [r3, #8]
				msg->u.cmd_msg.sub1 = 0;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2200      	movs	r2, #0
 8000f68:	729a      	strb	r2, [r3, #10]
		    	SKprintf("event=0x%x, task=0x%x,msgpt=%p\r\n", msg->u.cmd_msg.event, msg->send_task, msg->maroc_ptr);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	795b      	ldrb	r3, [r3, #5]
 8000f6e:	4619      	mov	r1, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	791b      	ldrb	r3, [r3, #4]
 8000f74:	461a      	mov	r2, r3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	480f      	ldr	r0, [pc, #60]	; (8000fb8 <DBmanue_rs485_scan+0x1a0>)
 8000f7c:	f002 fdb8 	bl	8003af0 <SKprintf>
		    	osStatus = osMessageQueuePut (GetMessageQue(SK_TASK_sub2), (void *)msg->maroc_ptr, 0,0);
 8000f80:	2002      	movs	r0, #2
 8000f82:	f001 f9af 	bl	80022e4 <GetMessageQue>
 8000f86:	4603      	mov	r3, r0
 8000f88:	4618      	mov	r0, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6819      	ldr	r1, [r3, #0]
 8000f8e:	2300      	movs	r3, #0
 8000f90:	2200      	movs	r2, #0
 8000f92:	f006 ff3b 	bl	8007e0c <osMessageQueuePut>
 8000f96:	6038      	str	r0, [r7, #0]
		    	SKprintf("osStatus=%d\r\n",osStatus);
 8000f98:	6839      	ldr	r1, [r7, #0]
 8000f9a:	4808      	ldr	r0, [pc, #32]	; (8000fbc <DBmanue_rs485_scan+0x1a4>)
 8000f9c:	f002 fda8 	bl	8003af0 <SKprintf>
		break;
 8000fa0:	e003      	b.n	8000faa <DBmanue_rs485_scan+0x192>
		dev_menue_type = DEB_PROMPT_MODE;
 8000fa2:	4b07      	ldr	r3, [pc, #28]	; (8000fc0 <DBmanue_rs485_scan+0x1a8>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	701a      	strb	r2, [r3, #0]
		break;
 8000fa8:	bf00      	nop
	}

}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	200000ec 	.word	0x200000ec
 8000fb8:	0800bc98 	.word	0x0800bc98
 8000fbc:	0800bcbc 	.word	0x0800bcbc
 8000fc0:	2000016c 	.word	0x2000016c

08000fc4 <DBmanue_log>:
//=============================================================================
//
//=============================================================================
void DBmanue_log(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
	switch( input_string.main[0] ){
 8000fc8:	4b35      	ldr	r3, [pc, #212]	; (80010a0 <DBmanue_log+0xdc>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	2b52      	cmp	r3, #82	; 0x52
 8000fce:	dc4b      	bgt.n	8001068 <DBmanue_log+0xa4>
 8000fd0:	2b31      	cmp	r3, #49	; 0x31
 8000fd2:	db61      	blt.n	8001098 <DBmanue_log+0xd4>
 8000fd4:	3b31      	subs	r3, #49	; 0x31
 8000fd6:	2b21      	cmp	r3, #33	; 0x21
 8000fd8:	d85e      	bhi.n	8001098 <DBmanue_log+0xd4>
 8000fda:	a201      	add	r2, pc, #4	; (adr r2, 8000fe0 <DBmanue_log+0x1c>)
 8000fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe0:	0800106f 	.word	0x0800106f
 8000fe4:	08001075 	.word	0x08001075
 8000fe8:	0800107b 	.word	0x0800107b
 8000fec:	08001083 	.word	0x08001083
 8000ff0:	0800108b 	.word	0x0800108b
 8000ff4:	08001099 	.word	0x08001099
 8000ff8:	08001099 	.word	0x08001099
 8000ffc:	08001099 	.word	0x08001099
 8001000:	08001099 	.word	0x08001099
 8001004:	08001099 	.word	0x08001099
 8001008:	08001099 	.word	0x08001099
 800100c:	08001099 	.word	0x08001099
 8001010:	08001099 	.word	0x08001099
 8001014:	08001099 	.word	0x08001099
 8001018:	08001099 	.word	0x08001099
 800101c:	08001099 	.word	0x08001099
 8001020:	08001099 	.word	0x08001099
 8001024:	08001099 	.word	0x08001099
 8001028:	08001099 	.word	0x08001099
 800102c:	08001099 	.word	0x08001099
 8001030:	08001099 	.word	0x08001099
 8001034:	08001099 	.word	0x08001099
 8001038:	08001099 	.word	0x08001099
 800103c:	08001099 	.word	0x08001099
 8001040:	08001099 	.word	0x08001099
 8001044:	08001099 	.word	0x08001099
 8001048:	08001099 	.word	0x08001099
 800104c:	08001099 	.word	0x08001099
 8001050:	08001099 	.word	0x08001099
 8001054:	08001099 	.word	0x08001099
 8001058:	08001099 	.word	0x08001099
 800105c:	08001099 	.word	0x08001099
 8001060:	08001099 	.word	0x08001099
 8001064:	08001093 	.word	0x08001093
 8001068:	2b72      	cmp	r3, #114	; 0x72
 800106a:	d012      	beq.n	8001092 <DBmanue_log+0xce>
		break;
	case 'r':
	case 'R':
		dev_menue_type = DEB_PROMPT_MODE;
	default:
		break;
 800106c:	e014      	b.n	8001098 <DBmanue_log+0xd4>
		LogInfo_display();
 800106e:	f001 f8a5 	bl	80021bc <LogInfo_display>
		break;
 8001072:	e012      	b.n	800109a <DBmanue_log+0xd6>
		LogInfo_clear();
 8001074:	f001 f922 	bl	80022bc <LogInfo_clear>
		break;
 8001078:	e00f      	b.n	800109a <DBmanue_log+0xd6>
		Set_logflg(LF_NON_STOP);
 800107a:	2000      	movs	r0, #0
 800107c:	f000 fe6e 	bl	8001d5c <Set_logflg>
		break;
 8001080:	e00b      	b.n	800109a <DBmanue_log+0xd6>
		Set_logflg(LF_IMMMEDIATE_STOP);
 8001082:	2001      	movs	r0, #1
 8001084:	f000 fe6a 	bl	8001d5c <Set_logflg>
		break;
 8001088:	e007      	b.n	800109a <DBmanue_log+0xd6>
		Set_logflg(LF_MAX_DATA_STOP);
 800108a:	2002      	movs	r0, #2
 800108c:	f000 fe66 	bl	8001d5c <Set_logflg>
		break;
 8001090:	e003      	b.n	800109a <DBmanue_log+0xd6>
		dev_menue_type = DEB_PROMPT_MODE;
 8001092:	4b04      	ldr	r3, [pc, #16]	; (80010a4 <DBmanue_log+0xe0>)
 8001094:	2200      	movs	r2, #0
 8001096:	701a      	strb	r2, [r3, #0]
		break;
 8001098:	bf00      	nop
	}
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	200000ec 	.word	0x200000ec
 80010a4:	2000016c 	.word	0x2000016c

080010a8 <DBmanue_rs485>:

//=============================================================================
//
//=============================================================================
void DBmanue_rs485(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
	switch( input_string.main[0] ){
 80010ac:	4b2d      	ldr	r3, [pc, #180]	; (8001164 <DBmanue_rs485+0xbc>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b52      	cmp	r3, #82	; 0x52
 80010b2:	dc4b      	bgt.n	800114c <DBmanue_rs485+0xa4>
 80010b4:	2b31      	cmp	r3, #49	; 0x31
 80010b6:	db4f      	blt.n	8001158 <DBmanue_rs485+0xb0>
 80010b8:	3b31      	subs	r3, #49	; 0x31
 80010ba:	2b21      	cmp	r3, #33	; 0x21
 80010bc:	d84c      	bhi.n	8001158 <DBmanue_rs485+0xb0>
 80010be:	a201      	add	r2, pc, #4	; (adr r2, 80010c4 <DBmanue_rs485+0x1c>)
 80010c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010c4:	08001159 	.word	0x08001159
 80010c8:	08001159 	.word	0x08001159
 80010cc:	08001159 	.word	0x08001159
 80010d0:	08001159 	.word	0x08001159
 80010d4:	08001159 	.word	0x08001159
 80010d8:	08001159 	.word	0x08001159
 80010dc:	08001159 	.word	0x08001159
 80010e0:	08001159 	.word	0x08001159
 80010e4:	08001159 	.word	0x08001159
 80010e8:	08001159 	.word	0x08001159
 80010ec:	08001159 	.word	0x08001159
 80010f0:	08001159 	.word	0x08001159
 80010f4:	08001159 	.word	0x08001159
 80010f8:	08001159 	.word	0x08001159
 80010fc:	08001159 	.word	0x08001159
 8001100:	08001159 	.word	0x08001159
 8001104:	08001159 	.word	0x08001159
 8001108:	08001159 	.word	0x08001159
 800110c:	08001159 	.word	0x08001159
 8001110:	08001159 	.word	0x08001159
 8001114:	08001159 	.word	0x08001159
 8001118:	08001159 	.word	0x08001159
 800111c:	08001159 	.word	0x08001159
 8001120:	08001159 	.word	0x08001159
 8001124:	08001159 	.word	0x08001159
 8001128:	08001159 	.word	0x08001159
 800112c:	08001159 	.word	0x08001159
 8001130:	08001159 	.word	0x08001159
 8001134:	08001159 	.word	0x08001159
 8001138:	08001159 	.word	0x08001159
 800113c:	08001159 	.word	0x08001159
 8001140:	08001159 	.word	0x08001159
 8001144:	08001159 	.word	0x08001159
 8001148:	08001153 	.word	0x08001153
 800114c:	2b72      	cmp	r3, #114	; 0x72
 800114e:	d000      	beq.n	8001152 <DBmanue_rs485+0xaa>
		break;
	case 'r':
	case 'R':
		dev_menue_type = DEB_PROMPT_MODE;
	default:
		break;
 8001150:	e002      	b.n	8001158 <DBmanue_rs485+0xb0>
		dev_menue_type = DEB_PROMPT_MODE;
 8001152:	4b05      	ldr	r3, [pc, #20]	; (8001168 <DBmanue_rs485+0xc0>)
 8001154:	2200      	movs	r2, #0
 8001156:	701a      	strb	r2, [r3, #0]
		break;
 8001158:	bf00      	nop
	}
}
 800115a:	bf00      	nop
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	200000ec 	.word	0x200000ec
 8001168:	2000016c 	.word	0x2000016c

0800116c <DBmanue_memdump>:

//==============================================================================
//
//==============================================================================
void DBmanue_memdump(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
	STACK_INFO stack;

	switch( input_string.main[0] ){
 8001172:	4b77      	ldr	r3, [pc, #476]	; (8001350 <DBmanue_memdump+0x1e4>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	3b31      	subs	r3, #49	; 0x31
 8001178:	2b41      	cmp	r3, #65	; 0x41
 800117a:	f200 80df 	bhi.w	800133c <DBmanue_memdump+0x1d0>
 800117e:	a201      	add	r2, pc, #4	; (adr r2, 8001184 <DBmanue_memdump+0x18>)
 8001180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001184:	0800128d 	.word	0x0800128d
 8001188:	08001295 	.word	0x08001295
 800118c:	080012b3 	.word	0x080012b3
 8001190:	080012d1 	.word	0x080012d1
 8001194:	0800133d 	.word	0x0800133d
 8001198:	0800133d 	.word	0x0800133d
 800119c:	0800133d 	.word	0x0800133d
 80011a0:	0800133d 	.word	0x0800133d
 80011a4:	0800133d 	.word	0x0800133d
 80011a8:	0800133d 	.word	0x0800133d
 80011ac:	0800133d 	.word	0x0800133d
 80011b0:	0800133d 	.word	0x0800133d
 80011b4:	0800133d 	.word	0x0800133d
 80011b8:	0800133d 	.word	0x0800133d
 80011bc:	0800133d 	.word	0x0800133d
 80011c0:	0800133d 	.word	0x0800133d
 80011c4:	0800133d 	.word	0x0800133d
 80011c8:	0800133d 	.word	0x0800133d
 80011cc:	0800133d 	.word	0x0800133d
 80011d0:	0800133d 	.word	0x0800133d
 80011d4:	0800133d 	.word	0x0800133d
 80011d8:	0800133d 	.word	0x0800133d
 80011dc:	0800133d 	.word	0x0800133d
 80011e0:	0800133d 	.word	0x0800133d
 80011e4:	0800133d 	.word	0x0800133d
 80011e8:	0800133d 	.word	0x0800133d
 80011ec:	0800133d 	.word	0x0800133d
 80011f0:	0800133d 	.word	0x0800133d
 80011f4:	0800133d 	.word	0x0800133d
 80011f8:	0800133d 	.word	0x0800133d
 80011fc:	0800133d 	.word	0x0800133d
 8001200:	0800133d 	.word	0x0800133d
 8001204:	0800133d 	.word	0x0800133d
 8001208:	08001337 	.word	0x08001337
 800120c:	0800133d 	.word	0x0800133d
 8001210:	0800133d 	.word	0x0800133d
 8001214:	0800133d 	.word	0x0800133d
 8001218:	0800133d 	.word	0x0800133d
 800121c:	0800133d 	.word	0x0800133d
 8001220:	0800133d 	.word	0x0800133d
 8001224:	0800133d 	.word	0x0800133d
 8001228:	0800133d 	.word	0x0800133d
 800122c:	0800133d 	.word	0x0800133d
 8001230:	0800133d 	.word	0x0800133d
 8001234:	0800133d 	.word	0x0800133d
 8001238:	0800133d 	.word	0x0800133d
 800123c:	0800133d 	.word	0x0800133d
 8001240:	0800133d 	.word	0x0800133d
 8001244:	0800133d 	.word	0x0800133d
 8001248:	08001313 	.word	0x08001313
 800124c:	0800133d 	.word	0x0800133d
 8001250:	0800133d 	.word	0x0800133d
 8001254:	0800133d 	.word	0x0800133d
 8001258:	080012ef 	.word	0x080012ef
 800125c:	0800133d 	.word	0x0800133d
 8001260:	0800133d 	.word	0x0800133d
 8001264:	0800133d 	.word	0x0800133d
 8001268:	0800133d 	.word	0x0800133d
 800126c:	0800133d 	.word	0x0800133d
 8001270:	0800133d 	.word	0x0800133d
 8001274:	0800133d 	.word	0x0800133d
 8001278:	0800133d 	.word	0x0800133d
 800127c:	0800133d 	.word	0x0800133d
 8001280:	0800133d 	.word	0x0800133d
 8001284:	0800133d 	.word	0x0800133d
 8001288:	08001337 	.word	0x08001337
	case '1':
		dev_menue_type = DEB_MEM_INPUT_MENUE;
 800128c:	4b31      	ldr	r3, [pc, #196]	; (8001354 <DBmanue_memdump+0x1e8>)
 800128e:	2204      	movs	r2, #4
 8001290:	701a      	strb	r2, [r3, #0]
		break;
 8001292:	e058      	b.n	8001346 <DBmanue_memdump+0x1da>
	case '2':
		Disp_task_info(SK_TASK_main);
 8001294:	2000      	movs	r0, #0
 8001296:	f001 f933 	bl	8002500 <Disp_task_info>
		Get_task_stackptr(SK_TASK_main,&stack);
 800129a:	1d3b      	adds	r3, r7, #4
 800129c:	4619      	mov	r1, r3
 800129e:	2000      	movs	r0, #0
 80012a0:	f001 f9cc 	bl	800263c <Get_task_stackptr>
		hex_dmp(stack.pxStack, stack.size);
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	89ba      	ldrh	r2, [r7, #12]
 80012a8:	4611      	mov	r1, r2
 80012aa:	4618      	mov	r0, r3
 80012ac:	f000 f8b6 	bl	800141c <hex_dmp>
		//hex_dmp(stack.pxTopOfStack, stack.size);
		break;
 80012b0:	e049      	b.n	8001346 <DBmanue_memdump+0x1da>
	case '3':
		Disp_task_info(SK_TASK_sub1);
 80012b2:	2001      	movs	r0, #1
 80012b4:	f001 f924 	bl	8002500 <Disp_task_info>
		Get_task_stackptr(SK_TASK_sub1,&stack);
 80012b8:	1d3b      	adds	r3, r7, #4
 80012ba:	4619      	mov	r1, r3
 80012bc:	2001      	movs	r0, #1
 80012be:	f001 f9bd 	bl	800263c <Get_task_stackptr>
		hex_dmp(stack.pxStack, stack.size);
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	89ba      	ldrh	r2, [r7, #12]
 80012c6:	4611      	mov	r1, r2
 80012c8:	4618      	mov	r0, r3
 80012ca:	f000 f8a7 	bl	800141c <hex_dmp>
		//hex_dmp(stack.pxTopOfStack, stack.size);
		break;
 80012ce:	e03a      	b.n	8001346 <DBmanue_memdump+0x1da>
	case '4':
		Disp_task_info(SK_TASK_sub2);
 80012d0:	2002      	movs	r0, #2
 80012d2:	f001 f915 	bl	8002500 <Disp_task_info>
		Get_task_stackptr(SK_TASK_sub2,&stack);
 80012d6:	1d3b      	adds	r3, r7, #4
 80012d8:	4619      	mov	r1, r3
 80012da:	2002      	movs	r0, #2
 80012dc:	f001 f9ae 	bl	800263c <Get_task_stackptr>
		hex_dmp(stack.pxStack, stack.size);
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	89ba      	ldrh	r2, [r7, #12]
 80012e4:	4611      	mov	r1, r2
 80012e6:	4618      	mov	r0, r3
 80012e8:	f000 f898 	bl	800141c <hex_dmp>
		//hex_dmp(stack.pxTopOfStack, stack.size);
		break;
 80012ec:	e02b      	b.n	8001346 <DBmanue_memdump+0x1da>
	case '5':
		break;
	case 'f':
		if(sk_mem_dump != NULL){
 80012ee:	4b1a      	ldr	r3, [pc, #104]	; (8001358 <DBmanue_memdump+0x1ec>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d024      	beq.n	8001340 <DBmanue_memdump+0x1d4>
			sk_mem_dump += 128*4;
 80012f6:	4b18      	ldr	r3, [pc, #96]	; (8001358 <DBmanue_memdump+0x1ec>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80012fe:	4a16      	ldr	r2, [pc, #88]	; (8001358 <DBmanue_memdump+0x1ec>)
 8001300:	6013      	str	r3, [r2, #0]
			hex_dmp(sk_mem_dump, 128*4);
 8001302:	4b15      	ldr	r3, [pc, #84]	; (8001358 <DBmanue_memdump+0x1ec>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f44f 7100 	mov.w	r1, #512	; 0x200
 800130a:	4618      	mov	r0, r3
 800130c:	f000 f886 	bl	800141c <hex_dmp>
		}
		break;
 8001310:	e016      	b.n	8001340 <DBmanue_memdump+0x1d4>
	case 'b':
		if(sk_mem_dump != NULL){
 8001312:	4b11      	ldr	r3, [pc, #68]	; (8001358 <DBmanue_memdump+0x1ec>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d014      	beq.n	8001344 <DBmanue_memdump+0x1d8>
			sk_mem_dump -= 128*4;
 800131a:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <DBmanue_memdump+0x1ec>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001322:	4a0d      	ldr	r2, [pc, #52]	; (8001358 <DBmanue_memdump+0x1ec>)
 8001324:	6013      	str	r3, [r2, #0]
			hex_dmp(sk_mem_dump, 128*4);
 8001326:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <DBmanue_memdump+0x1ec>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800132e:	4618      	mov	r0, r3
 8001330:	f000 f874 	bl	800141c <hex_dmp>
		}
		break;
 8001334:	e006      	b.n	8001344 <DBmanue_memdump+0x1d8>
	case 'r':
	case 'R':
		dev_menue_type = DEB_PROMPT_MODE;
 8001336:	4b07      	ldr	r3, [pc, #28]	; (8001354 <DBmanue_memdump+0x1e8>)
 8001338:	2200      	movs	r2, #0
 800133a:	701a      	strb	r2, [r3, #0]
	default:
		break;
 800133c:	bf00      	nop
 800133e:	e002      	b.n	8001346 <DBmanue_memdump+0x1da>
		break;
 8001340:	bf00      	nop
 8001342:	e000      	b.n	8001346 <DBmanue_memdump+0x1da>
		break;
 8001344:	bf00      	nop
	}

}
 8001346:	bf00      	nop
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	200000ec 	.word	0x200000ec
 8001354:	2000016c 	.word	0x2000016c
 8001358:	200000e4 	.word	0x200000e4

0800135c <DBmanue_mem_input>:

//==============================================================================
//
//==============================================================================
void DBmanue_mem_input(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
	int 		i = 0;
 8001362:	2300      	movs	r3, #0
 8001364:	60fb      	str	r3, [r7, #12]
	uint32_t	dt = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	60bb      	str	r3, [r7, #8]
	uint8_t		c = input_string.main[0];
 800136a:	4b29      	ldr	r3, [pc, #164]	; (8001410 <DBmanue_mem_input+0xb4>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	71fb      	strb	r3, [r7, #7]

	if( c == 'r' || c == 'R' ){
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	2b72      	cmp	r3, #114	; 0x72
 8001374:	d044      	beq.n	8001400 <DBmanue_mem_input+0xa4>
 8001376:	79fb      	ldrb	r3, [r7, #7]
 8001378:	2b52      	cmp	r3, #82	; 0x52
 800137a:	d041      	beq.n	8001400 <DBmanue_mem_input+0xa4>

	}
	else{
		while( input_string.main[i] != '\0'){
 800137c:	e030      	b.n	80013e0 <DBmanue_mem_input+0x84>
			c= input_string.main[i];
 800137e:	4a24      	ldr	r2, [pc, #144]	; (8001410 <DBmanue_mem_input+0xb4>)
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	4413      	add	r3, r2
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	71fb      	strb	r3, [r7, #7]

			dt <<= 4;
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	011b      	lsls	r3, r3, #4
 800138c:	60bb      	str	r3, [r7, #8]

			if( c >= '0'  && c <= '9' ){
 800138e:	79fb      	ldrb	r3, [r7, #7]
 8001390:	2b2f      	cmp	r3, #47	; 0x2f
 8001392:	d909      	bls.n	80013a8 <DBmanue_mem_input+0x4c>
 8001394:	79fb      	ldrb	r3, [r7, #7]
 8001396:	2b39      	cmp	r3, #57	; 0x39
 8001398:	d806      	bhi.n	80013a8 <DBmanue_mem_input+0x4c>
				dt |= ( c - '0');
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	3b30      	subs	r3, #48	; 0x30
 800139e:	461a      	mov	r2, r3
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	60bb      	str	r3, [r7, #8]
 80013a6:	e018      	b.n	80013da <DBmanue_mem_input+0x7e>
			}
			else if( c >= 'a'  && c <= 'f' ){
 80013a8:	79fb      	ldrb	r3, [r7, #7]
 80013aa:	2b60      	cmp	r3, #96	; 0x60
 80013ac:	d909      	bls.n	80013c2 <DBmanue_mem_input+0x66>
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	2b66      	cmp	r3, #102	; 0x66
 80013b2:	d806      	bhi.n	80013c2 <DBmanue_mem_input+0x66>
				dt |= ( c - 'a' + 10);
 80013b4:	79fb      	ldrb	r3, [r7, #7]
 80013b6:	3b57      	subs	r3, #87	; 0x57
 80013b8:	461a      	mov	r2, r3
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	4313      	orrs	r3, r2
 80013be:	60bb      	str	r3, [r7, #8]
 80013c0:	e00b      	b.n	80013da <DBmanue_mem_input+0x7e>
			}
			else if( c >= 'A'  && c <= 'F' ){
 80013c2:	79fb      	ldrb	r3, [r7, #7]
 80013c4:	2b40      	cmp	r3, #64	; 0x40
 80013c6:	d908      	bls.n	80013da <DBmanue_mem_input+0x7e>
 80013c8:	79fb      	ldrb	r3, [r7, #7]
 80013ca:	2b46      	cmp	r3, #70	; 0x46
 80013cc:	d805      	bhi.n	80013da <DBmanue_mem_input+0x7e>
				dt |= ( c - 'A' + 10);
 80013ce:	79fb      	ldrb	r3, [r7, #7]
 80013d0:	3b37      	subs	r3, #55	; 0x37
 80013d2:	461a      	mov	r2, r3
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	60bb      	str	r3, [r7, #8]
			}

			i++;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	3301      	adds	r3, #1
 80013de:	60fb      	str	r3, [r7, #12]
		while( input_string.main[i] != '\0'){
 80013e0:	4a0b      	ldr	r2, [pc, #44]	; (8001410 <DBmanue_mem_input+0xb4>)
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	4413      	add	r3, r2
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d1c8      	bne.n	800137e <DBmanue_mem_input+0x22>
		}

		SKprintf("dt=%lx",dt);
 80013ec:	68b9      	ldr	r1, [r7, #8]
 80013ee:	4809      	ldr	r0, [pc, #36]	; (8001414 <DBmanue_mem_input+0xb8>)
 80013f0:	f002 fb7e 	bl	8003af0 <SKprintf>
		hex_dmp((uint8_t *)dt, 128*4);
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013fa:	4618      	mov	r0, r3
 80013fc:	f000 f80e 	bl	800141c <hex_dmp>
	}

	dev_menue_type = DEB_MEM_MENUE;
 8001400:	4b05      	ldr	r3, [pc, #20]	; (8001418 <DBmanue_mem_input+0xbc>)
 8001402:	2203      	movs	r2, #3
 8001404:	701a      	strb	r2, [r3, #0]

}
 8001406:	bf00      	nop
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	200000ec 	.word	0x200000ec
 8001414:	0800bccc 	.word	0x0800bccc
 8001418:	2000016c 	.word	0x2000016c

0800141c <hex_dmp>:

//==============================================================================
//
//==============================================================================
void hex_dmp(uint8_t *buf, uint16_t size)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08e      	sub	sp, #56	; 0x38
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	460b      	mov	r3, r1
 8001426:	807b      	strh	r3, [r7, #2]
    uint16_t	size_plus;
    uint32_t pp;



   p = buf;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	627b      	str	r3, [r7, #36]	; 0x24
   pp = (uint32_t)buf;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	623b      	str	r3, [r7, #32]
   p_disp = (uint8_t *)(pp & 0xfffffff0);
 8001430:	6a3b      	ldr	r3, [r7, #32]
 8001432:	f023 030f 	bic.w	r3, r3, #15
 8001436:	62fb      	str	r3, [r7, #44]	; 0x2c
   p = p_disp;
 8001438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800143a:	627b      	str	r3, [r7, #36]	; 0x24

   pre_data = (uint8_t)pp & 0x0000000F;
 800143c:	6a3b      	ldr	r3, [r7, #32]
 800143e:	b2db      	uxtb	r3, r3
 8001440:	b29b      	uxth	r3, r3
 8001442:	f003 030f 	and.w	r3, r3, #15
 8001446:	83fb      	strh	r3, [r7, #30]
   sk_mem_dump = p_disp;
 8001448:	4a54      	ldr	r2, [pc, #336]	; (800159c <hex_dmp+0x180>)
 800144a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800144c:	6013      	str	r3, [r2, #0]

   size_plus = size + pre_data;
 800144e:	887a      	ldrh	r2, [r7, #2]
 8001450:	8bfb      	ldrh	r3, [r7, #30]
 8001452:	4413      	add	r3, r2
 8001454:	853b      	strh	r3, [r7, #40]	; 0x28
   if(( size_plus % 16 ) != 0){
 8001456:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001458:	f003 030f 	and.w	r3, r3, #15
 800145c:	b29b      	uxth	r3, r3
 800145e:	2b00      	cmp	r3, #0
 8001460:	d005      	beq.n	800146e <hex_dmp+0x52>
    	   size_plus = size_plus + 16 - (size_plus % 16);
 8001462:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001464:	f023 030f 	bic.w	r3, r3, #15
 8001468:	b29b      	uxth	r3, r3
 800146a:	3310      	adds	r3, #16
 800146c:	853b      	strh	r3, [r7, #40]	; 0x28
    }


    SKprintf("\r\n%p -->>\r\n",p);
 800146e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001470:	484b      	ldr	r0, [pc, #300]	; (80015a0 <hex_dmp+0x184>)
 8001472:	f002 fb3d 	bl	8003af0 <SKprintf>
    SKprintf("            0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F    -- ASCII --\r\n");
 8001476:	484b      	ldr	r0, [pc, #300]	; (80015a4 <hex_dmp+0x188>)
 8001478:	f002 fb3a 	bl	8003af0 <SKprintf>
    SKprintf("-----------+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+-----------------\r\n");
 800147c:	484a      	ldr	r0, [pc, #296]	; (80015a8 <hex_dmp+0x18c>)
 800147e:	f002 fb37 	bl	8003af0 <SKprintf>


    for (i=0; i<size_plus; i++) {
 8001482:	2300      	movs	r3, #0
 8001484:	637b      	str	r3, [r7, #52]	; 0x34
 8001486:	e070      	b.n	800156a <hex_dmp+0x14e>

    	if(( i % 16)== 0){
 8001488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800148a:	f003 030f 	and.w	r3, r3, #15
 800148e:	2b00      	cmp	r3, #0
 8001490:	d114      	bne.n	80014bc <hex_dmp+0xa0>
    	    SKprintf("%08p  ",p_disp);
 8001492:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001494:	4845      	ldr	r0, [pc, #276]	; (80015ac <hex_dmp+0x190>)
 8001496:	f002 fb2b 	bl	8003af0 <SKprintf>
    	    if( p_disp != &p[i] ){
 800149a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800149c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800149e:	4413      	add	r3, r2
 80014a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d007      	beq.n	80014b6 <hex_dmp+0x9a>
    	    	SKprintf("\r\nERROR p_disp=%p,p=%p\r\n",p_disp,&p[i]);
 80014a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014aa:	4413      	add	r3, r2
 80014ac:	461a      	mov	r2, r3
 80014ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80014b0:	483f      	ldr	r0, [pc, #252]	; (80015b0 <hex_dmp+0x194>)
 80014b2:	f002 fb1d 	bl	8003af0 <SKprintf>
    	    }
    	    p_disp += 16;
 80014b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014b8:	3310      	adds	r3, #16
 80014ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    	}


		j = i % 16;
 80014bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014be:	425a      	negs	r2, r3
 80014c0:	f003 030f 	and.w	r3, r3, #15
 80014c4:	f002 020f 	and.w	r2, r2, #15
 80014c8:	bf58      	it	pl
 80014ca:	4253      	negpl	r3, r2
 80014cc:	633b      	str	r3, [r7, #48]	; 0x30

		if( i < (size + pre_data) ){
 80014ce:	887a      	ldrh	r2, [r7, #2]
 80014d0:	8bfb      	ldrh	r3, [r7, #30]
 80014d2:	4413      	add	r3, r2
 80014d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014d6:	429a      	cmp	r2, r3
 80014d8:	da20      	bge.n	800151c <hex_dmp+0x100>
			SKprintf("%02x ", p[i]);
 80014da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014de:	4413      	add	r3, r2
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	4619      	mov	r1, r3
 80014e4:	4833      	ldr	r0, [pc, #204]	; (80015b4 <hex_dmp+0x198>)
 80014e6:	f002 fb03 	bl	8003af0 <SKprintf>
			tmp[j] = (uint8_t)((p[i]<0x20||p[i]>=0x7f)? '.': p[i]);
 80014ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014ee:	4413      	add	r3, r2
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	2b1f      	cmp	r3, #31
 80014f4:	d90a      	bls.n	800150c <hex_dmp+0xf0>
 80014f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014fa:	4413      	add	r3, r2
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	2b7e      	cmp	r3, #126	; 0x7e
 8001500:	d804      	bhi.n	800150c <hex_dmp+0xf0>
 8001502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001506:	4413      	add	r3, r2
 8001508:	7819      	ldrb	r1, [r3, #0]
 800150a:	e000      	b.n	800150e <hex_dmp+0xf2>
 800150c:	212e      	movs	r1, #46	; 0x2e
 800150e:	f107 020c 	add.w	r2, r7, #12
 8001512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001514:	4413      	add	r3, r2
 8001516:	460a      	mov	r2, r1
 8001518:	701a      	strb	r2, [r3, #0]
 800151a:	e008      	b.n	800152e <hex_dmp+0x112>
					}
		else{
			SKprintf("   ");
 800151c:	4826      	ldr	r0, [pc, #152]	; (80015b8 <hex_dmp+0x19c>)
 800151e:	f002 fae7 	bl	8003af0 <SKprintf>
			tmp[j] = ' ';
 8001522:	f107 020c 	add.w	r2, r7, #12
 8001526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001528:	4413      	add	r3, r2
 800152a:	2220      	movs	r2, #32
 800152c:	701a      	strb	r2, [r3, #0]
		}

		flg = 1;
 800152e:	2301      	movs	r3, #1
 8001530:	857b      	strh	r3, [r7, #42]	; 0x2a
		if(( i % 16)==15 ){
 8001532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001534:	425a      	negs	r2, r3
 8001536:	f003 030f 	and.w	r3, r3, #15
 800153a:	f002 020f 	and.w	r2, r2, #15
 800153e:	bf58      	it	pl
 8001540:	4253      	negpl	r3, r2
 8001542:	2b0f      	cmp	r3, #15
 8001544:	d10e      	bne.n	8001564 <hex_dmp+0x148>
			flg = 0;
 8001546:	2300      	movs	r3, #0
 8001548:	857b      	strh	r3, [r7, #42]	; 0x2a
			tmp[j+1] = '\0';
 800154a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800154c:	3301      	adds	r3, #1
 800154e:	3338      	adds	r3, #56	; 0x38
 8001550:	443b      	add	r3, r7
 8001552:	2200      	movs	r2, #0
 8001554:	f803 2c2c 	strb.w	r2, [r3, #-44]
			SKprintf(" %s\r\n", tmp);
 8001558:	f107 030c 	add.w	r3, r7, #12
 800155c:	4619      	mov	r1, r3
 800155e:	4817      	ldr	r0, [pc, #92]	; (80015bc <hex_dmp+0x1a0>)
 8001560:	f002 fac6 	bl	8003af0 <SKprintf>
    for (i=0; i<size_plus; i++) {
 8001564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001566:	3301      	adds	r3, #1
 8001568:	637b      	str	r3, [r7, #52]	; 0x34
 800156a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800156c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800156e:	429a      	cmp	r2, r3
 8001570:	db8a      	blt.n	8001488 <hex_dmp+0x6c>
		}
    }

    if( flg == 1 ){
 8001572:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001574:	2b01      	cmp	r3, #1
 8001576:	d10c      	bne.n	8001592 <hex_dmp+0x176>
		tmp[j+1] = '\0';
 8001578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800157a:	3301      	adds	r3, #1
 800157c:	3338      	adds	r3, #56	; 0x38
 800157e:	443b      	add	r3, r7
 8001580:	2200      	movs	r2, #0
 8001582:	f803 2c2c 	strb.w	r2, [r3, #-44]
		SKprintf("%s\r\n", tmp);
 8001586:	f107 030c 	add.w	r3, r7, #12
 800158a:	4619      	mov	r1, r3
 800158c:	480c      	ldr	r0, [pc, #48]	; (80015c0 <hex_dmp+0x1a4>)
 800158e:	f002 faaf 	bl	8003af0 <SKprintf>
    }

}
 8001592:	bf00      	nop
 8001594:	3738      	adds	r7, #56	; 0x38
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	200000e4 	.word	0x200000e4
 80015a0:	0800bcd4 	.word	0x0800bcd4
 80015a4:	0800bce0 	.word	0x0800bce0
 80015a8:	0800bd2c 	.word	0x0800bd2c
 80015ac:	0800bd7c 	.word	0x0800bd7c
 80015b0:	0800bd84 	.word	0x0800bd84
 80015b4:	0800bda0 	.word	0x0800bda0
 80015b8:	0800bda8 	.word	0x0800bda8
 80015bc:	0800bdac 	.word	0x0800bdac
 80015c0:	0800bdb4 	.word	0x0800bdb4

080015c4 <input2menu>:
//==============================================================================
//
//==============================================================================

COMMAND_MENUE input2menu(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
     uint16_t i = 0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	80fb      	strh	r3, [r7, #6]
    COMMAND_MENUE rtn = CMD_MAX;
 80015ce:	2305      	movs	r3, #5
 80015d0:	717b      	strb	r3, [r7, #5]

        while( com_list[i].pt != CMD_MAX ){
 80015d2:	e01d      	b.n	8001610 <input2menu+0x4c>
            if (strcmp(&input_string.main[0], &com_list[i].command[0]) == 0){
 80015d4:	88fa      	ldrh	r2, [r7, #6]
 80015d6:	4613      	mov	r3, r2
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	4413      	add	r3, r2
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	4413      	add	r3, r2
 80015e0:	4a13      	ldr	r2, [pc, #76]	; (8001630 <input2menu+0x6c>)
 80015e2:	4413      	add	r3, r2
 80015e4:	3301      	adds	r3, #1
 80015e6:	4619      	mov	r1, r3
 80015e8:	4812      	ldr	r0, [pc, #72]	; (8001634 <input2menu+0x70>)
 80015ea:	f7fe fdf9 	bl	80001e0 <strcmp>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d10a      	bne.n	800160a <input2menu+0x46>
                rtn = com_list[i].pt;
 80015f4:	88fa      	ldrh	r2, [r7, #6]
 80015f6:	490e      	ldr	r1, [pc, #56]	; (8001630 <input2menu+0x6c>)
 80015f8:	4613      	mov	r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	4413      	add	r3, r2
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	4413      	add	r3, r2
 8001602:	440b      	add	r3, r1
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	717b      	strb	r3, [r7, #5]
                break;
 8001608:	e00d      	b.n	8001626 <input2menu+0x62>
            }
            i++;
 800160a:	88fb      	ldrh	r3, [r7, #6]
 800160c:	3301      	adds	r3, #1
 800160e:	80fb      	strh	r3, [r7, #6]
        while( com_list[i].pt != CMD_MAX ){
 8001610:	88fa      	ldrh	r2, [r7, #6]
 8001612:	4907      	ldr	r1, [pc, #28]	; (8001630 <input2menu+0x6c>)
 8001614:	4613      	mov	r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	4413      	add	r3, r2
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	4413      	add	r3, r2
 800161e:	440b      	add	r3, r1
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	2b05      	cmp	r3, #5
 8001624:	d1d6      	bne.n	80015d4 <input2menu+0x10>
        }

    return rtn;
 8001626:	797b      	ldrb	r3, [r7, #5]
}
 8001628:	4618      	mov	r0, r3
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	0800c710 	.word	0x0800c710
 8001634:	200000ec 	.word	0x200000ec

08001638 <command_split>:
//==============================================================================
//
//==============================================================================
void command_split(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
	int		i;
	int		j;
	char	moji = 0;
 800163e:	2300      	movs	r3, #0
 8001640:	71fb      	strb	r3, [r7, #7]
	char 	*ptr;

	for( j = 0; j<INPUT_BUF_SIZE/2; j++ ){
 8001642:	2300      	movs	r3, #0
 8001644:	60bb      	str	r3, [r7, #8]
 8001646:	e008      	b.n	800165a <command_split+0x22>
		input_string.sub_ptr[j] = 0;
 8001648:	4a5d      	ldr	r2, [pc, #372]	; (80017c0 <command_split+0x188>)
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	3308      	adds	r3, #8
 800164e:	2100      	movs	r1, #0
 8001650:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for( j = 0; j<INPUT_BUF_SIZE/2; j++ ){
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	3301      	adds	r3, #1
 8001658:	60bb      	str	r3, [r7, #8]
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	2b0e      	cmp	r3, #14
 800165e:	ddf3      	ble.n	8001648 <command_split+0x10>
	}

	for( i= 0; i<INPUT_BUF_SIZE; i++ ){
 8001660:	2300      	movs	r3, #0
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	e027      	b.n	80016b6 <command_split+0x7e>
		switch(input_string.main[i]){
 8001666:	4a56      	ldr	r2, [pc, #344]	; (80017c0 <command_split+0x188>)
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	4413      	add	r3, r2
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	2b2c      	cmp	r3, #44	; 0x2c
 8001670:	d005      	beq.n	800167e <command_split+0x46>
 8001672:	2b2c      	cmp	r3, #44	; 0x2c
 8001674:	dc0b      	bgt.n	800168e <command_split+0x56>
 8001676:	2b09      	cmp	r3, #9
 8001678:	d001      	beq.n	800167e <command_split+0x46>
 800167a:	2b20      	cmp	r3, #32
 800167c:	d107      	bne.n	800168e <command_split+0x56>
		case ' ':		// スペース
		case ',':		//　カンマ
		case '	':		//　タブ
			input_string.main[i] = '\0';
 800167e:	4a50      	ldr	r2, [pc, #320]	; (80017c0 <command_split+0x188>)
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	4413      	add	r3, r2
 8001684:	2200      	movs	r2, #0
 8001686:	701a      	strb	r2, [r3, #0]
			moji = 0;
 8001688:	2300      	movs	r3, #0
 800168a:	71fb      	strb	r3, [r7, #7]
			break;
 800168c:	e010      	b.n	80016b0 <command_split+0x78>
		default:
			if( moji == 0 ){
 800168e:	79fb      	ldrb	r3, [r7, #7]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d10c      	bne.n	80016ae <command_split+0x76>
				if( j < INPUT_BUF_SIZE/2){
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	2b0e      	cmp	r3, #14
 8001698:	dc07      	bgt.n	80016aa <command_split+0x72>
					input_string.sub_ptr[j] = &input_string.main[i];
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	4a48      	ldr	r2, [pc, #288]	; (80017c0 <command_split+0x188>)
 800169e:	441a      	add	r2, r3
 80016a0:	4947      	ldr	r1, [pc, #284]	; (80017c0 <command_split+0x188>)
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	3308      	adds	r3, #8
 80016a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				}
				moji = 1;
 80016aa:	2301      	movs	r3, #1
 80016ac:	71fb      	strb	r3, [r7, #7]
			}
			break;
 80016ae:	bf00      	nop
	for( i= 0; i<INPUT_BUF_SIZE; i++ ){
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	3301      	adds	r3, #1
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2b1d      	cmp	r3, #29
 80016ba:	ddd4      	ble.n	8001666 <command_split+0x2e>
		}
	}

	for( j = 1; j<INPUT_BUF_SIZE/2; j++ ){
 80016bc:	2301      	movs	r3, #1
 80016be:	60bb      	str	r3, [r7, #8]
 80016c0:	e074      	b.n	80017ac <command_split+0x174>
		ptr = input_string.sub_ptr[j];
 80016c2:	4a3f      	ldr	r2, [pc, #252]	; (80017c0 <command_split+0x188>)
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	3308      	adds	r3, #8
 80016c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016cc:	603b      	str	r3, [r7, #0]
		moji = 1;
 80016ce:	2301      	movs	r3, #1
 80016d0:	71fb      	strb	r3, [r7, #7]
		if( ptr != 0 ){
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d06d      	beq.n	80017b4 <command_split+0x17c>
			if ( ptr[0] == '0' && ptr[1] == 'x'){
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b30      	cmp	r3, #48	; 0x30
 80016de:	d14c      	bne.n	800177a <command_split+0x142>
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	3301      	adds	r3, #1
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	2b78      	cmp	r3, #120	; 0x78
 80016e8:	d147      	bne.n	800177a <command_split+0x142>
				ptr ++;
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	3301      	adds	r3, #1
 80016ee:	603b      	str	r3, [r7, #0]
				ptr ++;
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	3301      	adds	r3, #1
 80016f4:	603b      	str	r3, [r7, #0]
				while( *ptr != '\0' ){
 80016f6:	e01c      	b.n	8001732 <command_split+0xfa>
					if( ('0'<=*ptr && *ptr<='9') || ('A'<=*ptr && *ptr<='F') || ('a'<=*ptr && *ptr<='f')){
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	2b2f      	cmp	r3, #47	; 0x2f
 80016fe:	d903      	bls.n	8001708 <command_split+0xd0>
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b39      	cmp	r3, #57	; 0x39
 8001706:	d911      	bls.n	800172c <command_split+0xf4>
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	2b40      	cmp	r3, #64	; 0x40
 800170e:	d903      	bls.n	8001718 <command_split+0xe0>
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	2b46      	cmp	r3, #70	; 0x46
 8001716:	d909      	bls.n	800172c <command_split+0xf4>
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b60      	cmp	r3, #96	; 0x60
 800171e:	d903      	bls.n	8001728 <command_split+0xf0>
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	2b66      	cmp	r3, #102	; 0x66
 8001726:	d901      	bls.n	800172c <command_split+0xf4>

					}
					else{
						moji = 0;
 8001728:	2300      	movs	r3, #0
 800172a:	71fb      	strb	r3, [r7, #7]
					}
					ptr ++;
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	3301      	adds	r3, #1
 8001730:	603b      	str	r3, [r7, #0]
				while( *ptr != '\0' ){
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1de      	bne.n	80016f8 <command_split+0xc0>
				}

				if( moji == 1 ){
 800173a:	79fb      	ldrb	r3, [r7, #7]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d132      	bne.n	80017a6 <command_split+0x16e>
					sscanf(input_string.sub_ptr[j], "%x", &input_string.data[j]);
 8001740:	4a1f      	ldr	r2, [pc, #124]	; (80017c0 <command_split+0x188>)
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	3308      	adds	r3, #8
 8001746:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	332c      	adds	r3, #44	; 0x2c
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	4a1b      	ldr	r2, [pc, #108]	; (80017c0 <command_split+0x188>)
 8001752:	4413      	add	r3, r2
 8001754:	3304      	adds	r3, #4
 8001756:	461a      	mov	r2, r3
 8001758:	491a      	ldr	r1, [pc, #104]	; (80017c4 <command_split+0x18c>)
 800175a:	f009 f96f 	bl	800aa3c <siscanf>
				if( moji == 1 ){
 800175e:	e022      	b.n	80017a6 <command_split+0x16e>
				}
			}
			else{
				while( *ptr != '\0' ){
					if( '0'<=*ptr && *ptr<='9'){
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2b2f      	cmp	r3, #47	; 0x2f
 8001766:	d903      	bls.n	8001770 <command_split+0x138>
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	2b39      	cmp	r3, #57	; 0x39
 800176e:	d901      	bls.n	8001774 <command_split+0x13c>
					}
					else{
						moji = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	71fb      	strb	r3, [r7, #7]
					}
					ptr ++;
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	3301      	adds	r3, #1
 8001778:	603b      	str	r3, [r7, #0]
				while( *ptr != '\0' ){
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d1ee      	bne.n	8001760 <command_split+0x128>
				}

				if( moji == 1 ){
 8001782:	79fb      	ldrb	r3, [r7, #7]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d10e      	bne.n	80017a6 <command_split+0x16e>
					sscanf(input_string.sub_ptr[j], "%d", &input_string.data[j]);
 8001788:	4a0d      	ldr	r2, [pc, #52]	; (80017c0 <command_split+0x188>)
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	3308      	adds	r3, #8
 800178e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	332c      	adds	r3, #44	; 0x2c
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	4a09      	ldr	r2, [pc, #36]	; (80017c0 <command_split+0x188>)
 800179a:	4413      	add	r3, r2
 800179c:	3304      	adds	r3, #4
 800179e:	461a      	mov	r2, r3
 80017a0:	4909      	ldr	r1, [pc, #36]	; (80017c8 <command_split+0x190>)
 80017a2:	f009 f94b 	bl	800aa3c <siscanf>
	for( j = 1; j<INPUT_BUF_SIZE/2; j++ ){
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	3301      	adds	r3, #1
 80017aa:	60bb      	str	r3, [r7, #8]
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	2b0e      	cmp	r3, #14
 80017b0:	dd87      	ble.n	80016c2 <command_split+0x8a>
		else{
			break;
		}
	}

}
 80017b2:	e000      	b.n	80017b6 <command_split+0x17e>
			break;
 80017b4:	bf00      	nop
}
 80017b6:	bf00      	nop
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	200000ec 	.word	0x200000ec
 80017c4:	0800bdbc 	.word	0x0800bdbc
 80017c8:	0800bdc0 	.word	0x0800bdc0

080017cc <read_line_streem>:

//==============================================================================
//
//==============================================================================
 INPUT_CHAR_STEP read_line_streem(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
    uint8_t num;
    uint8_t sub_cnt;
#endif	// ___NOP
    char	string[2];

    string[0] = '\0';
 80017d2:	2300      	movs	r3, #0
 80017d4:	713b      	strb	r3, [r7, #4]
    string[1] = '\0';
 80017d6:	2300      	movs	r3, #0
 80017d8:	717b      	strb	r3, [r7, #5]


    c = (char)getch(SK_UART2_DEBUG);
 80017da:	2001      	movs	r0, #1
 80017dc:	f002 f9d0 	bl	8003b80 <getch>
 80017e0:	4603      	mov	r3, r0
 80017e2:	71fb      	strb	r3, [r7, #7]

    //SKprintf("read_line_streem()\r\n");

    if( c != 0 ){
 80017e4:	79fb      	ldrb	r3, [r7, #7]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d04b      	beq.n	8001882 <read_line_streem+0xb6>



        switch(input_char_step){
 80017ea:	4b2a      	ldr	r3, [pc, #168]	; (8001894 <read_line_streem+0xc8>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d002      	beq.n	80017f8 <read_line_streem+0x2c>
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d006      	beq.n	8001804 <read_line_streem+0x38>
                    input_char_step = INPUT_DATA_FIX;

                    command_split();
                }
            default:
                break;
 80017f6:	e046      	b.n	8001886 <read_line_streem+0xba>
                input_pos = 0;
 80017f8:	4b27      	ldr	r3, [pc, #156]	; (8001898 <read_line_streem+0xcc>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
                input_char_step = INPUT_SAVING;
 80017fe:	4b25      	ldr	r3, [pc, #148]	; (8001894 <read_line_streem+0xc8>)
 8001800:	2201      	movs	r2, #1
 8001802:	701a      	strb	r2, [r3, #0]
                if( isprint(c) && (input_pos <= INPUT_BUF_SIZE - 2)){
 8001804:	79fb      	ldrb	r3, [r7, #7]
 8001806:	4618      	mov	r0, r3
 8001808:	f009 f8fa 	bl	800aa00 <isprint>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d015      	beq.n	800183e <read_line_streem+0x72>
 8001812:	4b21      	ldr	r3, [pc, #132]	; (8001898 <read_line_streem+0xcc>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2b1c      	cmp	r3, #28
 8001818:	dc11      	bgt.n	800183e <read_line_streem+0x72>
                    input_string.main[input_pos] = c;
 800181a:	4b1f      	ldr	r3, [pc, #124]	; (8001898 <read_line_streem+0xcc>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	491f      	ldr	r1, [pc, #124]	; (800189c <read_line_streem+0xd0>)
 8001820:	79fa      	ldrb	r2, [r7, #7]
 8001822:	54ca      	strb	r2, [r1, r3]
                    input_pos ++;
 8001824:	4b1c      	ldr	r3, [pc, #112]	; (8001898 <read_line_streem+0xcc>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	3301      	adds	r3, #1
 800182a:	4a1b      	ldr	r2, [pc, #108]	; (8001898 <read_line_streem+0xcc>)
 800182c:	6013      	str	r3, [r2, #0]
                    string[0] = c;
 800182e:	79fb      	ldrb	r3, [r7, #7]
 8001830:	713b      	strb	r3, [r7, #4]
                    SKprintf("%s",string);
 8001832:	1d3b      	adds	r3, r7, #4
 8001834:	4619      	mov	r1, r3
 8001836:	481a      	ldr	r0, [pc, #104]	; (80018a0 <read_line_streem+0xd4>)
 8001838:	f002 f95a 	bl	8003af0 <SKprintf>
 800183c:	e020      	b.n	8001880 <read_line_streem+0xb4>
                else if (c == 0x08 && input_pos > 0) {      // Back Space
 800183e:	79fb      	ldrb	r3, [r7, #7]
 8001840:	2b08      	cmp	r3, #8
 8001842:	d10c      	bne.n	800185e <read_line_streem+0x92>
 8001844:	4b14      	ldr	r3, [pc, #80]	; (8001898 <read_line_streem+0xcc>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2b00      	cmp	r3, #0
 800184a:	dd08      	ble.n	800185e <read_line_streem+0x92>
                    input_pos --;
 800184c:	4b12      	ldr	r3, [pc, #72]	; (8001898 <read_line_streem+0xcc>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	3b01      	subs	r3, #1
 8001852:	4a11      	ldr	r2, [pc, #68]	; (8001898 <read_line_streem+0xcc>)
 8001854:	6013      	str	r3, [r2, #0]
                    SKprintf("\x08 \x08");
 8001856:	4813      	ldr	r0, [pc, #76]	; (80018a4 <read_line_streem+0xd8>)
 8001858:	f002 f94a 	bl	8003af0 <SKprintf>
 800185c:	e010      	b.n	8001880 <read_line_streem+0xb4>
                else if (c == '\r') {
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	2b0d      	cmp	r3, #13
 8001862:	d110      	bne.n	8001886 <read_line_streem+0xba>
                    input_string.main[input_pos] = '\0';
 8001864:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <read_line_streem+0xcc>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a0c      	ldr	r2, [pc, #48]	; (800189c <read_line_streem+0xd0>)
 800186a:	2100      	movs	r1, #0
 800186c:	54d1      	strb	r1, [r2, r3]
                    SKprintf("\r\n");
 800186e:	480e      	ldr	r0, [pc, #56]	; (80018a8 <read_line_streem+0xdc>)
 8001870:	f002 f93e 	bl	8003af0 <SKprintf>
                    input_char_step = INPUT_DATA_FIX;
 8001874:	4b07      	ldr	r3, [pc, #28]	; (8001894 <read_line_streem+0xc8>)
 8001876:	2202      	movs	r2, #2
 8001878:	701a      	strb	r2, [r3, #0]
                    command_split();
 800187a:	f7ff fedd 	bl	8001638 <command_split>
                break;
 800187e:	e002      	b.n	8001886 <read_line_streem+0xba>
 8001880:	e001      	b.n	8001886 <read_line_streem+0xba>
        }
    }
 8001882:	bf00      	nop
 8001884:	e000      	b.n	8001888 <read_line_streem+0xbc>
                break;
 8001886:	bf00      	nop
    return(input_char_step);
 8001888:	4b02      	ldr	r3, [pc, #8]	; (8001894 <read_line_streem+0xc8>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 }
 800188c:	4618      	mov	r0, r3
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	200000e8 	.word	0x200000e8
 8001898:	200000e0 	.word	0x200000e0
 800189c:	200000ec 	.word	0x200000ec
 80018a0:	0800bc94 	.word	0x0800bc94
 80018a4:	0800bdc4 	.word	0x0800bdc4
 80018a8:	0800bdc8 	.word	0x0800bdc8

080018ac <HAL_RTCEx_WakeUpTimerEventCallback>:
//==============================================================================
//
//==============================================================================

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]

	uint8_t	i;

	if( timer.start > TIMER_AV_NUM){
 80018b4:	4b2a      	ldr	r3, [pc, #168]	; (8001960 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 80018b6:	7e5b      	ldrb	r3, [r3, #25]
 80018b8:	2b03      	cmp	r3, #3
 80018ba:	d941      	bls.n	8001940 <HAL_RTCEx_WakeUpTimerEventCallback+0x94>

		timer.dt_buf[timer.av_wcnt] = timer.dt;
 80018bc:	4b28      	ldr	r3, [pc, #160]	; (8001960 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 80018be:	7e1b      	ldrb	r3, [r3, #24]
 80018c0:	4618      	mov	r0, r3
 80018c2:	4b27      	ldr	r3, [pc, #156]	; (8001960 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	4926      	ldr	r1, [pc, #152]	; (8001960 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 80018c8:	0083      	lsls	r3, r0, #2
 80018ca:	440b      	add	r3, r1
 80018cc:	605a      	str	r2, [r3, #4]
		timer.av_wcnt ++;
 80018ce:	4b24      	ldr	r3, [pc, #144]	; (8001960 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 80018d0:	7e1b      	ldrb	r3, [r3, #24]
 80018d2:	3301      	adds	r3, #1
 80018d4:	b2da      	uxtb	r2, r3
 80018d6:	4b22      	ldr	r3, [pc, #136]	; (8001960 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 80018d8:	761a      	strb	r2, [r3, #24]

		if(timer.av_wcnt > TIMER_AV_NUM){
 80018da:	4b21      	ldr	r3, [pc, #132]	; (8001960 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 80018dc:	7e1b      	ldrb	r3, [r3, #24]
 80018de:	2b03      	cmp	r3, #3
 80018e0:	d920      	bls.n	8001924 <HAL_RTCEx_WakeUpTimerEventCallback+0x78>
			timer.av_wcnt = 0;
 80018e2:	4b1f      	ldr	r3, [pc, #124]	; (8001960 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	761a      	strb	r2, [r3, #24]
			timer.dt_av = 0;
 80018e8:	4b1d      	ldr	r3, [pc, #116]	; (8001960 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	615a      	str	r2, [r3, #20]
			for(i=0; i<TIMER_AV_NUM; i++){
 80018ee:	2300      	movs	r3, #0
 80018f0:	73fb      	strb	r3, [r7, #15]
 80018f2:	e00c      	b.n	800190e <HAL_RTCEx_WakeUpTimerEventCallback+0x62>
				timer.dt_av +=  timer.dt_buf[i];
 80018f4:	4b1a      	ldr	r3, [pc, #104]	; (8001960 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 80018f6:	695a      	ldr	r2, [r3, #20]
 80018f8:	7bfb      	ldrb	r3, [r7, #15]
 80018fa:	4919      	ldr	r1, [pc, #100]	; (8001960 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	440b      	add	r3, r1
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	4413      	add	r3, r2
 8001904:	4a16      	ldr	r2, [pc, #88]	; (8001960 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001906:	6153      	str	r3, [r2, #20]
			for(i=0; i<TIMER_AV_NUM; i++){
 8001908:	7bfb      	ldrb	r3, [r7, #15]
 800190a:	3301      	adds	r3, #1
 800190c:	73fb      	strb	r3, [r7, #15]
 800190e:	7bfb      	ldrb	r3, [r7, #15]
 8001910:	2b02      	cmp	r3, #2
 8001912:	d9ef      	bls.n	80018f4 <HAL_RTCEx_WakeUpTimerEventCallback+0x48>
			}
			timer.dt_av /= TIMER_AV_NUM;
 8001914:	4b12      	ldr	r3, [pc, #72]	; (8001960 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001916:	695b      	ldr	r3, [r3, #20]
 8001918:	4a12      	ldr	r2, [pc, #72]	; (8001964 <HAL_RTCEx_WakeUpTimerEventCallback+0xb8>)
 800191a:	fba2 2303 	umull	r2, r3, r2, r3
 800191e:	085b      	lsrs	r3, r3, #1
 8001920:	4a0f      	ldr	r2, [pc, #60]	; (8001960 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001922:	6153      	str	r3, [r2, #20]
		}

		if( timer.dt_max < timer.dt ){
 8001924:	4b0e      	ldr	r3, [pc, #56]	; (8001960 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001926:	691a      	ldr	r2, [r3, #16]
 8001928:	4b0d      	ldr	r3, [pc, #52]	; (8001960 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	429a      	cmp	r2, r3
 800192e:	d203      	bcs.n	8001938 <HAL_RTCEx_WakeUpTimerEventCallback+0x8c>
			timer.dt_max = timer.dt;
 8001930:	4b0b      	ldr	r3, [pc, #44]	; (8001960 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a0a      	ldr	r2, [pc, #40]	; (8001960 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001936:	6113      	str	r3, [r2, #16]
		}

		timer.dt = 0;
 8001938:	4b09      	ldr	r3, [pc, #36]	; (8001960 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
	}
	else{
		timer.start ++;
		timer.dt = 0;
	}
}
 800193e:	e008      	b.n	8001952 <HAL_RTCEx_WakeUpTimerEventCallback+0xa6>
		timer.start ++;
 8001940:	4b07      	ldr	r3, [pc, #28]	; (8001960 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8001942:	7e5b      	ldrb	r3, [r3, #25]
 8001944:	3301      	adds	r3, #1
 8001946:	b2da      	uxtb	r2, r3
 8001948:	4b05      	ldr	r3, [pc, #20]	; (8001960 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 800194a:	765a      	strb	r2, [r3, #25]
		timer.dt = 0;
 800194c:	4b04      	ldr	r3, [pc, #16]	; (8001960 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]
}
 8001952:	bf00      	nop
 8001954:	3714      	adds	r7, #20
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	20000170 	.word	0x20000170
 8001964:	aaaaaaab 	.word	0xaaaaaaab

08001968 <usr_isr_tim1_up>:
//	uint16_t	msec_max;
//} TIMER_TIC;
//
//==============================================================================
void usr_isr_tim1_up(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);

	timer.dt += 10;
 800196c:	4b22      	ldr	r3, [pc, #136]	; (80019f8 <usr_isr_tim1_up+0x90>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	330a      	adds	r3, #10
 8001972:	4a21      	ldr	r2, [pc, #132]	; (80019f8 <usr_isr_tim1_up+0x90>)
 8001974:	6013      	str	r3, [r2, #0]

	tm.usec += 1;
 8001976:	4b21      	ldr	r3, [pc, #132]	; (80019fc <usr_isr_tim1_up+0x94>)
 8001978:	881b      	ldrh	r3, [r3, #0]
 800197a:	3301      	adds	r3, #1
 800197c:	b29a      	uxth	r2, r3
 800197e:	4b1f      	ldr	r3, [pc, #124]	; (80019fc <usr_isr_tim1_up+0x94>)
 8001980:	801a      	strh	r2, [r3, #0]

	if( tm.usec >= 100 ){
 8001982:	4b1e      	ldr	r3, [pc, #120]	; (80019fc <usr_isr_tim1_up+0x94>)
 8001984:	881b      	ldrh	r3, [r3, #0]
 8001986:	2b63      	cmp	r3, #99	; 0x63
 8001988:	d930      	bls.n	80019ec <usr_isr_tim1_up+0x84>
		tm.usec = 0;
 800198a:	4b1c      	ldr	r3, [pc, #112]	; (80019fc <usr_isr_tim1_up+0x94>)
 800198c:	2200      	movs	r2, #0
 800198e:	801a      	strh	r2, [r3, #0]
		tm.msec ++;
 8001990:	4b1a      	ldr	r3, [pc, #104]	; (80019fc <usr_isr_tim1_up+0x94>)
 8001992:	885b      	ldrh	r3, [r3, #2]
 8001994:	3301      	adds	r3, #1
 8001996:	b29a      	uxth	r2, r3
 8001998:	4b18      	ldr	r3, [pc, #96]	; (80019fc <usr_isr_tim1_up+0x94>)
 800199a:	805a      	strh	r2, [r3, #2]
		if( tm.msec >= 1000 ){
 800199c:	4b17      	ldr	r3, [pc, #92]	; (80019fc <usr_isr_tim1_up+0x94>)
 800199e:	885b      	ldrh	r3, [r3, #2]
 80019a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019a4:	d322      	bcc.n	80019ec <usr_isr_tim1_up+0x84>
			tm.msec = 0;
 80019a6:	4b15      	ldr	r3, [pc, #84]	; (80019fc <usr_isr_tim1_up+0x94>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	805a      	strh	r2, [r3, #2]
			tm.sec ++;
 80019ac:	4b13      	ldr	r3, [pc, #76]	; (80019fc <usr_isr_tim1_up+0x94>)
 80019ae:	889b      	ldrh	r3, [r3, #4]
 80019b0:	3301      	adds	r3, #1
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	4b11      	ldr	r3, [pc, #68]	; (80019fc <usr_isr_tim1_up+0x94>)
 80019b6:	809a      	strh	r2, [r3, #4]
			if( tm.sec >= 60 ){
 80019b8:	4b10      	ldr	r3, [pc, #64]	; (80019fc <usr_isr_tim1_up+0x94>)
 80019ba:	889b      	ldrh	r3, [r3, #4]
 80019bc:	2b3b      	cmp	r3, #59	; 0x3b
 80019be:	d915      	bls.n	80019ec <usr_isr_tim1_up+0x84>
				tm.sec = 0;
 80019c0:	4b0e      	ldr	r3, [pc, #56]	; (80019fc <usr_isr_tim1_up+0x94>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	809a      	strh	r2, [r3, #4]
				tm.min ++;
 80019c6:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <usr_isr_tim1_up+0x94>)
 80019c8:	88db      	ldrh	r3, [r3, #6]
 80019ca:	3301      	adds	r3, #1
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <usr_isr_tim1_up+0x94>)
 80019d0:	80da      	strh	r2, [r3, #6]
				if( tm.min >= 60 ){
 80019d2:	4b0a      	ldr	r3, [pc, #40]	; (80019fc <usr_isr_tim1_up+0x94>)
 80019d4:	88db      	ldrh	r3, [r3, #6]
 80019d6:	2b3b      	cmp	r3, #59	; 0x3b
 80019d8:	d908      	bls.n	80019ec <usr_isr_tim1_up+0x84>
					tm.min = 0;
 80019da:	4b08      	ldr	r3, [pc, #32]	; (80019fc <usr_isr_tim1_up+0x94>)
 80019dc:	2200      	movs	r2, #0
 80019de:	80da      	strh	r2, [r3, #6]
					tm.hour ++;
 80019e0:	4b06      	ldr	r3, [pc, #24]	; (80019fc <usr_isr_tim1_up+0x94>)
 80019e2:	891b      	ldrh	r3, [r3, #8]
 80019e4:	3301      	adds	r3, #1
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	4b04      	ldr	r3, [pc, #16]	; (80019fc <usr_isr_tim1_up+0x94>)
 80019ea:	811a      	strh	r2, [r3, #8]
				}
			}
		}
	}

}
 80019ec:	bf00      	nop
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	20000170 	.word	0x20000170
 80019fc:	20000194 	.word	0x20000194

08001a00 <GetTime_tim1up>:
void GetTime_tim1up(TIMER_DATA *time)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
	*time = tm;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4907      	ldr	r1, [pc, #28]	; (8001a28 <GetTime_tim1up+0x28>)
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	460b      	mov	r3, r1
 8001a10:	cb03      	ldmia	r3!, {r0, r1}
 8001a12:	6010      	str	r0, [r2, #0]
 8001a14:	6051      	str	r1, [r2, #4]
 8001a16:	881b      	ldrh	r3, [r3, #0]
 8001a18:	8113      	strh	r3, [r2, #8]
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	20000194 	.word	0x20000194

08001a2c <my_putint>:
//==============================================================================
//
//==============================================================================

uint8_t *my_putint(int num, uint8_t *buf)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
//	SKprintf("num=%d,num/10=%d,num%%10=%d\r\n",num,num/10,num%10);

	if (num < 0) {
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	da08      	bge.n	8001a4e <my_putint+0x22>
        *buf = '-';
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	222d      	movs	r2, #45	; 0x2d
 8001a40:	701a      	strb	r2, [r3, #0]
        buf++;
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	3301      	adds	r3, #1
 8001a46:	603b      	str	r3, [r7, #0]
        num = -num;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	425b      	negs	r3, r3
 8001a4c:	607b      	str	r3, [r7, #4]
    }

    if (num / 10 != 0) {
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	3309      	adds	r3, #9
 8001a52:	2b12      	cmp	r3, #18
 8001a54:	d90b      	bls.n	8001a6e <my_putint+0x42>
        buf = my_putint(num / 10, buf);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a11      	ldr	r2, [pc, #68]	; (8001aa0 <my_putint+0x74>)
 8001a5a:	fb82 1203 	smull	r1, r2, r2, r3
 8001a5e:	1092      	asrs	r2, r2, #2
 8001a60:	17db      	asrs	r3, r3, #31
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	6839      	ldr	r1, [r7, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff ffe0 	bl	8001a2c <my_putint>
 8001a6c:	6038      	str	r0, [r7, #0]
    }

    *buf = '0' + (num % 10);
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <my_putint+0x74>)
 8001a72:	fb83 1302 	smull	r1, r3, r3, r2
 8001a76:	1099      	asrs	r1, r3, #2
 8001a78:	17d3      	asrs	r3, r2, #31
 8001a7a:	1ac9      	subs	r1, r1, r3
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	440b      	add	r3, r1
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	1ad1      	subs	r1, r2, r3
 8001a86:	b2cb      	uxtb	r3, r1
 8001a88:	3330      	adds	r3, #48	; 0x30
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	701a      	strb	r2, [r3, #0]
    buf++;
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	3301      	adds	r3, #1
 8001a94:	603b      	str	r3, [r7, #0]

    return buf;
 8001a96:	683b      	ldr	r3, [r7, #0]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	66666667 	.word	0x66666667

08001aa4 <my_putfloat>:
//==============================================================================
//
//==============================================================================

uint8_t *my_putfloat(double num, int precision, uint8_t *buf)
{
 8001aa4:	b5b0      	push	{r4, r5, r7, lr}
 8001aa6:	b08a      	sub	sp, #40	; 0x28
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	ed87 0b02 	vstr	d0, [r7, #8]
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
	int dt;
	double fracPart,dtf;
	int intPart;
	int digit;

	intPart = (int)num;
 8001ab2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ab6:	f7fe ff69 	bl	800098c <__aeabi_d2iz>
 8001aba:	4603      	mov	r3, r0
 8001abc:	61bb      	str	r3, [r7, #24]
    buf = my_putint(intPart, buf);
 8001abe:	6839      	ldr	r1, [r7, #0]
 8001ac0:	69b8      	ldr	r0, [r7, #24]
 8001ac2:	f7ff ffb3 	bl	8001a2c <my_putint>
 8001ac6:	6038      	str	r0, [r7, #0]
    *buf = '.';
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	222e      	movs	r2, #46	; 0x2e
 8001acc:	701a      	strb	r2, [r3, #0]
    buf ++;
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	603b      	str	r3, [r7, #0]

    fracPart = num - intPart;
 8001ad4:	69b8      	ldr	r0, [r7, #24]
 8001ad6:	f7fe fe67 	bl	80007a8 <__aeabi_i2d>
 8001ada:	4602      	mov	r2, r0
 8001adc:	460b      	mov	r3, r1
 8001ade:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ae2:	f7fe fd13 	bl	800050c <__aeabi_dsub>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	460b      	mov	r3, r1
 8001aea:	e9c7 2308 	strd	r2, r3, [r7, #32]

    if (fracPart < 0) {
 8001aee:	f04f 0200 	mov.w	r2, #0
 8001af2:	f04f 0300 	mov.w	r3, #0
 8001af6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001afa:	f7fe ff1f 	bl	800093c <__aeabi_dcmplt>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d005      	beq.n	8001b10 <my_putfloat+0x6c>
        fracPart = -fracPart;
 8001b04:	6a3c      	ldr	r4, [r7, #32]
 8001b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b08:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001b0c:	e9c7 4508 	strd	r4, r5, [r7, #32]
    }

    int count = 0;
 8001b10:	2300      	movs	r3, #0
 8001b12:	61fb      	str	r3, [r7, #28]
    while (count < precision) {
 8001b14:	e029      	b.n	8001b6a <my_putfloat+0xc6>
        fracPart *= 10;
 8001b16:	f04f 0200 	mov.w	r2, #0
 8001b1a:	4b1a      	ldr	r3, [pc, #104]	; (8001b84 <my_putfloat+0xe0>)
 8001b1c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001b20:	f7fe fbc6 	bl	80002b0 <__aeabi_dmul>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	e9c7 2308 	strd	r2, r3, [r7, #32]
        int digit = (int)fracPart;
 8001b2c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001b30:	f7fe ff2c 	bl	800098c <__aeabi_d2iz>
 8001b34:	4603      	mov	r3, r0
 8001b36:	617b      	str	r3, [r7, #20]

        *buf = '0' + digit;
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	3330      	adds	r3, #48	; 0x30
 8001b3e:	b2da      	uxtb	r2, r3
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	701a      	strb	r2, [r3, #0]
        buf ++;
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	3301      	adds	r3, #1
 8001b48:	603b      	str	r3, [r7, #0]

        fracPart -= digit;
 8001b4a:	6978      	ldr	r0, [r7, #20]
 8001b4c:	f7fe fe2c 	bl	80007a8 <__aeabi_i2d>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001b58:	f7fe fcd8 	bl	800050c <__aeabi_dsub>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	460b      	mov	r3, r1
 8001b60:	e9c7 2308 	strd	r2, r3, [r7, #32]
        count++;
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	3301      	adds	r3, #1
 8001b68:	61fb      	str	r3, [r7, #28]
    while (count < precision) {
 8001b6a:	69fa      	ldr	r2, [r7, #28]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	dbd1      	blt.n	8001b16 <my_putfloat+0x72>
    }

    *buf = '\0';
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	2200      	movs	r2, #0
 8001b76:	701a      	strb	r2, [r3, #0]

    return buf;
 8001b78:	683b      	ldr	r3, [r7, #0]

}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3728      	adds	r7, #40	; 0x28
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bdb0      	pop	{r4, r5, r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40240000 	.word	0x40240000

08001b88 <my_putchar>:
//
//
//=============================================================================

uint8_t *my_putchar(char c, uint8_t *buf )
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	6039      	str	r1, [r7, #0]
 8001b92:	71fb      	strb	r3, [r7, #7]
	//SKprintf("_putchar c=%x, buf=%p\r\n",c,buf);
	*buf = c;
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	79fa      	ldrb	r2, [r7, #7]
 8001b98:	701a      	strb	r2, [r3, #0]
	buf ++;
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	603b      	str	r3, [r7, #0]
	return buf ;
 8001ba0:	683b      	ldr	r3, [r7, #0]
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <my_puts>:
//=============================================================================
//
//
//=============================================================================
uint8_t *my_puts(char* str, uint8_t *buf )
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b084      	sub	sp, #16
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
 8001bb6:	6039      	str	r1, [r7, #0]
	uint8_t *buf2;

	buf2=buf;
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	60fb      	str	r3, [r7, #12]

	//SKprintf("_puts str=%s, buf=%p\r\n",str,buf);
    while ( *str != '\0' ) {
 8001bbc:	e009      	b.n	8001bd2 <my_puts+0x24>
        buf = my_putchar(*str, buf);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	6839      	ldr	r1, [r7, #0]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff ffdf 	bl	8001b88 <my_putchar>
 8001bca:	6038      	str	r0, [r7, #0]
        str++;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3301      	adds	r3, #1
 8001bd0:	607b      	str	r3, [r7, #4]
    while ( *str != '\0' ) {
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d1f1      	bne.n	8001bbe <my_puts+0x10>
    }
    *buf='\0';
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	701a      	strb	r2, [r3, #0]
	//SKprintf("_puts str=%s  %p\r\n",buf2, buf);
	return buf ;
 8001be0:	683b      	ldr	r3, [r7, #0]
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3710      	adds	r7, #16
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
	...

08001bec <my_putshex>:
//
//
//=============================================================================

uint8_t *my_putshex(uint16_t dt, uint8_t flg, uint8_t *buf )
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	603a      	str	r2, [r7, #0]
 8001bf6:	80fb      	strh	r3, [r7, #6]
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	717b      	strb	r3, [r7, #5]
	uint8_t	sw;

	switch(flg){
 8001bfc:	797b      	ldrb	r3, [r7, #5]
 8001bfe:	2b04      	cmp	r3, #4
 8001c00:	d007      	beq.n	8001c12 <my_putshex+0x26>
 8001c02:	2b04      	cmp	r3, #4
 8001c04:	f300 80a0 	bgt.w	8001d48 <my_putshex+0x15c>
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d048      	beq.n	8001c9e <my_putshex+0xb2>
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d02f      	beq.n	8001c70 <my_putshex+0x84>
 8001c10:	e09a      	b.n	8001d48 <my_putshex+0x15c>
	case 4:
		*buf = ConvC[( dt >> 12 ) & 0x0f ];
 8001c12:	88fb      	ldrh	r3, [r7, #6]
 8001c14:	0b1b      	lsrs	r3, r3, #12
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	f003 030f 	and.w	r3, r3, #15
 8001c1c:	4a4e      	ldr	r2, [pc, #312]	; (8001d58 <my_putshex+0x16c>)
 8001c1e:	5cd2      	ldrb	r2, [r2, r3]
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	701a      	strb	r2, [r3, #0]
		buf ++;
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	3301      	adds	r3, #1
 8001c28:	603b      	str	r3, [r7, #0]
		*buf = ConvC[( dt >> 8 ) & 0x0f ];
 8001c2a:	88fb      	ldrh	r3, [r7, #6]
 8001c2c:	0a1b      	lsrs	r3, r3, #8
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	f003 030f 	and.w	r3, r3, #15
 8001c34:	4a48      	ldr	r2, [pc, #288]	; (8001d58 <my_putshex+0x16c>)
 8001c36:	5cd2      	ldrb	r2, [r2, r3]
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	701a      	strb	r2, [r3, #0]
		buf ++;
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	3301      	adds	r3, #1
 8001c40:	603b      	str	r3, [r7, #0]
		*buf = ConvC[( dt >> 4 ) & 0x0f ];
 8001c42:	88fb      	ldrh	r3, [r7, #6]
 8001c44:	091b      	lsrs	r3, r3, #4
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	f003 030f 	and.w	r3, r3, #15
 8001c4c:	4a42      	ldr	r2, [pc, #264]	; (8001d58 <my_putshex+0x16c>)
 8001c4e:	5cd2      	ldrb	r2, [r2, r3]
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	701a      	strb	r2, [r3, #0]
		buf ++;
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	3301      	adds	r3, #1
 8001c58:	603b      	str	r3, [r7, #0]
		*buf = ConvC[ dt  & 0x0f ];
 8001c5a:	88fb      	ldrh	r3, [r7, #6]
 8001c5c:	f003 030f 	and.w	r3, r3, #15
 8001c60:	4a3d      	ldr	r2, [pc, #244]	; (8001d58 <my_putshex+0x16c>)
 8001c62:	5cd2      	ldrb	r2, [r2, r3]
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	701a      	strb	r2, [r3, #0]
		buf ++;
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	603b      	str	r3, [r7, #0]
		break;
 8001c6e:	e06b      	b.n	8001d48 <my_putshex+0x15c>

	case 2:
		*buf = ConvC[( dt >> 4 ) & 0x0f ];
 8001c70:	88fb      	ldrh	r3, [r7, #6]
 8001c72:	091b      	lsrs	r3, r3, #4
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	f003 030f 	and.w	r3, r3, #15
 8001c7a:	4a37      	ldr	r2, [pc, #220]	; (8001d58 <my_putshex+0x16c>)
 8001c7c:	5cd2      	ldrb	r2, [r2, r3]
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	701a      	strb	r2, [r3, #0]
		buf ++;
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	3301      	adds	r3, #1
 8001c86:	603b      	str	r3, [r7, #0]
		*buf = ConvC[ dt  & 0x0f ];
 8001c88:	88fb      	ldrh	r3, [r7, #6]
 8001c8a:	f003 030f 	and.w	r3, r3, #15
 8001c8e:	4a32      	ldr	r2, [pc, #200]	; (8001d58 <my_putshex+0x16c>)
 8001c90:	5cd2      	ldrb	r2, [r2, r3]
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	701a      	strb	r2, [r3, #0]
		buf ++;
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	603b      	str	r3, [r7, #0]
		break;
 8001c9c:	e054      	b.n	8001d48 <my_putshex+0x15c>
	case 0:
		sw = 0;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	73fb      	strb	r3, [r7, #15]
		if(( sw == 1) || (( dt >> 12 ) & 0x0f ) != 0 ){
 8001ca2:	7bfb      	ldrb	r3, [r7, #15]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d006      	beq.n	8001cb6 <my_putshex+0xca>
 8001ca8:	88fb      	ldrh	r3, [r7, #6]
 8001caa:	0b1b      	lsrs	r3, r3, #12
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	f003 030f 	and.w	r3, r3, #15
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d00d      	beq.n	8001cd2 <my_putshex+0xe6>
			*buf = ConvC[( dt >> 12 ) & 0x0f ];
 8001cb6:	88fb      	ldrh	r3, [r7, #6]
 8001cb8:	0b1b      	lsrs	r3, r3, #12
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	f003 030f 	and.w	r3, r3, #15
 8001cc0:	4a25      	ldr	r2, [pc, #148]	; (8001d58 <my_putshex+0x16c>)
 8001cc2:	5cd2      	ldrb	r2, [r2, r3]
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	701a      	strb	r2, [r3, #0]
			buf ++;
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	603b      	str	r3, [r7, #0]
			sw = 1;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	73fb      	strb	r3, [r7, #15]
		}
		if(( sw == 1) || (( dt >> 8 ) & 0x0f ) != 0 ){
 8001cd2:	7bfb      	ldrb	r3, [r7, #15]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d006      	beq.n	8001ce6 <my_putshex+0xfa>
 8001cd8:	88fb      	ldrh	r3, [r7, #6]
 8001cda:	0a1b      	lsrs	r3, r3, #8
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	f003 030f 	and.w	r3, r3, #15
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d00d      	beq.n	8001d02 <my_putshex+0x116>
			*buf = ConvC[( dt >> 8 ) & 0x0f ];
 8001ce6:	88fb      	ldrh	r3, [r7, #6]
 8001ce8:	0a1b      	lsrs	r3, r3, #8
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	f003 030f 	and.w	r3, r3, #15
 8001cf0:	4a19      	ldr	r2, [pc, #100]	; (8001d58 <my_putshex+0x16c>)
 8001cf2:	5cd2      	ldrb	r2, [r2, r3]
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	701a      	strb	r2, [r3, #0]
			buf ++;
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	603b      	str	r3, [r7, #0]
			sw = 1;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	73fb      	strb	r3, [r7, #15]
		}
		if(( sw == 1) || (( dt >> 4 ) & 0x0f ) != 0 ){
 8001d02:	7bfb      	ldrb	r3, [r7, #15]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d006      	beq.n	8001d16 <my_putshex+0x12a>
 8001d08:	88fb      	ldrh	r3, [r7, #6]
 8001d0a:	091b      	lsrs	r3, r3, #4
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	f003 030f 	and.w	r3, r3, #15
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d00d      	beq.n	8001d32 <my_putshex+0x146>
			*buf = ConvC[( dt >> 4 ) & 0x0f ];
 8001d16:	88fb      	ldrh	r3, [r7, #6]
 8001d18:	091b      	lsrs	r3, r3, #4
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	f003 030f 	and.w	r3, r3, #15
 8001d20:	4a0d      	ldr	r2, [pc, #52]	; (8001d58 <my_putshex+0x16c>)
 8001d22:	5cd2      	ldrb	r2, [r2, r3]
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	701a      	strb	r2, [r3, #0]
			buf ++;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	603b      	str	r3, [r7, #0]
			sw = 1;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	73fb      	strb	r3, [r7, #15]
		}

		*buf = ConvC[ dt & 0x0f ];
 8001d32:	88fb      	ldrh	r3, [r7, #6]
 8001d34:	f003 030f 	and.w	r3, r3, #15
 8001d38:	4a07      	ldr	r2, [pc, #28]	; (8001d58 <my_putshex+0x16c>)
 8001d3a:	5cd2      	ldrb	r2, [r2, r3]
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	701a      	strb	r2, [r3, #0]
		buf ++;
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	3301      	adds	r3, #1
 8001d44:	603b      	str	r3, [r7, #0]


		break;
 8001d46:	bf00      	nop
	}
	return buf ;
 8001d48:	683b      	ldr	r3, [r7, #0]
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3714      	adds	r7, #20
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	0800caa8 	.word	0x0800caa8

08001d5c <Set_logflg>:
//=============================================================================
//
//
//=============================================================================
void Set_logflg(LOG_FLAG flg)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	71fb      	strb	r3, [r7, #7]

	if( flg < LF_MAX){
 8001d66:	79fb      	ldrb	r3, [r7, #7]
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d808      	bhi.n	8001d7e <Set_logflg+0x22>
		log.flg = flg;
 8001d6c:	4a06      	ldr	r2, [pc, #24]	; (8001d88 <Set_logflg+0x2c>)
 8001d6e:	79fb      	ldrb	r3, [r7, #7]
 8001d70:	7193      	strb	r3, [r2, #6]
		SKprintf("log.flg=%d \r\n",log.flg);
 8001d72:	4b05      	ldr	r3, [pc, #20]	; (8001d88 <Set_logflg+0x2c>)
 8001d74:	799b      	ldrb	r3, [r3, #6]
 8001d76:	4619      	mov	r1, r3
 8001d78:	4804      	ldr	r0, [pc, #16]	; (8001d8c <Set_logflg+0x30>)
 8001d7a:	f001 feb9 	bl	8003af0 <SKprintf>
	}
}
 8001d7e:	bf00      	nop
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	200001a0 	.word	0x200001a0
 8001d8c:	0800bdcc 	.word	0x0800bdcc

08001d90 <Set_logInfo>:
//=============================================================================
//
//
//=============================================================================
void Set_logInfo(char *string)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
//	RTC_TimeTypeDef sTime;
//	RTC_DateTypeDef sDate;
	TIMER_DATA time;

	int i;
	uint8_t	flg = 0;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	74fb      	strb	r3, [r7, #19]
	uint32_t dt;



	switch(log.flg){
 8001d9c:	4b5d      	ldr	r3, [pc, #372]	; (8001f14 <Set_logInfo+0x184>)
 8001d9e:	799b      	ldrb	r3, [r3, #6]
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d009      	beq.n	8001db8 <Set_logInfo+0x28>
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	dc0e      	bgt.n	8001dc6 <Set_logInfo+0x36>
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d00e      	beq.n	8001dca <Set_logInfo+0x3a>
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d000      	beq.n	8001db2 <Set_logInfo+0x22>
	case LF_MAX_DATA_STOP:
		if( log.num >= LOG_RECODE_MAX)
			flg = 1;
		break;
	default:
		break;
 8001db0:	e009      	b.n	8001dc6 <Set_logInfo+0x36>
		flg = 1;
 8001db2:	2301      	movs	r3, #1
 8001db4:	74fb      	strb	r3, [r7, #19]
		break;
 8001db6:	e00b      	b.n	8001dd0 <Set_logInfo+0x40>
		if( log.num >= LOG_RECODE_MAX)
 8001db8:	4b56      	ldr	r3, [pc, #344]	; (8001f14 <Set_logInfo+0x184>)
 8001dba:	889b      	ldrh	r3, [r3, #4]
 8001dbc:	2b63      	cmp	r3, #99	; 0x63
 8001dbe:	d906      	bls.n	8001dce <Set_logInfo+0x3e>
			flg = 1;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	74fb      	strb	r3, [r7, #19]
		break;
 8001dc4:	e003      	b.n	8001dce <Set_logInfo+0x3e>
		break;
 8001dc6:	bf00      	nop
 8001dc8:	e002      	b.n	8001dd0 <Set_logInfo+0x40>
		break;
 8001dca:	bf00      	nop
 8001dcc:	e000      	b.n	8001dd0 <Set_logInfo+0x40>
		break;
 8001dce:	bf00      	nop
	}


	if( flg == 0 ){
 8001dd0:	7cfb      	ldrb	r3, [r7, #19]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	f040 809a 	bne.w	8001f0c <Set_logInfo+0x17c>
		for(i=0; i<PRiNTF_BUFFMAX; i++){
 8001dd8:	2300      	movs	r3, #0
 8001dda:	617b      	str	r3, [r7, #20]
 8001ddc:	e01a      	b.n	8001e14 <Set_logInfo+0x84>
			log.rec[log.wptr].string[i] = string[i];
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	4413      	add	r3, r2
 8001de4:	4a4b      	ldr	r2, [pc, #300]	; (8001f14 <Set_logInfo+0x184>)
 8001de6:	8812      	ldrh	r2, [r2, #0]
 8001de8:	4611      	mov	r1, r2
 8001dea:	7818      	ldrb	r0, [r3, #0]
 8001dec:	4a49      	ldr	r2, [pc, #292]	; (8001f14 <Set_logInfo+0x184>)
 8001dee:	460b      	mov	r3, r1
 8001df0:	00db      	lsls	r3, r3, #3
 8001df2:	1a5b      	subs	r3, r3, r1
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	441a      	add	r2, r3
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	330e      	adds	r3, #14
 8001dfe:	4602      	mov	r2, r0
 8001e00:	701a      	strb	r2, [r3, #0]
			if(string[i] == '\0'){
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	4413      	add	r3, r2
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d006      	beq.n	8001e1c <Set_logInfo+0x8c>
		for(i=0; i<PRiNTF_BUFFMAX; i++){
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	3301      	adds	r3, #1
 8001e12:	617b      	str	r3, [r7, #20]
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	2b31      	cmp	r3, #49	; 0x31
 8001e18:	dde1      	ble.n	8001dde <Set_logInfo+0x4e>
 8001e1a:	e000      	b.n	8001e1e <Set_logInfo+0x8e>
				break;
 8001e1c:	bf00      	nop
			}
		}

//		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
//		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
		GetTime_tim1up(&time);
 8001e1e:	f107 0308 	add.w	r3, r7, #8
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff fdec 	bl	8001a00 <GetTime_tim1up>

		log.rec[log.wptr].Hours = time.hour;
 8001e28:	8a3a      	ldrh	r2, [r7, #16]
 8001e2a:	4b3a      	ldr	r3, [pc, #232]	; (8001f14 <Set_logInfo+0x184>)
 8001e2c:	881b      	ldrh	r3, [r3, #0]
 8001e2e:	4619      	mov	r1, r3
 8001e30:	b2d0      	uxtb	r0, r2
 8001e32:	4a38      	ldr	r2, [pc, #224]	; (8001f14 <Set_logInfo+0x184>)
 8001e34:	460b      	mov	r3, r1
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	1a5b      	subs	r3, r3, r1
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	4413      	add	r3, r2
 8001e3e:	3308      	adds	r3, #8
 8001e40:	4602      	mov	r2, r0
 8001e42:	701a      	strb	r2, [r3, #0]
		log.rec[log.wptr].Minutes = time.min;
 8001e44:	89fa      	ldrh	r2, [r7, #14]
 8001e46:	4b33      	ldr	r3, [pc, #204]	; (8001f14 <Set_logInfo+0x184>)
 8001e48:	881b      	ldrh	r3, [r3, #0]
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	b2d0      	uxtb	r0, r2
 8001e4e:	4a31      	ldr	r2, [pc, #196]	; (8001f14 <Set_logInfo+0x184>)
 8001e50:	460b      	mov	r3, r1
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	1a5b      	subs	r3, r3, r1
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	4413      	add	r3, r2
 8001e5a:	3309      	adds	r3, #9
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	701a      	strb	r2, [r3, #0]
		log.rec[log.wptr].Seconds = time.sec;
 8001e60:	89ba      	ldrh	r2, [r7, #12]
 8001e62:	4b2c      	ldr	r3, [pc, #176]	; (8001f14 <Set_logInfo+0x184>)
 8001e64:	881b      	ldrh	r3, [r3, #0]
 8001e66:	4619      	mov	r1, r3
 8001e68:	b2d0      	uxtb	r0, r2
 8001e6a:	4a2a      	ldr	r2, [pc, #168]	; (8001f14 <Set_logInfo+0x184>)
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	1a5b      	subs	r3, r3, r1
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	4413      	add	r3, r2
 8001e76:	330a      	adds	r3, #10
 8001e78:	4602      	mov	r2, r0
 8001e7a:	701a      	strb	r2, [r3, #0]
		log.rec[log.wptr].msec = time.msec;
 8001e7c:	4b25      	ldr	r3, [pc, #148]	; (8001f14 <Set_logInfo+0x184>)
 8001e7e:	881b      	ldrh	r3, [r3, #0]
 8001e80:	4619      	mov	r1, r3
 8001e82:	8978      	ldrh	r0, [r7, #10]
 8001e84:	4a23      	ldr	r2, [pc, #140]	; (8001f14 <Set_logInfo+0x184>)
 8001e86:	460b      	mov	r3, r1
 8001e88:	00db      	lsls	r3, r3, #3
 8001e8a:	1a5b      	subs	r3, r3, r1
 8001e8c:	00db      	lsls	r3, r3, #3
 8001e8e:	4413      	add	r3, r2
 8001e90:	330c      	adds	r3, #12
 8001e92:	4602      	mov	r2, r0
 8001e94:	801a      	strh	r2, [r3, #0]
		log.rec[log.wptr].usec = time.usec;
 8001e96:	893a      	ldrh	r2, [r7, #8]
 8001e98:	4b1e      	ldr	r3, [pc, #120]	; (8001f14 <Set_logInfo+0x184>)
 8001e9a:	881b      	ldrh	r3, [r3, #0]
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	b2d0      	uxtb	r0, r2
 8001ea0:	4a1c      	ldr	r2, [pc, #112]	; (8001f14 <Set_logInfo+0x184>)
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	00db      	lsls	r3, r3, #3
 8001ea6:	1a5b      	subs	r3, r3, r1
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	4413      	add	r3, r2
 8001eac:	330b      	adds	r3, #11
 8001eae:	4602      	mov	r2, r0
 8001eb0:	701a      	strb	r2, [r3, #0]

//		log.rec[log.wptr].dt = timer.dt;
//		log.rec[log.wptr].dt_av = timer.dt_av;


		log.num ++;
 8001eb2:	4b18      	ldr	r3, [pc, #96]	; (8001f14 <Set_logInfo+0x184>)
 8001eb4:	889b      	ldrh	r3, [r3, #4]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	4b16      	ldr	r3, [pc, #88]	; (8001f14 <Set_logInfo+0x184>)
 8001ebc:	809a      	strh	r2, [r3, #4]
		if( log.num > LOG_RECODE_MAX ){
 8001ebe:	4b15      	ldr	r3, [pc, #84]	; (8001f14 <Set_logInfo+0x184>)
 8001ec0:	889b      	ldrh	r3, [r3, #4]
 8001ec2:	2b64      	cmp	r3, #100	; 0x64
 8001ec4:	d902      	bls.n	8001ecc <Set_logInfo+0x13c>
			log.num = LOG_RECODE_MAX;
 8001ec6:	4b13      	ldr	r3, [pc, #76]	; (8001f14 <Set_logInfo+0x184>)
 8001ec8:	2264      	movs	r2, #100	; 0x64
 8001eca:	809a      	strh	r2, [r3, #4]
		}

		log.wptr ++;
 8001ecc:	4b11      	ldr	r3, [pc, #68]	; (8001f14 <Set_logInfo+0x184>)
 8001ece:	881b      	ldrh	r3, [r3, #0]
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	b29a      	uxth	r2, r3
 8001ed4:	4b0f      	ldr	r3, [pc, #60]	; (8001f14 <Set_logInfo+0x184>)
 8001ed6:	801a      	strh	r2, [r3, #0]
		if( log.wptr > LOG_RECODE_MAX ){
 8001ed8:	4b0e      	ldr	r3, [pc, #56]	; (8001f14 <Set_logInfo+0x184>)
 8001eda:	881b      	ldrh	r3, [r3, #0]
 8001edc:	2b64      	cmp	r3, #100	; 0x64
 8001ede:	d902      	bls.n	8001ee6 <Set_logInfo+0x156>
			log.wptr = 0;
 8001ee0:	4b0c      	ldr	r3, [pc, #48]	; (8001f14 <Set_logInfo+0x184>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	801a      	strh	r2, [r3, #0]
		}

		if( log.wptr == log.rptr ){
 8001ee6:	4b0b      	ldr	r3, [pc, #44]	; (8001f14 <Set_logInfo+0x184>)
 8001ee8:	881a      	ldrh	r2, [r3, #0]
 8001eea:	4b0a      	ldr	r3, [pc, #40]	; (8001f14 <Set_logInfo+0x184>)
 8001eec:	885b      	ldrh	r3, [r3, #2]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d10c      	bne.n	8001f0c <Set_logInfo+0x17c>
			log.rptr ++;
 8001ef2:	4b08      	ldr	r3, [pc, #32]	; (8001f14 <Set_logInfo+0x184>)
 8001ef4:	885b      	ldrh	r3, [r3, #2]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	b29a      	uxth	r2, r3
 8001efa:	4b06      	ldr	r3, [pc, #24]	; (8001f14 <Set_logInfo+0x184>)
 8001efc:	805a      	strh	r2, [r3, #2]
			if( log.rptr > LOG_RECODE_MAX ){
 8001efe:	4b05      	ldr	r3, [pc, #20]	; (8001f14 <Set_logInfo+0x184>)
 8001f00:	885b      	ldrh	r3, [r3, #2]
 8001f02:	2b64      	cmp	r3, #100	; 0x64
 8001f04:	d902      	bls.n	8001f0c <Set_logInfo+0x17c>
				log.rptr = 0;
 8001f06:	4b03      	ldr	r3, [pc, #12]	; (8001f14 <Set_logInfo+0x184>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	805a      	strh	r2, [r3, #2]
			}
		}
	}
}
 8001f0c:	bf00      	nop
 8001f0e:	3718      	adds	r7, #24
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	200001a0 	.word	0x200001a0

08001f18 <Set_logInfo2>:
//=============================================================================
//
//
//=============================================================================
void Set_logInfo2(const char *string, ...)
{
 8001f18:	b40f      	push	{r0, r1, r2, r3}
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b08e      	sub	sp, #56	; 0x38
 8001f1e:	af00      	add	r7, sp, #0
	TIMER_DATA time;

	va_list ap;
	int i;
	char *buffer, *temp;
	uint8_t	flg = 0;
 8001f20:	2300      	movs	r3, #0
 8001f22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint32_t uint32value;
    double  floatvalue;



	temp = buffer = (char *)pvPortMalloc(128);
 8001f26:	2080      	movs	r0, #128	; 0x80
 8001f28:	f008 fb56 	bl	800a5d8 <pvPortMalloc>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	633b      	str	r3, [r7, #48]	; 0x30
 8001f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
	//SKprintf("_logInfo2() 0001 temp= %p\r\n",temp);

	switch(log.flg){
 8001f34:	4b9d      	ldr	r3, [pc, #628]	; (80021ac <Set_logInfo2+0x294>)
 8001f36:	799b      	ldrb	r3, [r3, #6]
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d00a      	beq.n	8001f52 <Set_logInfo2+0x3a>
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	dc0a      	bgt.n	8001f56 <Set_logInfo2+0x3e>
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d00a      	beq.n	8001f5a <Set_logInfo2+0x42>
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d000      	beq.n	8001f4a <Set_logInfo2+0x32>
	case LF_MAX_DATA_STOP:
		//if( log.num >= LOG_RECODE_MAX)
		//	flg = 1;
		break;
	default:
		break;
 8001f48:	e005      	b.n	8001f56 <Set_logInfo2+0x3e>
		flg = 1;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8001f50:	e004      	b.n	8001f5c <Set_logInfo2+0x44>
		break;
 8001f52:	bf00      	nop
 8001f54:	e002      	b.n	8001f5c <Set_logInfo2+0x44>
		break;
 8001f56:	bf00      	nop
 8001f58:	e000      	b.n	8001f5c <Set_logInfo2+0x44>
		break;
 8001f5a:	bf00      	nop
	}

	if( flg == 0 ){
 8001f5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f040 8118 	bne.w	8002196 <Set_logInfo2+0x27e>
		va_start(ap, string);
 8001f66:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f6a:	603b      	str	r3, [r7, #0]
//		vsprintf(buffer, string, ap);

		i = 0;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	637b      	str	r3, [r7, #52]	; 0x34
	    while (*string != '\0') {
 8001f70:	e071      	b.n	8002056 <Set_logInfo2+0x13e>
	    	//*buffer = *string;
	    	//buffer ++;

	        if (*string == '%') {
 8001f72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	2b25      	cmp	r3, #37	; 0x25
 8001f78:	d163      	bne.n	8002042 <Set_logInfo2+0x12a>
	            string++; // Move past '%'
 8001f7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	643b      	str	r3, [r7, #64]	; 0x40
	            if (*string == 'd') {
 8001f80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	2b64      	cmp	r3, #100	; 0x64
 8001f86:	d10a      	bne.n	8001f9e <Set_logInfo2+0x86>
	            	intvalue = va_arg(ap, int);
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	1d1a      	adds	r2, r3, #4
 8001f8c:	603a      	str	r2, [r7, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	62bb      	str	r3, [r7, #40]	; 0x28

	                buffer = my_putint(intvalue, buffer);
 8001f92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001f96:	f7ff fd49 	bl	8001a2c <my_putint>
 8001f9a:	6338      	str	r0, [r7, #48]	; 0x30
 8001f9c:	e058      	b.n	8002050 <Set_logInfo2+0x138>
	                buffer = my_putfloat(floatvalue, 2, buffer );
	                SKprintf("val =%s\r\n",temp);

	            }
#endif
	            else if (*string == 'f') {
 8001f9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	2b66      	cmp	r3, #102	; 0x66
 8001fa4:	d120      	bne.n	8001fe8 <Set_logInfo2+0xd0>
	            	SKprintf("_logInfo2() 0002 val =%d\r\n",intvalue);
 8001fa6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001fa8:	4881      	ldr	r0, [pc, #516]	; (80021b0 <Set_logInfo2+0x298>)
 8001faa:	f001 fda1 	bl	8003af0 <SKprintf>
	            	floatvalue = va_arg(ap, double);
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	3307      	adds	r3, #7
 8001fb2:	f023 0307 	bic.w	r3, r3, #7
 8001fb6:	f103 0208 	add.w	r2, r3, #8
 8001fba:	603a      	str	r2, [r7, #0]
 8001fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc0:	e9c7 2304 	strd	r2, r3, [r7, #16]
	            	SKprintf("_logInfo2() 0002 val =%g\r\n",floatvalue);
 8001fc4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001fc8:	487a      	ldr	r0, [pc, #488]	; (80021b4 <Set_logInfo2+0x29c>)
 8001fca:	f001 fd91 	bl	8003af0 <SKprintf>
	            	SKprintf("_logInfo2() 0010 val =%f\r\n",floatvalue);
 8001fce:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001fd2:	4879      	ldr	r0, [pc, #484]	; (80021b8 <Set_logInfo2+0x2a0>)
 8001fd4:	f001 fd8c 	bl	8003af0 <SKprintf>
	                buffer = my_putfloat(floatvalue, 2, buffer );
 8001fd8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001fda:	2002      	movs	r0, #2
 8001fdc:	ed97 0b04 	vldr	d0, [r7, #16]
 8001fe0:	f7ff fd60 	bl	8001aa4 <my_putfloat>
 8001fe4:	6338      	str	r0, [r7, #48]	; 0x30
 8001fe6:	e033      	b.n	8002050 <Set_logInfo2+0x138>

	            //else if (*string == 'c') {
	            //    int value = va_arg(ap, int);
	            //    buffer = my_putchar(value, buffer );
	            //}
	            else if (*string == 's') {
 8001fe8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	2b73      	cmp	r3, #115	; 0x73
 8001fee:	d10a      	bne.n	8002006 <Set_logInfo2+0xee>
	            	charvalue = va_arg(ap, char*);
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	1d1a      	adds	r2, r3, #4
 8001ff4:	603a      	str	r2, [r7, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	61fb      	str	r3, [r7, #28]
	            	//SKprintf("_logInfo2() 0003 val =%s\r\n",charvalue);
	                buffer = my_puts(charvalue, buffer );
 8001ffa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001ffc:	69f8      	ldr	r0, [r7, #28]
 8001ffe:	f7ff fdd6 	bl	8001bae <my_puts>
 8002002:	6338      	str	r0, [r7, #48]	; 0x30
 8002004:	e024      	b.n	8002050 <Set_logInfo2+0x138>
	            } else if (*string == 'x') {
 8002006:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	2b78      	cmp	r3, #120	; 0x78
 800200c:	d10c      	bne.n	8002028 <Set_logInfo2+0x110>
	            	uintvalue = (uint16_t)va_arg(ap, int);
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	1d1a      	adds	r2, r3, #4
 8002012:	603a      	str	r2, [r7, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	847b      	strh	r3, [r7, #34]	; 0x22
	            	//SKprintf("_logInfo2() 0004 val =%x\r\n",uintvalue);
	                buffer = my_putshex(uintvalue, 0, buffer );
 8002018:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800201a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800201c:	2100      	movs	r1, #0
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff fde4 	bl	8001bec <my_putshex>
 8002024:	6338      	str	r0, [r7, #48]	; 0x30
 8002026:	e013      	b.n	8002050 <Set_logInfo2+0x138>
	            } else {
	                buffer = my_puts('%', buffer );
 8002028:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800202a:	2025      	movs	r0, #37	; 0x25
 800202c:	f7ff fdbf 	bl	8001bae <my_puts>
 8002030:	6338      	str	r0, [r7, #48]	; 0x30
	                buffer = my_puts(*string, buffer );
 8002032:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff fdb8 	bl	8001bae <my_puts>
 800203e:	6338      	str	r0, [r7, #48]	; 0x30
 8002040:	e006      	b.n	8002050 <Set_logInfo2+0x138>
	            }
	        }
	        else {
	            buffer = my_putchar(*string, buffer );
 8002042:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff fd9d 	bl	8001b88 <my_putchar>
 800204e:	6338      	str	r0, [r7, #48]	; 0x30

//	        	buffer = my_puts(*string, buffer );
	        }
	        string++;
 8002050:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002052:	3301      	adds	r3, #1
 8002054:	643b      	str	r3, [r7, #64]	; 0x40
	    while (*string != '\0') {
 8002056:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d189      	bne.n	8001f72 <Set_logInfo2+0x5a>
	    	//buffer++;
	    }

		*buffer = '\0';
 800205e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002060:	2200      	movs	r2, #0
 8002062:	701a      	strb	r2, [r3, #0]
    	//SKprintf("_logInfo2() 0005\r\n");


		va_end(ap);

		for(i=0; i<PRiNTF_BUFFMAX; i++){
 8002064:	2300      	movs	r3, #0
 8002066:	637b      	str	r3, [r7, #52]	; 0x34
 8002068:	e01a      	b.n	80020a0 <Set_logInfo2+0x188>
			log.rec[log.wptr].string[i] = temp[i];
 800206a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800206c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800206e:	4413      	add	r3, r2
 8002070:	4a4e      	ldr	r2, [pc, #312]	; (80021ac <Set_logInfo2+0x294>)
 8002072:	8812      	ldrh	r2, [r2, #0]
 8002074:	4611      	mov	r1, r2
 8002076:	7818      	ldrb	r0, [r3, #0]
 8002078:	4a4c      	ldr	r2, [pc, #304]	; (80021ac <Set_logInfo2+0x294>)
 800207a:	460b      	mov	r3, r1
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	1a5b      	subs	r3, r3, r1
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	441a      	add	r2, r3
 8002084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002086:	4413      	add	r3, r2
 8002088:	330e      	adds	r3, #14
 800208a:	4602      	mov	r2, r0
 800208c:	701a      	strb	r2, [r3, #0]
			if(temp[i] == '\0'){
 800208e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002092:	4413      	add	r3, r2
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d006      	beq.n	80020a8 <Set_logInfo2+0x190>
		for(i=0; i<PRiNTF_BUFFMAX; i++){
 800209a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800209c:	3301      	adds	r3, #1
 800209e:	637b      	str	r3, [r7, #52]	; 0x34
 80020a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020a2:	2b31      	cmp	r3, #49	; 0x31
 80020a4:	dde1      	ble.n	800206a <Set_logInfo2+0x152>
 80020a6:	e000      	b.n	80020aa <Set_logInfo2+0x192>
				break;
 80020a8:	bf00      	nop
		}

		//SKprintf("CC %s\r\n", &log.rec[log.wptr].string[0]);

//		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
		GetTime_tim1up(&time);
 80020aa:	1d3b      	adds	r3, r7, #4
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7ff fca7 	bl	8001a00 <GetTime_tim1up>

		log.rec[log.wptr].Hours = time.hour;
 80020b2:	89ba      	ldrh	r2, [r7, #12]
 80020b4:	4b3d      	ldr	r3, [pc, #244]	; (80021ac <Set_logInfo2+0x294>)
 80020b6:	881b      	ldrh	r3, [r3, #0]
 80020b8:	4619      	mov	r1, r3
 80020ba:	b2d0      	uxtb	r0, r2
 80020bc:	4a3b      	ldr	r2, [pc, #236]	; (80021ac <Set_logInfo2+0x294>)
 80020be:	460b      	mov	r3, r1
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	1a5b      	subs	r3, r3, r1
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	4413      	add	r3, r2
 80020c8:	3308      	adds	r3, #8
 80020ca:	4602      	mov	r2, r0
 80020cc:	701a      	strb	r2, [r3, #0]
		log.rec[log.wptr].Minutes = time.min;
 80020ce:	897a      	ldrh	r2, [r7, #10]
 80020d0:	4b36      	ldr	r3, [pc, #216]	; (80021ac <Set_logInfo2+0x294>)
 80020d2:	881b      	ldrh	r3, [r3, #0]
 80020d4:	4619      	mov	r1, r3
 80020d6:	b2d0      	uxtb	r0, r2
 80020d8:	4a34      	ldr	r2, [pc, #208]	; (80021ac <Set_logInfo2+0x294>)
 80020da:	460b      	mov	r3, r1
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	1a5b      	subs	r3, r3, r1
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	4413      	add	r3, r2
 80020e4:	3309      	adds	r3, #9
 80020e6:	4602      	mov	r2, r0
 80020e8:	701a      	strb	r2, [r3, #0]
		log.rec[log.wptr].Seconds = time.sec;
 80020ea:	893a      	ldrh	r2, [r7, #8]
 80020ec:	4b2f      	ldr	r3, [pc, #188]	; (80021ac <Set_logInfo2+0x294>)
 80020ee:	881b      	ldrh	r3, [r3, #0]
 80020f0:	4619      	mov	r1, r3
 80020f2:	b2d0      	uxtb	r0, r2
 80020f4:	4a2d      	ldr	r2, [pc, #180]	; (80021ac <Set_logInfo2+0x294>)
 80020f6:	460b      	mov	r3, r1
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	1a5b      	subs	r3, r3, r1
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	4413      	add	r3, r2
 8002100:	330a      	adds	r3, #10
 8002102:	4602      	mov	r2, r0
 8002104:	701a      	strb	r2, [r3, #0]
		log.rec[log.wptr].msec = time.msec;
 8002106:	4b29      	ldr	r3, [pc, #164]	; (80021ac <Set_logInfo2+0x294>)
 8002108:	881b      	ldrh	r3, [r3, #0]
 800210a:	4619      	mov	r1, r3
 800210c:	88f8      	ldrh	r0, [r7, #6]
 800210e:	4a27      	ldr	r2, [pc, #156]	; (80021ac <Set_logInfo2+0x294>)
 8002110:	460b      	mov	r3, r1
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	1a5b      	subs	r3, r3, r1
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	4413      	add	r3, r2
 800211a:	330c      	adds	r3, #12
 800211c:	4602      	mov	r2, r0
 800211e:	801a      	strh	r2, [r3, #0]
		log.rec[log.wptr].usec = time.usec;
 8002120:	88ba      	ldrh	r2, [r7, #4]
 8002122:	4b22      	ldr	r3, [pc, #136]	; (80021ac <Set_logInfo2+0x294>)
 8002124:	881b      	ldrh	r3, [r3, #0]
 8002126:	4619      	mov	r1, r3
 8002128:	b2d0      	uxtb	r0, r2
 800212a:	4a20      	ldr	r2, [pc, #128]	; (80021ac <Set_logInfo2+0x294>)
 800212c:	460b      	mov	r3, r1
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	1a5b      	subs	r3, r3, r1
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	4413      	add	r3, r2
 8002136:	330b      	adds	r3, #11
 8002138:	4602      	mov	r2, r0
 800213a:	701a      	strb	r2, [r3, #0]


		log.num ++;
 800213c:	4b1b      	ldr	r3, [pc, #108]	; (80021ac <Set_logInfo2+0x294>)
 800213e:	889b      	ldrh	r3, [r3, #4]
 8002140:	3301      	adds	r3, #1
 8002142:	b29a      	uxth	r2, r3
 8002144:	4b19      	ldr	r3, [pc, #100]	; (80021ac <Set_logInfo2+0x294>)
 8002146:	809a      	strh	r2, [r3, #4]
		if( log.num > LOG_RECODE_MAX ){
 8002148:	4b18      	ldr	r3, [pc, #96]	; (80021ac <Set_logInfo2+0x294>)
 800214a:	889b      	ldrh	r3, [r3, #4]
 800214c:	2b64      	cmp	r3, #100	; 0x64
 800214e:	d902      	bls.n	8002156 <Set_logInfo2+0x23e>
			log.num = LOG_RECODE_MAX;
 8002150:	4b16      	ldr	r3, [pc, #88]	; (80021ac <Set_logInfo2+0x294>)
 8002152:	2264      	movs	r2, #100	; 0x64
 8002154:	809a      	strh	r2, [r3, #4]
		}

		log.wptr ++;
 8002156:	4b15      	ldr	r3, [pc, #84]	; (80021ac <Set_logInfo2+0x294>)
 8002158:	881b      	ldrh	r3, [r3, #0]
 800215a:	3301      	adds	r3, #1
 800215c:	b29a      	uxth	r2, r3
 800215e:	4b13      	ldr	r3, [pc, #76]	; (80021ac <Set_logInfo2+0x294>)
 8002160:	801a      	strh	r2, [r3, #0]
		if( log.wptr > LOG_RECODE_MAX ){
 8002162:	4b12      	ldr	r3, [pc, #72]	; (80021ac <Set_logInfo2+0x294>)
 8002164:	881b      	ldrh	r3, [r3, #0]
 8002166:	2b64      	cmp	r3, #100	; 0x64
 8002168:	d902      	bls.n	8002170 <Set_logInfo2+0x258>
			log.wptr = 0;
 800216a:	4b10      	ldr	r3, [pc, #64]	; (80021ac <Set_logInfo2+0x294>)
 800216c:	2200      	movs	r2, #0
 800216e:	801a      	strh	r2, [r3, #0]
		}

		if( log.wptr == log.rptr ){
 8002170:	4b0e      	ldr	r3, [pc, #56]	; (80021ac <Set_logInfo2+0x294>)
 8002172:	881a      	ldrh	r2, [r3, #0]
 8002174:	4b0d      	ldr	r3, [pc, #52]	; (80021ac <Set_logInfo2+0x294>)
 8002176:	885b      	ldrh	r3, [r3, #2]
 8002178:	429a      	cmp	r2, r3
 800217a:	d10c      	bne.n	8002196 <Set_logInfo2+0x27e>
			log.rptr ++;
 800217c:	4b0b      	ldr	r3, [pc, #44]	; (80021ac <Set_logInfo2+0x294>)
 800217e:	885b      	ldrh	r3, [r3, #2]
 8002180:	3301      	adds	r3, #1
 8002182:	b29a      	uxth	r2, r3
 8002184:	4b09      	ldr	r3, [pc, #36]	; (80021ac <Set_logInfo2+0x294>)
 8002186:	805a      	strh	r2, [r3, #2]
			if( log.rptr > LOG_RECODE_MAX ){
 8002188:	4b08      	ldr	r3, [pc, #32]	; (80021ac <Set_logInfo2+0x294>)
 800218a:	885b      	ldrh	r3, [r3, #2]
 800218c:	2b64      	cmp	r3, #100	; 0x64
 800218e:	d902      	bls.n	8002196 <Set_logInfo2+0x27e>
				log.rptr = 0;
 8002190:	4b06      	ldr	r3, [pc, #24]	; (80021ac <Set_logInfo2+0x294>)
 8002192:	2200      	movs	r2, #0
 8002194:	805a      	strh	r2, [r3, #2]
			}
		}
	}
	//SKprintf("_logInfo2() 0006 temp= %p\r\n",temp);
	vPortFree(temp);
 8002196:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002198:	f008 faea 	bl	800a770 <vPortFree>
}
 800219c:	bf00      	nop
 800219e:	3738      	adds	r7, #56	; 0x38
 80021a0:	46bd      	mov	sp, r7
 80021a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80021a6:	b004      	add	sp, #16
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	200001a0 	.word	0x200001a0
 80021b0:	0800bddc 	.word	0x0800bddc
 80021b4:	0800bdf8 	.word	0x0800bdf8
 80021b8:	0800be14 	.word	0x0800be14

080021bc <LogInfo_display>:
//=============================================================================
//
//
//=============================================================================
void LogInfo_display(void)
{
 80021bc:	b590      	push	{r4, r7, lr}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
	uint16_t	i;
	uint16_t	rptr = log.rptr;
 80021c2:	4b38      	ldr	r3, [pc, #224]	; (80022a4 <LogInfo_display+0xe8>)
 80021c4:	885b      	ldrh	r3, [r3, #2]
 80021c6:	80bb      	strh	r3, [r7, #4]

	SKprintf("LogInfo_display()\r\n");
 80021c8:	4837      	ldr	r0, [pc, #220]	; (80022a8 <LogInfo_display+0xec>)
 80021ca:	f001 fc91 	bl	8003af0 <SKprintf>
	if( log.num != 0 ){
 80021ce:	4b35      	ldr	r3, [pc, #212]	; (80022a4 <LogInfo_display+0xe8>)
 80021d0:	889b      	ldrh	r3, [r3, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d05d      	beq.n	8002292 <LogInfo_display+0xd6>
		for(i=0; i<LOG_RECODE_MAX; i++){
 80021d6:	2300      	movs	r3, #0
 80021d8:	80fb      	strh	r3, [r7, #6]
 80021da:	e056      	b.n	800228a <LogInfo_display+0xce>
			SKprintf("%02d:%02d:%02d.", log.rec[rptr].Hours, log.rec[rptr].Minutes, log.rec[rptr].Seconds);
 80021dc:	88ba      	ldrh	r2, [r7, #4]
 80021de:	4931      	ldr	r1, [pc, #196]	; (80022a4 <LogInfo_display+0xe8>)
 80021e0:	4613      	mov	r3, r2
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	1a9b      	subs	r3, r3, r2
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	440b      	add	r3, r1
 80021ea:	3308      	adds	r3, #8
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	88ba      	ldrh	r2, [r7, #4]
 80021f2:	492c      	ldr	r1, [pc, #176]	; (80022a4 <LogInfo_display+0xe8>)
 80021f4:	4613      	mov	r3, r2
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	1a9b      	subs	r3, r3, r2
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	440b      	add	r3, r1
 80021fe:	3309      	adds	r3, #9
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	461c      	mov	r4, r3
 8002204:	88ba      	ldrh	r2, [r7, #4]
 8002206:	4927      	ldr	r1, [pc, #156]	; (80022a4 <LogInfo_display+0xe8>)
 8002208:	4613      	mov	r3, r2
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	1a9b      	subs	r3, r3, r2
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	440b      	add	r3, r1
 8002212:	330a      	adds	r3, #10
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	4622      	mov	r2, r4
 8002218:	4601      	mov	r1, r0
 800221a:	4824      	ldr	r0, [pc, #144]	; (80022ac <LogInfo_display+0xf0>)
 800221c:	f001 fc68 	bl	8003af0 <SKprintf>

			SKprintf("%03d %02d0 ", log.rec[rptr].msec, log.rec[rptr].usec);
 8002220:	88ba      	ldrh	r2, [r7, #4]
 8002222:	4920      	ldr	r1, [pc, #128]	; (80022a4 <LogInfo_display+0xe8>)
 8002224:	4613      	mov	r3, r2
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	1a9b      	subs	r3, r3, r2
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	440b      	add	r3, r1
 800222e:	330c      	adds	r3, #12
 8002230:	881b      	ldrh	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	88ba      	ldrh	r2, [r7, #4]
 8002236:	491b      	ldr	r1, [pc, #108]	; (80022a4 <LogInfo_display+0xe8>)
 8002238:	4613      	mov	r3, r2
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	1a9b      	subs	r3, r3, r2
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	440b      	add	r3, r1
 8002242:	330b      	adds	r3, #11
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	461a      	mov	r2, r3
 8002248:	4601      	mov	r1, r0
 800224a:	4819      	ldr	r0, [pc, #100]	; (80022b0 <LogInfo_display+0xf4>)
 800224c:	f001 fc50 	bl	8003af0 <SKprintf>

			SKprintf("%s\r\n", &log.rec[rptr].string[0]);
 8002250:	88ba      	ldrh	r2, [r7, #4]
 8002252:	4613      	mov	r3, r2
 8002254:	00db      	lsls	r3, r3, #3
 8002256:	1a9b      	subs	r3, r3, r2
 8002258:	00db      	lsls	r3, r3, #3
 800225a:	3308      	adds	r3, #8
 800225c:	4a11      	ldr	r2, [pc, #68]	; (80022a4 <LogInfo_display+0xe8>)
 800225e:	4413      	add	r3, r2
 8002260:	3306      	adds	r3, #6
 8002262:	4619      	mov	r1, r3
 8002264:	4813      	ldr	r0, [pc, #76]	; (80022b4 <LogInfo_display+0xf8>)
 8002266:	f001 fc43 	bl	8003af0 <SKprintf>

			rptr ++;
 800226a:	88bb      	ldrh	r3, [r7, #4]
 800226c:	3301      	adds	r3, #1
 800226e:	80bb      	strh	r3, [r7, #4]
			if( rptr > LOG_RECODE_MAX ){
 8002270:	88bb      	ldrh	r3, [r7, #4]
 8002272:	2b64      	cmp	r3, #100	; 0x64
 8002274:	d901      	bls.n	800227a <LogInfo_display+0xbe>
				rptr = 0;
 8002276:	2300      	movs	r3, #0
 8002278:	80bb      	strh	r3, [r7, #4]
			}
			if( log.wptr == rptr ){
 800227a:	4b0a      	ldr	r3, [pc, #40]	; (80022a4 <LogInfo_display+0xe8>)
 800227c:	881b      	ldrh	r3, [r3, #0]
 800227e:	88ba      	ldrh	r2, [r7, #4]
 8002280:	429a      	cmp	r2, r3
 8002282:	d00a      	beq.n	800229a <LogInfo_display+0xde>
		for(i=0; i<LOG_RECODE_MAX; i++){
 8002284:	88fb      	ldrh	r3, [r7, #6]
 8002286:	3301      	adds	r3, #1
 8002288:	80fb      	strh	r3, [r7, #6]
 800228a:	88fb      	ldrh	r3, [r7, #6]
 800228c:	2b63      	cmp	r3, #99	; 0x63
 800228e:	d9a5      	bls.n	80021dc <LogInfo_display+0x20>
		}
	}
	else{
		SKprintf("LOG NONE\r\n");
	}
}
 8002290:	e004      	b.n	800229c <LogInfo_display+0xe0>
		SKprintf("LOG NONE\r\n");
 8002292:	4809      	ldr	r0, [pc, #36]	; (80022b8 <LogInfo_display+0xfc>)
 8002294:	f001 fc2c 	bl	8003af0 <SKprintf>
}
 8002298:	e000      	b.n	800229c <LogInfo_display+0xe0>
				break;
 800229a:	bf00      	nop
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd90      	pop	{r4, r7, pc}
 80022a4:	200001a0 	.word	0x200001a0
 80022a8:	0800be30 	.word	0x0800be30
 80022ac:	0800be44 	.word	0x0800be44
 80022b0:	0800be54 	.word	0x0800be54
 80022b4:	0800be60 	.word	0x0800be60
 80022b8:	0800be68 	.word	0x0800be68

080022bc <LogInfo_clear>:
//=============================================================================
//
//
//=============================================================================
void LogInfo_clear(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0

	log.rptr = 0;
 80022c0:	4b06      	ldr	r3, [pc, #24]	; (80022dc <LogInfo_clear+0x20>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	805a      	strh	r2, [r3, #2]
	log.wptr = 0;
 80022c6:	4b05      	ldr	r3, [pc, #20]	; (80022dc <LogInfo_clear+0x20>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	801a      	strh	r2, [r3, #0]
	log.num = 0;
 80022cc:	4b03      	ldr	r3, [pc, #12]	; (80022dc <LogInfo_clear+0x20>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	809a      	strh	r2, [r3, #4]

	SKprintf("LOG CLEAR \r\n");
 80022d2:	4803      	ldr	r0, [pc, #12]	; (80022e0 <LogInfo_clear+0x24>)
 80022d4:	f001 fc0c 	bl	8003af0 <SKprintf>
}
 80022d8:	bf00      	nop
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	200001a0 	.word	0x200001a0
 80022e0:	0800be74 	.word	0x0800be74

080022e4 <GetMessageQue>:

//==============================================================================
//
//==============================================================================
osMessageQueueId_t GetMessageQue(SK_TASK task)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	71fb      	strb	r3, [r7, #7]
	osMessageQueueId_t 	handle;

	switch(task){
 80022ee:	79fb      	ldrb	r3, [r7, #7]
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d00e      	beq.n	8002312 <GetMessageQue+0x2e>
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	dc10      	bgt.n	800231a <GetMessageQue+0x36>
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d002      	beq.n	8002302 <GetMessageQue+0x1e>
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d004      	beq.n	800230a <GetMessageQue+0x26>
 8002300:	e00b      	b.n	800231a <GetMessageQue+0x36>
	case SK_TASK_main:
		handle = myQueue01Handle;
 8002302:	4b09      	ldr	r3, [pc, #36]	; (8002328 <GetMessageQue+0x44>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	60fb      	str	r3, [r7, #12]
		break;
 8002308:	e007      	b.n	800231a <GetMessageQue+0x36>
	case SK_TASK_sub1:
		handle = myQueue02Handle;
 800230a:	4b08      	ldr	r3, [pc, #32]	; (800232c <GetMessageQue+0x48>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	60fb      	str	r3, [r7, #12]
		break;
 8002310:	e003      	b.n	800231a <GetMessageQue+0x36>
	case SK_TASK_sub2:
		handle = myQueue03Handle;
 8002312:	4b07      	ldr	r3, [pc, #28]	; (8002330 <GetMessageQue+0x4c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	60fb      	str	r3, [r7, #12]
		break;
 8002318:	bf00      	nop
	}

	return handle;
 800231a:	68fb      	ldr	r3, [r7, #12]
}
 800231c:	4618      	mov	r0, r3
 800231e:	3714      	adds	r7, #20
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr
 8002328:	20001bac 	.word	0x20001bac
 800232c:	20001bb0 	.word	0x20001bb0
 8002330:	20001bb4 	.word	0x20001bb4

08002334 <task_chk_init>:

//==============================================================================
//
//==============================================================================
void task_chk_init(void)
{
 8002334:	b590      	push	{r4, r7, lr}
 8002336:	b087      	sub	sp, #28
 8002338:	af00      	add	r7, sp, #0
	uint32_t 			*dtp;
	int		i;
	int		j;


	SKprintf("task_chk_init()\r\n");
 800233a:	4864      	ldr	r0, [pc, #400]	; (80024cc <task_chk_init+0x198>)
 800233c:	f001 fbd8 	bl	8003af0 <SKprintf>

	for( i=0; i < SK_TASK_MAX; i++ ){
 8002340:	2300      	movs	r3, #0
 8002342:	60fb      	str	r3, [r7, #12]
 8002344:	e0b8      	b.n	80024b8 <task_chk_init+0x184>
		switch(i){
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2b02      	cmp	r3, #2
 800234a:	d013      	beq.n	8002374 <task_chk_init+0x40>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2b02      	cmp	r3, #2
 8002350:	dc15      	bgt.n	800237e <task_chk_init+0x4a>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d003      	beq.n	8002360 <task_chk_init+0x2c>
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2b01      	cmp	r3, #1
 800235c:	d005      	beq.n	800236a <task_chk_init+0x36>
 800235e:	e00e      	b.n	800237e <task_chk_init+0x4a>
		case SK_TASK_main:
			dtp = &Task_mainHandle;
 8002360:	4b5b      	ldr	r3, [pc, #364]	; (80024d0 <task_chk_init+0x19c>)
 8002362:	613b      	str	r3, [r7, #16]
			attr = &Task_main_attributes;
 8002364:	4b5b      	ldr	r3, [pc, #364]	; (80024d4 <task_chk_init+0x1a0>)
 8002366:	617b      	str	r3, [r7, #20]
			break;
 8002368:	e00d      	b.n	8002386 <task_chk_init+0x52>
		case SK_TASK_sub1:
			dtp = &Task_sub1Handle;
 800236a:	4b5b      	ldr	r3, [pc, #364]	; (80024d8 <task_chk_init+0x1a4>)
 800236c:	613b      	str	r3, [r7, #16]
			attr = &Task_sub1_attributes;
 800236e:	4b5b      	ldr	r3, [pc, #364]	; (80024dc <task_chk_init+0x1a8>)
 8002370:	617b      	str	r3, [r7, #20]
			break;
 8002372:	e008      	b.n	8002386 <task_chk_init+0x52>
		case SK_TASK_sub2:
			dtp = &Task_sub2Handle;
 8002374:	4b5a      	ldr	r3, [pc, #360]	; (80024e0 <task_chk_init+0x1ac>)
 8002376:	613b      	str	r3, [r7, #16]
			attr = &Task_sub2_attributes;
 8002378:	4b5a      	ldr	r3, [pc, #360]	; (80024e4 <task_chk_init+0x1b0>)
 800237a:	617b      	str	r3, [r7, #20]
			break;
 800237c:	e003      	b.n	8002386 <task_chk_init+0x52>
		default:
			SKprintf("Error taskid\r\n");
 800237e:	485a      	ldr	r0, [pc, #360]	; (80024e8 <task_chk_init+0x1b4>)
 8002380:	f001 fbb6 	bl	8003af0 <SKprintf>
			break;
 8002384:	bf00      	nop
		}
		hTask = (TaskHandle_t *)*dtp;
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	607b      	str	r3, [r7, #4]

		for( j=0; j < configMAX_TASK_NAME_LEN; j++ ){
 800238c:	2300      	movs	r3, #0
 800238e:	60bb      	str	r3, [r7, #8]
 8002390:	e012      	b.n	80023b8 <task_chk_init+0x84>
			task_chk_table[i].name[j] = hTask->pcTaskName[j];
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	4413      	add	r3, r2
 8002398:	3334      	adds	r3, #52	; 0x34
 800239a:	7818      	ldrb	r0, [r3, #0]
 800239c:	4953      	ldr	r1, [pc, #332]	; (80024ec <task_chk_init+0x1b8>)
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	4613      	mov	r3, r2
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	4413      	add	r3, r2
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	18ca      	adds	r2, r1, r3
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	4413      	add	r3, r2
 80023ae:	4602      	mov	r2, r0
 80023b0:	701a      	strb	r2, [r3, #0]
		for( j=0; j < configMAX_TASK_NAME_LEN; j++ ){
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	3301      	adds	r3, #1
 80023b6:	60bb      	str	r3, [r7, #8]
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	2b0f      	cmp	r3, #15
 80023bc:	dde9      	ble.n	8002392 <task_chk_init+0x5e>
		}
		task_chk_table[i].name[j-1] = '\0';
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	1e59      	subs	r1, r3, #1
 80023c2:	484a      	ldr	r0, [pc, #296]	; (80024ec <task_chk_init+0x1b8>)
 80023c4:	68fa      	ldr	r2, [r7, #12]
 80023c6:	4613      	mov	r3, r2
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	4413      	add	r3, r2
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	4403      	add	r3, r0
 80023d0:	440b      	add	r3, r1
 80023d2:	2200      	movs	r2, #0
 80023d4:	701a      	strb	r2, [r3, #0]

		task_chk_table[i].chk_stack = hTask->pxStack;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023da:	4844      	ldr	r0, [pc, #272]	; (80024ec <task_chk_init+0x1b8>)
 80023dc:	68fa      	ldr	r2, [r7, #12]
 80023de:	4613      	mov	r3, r2
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	4413      	add	r3, r2
 80023e4:	00db      	lsls	r3, r3, #3
 80023e6:	4403      	add	r3, r0
 80023e8:	3310      	adds	r3, #16
 80023ea:	6019      	str	r1, [r3, #0]
		task_chk_table[i].size = attr->stack_size;
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	695b      	ldr	r3, [r3, #20]
 80023f0:	b298      	uxth	r0, r3
 80023f2:	493e      	ldr	r1, [pc, #248]	; (80024ec <task_chk_init+0x1b8>)
 80023f4:	68fa      	ldr	r2, [r7, #12]
 80023f6:	4613      	mov	r3, r2
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	4413      	add	r3, r2
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	440b      	add	r3, r1
 8002400:	3314      	adds	r3, #20
 8002402:	4602      	mov	r2, r0
 8002404:	801a      	strh	r2, [r3, #0]
		task_chk_table[i].used = 0;
 8002406:	4939      	ldr	r1, [pc, #228]	; (80024ec <task_chk_init+0x1b8>)
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	4613      	mov	r3, r2
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	4413      	add	r3, r2
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	440b      	add	r3, r1
 8002414:	3316      	adds	r3, #22
 8002416:	2200      	movs	r2, #0
 8002418:	801a      	strh	r2, [r3, #0]

		SKprintf(" %s\r\n", &task_chk_table[i].name[0]);
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	4613      	mov	r3, r2
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	4413      	add	r3, r2
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	4a31      	ldr	r2, [pc, #196]	; (80024ec <task_chk_init+0x1b8>)
 8002426:	4413      	add	r3, r2
 8002428:	4619      	mov	r1, r3
 800242a:	4831      	ldr	r0, [pc, #196]	; (80024f0 <task_chk_init+0x1bc>)
 800242c:	f001 fb60 	bl	8003af0 <SKprintf>
		SKprintf("  Check Start Address = %p\r\n", task_chk_table[i].chk_stack);
 8002430:	492e      	ldr	r1, [pc, #184]	; (80024ec <task_chk_init+0x1b8>)
 8002432:	68fa      	ldr	r2, [r7, #12]
 8002434:	4613      	mov	r3, r2
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	4413      	add	r3, r2
 800243a:	00db      	lsls	r3, r3, #3
 800243c:	440b      	add	r3, r1
 800243e:	3310      	adds	r3, #16
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4619      	mov	r1, r3
 8002444:	482b      	ldr	r0, [pc, #172]	; (80024f4 <task_chk_init+0x1c0>)
 8002446:	f001 fb53 	bl	8003af0 <SKprintf>
		SKprintf("  Size          = %d\r\n", task_chk_table[i].size);
 800244a:	4928      	ldr	r1, [pc, #160]	; (80024ec <task_chk_init+0x1b8>)
 800244c:	68fa      	ldr	r2, [r7, #12]
 800244e:	4613      	mov	r3, r2
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	4413      	add	r3, r2
 8002454:	00db      	lsls	r3, r3, #3
 8002456:	440b      	add	r3, r1
 8002458:	3314      	adds	r3, #20
 800245a:	881b      	ldrh	r3, [r3, #0]
 800245c:	4619      	mov	r1, r3
 800245e:	4826      	ldr	r0, [pc, #152]	; (80024f8 <task_chk_init+0x1c4>)
 8002460:	f001 fb46 	bl	8003af0 <SKprintf>
		SKprintf("  Used Size     = %d(%d%%)\r\n\r\n", task_chk_table[i].used, 100*task_chk_table[i].used/task_chk_table[i].size);
 8002464:	4921      	ldr	r1, [pc, #132]	; (80024ec <task_chk_init+0x1b8>)
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	4613      	mov	r3, r2
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	4413      	add	r3, r2
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	440b      	add	r3, r1
 8002472:	3316      	adds	r3, #22
 8002474:	881b      	ldrh	r3, [r3, #0]
 8002476:	461c      	mov	r4, r3
 8002478:	491c      	ldr	r1, [pc, #112]	; (80024ec <task_chk_init+0x1b8>)
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	4613      	mov	r3, r2
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	4413      	add	r3, r2
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	440b      	add	r3, r1
 8002486:	3316      	adds	r3, #22
 8002488:	881b      	ldrh	r3, [r3, #0]
 800248a:	461a      	mov	r2, r3
 800248c:	2364      	movs	r3, #100	; 0x64
 800248e:	fb03 f102 	mul.w	r1, r3, r2
 8002492:	4816      	ldr	r0, [pc, #88]	; (80024ec <task_chk_init+0x1b8>)
 8002494:	68fa      	ldr	r2, [r7, #12]
 8002496:	4613      	mov	r3, r2
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	4413      	add	r3, r2
 800249c:	00db      	lsls	r3, r3, #3
 800249e:	4403      	add	r3, r0
 80024a0:	3314      	adds	r3, #20
 80024a2:	881b      	ldrh	r3, [r3, #0]
 80024a4:	fb91 f3f3 	sdiv	r3, r1, r3
 80024a8:	461a      	mov	r2, r3
 80024aa:	4621      	mov	r1, r4
 80024ac:	4813      	ldr	r0, [pc, #76]	; (80024fc <task_chk_init+0x1c8>)
 80024ae:	f001 fb1f 	bl	8003af0 <SKprintf>
	for( i=0; i < SK_TASK_MAX; i++ ){
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	3301      	adds	r3, #1
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	f77f af43 	ble.w	8002346 <task_chk_init+0x12>

	}
}
 80024c0:	bf00      	nop
 80024c2:	bf00      	nop
 80024c4:	371c      	adds	r7, #28
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd90      	pop	{r4, r7, pc}
 80024ca:	bf00      	nop
 80024cc:	0800be84 	.word	0x0800be84
 80024d0:	20001ba0 	.word	0x20001ba0
 80024d4:	0800caf8 	.word	0x0800caf8
 80024d8:	20001ba4 	.word	0x20001ba4
 80024dc:	0800cb1c 	.word	0x0800cb1c
 80024e0:	20001ba8 	.word	0x20001ba8
 80024e4:	0800cb40 	.word	0x0800cb40
 80024e8:	0800be98 	.word	0x0800be98
 80024ec:	20001788 	.word	0x20001788
 80024f0:	0800bea8 	.word	0x0800bea8
 80024f4:	0800beb0 	.word	0x0800beb0
 80024f8:	0800bed0 	.word	0x0800bed0
 80024fc:	0800bee8 	.word	0x0800bee8

08002500 <Disp_task_info>:
}
//==============================================================================
//
//==============================================================================
void Disp_task_info(SK_TASK taskid)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af00      	add	r7, sp, #0
 8002506:	4603      	mov	r3, r0
 8002508:	71fb      	strb	r3, [r7, #7]
	SKtskTaskControlBlock *hTask;
	osThreadAttr_t		*attr;
	uint32_t 			*dtp;

	switch(taskid){
 800250a:	79fb      	ldrb	r3, [r7, #7]
 800250c:	2b02      	cmp	r3, #2
 800250e:	d016      	beq.n	800253e <Disp_task_info+0x3e>
 8002510:	2b02      	cmp	r3, #2
 8002512:	dc1c      	bgt.n	800254e <Disp_task_info+0x4e>
 8002514:	2b00      	cmp	r3, #0
 8002516:	d002      	beq.n	800251e <Disp_task_info+0x1e>
 8002518:	2b01      	cmp	r3, #1
 800251a:	d008      	beq.n	800252e <Disp_task_info+0x2e>
 800251c:	e017      	b.n	800254e <Disp_task_info+0x4e>
	case SK_TASK_main:
		dtp = &Task_mainHandle;
 800251e:	4b34      	ldr	r3, [pc, #208]	; (80025f0 <Disp_task_info+0xf0>)
 8002520:	60fb      	str	r3, [r7, #12]
		hTask = (TaskHandle_t *)*dtp;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	617b      	str	r3, [r7, #20]
		attr = &Task_main_attributes;
 8002528:	4b32      	ldr	r3, [pc, #200]	; (80025f4 <Disp_task_info+0xf4>)
 800252a:	613b      	str	r3, [r7, #16]
		break;
 800252c:	e013      	b.n	8002556 <Disp_task_info+0x56>
	case SK_TASK_sub1:
		dtp = &Task_sub1Handle;
 800252e:	4b32      	ldr	r3, [pc, #200]	; (80025f8 <Disp_task_info+0xf8>)
 8002530:	60fb      	str	r3, [r7, #12]
		hTask = (TaskHandle_t *)*dtp;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	617b      	str	r3, [r7, #20]
		attr = &Task_sub1_attributes;
 8002538:	4b30      	ldr	r3, [pc, #192]	; (80025fc <Disp_task_info+0xfc>)
 800253a:	613b      	str	r3, [r7, #16]
		break;
 800253c:	e00b      	b.n	8002556 <Disp_task_info+0x56>
	case SK_TASK_sub2:
		dtp = &Task_sub2Handle;
 800253e:	4b30      	ldr	r3, [pc, #192]	; (8002600 <Disp_task_info+0x100>)
 8002540:	60fb      	str	r3, [r7, #12]
		hTask = (TaskHandle_t *)*dtp;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	617b      	str	r3, [r7, #20]
		attr = &Task_sub2_attributes;
 8002548:	4b2e      	ldr	r3, [pc, #184]	; (8002604 <Disp_task_info+0x104>)
 800254a:	613b      	str	r3, [r7, #16]
		break;
 800254c:	e003      	b.n	8002556 <Disp_task_info+0x56>
	default:
		SKprintf("Error taskid\r\n");
 800254e:	482e      	ldr	r0, [pc, #184]	; (8002608 <Disp_task_info+0x108>)
 8002550:	f001 face 	bl	8003af0 <SKprintf>
		break;
 8002554:	bf00      	nop
	}

	SKprintf("<<< %s >>>\r\n" ,attr->name);
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4619      	mov	r1, r3
 800255c:	482b      	ldr	r0, [pc, #172]	; (800260c <Disp_task_info+0x10c>)
 800255e:	f001 fac7 	bl	8003af0 <SKprintf>
	SKprintf(" TCB Address           = %p\r\n" ,hTask);
 8002562:	6979      	ldr	r1, [r7, #20]
 8002564:	482a      	ldr	r0, [pc, #168]	; (8002610 <Disp_task_info+0x110>)
 8002566:	f001 fac3 	bl	8003af0 <SKprintf>
	SKprintf(" Stack Botom Address   = 0x%lx\r\n", hTask->pxTopOfStack );
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4619      	mov	r1, r3
 8002570:	4828      	ldr	r0, [pc, #160]	; (8002614 <Disp_task_info+0x114>)
 8002572:	f001 fabd 	bl	8003af0 <SKprintf>
	SKprintf(" Stack top Address     = 0x%lx\r\n", hTask->pxStack );
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257a:	4619      	mov	r1, r3
 800257c:	4826      	ldr	r0, [pc, #152]	; (8002618 <Disp_task_info+0x118>)
 800257e:	f001 fab7 	bl	8003af0 <SKprintf>
	SKprintf(" stack_size            = %lx\r\n" ,attr->stack_size);
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	695b      	ldr	r3, [r3, #20]
 8002586:	4619      	mov	r1, r3
 8002588:	4824      	ldr	r0, [pc, #144]	; (800261c <Disp_task_info+0x11c>)
 800258a:	f001 fab1 	bl	8003af0 <SKprintf>
	SKprintf(" uxTCBNumber           = %lx\r\n", hTask->uxTCBNumber );
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002592:	4619      	mov	r1, r3
 8002594:	4822      	ldr	r0, [pc, #136]	; (8002620 <Disp_task_info+0x120>)
 8002596:	f001 faab 	bl	8003af0 <SKprintf>
	SKprintf(" uxTaskNumber          = %lx\r\n", hTask->uxTaskNumber );
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800259e:	4619      	mov	r1, r3
 80025a0:	4820      	ldr	r0, [pc, #128]	; (8002624 <Disp_task_info+0x124>)
 80025a2:	f001 faa5 	bl	8003af0 <SKprintf>
	SKprintf(" uxBasePriority        = %lx\r\n", hTask->uxBasePriority );
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025aa:	4619      	mov	r1, r3
 80025ac:	481e      	ldr	r0, [pc, #120]	; (8002628 <Disp_task_info+0x128>)
 80025ae:	f001 fa9f 	bl	8003af0 <SKprintf>
	SKprintf(" uxMutexesHeld         = %lx\r\n", hTask->uxMutexesHeld );
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025b6:	4619      	mov	r1, r3
 80025b8:	481c      	ldr	r0, [pc, #112]	; (800262c <Disp_task_info+0x12c>)
 80025ba:	f001 fa99 	bl	8003af0 <SKprintf>
	SKprintf(" ulNotifiedValue       = %lx\r\n", hTask->ulNotifiedValue );
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c2:	4619      	mov	r1, r3
 80025c4:	481a      	ldr	r0, [pc, #104]	; (8002630 <Disp_task_info+0x130>)
 80025c6:	f001 fa93 	bl	8003af0 <SKprintf>
	SKprintf(" ucNotifyState         = %lx\r\n", hTask->ucNotifyState );
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	4619      	mov	r1, r3
 80025d4:	4817      	ldr	r0, [pc, #92]	; (8002634 <Disp_task_info+0x134>)
 80025d6:	f001 fa8b 	bl	8003af0 <SKprintf>
	SKprintf(" ucStaticallyAllocated = %lx\r\n", hTask->ucStaticallyAllocated );
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80025e0:	4619      	mov	r1, r3
 80025e2:	4815      	ldr	r0, [pc, #84]	; (8002638 <Disp_task_info+0x138>)
 80025e4:	f001 fa84 	bl	8003af0 <SKprintf>
	SKprintf(" tz_module = %lx\r\n" ,attr->tz_module);
	SKprintf(" reserved = %lx\r\n" ,attr->reserved);
#endif	// ___NOP


}
 80025e8:	bf00      	nop
 80025ea:	3718      	adds	r7, #24
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	20001ba0 	.word	0x20001ba0
 80025f4:	0800caf8 	.word	0x0800caf8
 80025f8:	20001ba4 	.word	0x20001ba4
 80025fc:	0800cb1c 	.word	0x0800cb1c
 8002600:	20001ba8 	.word	0x20001ba8
 8002604:	0800cb40 	.word	0x0800cb40
 8002608:	0800be98 	.word	0x0800be98
 800260c:	0800bf24 	.word	0x0800bf24
 8002610:	0800bf34 	.word	0x0800bf34
 8002614:	0800bf54 	.word	0x0800bf54
 8002618:	0800bf78 	.word	0x0800bf78
 800261c:	0800bf9c 	.word	0x0800bf9c
 8002620:	0800bfbc 	.word	0x0800bfbc
 8002624:	0800bfdc 	.word	0x0800bfdc
 8002628:	0800bffc 	.word	0x0800bffc
 800262c:	0800c01c 	.word	0x0800c01c
 8002630:	0800c03c 	.word	0x0800c03c
 8002634:	0800c05c 	.word	0x0800c05c
 8002638:	0800c07c 	.word	0x0800c07c

0800263c <Get_task_stackptr>:

//==============================================================================
//
//==============================================================================
void Get_task_stackptr(SK_TASK taskid, STACK_INFO *ptr)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	4603      	mov	r3, r0
 8002644:	6039      	str	r1, [r7, #0]
 8002646:	71fb      	strb	r3, [r7, #7]
	SKtskTaskControlBlock *hTask;
	uint32_t 			*dtp;

	switch(taskid){
 8002648:	79fb      	ldrb	r3, [r7, #7]
 800264a:	2b02      	cmp	r3, #2
 800264c:	d014      	beq.n	8002678 <Get_task_stackptr+0x3c>
 800264e:	2b02      	cmp	r3, #2
 8002650:	dc18      	bgt.n	8002684 <Get_task_stackptr+0x48>
 8002652:	2b00      	cmp	r3, #0
 8002654:	d002      	beq.n	800265c <Get_task_stackptr+0x20>
 8002656:	2b01      	cmp	r3, #1
 8002658:	d006      	beq.n	8002668 <Get_task_stackptr+0x2c>
 800265a:	e013      	b.n	8002684 <Get_task_stackptr+0x48>
	case SK_TASK_main:
		dtp = &Task_mainHandle;
 800265c:	4b1b      	ldr	r3, [pc, #108]	; (80026cc <Get_task_stackptr+0x90>)
 800265e:	60bb      	str	r3, [r7, #8]
		hTask = (TaskHandle_t *)*dtp;
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	60fb      	str	r3, [r7, #12]
		break;
 8002666:	e011      	b.n	800268c <Get_task_stackptr+0x50>
	case SK_TASK_sub1:
		hTask = (TaskHandle_t)&Task_sub1Handle;
 8002668:	4b19      	ldr	r3, [pc, #100]	; (80026d0 <Get_task_stackptr+0x94>)
 800266a:	60fb      	str	r3, [r7, #12]
		dtp = &Task_sub1Handle;
 800266c:	4b18      	ldr	r3, [pc, #96]	; (80026d0 <Get_task_stackptr+0x94>)
 800266e:	60bb      	str	r3, [r7, #8]
		hTask = (TaskHandle_t *)*dtp;
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	60fb      	str	r3, [r7, #12]
		break;
 8002676:	e009      	b.n	800268c <Get_task_stackptr+0x50>
	case SK_TASK_sub2:
		dtp = &Task_sub2Handle;
 8002678:	4b16      	ldr	r3, [pc, #88]	; (80026d4 <Get_task_stackptr+0x98>)
 800267a:	60bb      	str	r3, [r7, #8]
		hTask = (TaskHandle_t *)*dtp;
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	60fb      	str	r3, [r7, #12]
		break;
 8002682:	e003      	b.n	800268c <Get_task_stackptr+0x50>
	default:
		SKprintf("Error taskid\r\n");
 8002684:	4814      	ldr	r0, [pc, #80]	; (80026d8 <Get_task_stackptr+0x9c>)
 8002686:	f001 fa33 	bl	8003af0 <SKprintf>
		break;
 800268a:	bf00      	nop
	}

	SKprintf(" Stack top Address     = 0x%lx\r\n", hTask->pxStack );
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002690:	4619      	mov	r1, r3
 8002692:	4812      	ldr	r0, [pc, #72]	; (80026dc <Get_task_stackptr+0xa0>)
 8002694:	f001 fa2c 	bl	8003af0 <SKprintf>



	ptr->pxStack = (char *)hTask->pxStack;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	605a      	str	r2, [r3, #4]
	ptr->pxTopOfStack = (char *)hTask->pxTopOfStack;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	601a      	str	r2, [r3, #0]
	ptr->size = (uint16_t)(128*4);
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026ae:	811a      	strh	r2, [r3, #8]

	SKprintf("pxStack=%p,pxTopOfStack=%p,size=%d\r\n", ptr->pxStack,ptr->pxTopOfStack,ptr->size);
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	6859      	ldr	r1, [r3, #4]
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	891b      	ldrh	r3, [r3, #8]
 80026bc:	4808      	ldr	r0, [pc, #32]	; (80026e0 <Get_task_stackptr+0xa4>)
 80026be:	f001 fa17 	bl	8003af0 <SKprintf>
}
 80026c2:	bf00      	nop
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	20001ba0 	.word	0x20001ba0
 80026d0:	20001ba4 	.word	0x20001ba4
 80026d4:	20001ba8 	.word	0x20001ba8
 80026d8:	0800be98 	.word	0x0800be98
 80026dc:	0800bf78 	.word	0x0800bf78
 80026e0:	0800c09c 	.word	0x0800c09c

080026e4 <user_init>:
  * @brief
  * @param  None
  * @retval None
  *******************************************************************************/
void user_init(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
	RETURN_STATUS	status = RET_TRUE;
 80026ea:	2301      	movs	r3, #1
 80026ec:	71fb      	strb	r3, [r7, #7]

	//LED_Flush(0);
	SKprintf("Initialize all configured peripherals\r\n");
 80026ee:	481a      	ldr	r0, [pc, #104]	; (8002758 <user_init+0x74>)
 80026f0:	f001 f9fe 	bl	8003af0 <SKprintf>
	SKprintf("******************\r\n");
 80026f4:	4819      	ldr	r0, [pc, #100]	; (800275c <user_init+0x78>)
 80026f6:	f001 f9fb 	bl	8003af0 <SKprintf>
	SKprintf("*** UART START ***\r\n");
 80026fa:	4819      	ldr	r0, [pc, #100]	; (8002760 <user_init+0x7c>)
 80026fc:	f001 f9f8 	bl	8003af0 <SKprintf>
	SKprintf("******************\r\n");
 8002700:	4816      	ldr	r0, [pc, #88]	; (800275c <user_init+0x78>)
 8002702:	f001 f9f5 	bl	8003af0 <SKprintf>


	//-----------------------------------------------
	// Log Timer Counter
	//-----------------------------------------------
	timer.usec = 0;
 8002706:	4b17      	ldr	r3, [pc, #92]	; (8002764 <user_init+0x80>)
 8002708:	2200      	movs	r2, #0
 800270a:	835a      	strh	r2, [r3, #26]
	timer.msec = 0;
 800270c:	4b15      	ldr	r3, [pc, #84]	; (8002764 <user_init+0x80>)
 800270e:	2200      	movs	r2, #0
 8002710:	839a      	strh	r2, [r3, #28]
	timer.usec_max = 0;
 8002712:	4b14      	ldr	r3, [pc, #80]	; (8002764 <user_init+0x80>)
 8002714:	2200      	movs	r2, #0
 8002716:	83da      	strh	r2, [r3, #30]
	timer.msec_max = 0;
 8002718:	4b12      	ldr	r3, [pc, #72]	; (8002764 <user_init+0x80>)
 800271a:	2200      	movs	r2, #0
 800271c:	841a      	strh	r2, [r3, #32]
	timer.dt = 0;
 800271e:	4b11      	ldr	r3, [pc, #68]	; (8002764 <user_init+0x80>)
 8002720:	2200      	movs	r2, #0
 8002722:	601a      	str	r2, [r3, #0]
	timer.dt_max = 0;
 8002724:	4b0f      	ldr	r3, [pc, #60]	; (8002764 <user_init+0x80>)
 8002726:	2200      	movs	r2, #0
 8002728:	611a      	str	r2, [r3, #16]
	timer.dt_av = 0;
 800272a:	4b0e      	ldr	r3, [pc, #56]	; (8002764 <user_init+0x80>)
 800272c:	2200      	movs	r2, #0
 800272e:	615a      	str	r2, [r3, #20]
	timer.start = 0;
 8002730:	4b0c      	ldr	r3, [pc, #48]	; (8002764 <user_init+0x80>)
 8002732:	2200      	movs	r2, #0
 8002734:	765a      	strb	r2, [r3, #25]
	timer.av_wcnt = 0;
 8002736:	4b0b      	ldr	r3, [pc, #44]	; (8002764 <user_init+0x80>)
 8002738:	2200      	movs	r2, #0
 800273a:	761a      	strb	r2, [r3, #24]

	//-----------------------------------------------
	// Log Info Init
	//-----------------------------------------------
	LogInfo_clear();
 800273c:	f7ff fdbe 	bl	80022bc <LogInfo_clear>


	//-----------------------------------------------
	// 受信割込み準備
	//-----------------------------------------------
	uart_Data_init();
 8002740:	f001 f93e 	bl	80039c0 <uart_Data_init>

	uart_Rcv_init(SK_UART1_RS485);
 8002744:	2000      	movs	r0, #0
 8002746:	f001 f963 	bl	8003a10 <uart_Rcv_init>
	uart_Rcv_init(SK_UART2_DEBUG);
 800274a:	2001      	movs	r0, #1
 800274c:	f001 f960 	bl	8003a10 <uart_Rcv_init>

}
 8002750:	bf00      	nop
 8002752:	3708      	adds	r7, #8
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	0800c0c4 	.word	0x0800c0c4
 800275c:	0800c0ec 	.word	0x0800c0ec
 8002760:	0800c104 	.word	0x0800c104
 8002764:	20000170 	.word	0x20000170

08002768 <rtc_display>:

//==============================================================================
//
//==============================================================================
void rtc_display(void)
{
 8002768:	b5b0      	push	{r4, r5, r7, lr}
 800276a:	b08a      	sub	sp, #40	; 0x28
 800276c:	af04      	add	r7, sp, #16
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;

	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800276e:	1d3b      	adds	r3, r7, #4
 8002770:	2200      	movs	r2, #0
 8002772:	4619      	mov	r1, r3
 8002774:	480f      	ldr	r0, [pc, #60]	; (80027b4 <rtc_display+0x4c>)
 8002776:	f003 f9d9 	bl	8005b2c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800277a:	463b      	mov	r3, r7
 800277c:	2200      	movs	r2, #0
 800277e:	4619      	mov	r1, r3
 8002780:	480c      	ldr	r0, [pc, #48]	; (80027b4 <rtc_display+0x4c>)
 8002782:	f003 fab5 	bl	8005cf0 <HAL_RTC_GetDate>
	SKprintf("\r\n20%02d.%02d.%02d %02d:%02d:%02d\r\n", sDate.Year, sDate.Month, sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds);
 8002786:	78fb      	ldrb	r3, [r7, #3]
 8002788:	4618      	mov	r0, r3
 800278a:	787b      	ldrb	r3, [r7, #1]
 800278c:	461c      	mov	r4, r3
 800278e:	78bb      	ldrb	r3, [r7, #2]
 8002790:	461d      	mov	r5, r3
 8002792:	793b      	ldrb	r3, [r7, #4]
 8002794:	797a      	ldrb	r2, [r7, #5]
 8002796:	79b9      	ldrb	r1, [r7, #6]
 8002798:	9102      	str	r1, [sp, #8]
 800279a:	9201      	str	r2, [sp, #4]
 800279c:	9300      	str	r3, [sp, #0]
 800279e:	462b      	mov	r3, r5
 80027a0:	4622      	mov	r2, r4
 80027a2:	4601      	mov	r1, r0
 80027a4:	4804      	ldr	r0, [pc, #16]	; (80027b8 <rtc_display+0x50>)
 80027a6:	f001 f9a3 	bl	8003af0 <SKprintf>
	//SKprintf("av=%d max=%d\r\n",timer.dt_av,timer.	dt_max);
	//SKprintf("dt_buf=%d, %d, %d\r\n", timer.dt_buf[0],timer.dt_buf[1],timer.dt_buf[2]);
}
 80027aa:	bf00      	nop
 80027ac:	3718      	adds	r7, #24
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bdb0      	pop	{r4, r5, r7, pc}
 80027b2:	bf00      	nop
 80027b4:	20001a68 	.word	0x20001a68
 80027b8:	0800c11c 	.word	0x0800c11c

080027bc <GetTimerEventID>:

//==============================================================================
//
//==============================================================================
uint8_t GetTimerEventID(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
	uint8_t				i;
	uint8_t				rtn;

	rtn = 0xff;
 80027c2:	23ff      	movs	r3, #255	; 0xff
 80027c4:	71bb      	strb	r3, [r7, #6]
	for(i=0; i<TIMER_EVENT_MAX; i++){
 80027c6:	2300      	movs	r3, #0
 80027c8:	71fb      	strb	r3, [r7, #7]
 80027ca:	e01a      	b.n	8002802 <GetTimerEventID+0x46>
		if( timer_event[i].flag == TIMER_NO_USED){
 80027cc:	79fa      	ldrb	r2, [r7, #7]
 80027ce:	4912      	ldr	r1, [pc, #72]	; (8002818 <GetTimerEventID+0x5c>)
 80027d0:	4613      	mov	r3, r2
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	4413      	add	r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	440b      	add	r3, r1
 80027da:	3302      	adds	r3, #2
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d10c      	bne.n	80027fc <GetTimerEventID+0x40>
			timer_event[i].flag = TIMER_USED;
 80027e2:	79fa      	ldrb	r2, [r7, #7]
 80027e4:	490c      	ldr	r1, [pc, #48]	; (8002818 <GetTimerEventID+0x5c>)
 80027e6:	4613      	mov	r3, r2
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	4413      	add	r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	440b      	add	r3, r1
 80027f0:	3302      	adds	r3, #2
 80027f2:	2201      	movs	r2, #1
 80027f4:	701a      	strb	r2, [r3, #0]
			rtn = i;
 80027f6:	79fb      	ldrb	r3, [r7, #7]
 80027f8:	71bb      	strb	r3, [r7, #6]
			break;
 80027fa:	e005      	b.n	8002808 <GetTimerEventID+0x4c>
	for(i=0; i<TIMER_EVENT_MAX; i++){
 80027fc:	79fb      	ldrb	r3, [r7, #7]
 80027fe:	3301      	adds	r3, #1
 8002800:	71fb      	strb	r3, [r7, #7]
 8002802:	79fb      	ldrb	r3, [r7, #7]
 8002804:	2b09      	cmp	r3, #9
 8002806:	d9e1      	bls.n	80027cc <GetTimerEventID+0x10>
		}
	}

	return rtn;
 8002808:	79bb      	ldrb	r3, [r7, #6]
}
 800280a:	4618      	mov	r0, r3
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	200017d0 	.word	0x200017d0

0800281c <ReleaceTimerEvent>:
//==============================================================================
//
//==============================================================================
void ReleaceTimerEvent(uint8_t timer_id)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	4603      	mov	r3, r0
 8002824:	71fb      	strb	r3, [r7, #7]
	Set_logInfo2("ReleaceTimerEvent(%d)",timer_id);
 8002826:	79fb      	ldrb	r3, [r7, #7]
 8002828:	4619      	mov	r1, r3
 800282a:	4808      	ldr	r0, [pc, #32]	; (800284c <ReleaceTimerEvent+0x30>)
 800282c:	f7ff fb74 	bl	8001f18 <Set_logInfo2>
	timer_event[timer_id].flag = TIMER_NO_USED;
 8002830:	79fa      	ldrb	r2, [r7, #7]
 8002832:	4907      	ldr	r1, [pc, #28]	; (8002850 <ReleaceTimerEvent+0x34>)
 8002834:	4613      	mov	r3, r2
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	4413      	add	r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	440b      	add	r3, r1
 800283e:	3302      	adds	r3, #2
 8002840:	2200      	movs	r2, #0
 8002842:	701a      	strb	r2, [r3, #0]
}
 8002844:	bf00      	nop
 8002846:	3708      	adds	r7, #8
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	0800c140 	.word	0x0800c140
 8002850:	200017d0 	.word	0x200017d0

08002854 <TimerEventCtrl>:

//==============================================================================
//
//==============================================================================
void TimerEventCtrl(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af00      	add	r7, sp, #0
	void 				*msgQueBuf;
	uint8_t				rcvbuff[sizeof(void *)];
	TIMER_EVENT_FORM	*tm_form;
	osStatus_t			os_status;

	msgQueBuf = (void *)rcvbuff;
 800285a:	1d3b      	adds	r3, r7, #4
 800285c:	613b      	str	r3, [r7, #16]

		//-------------------------------------------------------------------------
		//	タイマー
		//-------------------------------------------------------------------------
		for(i=0; i<TIMER_EVENT_MAX; i++){
 800285e:	2300      	movs	r3, #0
 8002860:	75fb      	strb	r3, [r7, #23]
 8002862:	e056      	b.n	8002912 <TimerEventCtrl+0xbe>
			if( timer_event[i].flag == TIMER_ACTIVE){
 8002864:	7dfa      	ldrb	r2, [r7, #23]
 8002866:	4960      	ldr	r1, [pc, #384]	; (80029e8 <TimerEventCtrl+0x194>)
 8002868:	4613      	mov	r3, r2
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	4413      	add	r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	440b      	add	r3, r1
 8002872:	3302      	adds	r3, #2
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	2b02      	cmp	r3, #2
 8002878:	d148      	bne.n	800290c <TimerEventCtrl+0xb8>
				if( timer_event[i].counter != 0 ){
 800287a:	7dfa      	ldrb	r2, [r7, #23]
 800287c:	495a      	ldr	r1, [pc, #360]	; (80029e8 <TimerEventCtrl+0x194>)
 800287e:	4613      	mov	r3, r2
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	4413      	add	r3, r2
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	440b      	add	r3, r1
 8002888:	881b      	ldrh	r3, [r3, #0]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d012      	beq.n	80028b4 <TimerEventCtrl+0x60>
					timer_event[i].counter --;
 800288e:	7dfa      	ldrb	r2, [r7, #23]
 8002890:	4955      	ldr	r1, [pc, #340]	; (80029e8 <TimerEventCtrl+0x194>)
 8002892:	4613      	mov	r3, r2
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	4413      	add	r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	440b      	add	r3, r1
 800289c:	881b      	ldrh	r3, [r3, #0]
 800289e:	3b01      	subs	r3, #1
 80028a0:	b298      	uxth	r0, r3
 80028a2:	4951      	ldr	r1, [pc, #324]	; (80029e8 <TimerEventCtrl+0x194>)
 80028a4:	4613      	mov	r3, r2
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	4413      	add	r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	440b      	add	r3, r1
 80028ae:	4602      	mov	r2, r0
 80028b0:	801a      	strh	r2, [r3, #0]
 80028b2:	e02b      	b.n	800290c <TimerEventCtrl+0xb8>
				}
				else{
					os_status = osMessageQueuePut (timer_event[i].hmsg, (void *)timer_event[i].message, 0,0);
 80028b4:	7dfa      	ldrb	r2, [r7, #23]
 80028b6:	494c      	ldr	r1, [pc, #304]	; (80029e8 <TimerEventCtrl+0x194>)
 80028b8:	4613      	mov	r3, r2
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	4413      	add	r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	440b      	add	r3, r1
 80028c2:	3304      	adds	r3, #4
 80028c4:	6818      	ldr	r0, [r3, #0]
 80028c6:	7dfa      	ldrb	r2, [r7, #23]
 80028c8:	4947      	ldr	r1, [pc, #284]	; (80029e8 <TimerEventCtrl+0x194>)
 80028ca:	4613      	mov	r3, r2
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	4413      	add	r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	440b      	add	r3, r1
 80028d4:	3308      	adds	r3, #8
 80028d6:	6819      	ldr	r1, [r3, #0]
 80028d8:	2300      	movs	r3, #0
 80028da:	2200      	movs	r2, #0
 80028dc:	f005 fa96 	bl	8007e0c <osMessageQueuePut>
 80028e0:	60f8      	str	r0, [r7, #12]

			    	switch( os_status ){
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d103      	bne.n	80028f0 <TimerEventCtrl+0x9c>
					case osOK:
						Set_logInfo("TimerEvent(). Send MsgQue OK");
 80028e8:	4840      	ldr	r0, [pc, #256]	; (80029ec <TimerEventCtrl+0x198>)
 80028ea:	f7ff fa51 	bl	8001d90 <Set_logInfo>
						break;
 80028ee:	e003      	b.n	80028f8 <TimerEventCtrl+0xa4>
					default:
						Set_logInfo("TimerEvent(). Send MsgQue ERROR");
 80028f0:	483f      	ldr	r0, [pc, #252]	; (80029f0 <TimerEventCtrl+0x19c>)
 80028f2:	f7ff fa4d 	bl	8001d90 <Set_logInfo>
						break;
 80028f6:	bf00      	nop
					}

			    	timer_event[i].flag = TIMER_NO_USED;
 80028f8:	7dfa      	ldrb	r2, [r7, #23]
 80028fa:	493b      	ldr	r1, [pc, #236]	; (80029e8 <TimerEventCtrl+0x194>)
 80028fc:	4613      	mov	r3, r2
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	4413      	add	r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	440b      	add	r3, r1
 8002906:	3302      	adds	r3, #2
 8002908:	2200      	movs	r2, #0
 800290a:	701a      	strb	r2, [r3, #0]
		for(i=0; i<TIMER_EVENT_MAX; i++){
 800290c:	7dfb      	ldrb	r3, [r7, #23]
 800290e:	3301      	adds	r3, #1
 8002910:	75fb      	strb	r3, [r7, #23]
 8002912:	7dfb      	ldrb	r3, [r7, #23]
 8002914:	2b09      	cmp	r3, #9
 8002916:	d9a5      	bls.n	8002864 <TimerEventCtrl+0x10>
		//-------------------------------------------------------------------------
		//	メッセージ待ち
		//-------------------------------------------------------------------------
		//os_status = osMessageQueueGet (GetMessageQue(SK_TASK_sub2), msgQueBuf, 0, 0);
//		os_status = osMessageQueueGet (GetMessageQue(SK_TASK_sub1), msgQueBuf, 0, osWaitForever);
		os_status = osMessageQueueGet (GetMessageQue(SK_TASK_sub1), msgQueBuf, 0, 10);
 8002918:	2001      	movs	r0, #1
 800291a:	f7ff fce3 	bl	80022e4 <GetMessageQue>
 800291e:	230a      	movs	r3, #10
 8002920:	2200      	movs	r2, #0
 8002922:	6939      	ldr	r1, [r7, #16]
 8002924:	f005 fad2 	bl	8007ecc <osMessageQueueGet>
 8002928:	60f8      	str	r0, [r7, #12]
		tm_form = (TIMER_EVENT_FORM *)msgQueBuf;
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	60bb      	str	r3, [r7, #8]
		tm_form = (TIMER_EVENT_FORM	*)tm_form->maroc_ptr;
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	60bb      	str	r3, [r7, #8]

		switch( os_status ){
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f113 0f02 	cmn.w	r3, #2
 800293a:	d050      	beq.n	80029de <TimerEventCtrl+0x18a>
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d148      	bne.n	80029d4 <TimerEventCtrl+0x180>
		case osOK:
			SKprintf("TimerEventCtrl(2):os_status=OK(%d)\r\n",os_status);
 8002942:	68f9      	ldr	r1, [r7, #12]
 8002944:	482b      	ldr	r0, [pc, #172]	; (80029f4 <TimerEventCtrl+0x1a0>)
 8002946:	f001 f8d3 	bl	8003af0 <SKprintf>
			Set_logInfo("TimerEvent(). Recive MsgQue OK");
 800294a:	482b      	ldr	r0, [pc, #172]	; (80029f8 <TimerEventCtrl+0x1a4>)
 800294c:	f7ff fa20 	bl	8001d90 <Set_logInfo>

			i = tm_form->timer_id;
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	7d1b      	ldrb	r3, [r3, #20]
 8002954:	75fb      	strb	r3, [r7, #23]

			timer_event[i].counter 	= tm_form->time;
 8002956:	7dfa      	ldrb	r2, [r7, #23]
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	8998      	ldrh	r0, [r3, #12]
 800295c:	4922      	ldr	r1, [pc, #136]	; (80029e8 <TimerEventCtrl+0x194>)
 800295e:	4613      	mov	r3, r2
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	4413      	add	r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	440b      	add	r3, r1
 8002968:	4602      	mov	r2, r0
 800296a:	801a      	strh	r2, [r3, #0]
			timer_event[i].flag 	= TIMER_ACTIVE;
 800296c:	7dfa      	ldrb	r2, [r7, #23]
 800296e:	491e      	ldr	r1, [pc, #120]	; (80029e8 <TimerEventCtrl+0x194>)
 8002970:	4613      	mov	r3, r2
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	4413      	add	r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	440b      	add	r3, r1
 800297a:	3302      	adds	r3, #2
 800297c:	2202      	movs	r2, #2
 800297e:	701a      	strb	r2, [r3, #0]
			timer_event[i].hmsg 	= tm_form->hmsg;
 8002980:	7dfa      	ldrb	r2, [r7, #23]
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	6899      	ldr	r1, [r3, #8]
 8002986:	4818      	ldr	r0, [pc, #96]	; (80029e8 <TimerEventCtrl+0x194>)
 8002988:	4613      	mov	r3, r2
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	4413      	add	r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	4403      	add	r3, r0
 8002992:	3304      	adds	r3, #4
 8002994:	6019      	str	r1, [r3, #0]
			timer_event[i].message 	= tm_form->mail_form;
 8002996:	7dfa      	ldrb	r2, [r7, #23]
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	6919      	ldr	r1, [r3, #16]
 800299c:	4812      	ldr	r0, [pc, #72]	; (80029e8 <TimerEventCtrl+0x194>)
 800299e:	4613      	mov	r3, r2
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	4413      	add	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	4403      	add	r3, r0
 80029a8:	3308      	adds	r3, #8
 80029aa:	6019      	str	r1, [r3, #0]

			SKprintf("tm_form=%p,.message=%p\r\n",tm_form,timer_event[i].message);
 80029ac:	7dfa      	ldrb	r2, [r7, #23]
 80029ae:	490e      	ldr	r1, [pc, #56]	; (80029e8 <TimerEventCtrl+0x194>)
 80029b0:	4613      	mov	r3, r2
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	4413      	add	r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	440b      	add	r3, r1
 80029ba:	3308      	adds	r3, #8
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	461a      	mov	r2, r3
 80029c0:	68b9      	ldr	r1, [r7, #8]
 80029c2:	480e      	ldr	r0, [pc, #56]	; (80029fc <TimerEventCtrl+0x1a8>)
 80029c4:	f001 f894 	bl	8003af0 <SKprintf>

			vPortFree(tm_form->maroc_ptr);
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f007 fecf 	bl	800a770 <vPortFree>
			break;
 80029d2:	e005      	b.n	80029e0 <TimerEventCtrl+0x18c>
		case osErrorTimeout:
			break;
		default:
			SKprintf("TimerEventCtrl(2):os_status=Error(%d)\r\n",os_status);
 80029d4:	68f9      	ldr	r1, [r7, #12]
 80029d6:	480a      	ldr	r0, [pc, #40]	; (8002a00 <TimerEventCtrl+0x1ac>)
 80029d8:	f001 f88a 	bl	8003af0 <SKprintf>
			break;
 80029dc:	e000      	b.n	80029e0 <TimerEventCtrl+0x18c>
			break;
 80029de:	bf00      	nop
		}
}
 80029e0:	bf00      	nop
 80029e2:	3718      	adds	r7, #24
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	200017d0 	.word	0x200017d0
 80029ec:	0800c158 	.word	0x0800c158
 80029f0:	0800c178 	.word	0x0800c178
 80029f4:	0800c198 	.word	0x0800c198
 80029f8:	0800c1c0 	.word	0x0800c1c0
 80029fc:	0800c1e0 	.word	0x0800c1e0
 8002a00:	0800c1fc 	.word	0x0800c1fc

08002a04 <tasuk3_init>:

//==============================================================================
//
//==============================================================================
void  tasuk3_init(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
	SKprintf("tasuk3_init(void)\r\n");
 8002a08:	4802      	ldr	r0, [pc, #8]	; (8002a14 <tasuk3_init+0x10>)
 8002a0a:	f001 f871 	bl	8003af0 <SKprintf>
}
 8002a0e:	bf00      	nop
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	0800c224 	.word	0x0800c224

08002a18 <Set_rcv_data>:

//==============================================================================
//
//==============================================================================
void Set_rcv_data(SK_UART sel)
{
 8002a18:	b4b0      	push	{r4, r5, r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	4603      	mov	r3, r0
 8002a20:	71fb      	strb	r3, [r7, #7]
	while(uart[sel].Sem_rs485_rcv==1);
 8002a22:	bf00      	nop
 8002a24:	79fa      	ldrb	r2, [r7, #7]
 8002a26:	494f      	ldr	r1, [pc, #316]	; (8002b64 <Set_rcv_data+0x14c>)
 8002a28:	4613      	mov	r3, r2
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	4413      	add	r3, r2
 8002a2e:	011a      	lsls	r2, r3, #4
 8002a30:	1ad2      	subs	r2, r2, r3
 8002a32:	188b      	adds	r3, r1, r2
 8002a34:	3386      	adds	r3, #134	; 0x86
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d0f3      	beq.n	8002a24 <Set_rcv_data+0xc>

	uart[sel].Sem_rs485_rcv= 1;
 8002a3c:	79fa      	ldrb	r2, [r7, #7]
 8002a3e:	4949      	ldr	r1, [pc, #292]	; (8002b64 <Set_rcv_data+0x14c>)
 8002a40:	4613      	mov	r3, r2
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	4413      	add	r3, r2
 8002a46:	011a      	lsls	r2, r3, #4
 8002a48:	1ad2      	subs	r2, r2, r3
 8002a4a:	188b      	adds	r3, r1, r2
 8002a4c:	3386      	adds	r3, #134	; 0x86
 8002a4e:	2201      	movs	r2, #1
 8002a50:	701a      	strb	r2, [r3, #0]
	uart[sel].rcvnum ++;
 8002a52:	79f9      	ldrb	r1, [r7, #7]
 8002a54:	4843      	ldr	r0, [pc, #268]	; (8002b64 <Set_rcv_data+0x14c>)
 8002a56:	460b      	mov	r3, r1
 8002a58:	00db      	lsls	r3, r3, #3
 8002a5a:	440b      	add	r3, r1
 8002a5c:	011a      	lsls	r2, r3, #4
 8002a5e:	1ad2      	subs	r2, r2, r3
 8002a60:	1883      	adds	r3, r0, r2
 8002a62:	3382      	adds	r3, #130	; 0x82
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	3301      	adds	r3, #1
 8002a68:	b2dc      	uxtb	r4, r3
 8002a6a:	483e      	ldr	r0, [pc, #248]	; (8002b64 <Set_rcv_data+0x14c>)
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	440b      	add	r3, r1
 8002a72:	011a      	lsls	r2, r3, #4
 8002a74:	1ad2      	subs	r2, r2, r3
 8002a76:	1883      	adds	r3, r0, r2
 8002a78:	3382      	adds	r3, #130	; 0x82
 8002a7a:	4622      	mov	r2, r4
 8002a7c:	701a      	strb	r2, [r3, #0]
	uart[sel].Sem_rs485_rcv= 0;
 8002a7e:	79fa      	ldrb	r2, [r7, #7]
 8002a80:	4938      	ldr	r1, [pc, #224]	; (8002b64 <Set_rcv_data+0x14c>)
 8002a82:	4613      	mov	r3, r2
 8002a84:	00db      	lsls	r3, r3, #3
 8002a86:	4413      	add	r3, r2
 8002a88:	011a      	lsls	r2, r3, #4
 8002a8a:	1ad2      	subs	r2, r2, r3
 8002a8c:	188b      	adds	r3, r1, r2
 8002a8e:	3386      	adds	r3, #134	; 0x86
 8002a90:	2200      	movs	r2, #0
 8002a92:	701a      	strb	r2, [r3, #0]

	uart[sel].rcvbuf[uart[sel].rcv_wpt] = uart[sel].rcv_dt[0];
 8002a94:	79f8      	ldrb	r0, [r7, #7]
 8002a96:	79f9      	ldrb	r1, [r7, #7]
 8002a98:	79fa      	ldrb	r2, [r7, #7]
 8002a9a:	4c32      	ldr	r4, [pc, #200]	; (8002b64 <Set_rcv_data+0x14c>)
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	4413      	add	r3, r2
 8002aa2:	011a      	lsls	r2, r3, #4
 8002aa4:	1ad2      	subs	r2, r2, r3
 8002aa6:	18a3      	adds	r3, r4, r2
 8002aa8:	3384      	adds	r3, #132	; 0x84
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	461d      	mov	r5, r3
 8002aae:	4c2d      	ldr	r4, [pc, #180]	; (8002b64 <Set_rcv_data+0x14c>)
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	4403      	add	r3, r0
 8002ab6:	011a      	lsls	r2, r3, #4
 8002ab8:	1ad2      	subs	r2, r2, r3
 8002aba:	18a3      	adds	r3, r4, r2
 8002abc:	781c      	ldrb	r4, [r3, #0]
 8002abe:	4829      	ldr	r0, [pc, #164]	; (8002b64 <Set_rcv_data+0x14c>)
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	440b      	add	r3, r1
 8002ac6:	011a      	lsls	r2, r3, #4
 8002ac8:	1ad2      	subs	r2, r2, r3
 8002aca:	1883      	adds	r3, r0, r2
 8002acc:	442b      	add	r3, r5
 8002ace:	3302      	adds	r3, #2
 8002ad0:	4622      	mov	r2, r4
 8002ad2:	701a      	strb	r2, [r3, #0]
//	uart[sel].rcvnum ++;
	uart[sel].totalnum ++;
 8002ad4:	79f9      	ldrb	r1, [r7, #7]
 8002ad6:	4823      	ldr	r0, [pc, #140]	; (8002b64 <Set_rcv_data+0x14c>)
 8002ad8:	460b      	mov	r3, r1
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	440b      	add	r3, r1
 8002ade:	011a      	lsls	r2, r3, #4
 8002ae0:	1ad2      	subs	r2, r2, r3
 8002ae2:	1883      	adds	r3, r0, r2
 8002ae4:	3383      	adds	r3, #131	; 0x83
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	b2dc      	uxtb	r4, r3
 8002aec:	481d      	ldr	r0, [pc, #116]	; (8002b64 <Set_rcv_data+0x14c>)
 8002aee:	460b      	mov	r3, r1
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	440b      	add	r3, r1
 8002af4:	011a      	lsls	r2, r3, #4
 8002af6:	1ad2      	subs	r2, r2, r3
 8002af8:	1883      	adds	r3, r0, r2
 8002afa:	3383      	adds	r3, #131	; 0x83
 8002afc:	4622      	mov	r2, r4
 8002afe:	701a      	strb	r2, [r3, #0]

	uart[sel].rcv_wpt ++ ;
 8002b00:	79f9      	ldrb	r1, [r7, #7]
 8002b02:	4818      	ldr	r0, [pc, #96]	; (8002b64 <Set_rcv_data+0x14c>)
 8002b04:	460b      	mov	r3, r1
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	440b      	add	r3, r1
 8002b0a:	011a      	lsls	r2, r3, #4
 8002b0c:	1ad2      	subs	r2, r2, r3
 8002b0e:	1883      	adds	r3, r0, r2
 8002b10:	3384      	adds	r3, #132	; 0x84
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	3301      	adds	r3, #1
 8002b16:	b2dc      	uxtb	r4, r3
 8002b18:	4812      	ldr	r0, [pc, #72]	; (8002b64 <Set_rcv_data+0x14c>)
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	00db      	lsls	r3, r3, #3
 8002b1e:	440b      	add	r3, r1
 8002b20:	011a      	lsls	r2, r3, #4
 8002b22:	1ad2      	subs	r2, r2, r3
 8002b24:	1883      	adds	r3, r0, r2
 8002b26:	3384      	adds	r3, #132	; 0x84
 8002b28:	4622      	mov	r2, r4
 8002b2a:	701a      	strb	r2, [r3, #0]
    if( uart[sel].rcv_wpt > RCV_BUF_SIZE ){
 8002b2c:	79fa      	ldrb	r2, [r7, #7]
 8002b2e:	490d      	ldr	r1, [pc, #52]	; (8002b64 <Set_rcv_data+0x14c>)
 8002b30:	4613      	mov	r3, r2
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	4413      	add	r3, r2
 8002b36:	011a      	lsls	r2, r3, #4
 8002b38:	1ad2      	subs	r2, r2, r3
 8002b3a:	188b      	adds	r3, r1, r2
 8002b3c:	3384      	adds	r3, #132	; 0x84
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	2b80      	cmp	r3, #128	; 0x80
 8002b42:	d90a      	bls.n	8002b5a <Set_rcv_data+0x142>
    	uart[sel].rcv_wpt = 0;
 8002b44:	79fa      	ldrb	r2, [r7, #7]
 8002b46:	4907      	ldr	r1, [pc, #28]	; (8002b64 <Set_rcv_data+0x14c>)
 8002b48:	4613      	mov	r3, r2
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	4413      	add	r3, r2
 8002b4e:	011a      	lsls	r2, r3, #4
 8002b50:	1ad2      	subs	r2, r2, r3
 8002b52:	188b      	adds	r3, r1, r2
 8002b54:	3384      	adds	r3, #132	; 0x84
 8002b56:	2200      	movs	r2, #0
 8002b58:	701a      	strb	r2, [r3, #0]
    }
}
 8002b5a:	bf00      	nop
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bcb0      	pop	{r4, r5, r7}
 8002b62:	4770      	bx	lr
 8002b64:	200018cc 	.word	0x200018cc

08002b68 <HAL_UART_RxCpltCallback>:

//==============================================================================
//　受信データ割込みコールバック
//==============================================================================
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]

	if( Get_uart_port(huart) == SK_UART1_RS485 ){
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f000 fedb 	bl	800392c <Get_uart_port>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d112      	bne.n	8002ba2 <HAL_UART_RxCpltCallback+0x3a>
		Set_rcv_data(SK_UART1_RS485);
 8002b7c:	2000      	movs	r0, #0
 8002b7e:	f7ff ff4b 	bl	8002a18 <Set_rcv_data>
		uart_Rcv_init(SK_UART1_RS485);
 8002b82:	2000      	movs	r0, #0
 8002b84:	f000 ff44 	bl	8003a10 <uart_Rcv_init>
		if(uart[SK_UART1_RS485].totalnum >= COM_TABLE_MAX){
 8002b88:	4b0e      	ldr	r3, [pc, #56]	; (8002bc4 <HAL_UART_RxCpltCallback+0x5c>)
 8002b8a:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8002b8e:	2b21      	cmp	r3, #33	; 0x21
 8002b90:	d913      	bls.n	8002bba <HAL_UART_RxCpltCallback+0x52>
			Set_logInfo("HAL_UART_RxCpltCallback(RS485)");
 8002b92:	480d      	ldr	r0, [pc, #52]	; (8002bc8 <HAL_UART_RxCpltCallback+0x60>)
 8002b94:	f7ff f8fc 	bl	8001d90 <Set_logInfo>
			SendMsgQueISR(RT_EVENT_UART_RX, 0xff);
 8002b98:	21ff      	movs	r1, #255	; 0xff
 8002b9a:	2001      	movs	r0, #1
 8002b9c:	f000 f8f6 	bl	8002d8c <SendMsgQueISR>
		Set_rcv_data(SK_UART2_DEBUG);
		uart_Rcv_init(SK_UART2_DEBUG);
	}
	else{
	}
}
 8002ba0:	e00b      	b.n	8002bba <HAL_UART_RxCpltCallback+0x52>
	else if( Get_uart_port(huart) == SK_UART2_DEBUG ){
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 fec2 	bl	800392c <Get_uart_port>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d105      	bne.n	8002bba <HAL_UART_RxCpltCallback+0x52>
		Set_rcv_data(SK_UART2_DEBUG);
 8002bae:	2001      	movs	r0, #1
 8002bb0:	f7ff ff32 	bl	8002a18 <Set_rcv_data>
		uart_Rcv_init(SK_UART2_DEBUG);
 8002bb4:	2001      	movs	r0, #1
 8002bb6:	f000 ff2b 	bl	8003a10 <uart_Rcv_init>
}
 8002bba:	bf00      	nop
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	200018cc 	.word	0x200018cc
 8002bc8:	0800c238 	.word	0x0800c238

08002bcc <Get_rcv_data>:

//==============================================================================
//
//==============================================================================
uint8_t Get_rcv_data(SK_UART sel)
{
 8002bcc:	b490      	push	{r4, r7}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	71fb      	strb	r3, [r7, #7]
    uint8_t dt;

  	while(uart[sel].Sem_rs485_rcv==1);
 8002bd6:	bf00      	nop
 8002bd8:	79fa      	ldrb	r2, [r7, #7]
 8002bda:	4940      	ldr	r1, [pc, #256]	; (8002cdc <Get_rcv_data+0x110>)
 8002bdc:	4613      	mov	r3, r2
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	4413      	add	r3, r2
 8002be2:	011a      	lsls	r2, r3, #4
 8002be4:	1ad2      	subs	r2, r2, r3
 8002be6:	188b      	adds	r3, r1, r2
 8002be8:	3386      	adds	r3, #134	; 0x86
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d0f3      	beq.n	8002bd8 <Get_rcv_data+0xc>

	uart[sel].Sem_rs485_rcv = 1;
 8002bf0:	79fa      	ldrb	r2, [r7, #7]
 8002bf2:	493a      	ldr	r1, [pc, #232]	; (8002cdc <Get_rcv_data+0x110>)
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	4413      	add	r3, r2
 8002bfa:	011a      	lsls	r2, r3, #4
 8002bfc:	1ad2      	subs	r2, r2, r3
 8002bfe:	188b      	adds	r3, r1, r2
 8002c00:	3386      	adds	r3, #134	; 0x86
 8002c02:	2201      	movs	r2, #1
 8002c04:	701a      	strb	r2, [r3, #0]
	uart[sel].rcvnum --;
 8002c06:	79f9      	ldrb	r1, [r7, #7]
 8002c08:	4834      	ldr	r0, [pc, #208]	; (8002cdc <Get_rcv_data+0x110>)
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	00db      	lsls	r3, r3, #3
 8002c0e:	440b      	add	r3, r1
 8002c10:	011a      	lsls	r2, r3, #4
 8002c12:	1ad2      	subs	r2, r2, r3
 8002c14:	1883      	adds	r3, r0, r2
 8002c16:	3382      	adds	r3, #130	; 0x82
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	b2dc      	uxtb	r4, r3
 8002c1e:	482f      	ldr	r0, [pc, #188]	; (8002cdc <Get_rcv_data+0x110>)
 8002c20:	460b      	mov	r3, r1
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	440b      	add	r3, r1
 8002c26:	011a      	lsls	r2, r3, #4
 8002c28:	1ad2      	subs	r2, r2, r3
 8002c2a:	1883      	adds	r3, r0, r2
 8002c2c:	3382      	adds	r3, #130	; 0x82
 8002c2e:	4622      	mov	r2, r4
 8002c30:	701a      	strb	r2, [r3, #0]
	uart[sel].Sem_rs485_rcv = 0;
 8002c32:	79fa      	ldrb	r2, [r7, #7]
 8002c34:	4929      	ldr	r1, [pc, #164]	; (8002cdc <Get_rcv_data+0x110>)
 8002c36:	4613      	mov	r3, r2
 8002c38:	00db      	lsls	r3, r3, #3
 8002c3a:	4413      	add	r3, r2
 8002c3c:	011a      	lsls	r2, r3, #4
 8002c3e:	1ad2      	subs	r2, r2, r3
 8002c40:	188b      	adds	r3, r1, r2
 8002c42:	3386      	adds	r3, #134	; 0x86
 8002c44:	2200      	movs	r2, #0
 8002c46:	701a      	strb	r2, [r3, #0]

	dt =  uart[sel].rcvbuf[uart[sel].rcv_rpt];
 8002c48:	79f9      	ldrb	r1, [r7, #7]
 8002c4a:	79fa      	ldrb	r2, [r7, #7]
 8002c4c:	4823      	ldr	r0, [pc, #140]	; (8002cdc <Get_rcv_data+0x110>)
 8002c4e:	4613      	mov	r3, r2
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	4413      	add	r3, r2
 8002c54:	011a      	lsls	r2, r3, #4
 8002c56:	1ad2      	subs	r2, r2, r3
 8002c58:	1883      	adds	r3, r0, r2
 8002c5a:	3385      	adds	r3, #133	; 0x85
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	461c      	mov	r4, r3
 8002c60:	481e      	ldr	r0, [pc, #120]	; (8002cdc <Get_rcv_data+0x110>)
 8002c62:	460b      	mov	r3, r1
 8002c64:	00db      	lsls	r3, r3, #3
 8002c66:	440b      	add	r3, r1
 8002c68:	011a      	lsls	r2, r3, #4
 8002c6a:	1ad2      	subs	r2, r2, r3
 8002c6c:	1883      	adds	r3, r0, r2
 8002c6e:	4423      	add	r3, r4
 8002c70:	3302      	adds	r3, #2
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	73fb      	strb	r3, [r7, #15]
	uart[sel].rcv_rpt ++ ;
 8002c76:	79f9      	ldrb	r1, [r7, #7]
 8002c78:	4818      	ldr	r0, [pc, #96]	; (8002cdc <Get_rcv_data+0x110>)
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	440b      	add	r3, r1
 8002c80:	011a      	lsls	r2, r3, #4
 8002c82:	1ad2      	subs	r2, r2, r3
 8002c84:	1883      	adds	r3, r0, r2
 8002c86:	3385      	adds	r3, #133	; 0x85
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	b2dc      	uxtb	r4, r3
 8002c8e:	4813      	ldr	r0, [pc, #76]	; (8002cdc <Get_rcv_data+0x110>)
 8002c90:	460b      	mov	r3, r1
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	440b      	add	r3, r1
 8002c96:	011a      	lsls	r2, r3, #4
 8002c98:	1ad2      	subs	r2, r2, r3
 8002c9a:	1883      	adds	r3, r0, r2
 8002c9c:	3385      	adds	r3, #133	; 0x85
 8002c9e:	4622      	mov	r2, r4
 8002ca0:	701a      	strb	r2, [r3, #0]
	if( uart[sel].rcv_rpt > RCV_BUF_SIZE ){
 8002ca2:	79fa      	ldrb	r2, [r7, #7]
 8002ca4:	490d      	ldr	r1, [pc, #52]	; (8002cdc <Get_rcv_data+0x110>)
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	00db      	lsls	r3, r3, #3
 8002caa:	4413      	add	r3, r2
 8002cac:	011a      	lsls	r2, r3, #4
 8002cae:	1ad2      	subs	r2, r2, r3
 8002cb0:	188b      	adds	r3, r1, r2
 8002cb2:	3385      	adds	r3, #133	; 0x85
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	2b80      	cmp	r3, #128	; 0x80
 8002cb8:	d90a      	bls.n	8002cd0 <Get_rcv_data+0x104>
		uart[sel].rcv_rpt = 0;
 8002cba:	79fa      	ldrb	r2, [r7, #7]
 8002cbc:	4907      	ldr	r1, [pc, #28]	; (8002cdc <Get_rcv_data+0x110>)
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	00db      	lsls	r3, r3, #3
 8002cc2:	4413      	add	r3, r2
 8002cc4:	011a      	lsls	r2, r3, #4
 8002cc6:	1ad2      	subs	r2, r2, r3
 8002cc8:	188b      	adds	r3, r1, r2
 8002cca:	3385      	adds	r3, #133	; 0x85
 8002ccc:	2200      	movs	r2, #0
 8002cce:	701a      	strb	r2, [r3, #0]
	}

    return dt;
 8002cd0:	7bfb      	ldrb	r3, [r7, #15]

}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bc90      	pop	{r4, r7}
 8002cda:	4770      	bx	lr
 8002cdc:	200018cc 	.word	0x200018cc

08002ce0 <rs485_com_task>:
//extern osMessageQueueId_t myQueue01Handle;



void rs485_com_task(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b088      	sub	sp, #32
 8002ce4:	af00      	add	r7, sp, #0
	uint8_t				state;
	uint32_t			timer;
	uint8_t				*temp;
	uint8_t 			*buffer;

	RTtask.state = RT_STATE_INIT;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	727b      	strb	r3, [r7, #9]
	timer = osWaitForever;
 8002cea:	f04f 33ff 	mov.w	r3, #4294967295
 8002cee:	61bb      	str	r3, [r7, #24]
	RTtask.state = RT_STATE_READY;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	727b      	strb	r3, [r7, #9]
	while(1){

		//-------------------------------------------------------------------------
		//	メッセージ待ち
		//-------------------------------------------------------------------------
		os_status = osMessageQueueGet (GetMessageQue(SK_TASK_sub2), &msgQueBuf, 0, osWaitForever);
 8002cf4:	2002      	movs	r0, #2
 8002cf6:	f7ff faf5 	bl	80022e4 <GetMessageQue>
 8002cfa:	1d39      	adds	r1, r7, #4
 8002cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8002d00:	2200      	movs	r2, #0
 8002d02:	f005 f8e3 	bl	8007ecc <osMessageQueueGet>
 8002d06:	6178      	str	r0, [r7, #20]
		msg = (MESSAGE_QUE_DATA *)msgQueBuf;
 8002d08:	1d3b      	adds	r3, r7, #4
 8002d0a:	613b      	str	r3, [r7, #16]
		msg = (MESSAGE_QUE_DATA	*)msg->maroc_ptr;
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	613b      	str	r3, [r7, #16]


		event = 0;
 8002d12:	2300      	movs	r3, #0
 8002d14:	77fb      	strb	r3, [r7, #31]
		state = 0;
 8002d16:	2300      	movs	r3, #0
 8002d18:	77bb      	strb	r3, [r7, #30]
		switch( os_status ){
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d113      	bne.n	8002d48 <rs485_com_task+0x68>
		case osOK:
			RTtask.event = msg->u.cmd_msg.event;
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	795b      	ldrb	r3, [r3, #5]
 8002d24:	723b      	strb	r3, [r7, #8]

			if(RTtask.event == RT_EVENT_START_REQ){
 8002d26:	7a3b      	ldrb	r3, [r7, #8]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d108      	bne.n	8002d3e <rs485_com_task+0x5e>
				RTtask.command = msg->u.cmd_msg.command;
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	79db      	ldrb	r3, [r3, #7]
 8002d30:	72bb      	strb	r3, [r7, #10]
				RTtask.address = msg->u.cmd_msg.address;
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	7a5b      	ldrb	r3, [r3, #9]
 8002d36:	733b      	strb	r3, [r7, #12]
				RTtask.sub1 = msg->u.cmd_msg.sub1;
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	7a9b      	ldrb	r3, [r3, #10]
 8002d3c:	737b      	strb	r3, [r7, #13]
			}

			event = RTtask.event;
 8002d3e:	7a3b      	ldrb	r3, [r7, #8]
 8002d40:	77fb      	strb	r3, [r7, #31]
			state = RTtask.state;
 8002d42:	7a7b      	ldrb	r3, [r7, #9]
 8002d44:	77bb      	strb	r3, [r7, #30]
			break;
 8002d46:	e004      	b.n	8002d52 <rs485_com_task+0x72>

		case osErrorTimeout:
		default:
			SKprintf("rs485_com_task():os_status=Error(%d)\r\n",os_status);
 8002d48:	6979      	ldr	r1, [r7, #20]
 8002d4a:	480d      	ldr	r0, [pc, #52]	; (8002d80 <rs485_com_task+0xa0>)
 8002d4c:	f000 fed0 	bl	8003af0 <SKprintf>
			break;
 8002d50:	bf00      	nop
		}

		if( msg->maroc_ptr != &RTtaskISR ){
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a0b      	ldr	r2, [pc, #44]	; (8002d84 <rs485_com_task+0xa4>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d004      	beq.n	8002d66 <rs485_com_task+0x86>
			vPortFree(msg->maroc_ptr);
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f007 fd05 	bl	800a770 <vPortFree>

		//-------------------------------------------------------------------------
		//	処理関数
		//-------------------------------------------------------------------------
		//Set_logInfo2("RS485 MAIN: event=%d, state=%d\r\n",event,state);
		(*rs485_func_table[event][state ])( &RTtask );
 8002d66:	7ffa      	ldrb	r2, [r7, #31]
 8002d68:	7fbb      	ldrb	r3, [r7, #30]
 8002d6a:	4907      	ldr	r1, [pc, #28]	; (8002d88 <rs485_com_task+0xa8>)
 8002d6c:	0092      	lsls	r2, r2, #2
 8002d6e:	4413      	add	r3, r2
 8002d70:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002d74:	f107 0208 	add.w	r2, r7, #8
 8002d78:	4610      	mov	r0, r2
 8002d7a:	4798      	blx	r3
		os_status = osMessageQueueGet (GetMessageQue(SK_TASK_sub2), &msgQueBuf, 0, osWaitForever);
 8002d7c:	e7ba      	b.n	8002cf4 <rs485_com_task+0x14>
 8002d7e:	bf00      	nop
 8002d80:	0800c258 	.word	0x0800c258
 8002d84:	20001a4c 	.word	0x20001a4c
 8002d88:	20000000 	.word	0x20000000

08002d8c <SendMsgQueISR>:

//==============================================================================
//　割込み用
//==============================================================================
void SendMsgQueISR(RS485_TASK_EVENT event, uint8_t task)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	4603      	mov	r3, r0
 8002d94:	460a      	mov	r2, r1
 8002d96:	71fb      	strb	r3, [r7, #7]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	71bb      	strb	r3, [r7, #6]
	MESSAGE_QUE_DATA	*msg;


	//msg = (MESSAGE_QUE_DATA *)pvPortMalloc(sizeof(MESSAGE_QUE_DATA));

	msg = &RTtaskISR;
 8002d9c:	4b0f      	ldr	r3, [pc, #60]	; (8002ddc <SendMsgQueISR+0x50>)
 8002d9e:	60fb      	str	r3, [r7, #12]
	msg->u.cmd_msg.event = event;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	79fa      	ldrb	r2, [r7, #7]
 8002da4:	715a      	strb	r2, [r3, #5]
	msg->send_task = task;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	79ba      	ldrb	r2, [r7, #6]
 8002daa:	711a      	strb	r2, [r3, #4]
	msg->maroc_ptr = (void *)msg;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	601a      	str	r2, [r3, #0]

	//SKprintf("event=0x%x, task=0x%x,msgpt=%p\r\n", msg->event,msg->send_task, msg->maroc_ptr);
	//   	lsize2 = xPortGetFreeHeapSize();
	// 		SKprintf("lsize1=0x%x,lsize2=%x\r\n",lsize1,lsize2);
	//    	SKprintf("MESSAGE_QUE_DATA=%p\r\n",msg);
	osStatus = osMessageQueuePut (GetMessageQue(SK_TASK_sub2), (void *)msg->maroc_ptr, 0,0);
 8002db2:	2002      	movs	r0, #2
 8002db4:	f7ff fa96 	bl	80022e4 <GetMessageQue>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6819      	ldr	r1, [r3, #0]
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f005 f824 	bl	8007e0c <osMessageQueuePut>
 8002dc4:	60b8      	str	r0, [r7, #8]
	if( osStatus == osOK ){
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d002      	beq.n	8002dd2 <SendMsgQueISR+0x46>
		//Set_logInfo("Rs485 RxRecived. Send MsgQue OK");
	}
	else{
		Set_logInfo("Rs485 RxRecived. Send MsgQue ERROR");
 8002dcc:	4804      	ldr	r0, [pc, #16]	; (8002de0 <SendMsgQueISR+0x54>)
 8002dce:	f7fe ffdf 	bl	8001d90 <Set_logInfo>
	}
}
 8002dd2:	bf00      	nop
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	20001a4c 	.word	0x20001a4c
 8002de0:	0800c280 	.word	0x0800c280

08002de4 <SendMsgQue>:

//==============================================================================
//
//==============================================================================
void SendMsgQue( CMD_MSG	*rt_task )
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
	osStatus_t 			osStatus;
	MESSAGE_QUE_DATA	*msg;


	msg = (MESSAGE_QUE_DATA *)pvPortMalloc(sizeof(MESSAGE_QUE_DATA));
 8002dec:	200c      	movs	r0, #12
 8002dee:	f007 fbf3 	bl	800a5d8 <pvPortMalloc>
 8002df2:	60f8      	str	r0, [r7, #12]

	msg->u.cmd_msg.event = rt_task->event;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	781a      	ldrb	r2, [r3, #0]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	715a      	strb	r2, [r3, #5]
	//msg->send_task = task;
	msg->maroc_ptr = (void *)msg;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	601a      	str	r2, [r3, #0]

	msg->u.cmd_msg.address = rt_task->address;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	791a      	ldrb	r2, [r3, #4]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	725a      	strb	r2, [r3, #9]
	msg->u.cmd_msg.command = rt_task->command;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	789a      	ldrb	r2, [r3, #2]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	71da      	strb	r2, [r3, #7]
	msg->u.cmd_msg.command_sub = rt_task->command_sub;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	78da      	ldrb	r2, [r3, #3]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	721a      	strb	r2, [r3, #8]
	msg->u.cmd_msg.sub1 = rt_task->sub1;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	795a      	ldrb	r2, [r3, #5]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	729a      	strb	r2, [r3, #10]

	//SKprintf("event=0x%x, task=0x%x,msgpt=%p\r\n", msg->event,msg->send_task, msg->maroc_ptr);
	//   	lsize2 = xPortGetFreeHeapSize();
	// 		SKprintf("lsize1=0x%x,lsize2=%x\r\n",lsize1,lsize2);
	//    	SKprintf("MESSAGE_QUE_DATA=%p\r\n",msg);
	osStatus = osMessageQueuePut (GetMessageQue(SK_TASK_sub2), (void *)msg->maroc_ptr, 0,0);
 8002e22:	2002      	movs	r0, #2
 8002e24:	f7ff fa5e 	bl	80022e4 <GetMessageQue>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6819      	ldr	r1, [r3, #0]
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f004 ffec 	bl	8007e0c <osMessageQueuePut>
 8002e34:	60b8      	str	r0, [r7, #8]
	if( osStatus == osOK ){
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d103      	bne.n	8002e44 <SendMsgQue+0x60>
		Set_logInfo("Rs485 RxRecived. Send MsgQue OK");
 8002e3c:	4805      	ldr	r0, [pc, #20]	; (8002e54 <SendMsgQue+0x70>)
 8002e3e:	f7fe ffa7 	bl	8001d90 <Set_logInfo>
	}
	else{
		Set_logInfo("Rs485 RxRecived. Send MsgQue ERROR");
	}
}
 8002e42:	e002      	b.n	8002e4a <SendMsgQue+0x66>
		Set_logInfo("Rs485 RxRecived. Send MsgQue ERROR");
 8002e44:	4804      	ldr	r0, [pc, #16]	; (8002e58 <SendMsgQue+0x74>)
 8002e46:	f7fe ffa3 	bl	8001d90 <Set_logInfo>
}
 8002e4a:	bf00      	nop
 8002e4c:	3710      	adds	r7, #16
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	0800c2a4 	.word	0x0800c2a4
 8002e58:	0800c280 	.word	0x0800c280

08002e5c <RS_nop>:

//==============================================================================
//
//==============================================================================
void RS_nop( CMD_MSG	*rt_task )
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
	Set_logInfo2("★RS_nop(S=%d,E=%d)",rt_task->state, rt_task->event);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	785b      	ldrb	r3, [r3, #1]
 8002e68:	4619      	mov	r1, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	461a      	mov	r2, r3
 8002e70:	4803      	ldr	r0, [pc, #12]	; (8002e80 <RS_nop+0x24>)
 8002e72:	f7ff f851 	bl	8001f18 <Set_logInfo2>
//	SKprintf("RS_nop(%d,%d)\r\n", rt_task->state, rt_task->event);
}
 8002e76:	bf00      	nop
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	0800c2c4 	.word	0x0800c2c4

08002e84 <RScomand_send>:
//==============================================================================
//
//==============================================================================
void RScomand_send( CMD_MSG	*rt_task )
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b086      	sub	sp, #24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
	RETURN_STATUS		status = RET_TRUE;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	75fb      	strb	r3, [r7, #23]
	uint8_t				timer_id;



//	Set_logInfo("RScomand_send()");
	Set_logInfo2("★RScomand_send(S=%d,E=%d)",rt_task->state, rt_task->event);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	785b      	ldrb	r3, [r3, #1]
 8002e94:	4619      	mov	r1, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	4834      	ldr	r0, [pc, #208]	; (8002f70 <RScomand_send+0xec>)
 8002e9e:	f7ff f83b 	bl	8001f18 <Set_logInfo2>

//	SKprintf("RScomand_send(%d,%d)\r\n", rt_task->state, rt_task->event);

	status = Send_rx485_cmd_message( rt_task );
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 fc36 	bl	8003714 <Send_rx485_cmd_message>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	75fb      	strb	r3, [r7, #23]

	if( status == RET_TRUE ){
 8002eac:	7dfb      	ldrb	r3, [r7, #23]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d15a      	bne.n	8002f68 <RScomand_send+0xe4>
		rt_task->state = RT_STATE_RESPONS_RECIVE;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2202      	movs	r2, #2
 8002eb6:	705a      	strb	r2, [r3, #1]
		uart[SK_UART1_RS485].totalnum = 0;
 8002eb8:	4b2e      	ldr	r3, [pc, #184]	; (8002f74 <RScomand_send+0xf0>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		work_buf_num = 0;
 8002ec0:	4b2d      	ldr	r3, [pc, #180]	; (8002f78 <RScomand_send+0xf4>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	701a      	strb	r2, [r3, #0]
		SKprintf("RScomand_send(%d,%d)\r\n", rt_task->state, rt_task->event);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	785b      	ldrb	r3, [r3, #1]
 8002eca:	4619      	mov	r1, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	482a      	ldr	r0, [pc, #168]	; (8002f7c <RScomand_send+0xf8>)
 8002ed4:	f000 fe0c 	bl	8003af0 <SKprintf>


		// タイムアウト　イベントをセット
		msg = (MESSAGE_QUE_DATA *)pvPortMalloc(sizeof(MESSAGE_QUE_DATA));
 8002ed8:	200c      	movs	r0, #12
 8002eda:	f007 fb7d 	bl	800a5d8 <pvPortMalloc>
 8002ede:	6138      	str	r0, [r7, #16]
		msg->maroc_ptr = msg;
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	693a      	ldr	r2, [r7, #16]
 8002ee4:	601a      	str	r2, [r3, #0]
		msg->u.cmd_msg.event = RT_EVENT_TIMEOUT;
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	2204      	movs	r2, #4
 8002eea:	715a      	strb	r2, [r3, #5]

		te_form = (TIMER_EVENT_FORM *)pvPortMalloc(sizeof(TIMER_EVENT_FORM));
 8002eec:	2018      	movs	r0, #24
 8002eee:	f007 fb73 	bl	800a5d8 <pvPortMalloc>
 8002ef2:	60f8      	str	r0, [r7, #12]
		te_form->maroc_ptr = te_form;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	601a      	str	r2, [r3, #0]
		te_form->mail_form = msg;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	611a      	str	r2, [r3, #16]
		te_form->hmsg = GetMessageQue(SK_TASK_sub2);
 8002f00:	2002      	movs	r0, #2
 8002f02:	f7ff f9ef 	bl	80022e4 <GetMessageQue>
 8002f06:	4602      	mov	r2, r0
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	609a      	str	r2, [r3, #8]
		te_form->time = 1000;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f12:	819a      	strh	r2, [r3, #12]
		timer_id = GetTimerEventID();
 8002f14:	f7ff fc52 	bl	80027bc <GetTimerEventID>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	72fb      	strb	r3, [r7, #11]
		if( timer_id == 0xff ){
 8002f1c:	7afb      	ldrb	r3, [r7, #11]
 8002f1e:	2bff      	cmp	r3, #255	; 0xff
 8002f20:	d102      	bne.n	8002f28 <RScomand_send+0xa4>
			SKprintf("TIMER EVENT NOT AVAILABLE\r\n");
 8002f22:	4817      	ldr	r0, [pc, #92]	; (8002f80 <RScomand_send+0xfc>)
 8002f24:	f000 fde4 	bl	8003af0 <SKprintf>
		}
		te_form->timer_id = rt_task->timer_id = timer_id;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	7afa      	ldrb	r2, [r7, #11]
 8002f2c:	719a      	strb	r2, [r3, #6]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	799a      	ldrb	r2, [r3, #6]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	751a      	strb	r2, [r3, #20]


		SKprintf("tm_form=%p, msg=%p\r\n",te_form, msg);
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	68f9      	ldr	r1, [r7, #12]
 8002f3a:	4812      	ldr	r0, [pc, #72]	; (8002f84 <RScomand_send+0x100>)
 8002f3c:	f000 fdd8 	bl	8003af0 <SKprintf>

		status = osMessageQueuePut (GetMessageQue(SK_TASK_sub1), (void *)te_form->maroc_ptr, 0,0);
 8002f40:	2001      	movs	r0, #1
 8002f42:	f7ff f9cf 	bl	80022e4 <GetMessageQue>
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6819      	ldr	r1, [r3, #0]
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f004 ff5d 	bl	8007e0c <osMessageQueuePut>
 8002f52:	4603      	mov	r3, r0
 8002f54:	75fb      	strb	r3, [r7, #23]
		if( status == osOK ){
 8002f56:	7dfb      	ldrb	r3, [r7, #23]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d002      	beq.n	8002f62 <RScomand_send+0xde>
			//Set_logInfo("RScomand_send(). Send MsgQue OK");
		}
		else{
			Set_logInfo("RScomand_send(). Send MsgQue ERROR");
 8002f5c:	480a      	ldr	r0, [pc, #40]	; (8002f88 <RScomand_send+0x104>)
 8002f5e:	f7fe ff17 	bl	8001d90 <Set_logInfo>
		}
		SKprintf("RScomand_send() End \r\n");
 8002f62:	480a      	ldr	r0, [pc, #40]	; (8002f8c <RScomand_send+0x108>)
 8002f64:	f000 fdc4 	bl	8003af0 <SKprintf>
	}
}
 8002f68:	bf00      	nop
 8002f6a:	3718      	adds	r7, #24
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	0800c2dc 	.word	0x0800c2dc
 8002f74:	200018cc 	.word	0x200018cc
 8002f78:	200018c8 	.word	0x200018c8
 8002f7c:	0800c2f8 	.word	0x0800c2f8
 8002f80:	0800c310 	.word	0x0800c310
 8002f84:	0800c32c 	.word	0x0800c32c
 8002f88:	0800c344 	.word	0x0800c344
 8002f8c:	0800c368 	.word	0x0800c368

08002f90 <RSrespons_recive>:
//==============================================================================
//
//==============================================================================
void RSrespons_recive( CMD_MSG	*rt_task )
{
 8002f90:	b590      	push	{r4, r7, lr}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
	RETURN_STATUS		status = RET_TRUE;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	73fb      	strb	r3, [r7, #15]
	CMD_MSG				msg;

	Set_logInfo2("★RSrespons_recive(S=%d,E=%d)",rt_task->state, rt_task->event);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	785b      	ldrb	r3, [r3, #1]
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	4824      	ldr	r0, [pc, #144]	; (800303c <RSrespons_recive+0xac>)
 8002faa:	f7fe ffb5 	bl	8001f18 <Set_logInfo2>

//	Set_logInfo("RSrespons_recive()");
//	SKprintf("RSrespons_recive(%d,%d)\r\n", rt_task->state, rt_task->event);

	while( uart[SK_UART1_RS485].rcvnum  > 0 ){
 8002fae:	e03b      	b.n	8003028 <RSrespons_recive+0x98>
		work_buf[work_buf_num ++] = Get_rcv_data(SK_UART1_RS485);
 8002fb0:	4b23      	ldr	r3, [pc, #140]	; (8003040 <RSrespons_recive+0xb0>)
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	1c5a      	adds	r2, r3, #1
 8002fb6:	b2d1      	uxtb	r1, r2
 8002fb8:	4a21      	ldr	r2, [pc, #132]	; (8003040 <RSrespons_recive+0xb0>)
 8002fba:	7011      	strb	r1, [r2, #0]
 8002fbc:	461c      	mov	r4, r3
 8002fbe:	2000      	movs	r0, #0
 8002fc0:	f7ff fe04 	bl	8002bcc <Get_rcv_data>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	4b1e      	ldr	r3, [pc, #120]	; (8003044 <RSrespons_recive+0xb4>)
 8002fca:	551a      	strb	r2, [r3, r4]

		if( Get_end_test_pt(work_buf_num, work_buf) != 0 ){
 8002fcc:	4b1c      	ldr	r3, [pc, #112]	; (8003040 <RSrespons_recive+0xb0>)
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	491c      	ldr	r1, [pc, #112]	; (8003044 <RSrespons_recive+0xb4>)
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f000 f9db 	bl	8003390 <Get_end_test_pt>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d023      	beq.n	8003028 <RSrespons_recive+0x98>
			SKprintf("Respons Recive\r\n");
 8002fe0:	4819      	ldr	r0, [pc, #100]	; (8003048 <RSrespons_recive+0xb8>)
 8002fe2:	f000 fd85 	bl	8003af0 <SKprintf>
			ReleaceTimerEvent(rt_task->timer_id);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	799b      	ldrb	r3, [r3, #6]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7ff fc16 	bl	800281c <ReleaceTimerEvent>
			status = Set_Res_Message(work_buf_num, work_buf,Res_mesg);
 8002ff0:	4b13      	ldr	r3, [pc, #76]	; (8003040 <RSrespons_recive+0xb0>)
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	4a15      	ldr	r2, [pc, #84]	; (800304c <RSrespons_recive+0xbc>)
 8002ff8:	4912      	ldr	r1, [pc, #72]	; (8003044 <RSrespons_recive+0xb4>)
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f000 fa1e 	bl	800343c <Set_Res_Message>
 8003000:	4603      	mov	r3, r0
 8003002:	73fb      	strb	r3, [r7, #15]
			if( status == RET_TRUE ){
 8003004:	7bfb      	ldrb	r3, [r7, #15]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d10a      	bne.n	8003020 <RSrespons_recive+0x90>
				rt_task->state = RT_STATE_RESPONS;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2203      	movs	r2, #3
 800300e:	705a      	strb	r2, [r3, #1]

				msg.event = RT_EVENT_RESPONS;
 8003010:	2302      	movs	r3, #2
 8003012:	723b      	strb	r3, [r7, #8]
				SendMsgQue(&msg);
 8003014:	f107 0308 	add.w	r3, r7, #8
 8003018:	4618      	mov	r0, r3
 800301a:	f7ff fee3 	bl	8002de4 <SendMsgQue>
			}
			else{
				rt_task->state  = RT_STATE_READY;
			}
			break;
 800301e:	e009      	b.n	8003034 <RSrespons_recive+0xa4>
				rt_task->state  = RT_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	705a      	strb	r2, [r3, #1]
			break;
 8003026:	e005      	b.n	8003034 <RSrespons_recive+0xa4>
	while( uart[SK_UART1_RS485].rcvnum  > 0 ){
 8003028:	4b09      	ldr	r3, [pc, #36]	; (8003050 <RSrespons_recive+0xc0>)
 800302a:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1be      	bne.n	8002fb0 <RSrespons_recive+0x20>
		}
	}
}
 8003032:	bf00      	nop
 8003034:	bf00      	nop
 8003036:	3714      	adds	r7, #20
 8003038:	46bd      	mov	sp, r7
 800303a:	bd90      	pop	{r4, r7, pc}
 800303c:	0800c380 	.word	0x0800c380
 8003040:	200018c8 	.word	0x200018c8
 8003044:	20001848 	.word	0x20001848
 8003048:	0800c3a0 	.word	0x0800c3a0
 800304c:	20001a00 	.word	0x20001a00
 8003050:	200018cc 	.word	0x200018cc

08003054 <RSTimeout>:

//==============================================================================
//
//==============================================================================
void RSTimeout( CMD_MSG	*rt_task )
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b088      	sub	sp, #32
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
	char	 	c[17];
	uint8_t		i,j,k;

	Set_logInfo2("★RSTimeout(S=%d,E=%d)",rt_task->state, rt_task->event);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	785b      	ldrb	r3, [r3, #1]
 8003060:	4619      	mov	r1, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	461a      	mov	r2, r3
 8003068:	4852      	ldr	r0, [pc, #328]	; (80031b4 <RSTimeout+0x160>)
 800306a:	f7fe ff55 	bl	8001f18 <Set_logInfo2>

	rt_task->state = RT_STATE_READY;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2201      	movs	r2, #1
 8003072:	705a      	strb	r2, [r3, #1]
	Set_logInfo2("TIME OUT END");
 8003074:	4850      	ldr	r0, [pc, #320]	; (80031b8 <RSTimeout+0x164>)
 8003076:	f7fe ff4f 	bl	8001f18 <Set_logInfo2>



	SKprintf("totalnum =%d\r\n",uart[SK_UART1_RS485].totalnum);
 800307a:	4b50      	ldr	r3, [pc, #320]	; (80031bc <RSTimeout+0x168>)
 800307c:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8003080:	4619      	mov	r1, r3
 8003082:	484f      	ldr	r0, [pc, #316]	; (80031c0 <RSTimeout+0x16c>)
 8003084:	f000 fd34 	bl	8003af0 <SKprintf>
	SKprintf("rcvnum   =%d\r\n",uart[SK_UART1_RS485].rcvnum);
 8003088:	4b4c      	ldr	r3, [pc, #304]	; (80031bc <RSTimeout+0x168>)
 800308a:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800308e:	4619      	mov	r1, r3
 8003090:	484c      	ldr	r0, [pc, #304]	; (80031c4 <RSTimeout+0x170>)
 8003092:	f000 fd2d 	bl	8003af0 <SKprintf>
	SKprintf("rcv_wpt  =%d\r\n",uart[SK_UART1_RS485].rcv_wpt);
 8003096:	4b49      	ldr	r3, [pc, #292]	; (80031bc <RSTimeout+0x168>)
 8003098:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800309c:	4619      	mov	r1, r3
 800309e:	484a      	ldr	r0, [pc, #296]	; (80031c8 <RSTimeout+0x174>)
 80030a0:	f000 fd26 	bl	8003af0 <SKprintf>
	SKprintf("rcv_rpt  =%d\r\n",uart[SK_UART1_RS485].rcv_rpt);
 80030a4:	4b45      	ldr	r3, [pc, #276]	; (80031bc <RSTimeout+0x168>)
 80030a6:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 80030aa:	4619      	mov	r1, r3
 80030ac:	4847      	ldr	r0, [pc, #284]	; (80031cc <RSTimeout+0x178>)
 80030ae:	f000 fd1f 	bl	8003af0 <SKprintf>

	c[16] = '\0';
 80030b2:	2300      	movs	r3, #0
 80030b4:	773b      	strb	r3, [r7, #28]
	for(i=0; i< RCV_BUF_SIZE/16; i++ ){
 80030b6:	2300      	movs	r3, #0
 80030b8:	77fb      	strb	r3, [r7, #31]
 80030ba:	e032      	b.n	8003122 <RSTimeout+0xce>

		SKprintf(" [%03d] ", i*16 );
 80030bc:	7ffb      	ldrb	r3, [r7, #31]
 80030be:	011b      	lsls	r3, r3, #4
 80030c0:	4619      	mov	r1, r3
 80030c2:	4843      	ldr	r0, [pc, #268]	; (80031d0 <RSTimeout+0x17c>)
 80030c4:	f000 fd14 	bl	8003af0 <SKprintf>

		for(j=0; j< 16; j++ ){
 80030c8:	2300      	movs	r3, #0
 80030ca:	77bb      	strb	r3, [r7, #30]
 80030cc:	e01d      	b.n	800310a <RSTimeout+0xb6>
			k = uart[SK_UART1_RS485].rcvbuf[i*16+j];
 80030ce:	7ffb      	ldrb	r3, [r7, #31]
 80030d0:	011a      	lsls	r2, r3, #4
 80030d2:	7fbb      	ldrb	r3, [r7, #30]
 80030d4:	4413      	add	r3, r2
 80030d6:	4a39      	ldr	r2, [pc, #228]	; (80031bc <RSTimeout+0x168>)
 80030d8:	4413      	add	r3, r2
 80030da:	789b      	ldrb	r3, [r3, #2]
 80030dc:	777b      	strb	r3, [r7, #29]
			SKprintf(" %02x ", k );
 80030de:	7f7b      	ldrb	r3, [r7, #29]
 80030e0:	4619      	mov	r1, r3
 80030e2:	483c      	ldr	r0, [pc, #240]	; (80031d4 <RSTimeout+0x180>)
 80030e4:	f000 fd04 	bl	8003af0 <SKprintf>
			c[j] =  (uint8_t)((k<0x20||k>=0x7f)? '.': k);
 80030e8:	7f7b      	ldrb	r3, [r7, #29]
 80030ea:	2b1f      	cmp	r3, #31
 80030ec:	d904      	bls.n	80030f8 <RSTimeout+0xa4>
 80030ee:	7f7b      	ldrb	r3, [r7, #29]
 80030f0:	2b7e      	cmp	r3, #126	; 0x7e
 80030f2:	d801      	bhi.n	80030f8 <RSTimeout+0xa4>
 80030f4:	7f7a      	ldrb	r2, [r7, #29]
 80030f6:	e000      	b.n	80030fa <RSTimeout+0xa6>
 80030f8:	222e      	movs	r2, #46	; 0x2e
 80030fa:	7fbb      	ldrb	r3, [r7, #30]
 80030fc:	3320      	adds	r3, #32
 80030fe:	443b      	add	r3, r7
 8003100:	f803 2c14 	strb.w	r2, [r3, #-20]
		for(j=0; j< 16; j++ ){
 8003104:	7fbb      	ldrb	r3, [r7, #30]
 8003106:	3301      	adds	r3, #1
 8003108:	77bb      	strb	r3, [r7, #30]
 800310a:	7fbb      	ldrb	r3, [r7, #30]
 800310c:	2b0f      	cmp	r3, #15
 800310e:	d9de      	bls.n	80030ce <RSTimeout+0x7a>
		}
		SKprintf("  %s\r\n",c );
 8003110:	f107 030c 	add.w	r3, r7, #12
 8003114:	4619      	mov	r1, r3
 8003116:	4830      	ldr	r0, [pc, #192]	; (80031d8 <RSTimeout+0x184>)
 8003118:	f000 fcea 	bl	8003af0 <SKprintf>
	for(i=0; i< RCV_BUF_SIZE/16; i++ ){
 800311c:	7ffb      	ldrb	r3, [r7, #31]
 800311e:	3301      	adds	r3, #1
 8003120:	77fb      	strb	r3, [r7, #31]
 8003122:	7ffb      	ldrb	r3, [r7, #31]
 8003124:	2b07      	cmp	r3, #7
 8003126:	d9c9      	bls.n	80030bc <RSTimeout+0x68>
	}

	SKprintf("\r\nwork_buf_num =%d\r\n",work_buf_num);
 8003128:	4b2c      	ldr	r3, [pc, #176]	; (80031dc <RSTimeout+0x188>)
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	4619      	mov	r1, r3
 800312e:	482c      	ldr	r0, [pc, #176]	; (80031e0 <RSTimeout+0x18c>)
 8003130:	f000 fcde 	bl	8003af0 <SKprintf>

	c[16] = '\0';
 8003134:	2300      	movs	r3, #0
 8003136:	773b      	strb	r3, [r7, #28]
	for(i=0; i< RCV_BUF_SIZE/16; i++ ){
 8003138:	2300      	movs	r3, #0
 800313a:	77fb      	strb	r3, [r7, #31]
 800313c:	e031      	b.n	80031a2 <RSTimeout+0x14e>

		SKprintf(" [%03d] ", i*16 );
 800313e:	7ffb      	ldrb	r3, [r7, #31]
 8003140:	011b      	lsls	r3, r3, #4
 8003142:	4619      	mov	r1, r3
 8003144:	4822      	ldr	r0, [pc, #136]	; (80031d0 <RSTimeout+0x17c>)
 8003146:	f000 fcd3 	bl	8003af0 <SKprintf>

		for(j=0; j< 16; j++ ){
 800314a:	2300      	movs	r3, #0
 800314c:	77bb      	strb	r3, [r7, #30]
 800314e:	e01c      	b.n	800318a <RSTimeout+0x136>
			k = work_buf[i*16+j];
 8003150:	7ffb      	ldrb	r3, [r7, #31]
 8003152:	011a      	lsls	r2, r3, #4
 8003154:	7fbb      	ldrb	r3, [r7, #30]
 8003156:	4413      	add	r3, r2
 8003158:	4a22      	ldr	r2, [pc, #136]	; (80031e4 <RSTimeout+0x190>)
 800315a:	5cd3      	ldrb	r3, [r2, r3]
 800315c:	777b      	strb	r3, [r7, #29]
			SKprintf(" %02x ", k );
 800315e:	7f7b      	ldrb	r3, [r7, #29]
 8003160:	4619      	mov	r1, r3
 8003162:	481c      	ldr	r0, [pc, #112]	; (80031d4 <RSTimeout+0x180>)
 8003164:	f000 fcc4 	bl	8003af0 <SKprintf>
			c[j] =  (uint8_t)((k<0x20||k>=0x7f)? '.': k);
 8003168:	7f7b      	ldrb	r3, [r7, #29]
 800316a:	2b1f      	cmp	r3, #31
 800316c:	d904      	bls.n	8003178 <RSTimeout+0x124>
 800316e:	7f7b      	ldrb	r3, [r7, #29]
 8003170:	2b7e      	cmp	r3, #126	; 0x7e
 8003172:	d801      	bhi.n	8003178 <RSTimeout+0x124>
 8003174:	7f7a      	ldrb	r2, [r7, #29]
 8003176:	e000      	b.n	800317a <RSTimeout+0x126>
 8003178:	222e      	movs	r2, #46	; 0x2e
 800317a:	7fbb      	ldrb	r3, [r7, #30]
 800317c:	3320      	adds	r3, #32
 800317e:	443b      	add	r3, r7
 8003180:	f803 2c14 	strb.w	r2, [r3, #-20]
		for(j=0; j< 16; j++ ){
 8003184:	7fbb      	ldrb	r3, [r7, #30]
 8003186:	3301      	adds	r3, #1
 8003188:	77bb      	strb	r3, [r7, #30]
 800318a:	7fbb      	ldrb	r3, [r7, #30]
 800318c:	2b0f      	cmp	r3, #15
 800318e:	d9df      	bls.n	8003150 <RSTimeout+0xfc>
		}
		SKprintf("  %s\r\n",c );
 8003190:	f107 030c 	add.w	r3, r7, #12
 8003194:	4619      	mov	r1, r3
 8003196:	4810      	ldr	r0, [pc, #64]	; (80031d8 <RSTimeout+0x184>)
 8003198:	f000 fcaa 	bl	8003af0 <SKprintf>
	for(i=0; i< RCV_BUF_SIZE/16; i++ ){
 800319c:	7ffb      	ldrb	r3, [r7, #31]
 800319e:	3301      	adds	r3, #1
 80031a0:	77fb      	strb	r3, [r7, #31]
 80031a2:	7ffb      	ldrb	r3, [r7, #31]
 80031a4:	2b07      	cmp	r3, #7
 80031a6:	d9ca      	bls.n	800313e <RSTimeout+0xea>
	}

}
 80031a8:	bf00      	nop
 80031aa:	bf00      	nop
 80031ac:	3720      	adds	r7, #32
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	0800c3b4 	.word	0x0800c3b4
 80031b8:	0800c3cc 	.word	0x0800c3cc
 80031bc:	200018cc 	.word	0x200018cc
 80031c0:	0800c3dc 	.word	0x0800c3dc
 80031c4:	0800c3ec 	.word	0x0800c3ec
 80031c8:	0800c3fc 	.word	0x0800c3fc
 80031cc:	0800c40c 	.word	0x0800c40c
 80031d0:	0800c41c 	.word	0x0800c41c
 80031d4:	0800c428 	.word	0x0800c428
 80031d8:	0800c430 	.word	0x0800c430
 80031dc:	200018c8 	.word	0x200018c8
 80031e0:	0800c438 	.word	0x0800c438
 80031e4:	20001848 	.word	0x20001848

080031e8 <RSrespons_proc>:

//==============================================================================
//
//==============================================================================
void RSrespons_proc( CMD_MSG	*rt_task )
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b088      	sub	sp, #32
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
	RETURN_STATUS		status = RET_TRUE;
 80031f0:	2301      	movs	r3, #1
 80031f2:	77fb      	strb	r3, [r7, #31]
	uint8_t		*pt;
	uint8_t 	*msgQueBuf;


//	Set_logInfo("RSrespons_proc(()");
	Set_logInfo2("★RSrespons_proc(S=%d,E=%d)",rt_task->state, rt_task->event);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	785b      	ldrb	r3, [r3, #1]
 80031f8:	4619      	mov	r1, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	461a      	mov	r2, r3
 8003200:	4857      	ldr	r0, [pc, #348]	; (8003360 <RSrespons_proc+0x178>)
 8003202:	f7fe fe89 	bl	8001f18 <Set_logInfo2>
//	SKprintf("RSrespons_proc(%d,%d)\r\n", );

	status = RET_TRUE;
 8003206:	2301      	movs	r3, #1
 8003208:	77fb      	strb	r3, [r7, #31]
	switch( Res_mesg[COM_COMMAND] ){
 800320a:	4b56      	ldr	r3, [pc, #344]	; (8003364 <RSrespons_proc+0x17c>)
 800320c:	7b5b      	ldrb	r3, [r3, #13]
 800320e:	3b01      	subs	r3, #1
 8003210:	2b03      	cmp	r3, #3
 8003212:	d86a      	bhi.n	80032ea <RSrespons_proc+0x102>
 8003214:	a201      	add	r2, pc, #4	; (adr r2, 800321c <RSrespons_proc+0x34>)
 8003216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800321a:	bf00      	nop
 800321c:	0800322d 	.word	0x0800322d
 8003220:	08003235 	.word	0x08003235
 8003224:	08003281 	.word	0x08003281
 8003228:	08003289 	.word	0x08003289
	case RS485_CMD_STATUS:
		SKprintf("RS485_CMD_STATUS\r\n");
 800322c:	484e      	ldr	r0, [pc, #312]	; (8003368 <RSrespons_proc+0x180>)
 800322e:	f000 fc5f 	bl	8003af0 <SKprintf>

		break;
 8003232:	e05d      	b.n	80032f0 <RSrespons_proc+0x108>
	case RS485_CMD_VERSION:
		SKprintf("RS485_CMD_VERSION\r\n");
 8003234:	484d      	ldr	r0, [pc, #308]	; (800336c <RSrespons_proc+0x184>)
 8003236:	f000 fc5b 	bl	8003af0 <SKprintf>

		dt16 = Res_mesg[COM_SLV_VERSION_H];
 800323a:	4b4a      	ldr	r3, [pc, #296]	; (8003364 <RSrespons_proc+0x17c>)
 800323c:	7c1b      	ldrb	r3, [r3, #16]
 800323e:	82fb      	strh	r3, [r7, #22]
		dt16 <<= 8;
 8003240:	8afb      	ldrh	r3, [r7, #22]
 8003242:	021b      	lsls	r3, r3, #8
 8003244:	82fb      	strh	r3, [r7, #22]
		dt16 |= Res_mesg[COM_SLV_VERSION_L];
 8003246:	4b47      	ldr	r3, [pc, #284]	; (8003364 <RSrespons_proc+0x17c>)
 8003248:	7bdb      	ldrb	r3, [r3, #15]
 800324a:	b29a      	uxth	r2, r3
 800324c:	8afb      	ldrh	r3, [r7, #22]
 800324e:	4313      	orrs	r3, r2
 8003250:	82fb      	strh	r3, [r7, #22]

		SKprintf("  SLV VER = %04x, ",dt16);
 8003252:	8afb      	ldrh	r3, [r7, #22]
 8003254:	4619      	mov	r1, r3
 8003256:	4846      	ldr	r0, [pc, #280]	; (8003370 <RSrespons_proc+0x188>)
 8003258:	f000 fc4a 	bl	8003af0 <SKprintf>

		dt16 = Res_mesg[COM_SNS_VERSION_H];
 800325c:	4b41      	ldr	r3, [pc, #260]	; (8003364 <RSrespons_proc+0x17c>)
 800325e:	7c9b      	ldrb	r3, [r3, #18]
 8003260:	82fb      	strh	r3, [r7, #22]
		dt16 <<= 8;
 8003262:	8afb      	ldrh	r3, [r7, #22]
 8003264:	021b      	lsls	r3, r3, #8
 8003266:	82fb      	strh	r3, [r7, #22]
		dt16 |= Res_mesg[COM_SNS_VERSION_L];
 8003268:	4b3e      	ldr	r3, [pc, #248]	; (8003364 <RSrespons_proc+0x17c>)
 800326a:	7c5b      	ldrb	r3, [r3, #17]
 800326c:	b29a      	uxth	r2, r3
 800326e:	8afb      	ldrh	r3, [r7, #22]
 8003270:	4313      	orrs	r3, r2
 8003272:	82fb      	strh	r3, [r7, #22]
		SKprintf("  SNS VER = %04x \r\n",dt16);
 8003274:	8afb      	ldrh	r3, [r7, #22]
 8003276:	4619      	mov	r1, r3
 8003278:	483e      	ldr	r0, [pc, #248]	; (8003374 <RSrespons_proc+0x18c>)
 800327a:	f000 fc39 	bl	8003af0 <SKprintf>

		break;
 800327e:	e037      	b.n	80032f0 <RSrespons_proc+0x108>
	case RS485_CMD_MESUR:
		SKprintf("RS485_CMD_MESUR\r\n");
 8003280:	483d      	ldr	r0, [pc, #244]	; (8003378 <RSrespons_proc+0x190>)
 8003282:	f000 fc35 	bl	8003af0 <SKprintf>

		break;
 8003286:	e033      	b.n	80032f0 <RSrespons_proc+0x108>
	case RS485_CMD_MESUR_DATA:
		SKprintf("RS485_CMD_MESUR_DATA\r\n");
 8003288:	483c      	ldr	r0, [pc, #240]	; (800337c <RSrespons_proc+0x194>)
 800328a:	f000 fc31 	bl	8003af0 <SKprintf>

		pt = (uint8_t *)&dtf;
 800328e:	f107 0308 	add.w	r3, r7, #8
 8003292:	61bb      	str	r3, [r7, #24]
		pt[3] = Res_mesg[COM_MESUR_DATA_H];
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	3303      	adds	r3, #3
 8003298:	4a32      	ldr	r2, [pc, #200]	; (8003364 <RSrespons_proc+0x17c>)
 800329a:	7c92      	ldrb	r2, [r2, #18]
 800329c:	701a      	strb	r2, [r3, #0]
		pt[2] = Res_mesg[COM_MESUR_DATA_MH];
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	3302      	adds	r3, #2
 80032a2:	4a30      	ldr	r2, [pc, #192]	; (8003364 <RSrespons_proc+0x17c>)
 80032a4:	7c52      	ldrb	r2, [r2, #17]
 80032a6:	701a      	strb	r2, [r3, #0]
		pt[1] = Res_mesg[COM_MESUR_DATA_ML];
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	3301      	adds	r3, #1
 80032ac:	4a2d      	ldr	r2, [pc, #180]	; (8003364 <RSrespons_proc+0x17c>)
 80032ae:	7c12      	ldrb	r2, [r2, #16]
 80032b0:	701a      	strb	r2, [r3, #0]
		pt[0] = Res_mesg[COM_MESUR_DATA_L];
 80032b2:	4b2c      	ldr	r3, [pc, #176]	; (8003364 <RSrespons_proc+0x17c>)
 80032b4:	7bda      	ldrb	r2, [r3, #15]
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	701a      	strb	r2, [r3, #0]


		if( rt_task->address == RS485_AD_SLEVE01){
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	791b      	ldrb	r3, [r3, #4]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d109      	bne.n	80032d6 <RSrespons_proc+0xee>
			Set_logInfo2("SLAVE01 DATA = %fmm",dtf);
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7fd fa81 	bl	80007cc <__aeabi_f2d>
 80032ca:	4602      	mov	r2, r0
 80032cc:	460b      	mov	r3, r1
 80032ce:	482c      	ldr	r0, [pc, #176]	; (8003380 <RSrespons_proc+0x198>)
 80032d0:	f7fe fe22 	bl	8001f18 <Set_logInfo2>
			Set_logInfo2("SLAVE02 DATA = %fmm",dtf);
		}



		break;
 80032d4:	e00c      	b.n	80032f0 <RSrespons_proc+0x108>
			Set_logInfo2("SLAVE02 DATA = %fmm",dtf);
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	4618      	mov	r0, r3
 80032da:	f7fd fa77 	bl	80007cc <__aeabi_f2d>
 80032de:	4602      	mov	r2, r0
 80032e0:	460b      	mov	r3, r1
 80032e2:	4828      	ldr	r0, [pc, #160]	; (8003384 <RSrespons_proc+0x19c>)
 80032e4:	f7fe fe18 	bl	8001f18 <Set_logInfo2>
		break;
 80032e8:	e002      	b.n	80032f0 <RSrespons_proc+0x108>
	default:
		status = RET_FALSE;
 80032ea:	2300      	movs	r3, #0
 80032ec:	77fb      	strb	r3, [r7, #31]
		//SKprintf("ERROR Recive Command None \r\n");
		break;
 80032ee:	bf00      	nop
	}

	if( status == RET_TRUE ){
 80032f0:	7ffb      	ldrb	r3, [r7, #31]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d12f      	bne.n	8003356 <RSrespons_proc+0x16e>
		rt_task->state = RT_STATE_READY;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2201      	movs	r2, #1
 80032fa:	705a      	strb	r2, [r3, #1]
		cmd_ptr ++;
 80032fc:	4b22      	ldr	r3, [pc, #136]	; (8003388 <RSrespons_proc+0x1a0>)
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	3301      	adds	r3, #1
 8003302:	b2da      	uxtb	r2, r3
 8003304:	4b20      	ldr	r3, [pc, #128]	; (8003388 <RSrespons_proc+0x1a0>)
 8003306:	701a      	strb	r2, [r3, #0]

		rt_task->command_sub --;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	78db      	ldrb	r3, [r3, #3]
 800330c:	3b01      	subs	r3, #1
 800330e:	b2da      	uxtb	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	70da      	strb	r2, [r3, #3]

		if(rt_task->command_sub > 0 ){
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	78db      	ldrb	r3, [r3, #3]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d019      	beq.n	8003350 <RSrespons_proc+0x168>
			msg.event = RT_EVENT_START_REQ;
 800331c:	2300      	movs	r3, #0
 800331e:	733b      	strb	r3, [r7, #12]

			if( rt_task->address == RS485_AD_SLEVE01){
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	791b      	ldrb	r3, [r3, #4]
 8003324:	2b01      	cmp	r3, #1
 8003326:	d102      	bne.n	800332e <RSrespons_proc+0x146>
				msg.address = RS485_AD_SLEVE02;
 8003328:	2302      	movs	r3, #2
 800332a:	743b      	strb	r3, [r7, #16]
 800332c:	e001      	b.n	8003332 <RSrespons_proc+0x14a>
			}
			else{
				msg.address = RS485_AD_SLEVE01;
 800332e:	2301      	movs	r3, #1
 8003330:	743b      	strb	r3, [r7, #16]
			}

			msg.command = rt_task->command;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	789b      	ldrb	r3, [r3, #2]
 8003336:	73bb      	strb	r3, [r7, #14]
			msg.command_sub = rt_task->command_sub;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	78db      	ldrb	r3, [r3, #3]
 800333c:	73fb      	strb	r3, [r7, #15]
			msg.sub1 = rt_task->sub1;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	795b      	ldrb	r3, [r3, #5]
 8003342:	747b      	strb	r3, [r7, #17]

			SendMsgQue(&msg);
 8003344:	f107 030c 	add.w	r3, r7, #12
 8003348:	4618      	mov	r0, r3
 800334a:	f7ff fd4b 	bl	8002de4 <SendMsgQue>
			Set_logInfo2("END RSrespons_OK");
		}
	}


}
 800334e:	e002      	b.n	8003356 <RSrespons_proc+0x16e>
			Set_logInfo2("END RSrespons_OK");
 8003350:	480e      	ldr	r0, [pc, #56]	; (800338c <RSrespons_proc+0x1a4>)
 8003352:	f7fe fde1 	bl	8001f18 <Set_logInfo2>
}
 8003356:	bf00      	nop
 8003358:	3720      	adds	r7, #32
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	0800c450 	.word	0x0800c450
 8003364:	20001a00 	.word	0x20001a00
 8003368:	0800c470 	.word	0x0800c470
 800336c:	0800c484 	.word	0x0800c484
 8003370:	0800c498 	.word	0x0800c498
 8003374:	0800c4ac 	.word	0x0800c4ac
 8003378:	0800c4c0 	.word	0x0800c4c0
 800337c:	0800c4d4 	.word	0x0800c4d4
 8003380:	0800c4ec 	.word	0x0800c4ec
 8003384:	0800c500 	.word	0x0800c500
 8003388:	20001a46 	.word	0x20001a46
 800338c:	0800c514 	.word	0x0800c514

08003390 <Get_end_test_pt>:

//==============================================================================
//
//==============================================================================
uint16_t  Get_end_test_pt(uint16_t num,uint8_t *buf )
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	4603      	mov	r3, r0
 8003398:	6039      	str	r1, [r7, #0]
 800339a:	80fb      	strh	r3, [r7, #6]
	uint16_t	i;
	uint16_t	rtn;

	rtn = 0;
 800339c:	2300      	movs	r3, #0
 800339e:	81bb      	strh	r3, [r7, #12]

	for( i=0; i<num; i++){
 80033a0:	2300      	movs	r3, #0
 80033a2:	81fb      	strh	r3, [r7, #14]
 80033a4:	e03f      	b.n	8003426 <Get_end_test_pt+0x96>
		if( (i+TEXT_LENGTH) > num ){
 80033a6:	89fb      	ldrh	r3, [r7, #14]
 80033a8:	1d5a      	adds	r2, r3, #5
 80033aa:	88fb      	ldrh	r3, [r7, #6]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	db02      	blt.n	80033b6 <Get_end_test_pt+0x26>
			rtn = 0;
 80033b0:	2300      	movs	r3, #0
 80033b2:	81bb      	strh	r3, [r7, #12]
			//SKprintf("None\r\n");
			break;
 80033b4:	e03b      	b.n	800342e <Get_end_test_pt+0x9e>
		}
		else if( buf[i] == message_end_text[0]
 80033b6:	89fb      	ldrh	r3, [r7, #14]
 80033b8:	683a      	ldr	r2, [r7, #0]
 80033ba:	4413      	add	r3, r2
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	224d      	movs	r2, #77	; 0x4d
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d12d      	bne.n	8003420 <Get_end_test_pt+0x90>
				&& buf[i+1] == message_end_text[1]
 80033c4:	89fb      	ldrh	r3, [r7, #14]
 80033c6:	3301      	adds	r3, #1
 80033c8:	683a      	ldr	r2, [r7, #0]
 80033ca:	4413      	add	r3, r2
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	2253      	movs	r2, #83	; 0x53
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d125      	bne.n	8003420 <Get_end_test_pt+0x90>
				&& buf[i+2] == message_end_text[2]
 80033d4:	89fb      	ldrh	r3, [r7, #14]
 80033d6:	3302      	adds	r3, #2
 80033d8:	683a      	ldr	r2, [r7, #0]
 80033da:	4413      	add	r3, r2
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	2247      	movs	r2, #71	; 0x47
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d11d      	bne.n	8003420 <Get_end_test_pt+0x90>
				&& buf[i+3] == message_end_text[3]
 80033e4:	89fb      	ldrh	r3, [r7, #14]
 80033e6:	3303      	adds	r3, #3
 80033e8:	683a      	ldr	r2, [r7, #0]
 80033ea:	4413      	add	r3, r2
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	2245      	movs	r2, #69	; 0x45
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d115      	bne.n	8003420 <Get_end_test_pt+0x90>
				&& buf[i+4] == message_end_text[4]
 80033f4:	89fb      	ldrh	r3, [r7, #14]
 80033f6:	3304      	adds	r3, #4
 80033f8:	683a      	ldr	r2, [r7, #0]
 80033fa:	4413      	add	r3, r2
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	224e      	movs	r2, #78	; 0x4e
 8003400:	4293      	cmp	r3, r2
 8003402:	d10d      	bne.n	8003420 <Get_end_test_pt+0x90>
				&& buf[i+5] == message_end_text[5] ){
 8003404:	89fb      	ldrh	r3, [r7, #14]
 8003406:	3305      	adds	r3, #5
 8003408:	683a      	ldr	r2, [r7, #0]
 800340a:	4413      	add	r3, r2
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	2244      	movs	r2, #68	; 0x44
 8003410:	4293      	cmp	r3, r2
 8003412:	d105      	bne.n	8003420 <Get_end_test_pt+0x90>

			SKprintf("FIX\r\n");
 8003414:	4808      	ldr	r0, [pc, #32]	; (8003438 <Get_end_test_pt+0xa8>)
 8003416:	f000 fb6b 	bl	8003af0 <SKprintf>
			rtn = i;
 800341a:	89fb      	ldrh	r3, [r7, #14]
 800341c:	81bb      	strh	r3, [r7, #12]
			break;
 800341e:	e006      	b.n	800342e <Get_end_test_pt+0x9e>
	for( i=0; i<num; i++){
 8003420:	89fb      	ldrh	r3, [r7, #14]
 8003422:	3301      	adds	r3, #1
 8003424:	81fb      	strh	r3, [r7, #14]
 8003426:	89fa      	ldrh	r2, [r7, #14]
 8003428:	88fb      	ldrh	r3, [r7, #6]
 800342a:	429a      	cmp	r2, r3
 800342c:	d3bb      	bcc.n	80033a6 <Get_end_test_pt+0x16>
		}
	}

	return rtn;
 800342e:	89bb      	ldrh	r3, [r7, #12]
}
 8003430:	4618      	mov	r0, r3
 8003432:	3710      	adds	r7, #16
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	0800c528 	.word	0x0800c528

0800343c <Set_Res_Message>:
//==============================================================================
//
//==============================================================================
RETURN_STATUS  Set_Res_Message(uint16_t num, uint8_t *src, uint8_t *dist)
{
 800343c:	b590      	push	{r4, r7, lr}
 800343e:	b089      	sub	sp, #36	; 0x24
 8003440:	af00      	add	r7, sp, #0
 8003442:	4603      	mov	r3, r0
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
 8003448:	81fb      	strh	r3, [r7, #14]
	RETURN_STATUS	status = RET_TRUE;
 800344a:	2301      	movs	r3, #1
 800344c:	77fb      	strb	r3, [r7, #31]
	uint8_t		c[2];

	//-------------------------------------------------------
	// Command buffer Clesr
	//-------------------------------------------------------
	for( i=0; i < COM_TABLE_MAX; i++ ){
 800344e:	2300      	movs	r3, #0
 8003450:	83bb      	strh	r3, [r7, #28]
 8003452:	e006      	b.n	8003462 <Set_Res_Message+0x26>
		Res_mesg[i] = 0;
 8003454:	8bbb      	ldrh	r3, [r7, #28]
 8003456:	4a93      	ldr	r2, [pc, #588]	; (80036a4 <Set_Res_Message+0x268>)
 8003458:	2100      	movs	r1, #0
 800345a:	54d1      	strb	r1, [r2, r3]
	for( i=0; i < COM_TABLE_MAX; i++ ){
 800345c:	8bbb      	ldrh	r3, [r7, #28]
 800345e:	3301      	adds	r3, #1
 8003460:	83bb      	strh	r3, [r7, #28]
 8003462:	8bbb      	ldrh	r3, [r7, #28]
 8003464:	2b21      	cmp	r3, #33	; 0x21
 8003466:	d9f5      	bls.n	8003454 <Set_Res_Message+0x18>


	//-------------------------------------------------------------
	// スタートテキスト検索
	//-------------------------------------------------------------
	start = 0xffff;
 8003468:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800346c:	833b      	strh	r3, [r7, #24]
	for( i=0; i<num; i++){
 800346e:	2300      	movs	r3, #0
 8003470:	83bb      	strh	r3, [r7, #28]
 8003472:	e034      	b.n	80034de <Set_Res_Message+0xa2>
		if( src[i] == res_start_text[0]
 8003474:	8bbb      	ldrh	r3, [r7, #28]
 8003476:	68ba      	ldr	r2, [r7, #8]
 8003478:	4413      	add	r3, r2
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	2252      	movs	r2, #82	; 0x52
 800347e:	4293      	cmp	r3, r2
 8003480:	d12a      	bne.n	80034d8 <Set_Res_Message+0x9c>
				&& src[i+1] == res_start_text[1]
 8003482:	8bbb      	ldrh	r3, [r7, #28]
 8003484:	3301      	adds	r3, #1
 8003486:	68ba      	ldr	r2, [r7, #8]
 8003488:	4413      	add	r3, r2
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	2245      	movs	r2, #69	; 0x45
 800348e:	4293      	cmp	r3, r2
 8003490:	d122      	bne.n	80034d8 <Set_Res_Message+0x9c>
				&& src[i+2] == res_start_text[2]
 8003492:	8bbb      	ldrh	r3, [r7, #28]
 8003494:	3302      	adds	r3, #2
 8003496:	68ba      	ldr	r2, [r7, #8]
 8003498:	4413      	add	r3, r2
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	2253      	movs	r2, #83	; 0x53
 800349e:	4293      	cmp	r3, r2
 80034a0:	d11a      	bne.n	80034d8 <Set_Res_Message+0x9c>
				&& src[i+3] == res_start_text[3]
 80034a2:	8bbb      	ldrh	r3, [r7, #28]
 80034a4:	3303      	adds	r3, #3
 80034a6:	68ba      	ldr	r2, [r7, #8]
 80034a8:	4413      	add	r3, r2
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	222d      	movs	r2, #45	; 0x2d
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d112      	bne.n	80034d8 <Set_Res_Message+0x9c>
				&& src[i+4] == res_start_text[4]
 80034b2:	8bbb      	ldrh	r3, [r7, #28]
 80034b4:	3304      	adds	r3, #4
 80034b6:	68ba      	ldr	r2, [r7, #8]
 80034b8:	4413      	add	r3, r2
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	2253      	movs	r2, #83	; 0x53
 80034be:	4293      	cmp	r3, r2
 80034c0:	d10a      	bne.n	80034d8 <Set_Res_Message+0x9c>
				&& src[i+5] == res_start_text[5] ){
 80034c2:	8bbb      	ldrh	r3, [r7, #28]
 80034c4:	3305      	adds	r3, #5
 80034c6:	68ba      	ldr	r2, [r7, #8]
 80034c8:	4413      	add	r3, r2
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	2254      	movs	r2, #84	; 0x54
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d102      	bne.n	80034d8 <Set_Res_Message+0x9c>

			start = i;
 80034d2:	8bbb      	ldrh	r3, [r7, #28]
 80034d4:	833b      	strh	r3, [r7, #24]
			break;
 80034d6:	e006      	b.n	80034e6 <Set_Res_Message+0xaa>
	for( i=0; i<num; i++){
 80034d8:	8bbb      	ldrh	r3, [r7, #28]
 80034da:	3301      	adds	r3, #1
 80034dc:	83bb      	strh	r3, [r7, #28]
 80034de:	8bba      	ldrh	r2, [r7, #28]
 80034e0:	89fb      	ldrh	r3, [r7, #14]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d3c6      	bcc.n	8003474 <Set_Res_Message+0x38>
		}
	}

	if( start == 0xffff ){
 80034e6:	8b3b      	ldrh	r3, [r7, #24]
 80034e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d104      	bne.n	80034fa <Set_Res_Message+0xbe>
		status = RET_FALSE;
 80034f0:	2300      	movs	r3, #0
 80034f2:	77fb      	strb	r3, [r7, #31]
		SKprintf("Error : Respons Data start txt none \r\n");
 80034f4:	486c      	ldr	r0, [pc, #432]	; (80036a8 <Set_Res_Message+0x26c>)
 80034f6:	f000 fafb 	bl	8003af0 <SKprintf>
	}

	//-------------------------------------------------------------
	// エンドテキスト検索
	//-------------------------------------------------------------
	if( status == RET_TRUE ){
 80034fa:	7ffb      	ldrb	r3, [r7, #31]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d149      	bne.n	8003594 <Set_Res_Message+0x158>
		end = 0xffff;
 8003500:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003504:	82fb      	strh	r3, [r7, #22]
		for( i=0; i<num; i++){
 8003506:	2300      	movs	r3, #0
 8003508:	83bb      	strh	r3, [r7, #28]
 800350a:	e035      	b.n	8003578 <Set_Res_Message+0x13c>
			if( src[i] == message_end_text[0]
 800350c:	8bbb      	ldrh	r3, [r7, #28]
 800350e:	68ba      	ldr	r2, [r7, #8]
 8003510:	4413      	add	r3, r2
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	224d      	movs	r2, #77	; 0x4d
 8003516:	4293      	cmp	r3, r2
 8003518:	d12b      	bne.n	8003572 <Set_Res_Message+0x136>
					&& src[i+1] == message_end_text[1]
 800351a:	8bbb      	ldrh	r3, [r7, #28]
 800351c:	3301      	adds	r3, #1
 800351e:	68ba      	ldr	r2, [r7, #8]
 8003520:	4413      	add	r3, r2
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	2253      	movs	r2, #83	; 0x53
 8003526:	4293      	cmp	r3, r2
 8003528:	d123      	bne.n	8003572 <Set_Res_Message+0x136>
					&& src[i+2] == message_end_text[2]
 800352a:	8bbb      	ldrh	r3, [r7, #28]
 800352c:	3302      	adds	r3, #2
 800352e:	68ba      	ldr	r2, [r7, #8]
 8003530:	4413      	add	r3, r2
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	2247      	movs	r2, #71	; 0x47
 8003536:	4293      	cmp	r3, r2
 8003538:	d11b      	bne.n	8003572 <Set_Res_Message+0x136>
					&& src[i+3] == message_end_text[3]
 800353a:	8bbb      	ldrh	r3, [r7, #28]
 800353c:	3303      	adds	r3, #3
 800353e:	68ba      	ldr	r2, [r7, #8]
 8003540:	4413      	add	r3, r2
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	2245      	movs	r2, #69	; 0x45
 8003546:	4293      	cmp	r3, r2
 8003548:	d113      	bne.n	8003572 <Set_Res_Message+0x136>
					&& src[i+4] == message_end_text[4]
 800354a:	8bbb      	ldrh	r3, [r7, #28]
 800354c:	3304      	adds	r3, #4
 800354e:	68ba      	ldr	r2, [r7, #8]
 8003550:	4413      	add	r3, r2
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	224e      	movs	r2, #78	; 0x4e
 8003556:	4293      	cmp	r3, r2
 8003558:	d10b      	bne.n	8003572 <Set_Res_Message+0x136>
					&& src[i+5] == message_end_text[5] ){
 800355a:	8bbb      	ldrh	r3, [r7, #28]
 800355c:	3305      	adds	r3, #5
 800355e:	68ba      	ldr	r2, [r7, #8]
 8003560:	4413      	add	r3, r2
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	2244      	movs	r2, #68	; 0x44
 8003566:	4293      	cmp	r3, r2
 8003568:	d103      	bne.n	8003572 <Set_Res_Message+0x136>

				end = i+5+1;
 800356a:	8bbb      	ldrh	r3, [r7, #28]
 800356c:	3306      	adds	r3, #6
 800356e:	82fb      	strh	r3, [r7, #22]
				break;
 8003570:	e006      	b.n	8003580 <Set_Res_Message+0x144>
		for( i=0; i<num; i++){
 8003572:	8bbb      	ldrh	r3, [r7, #28]
 8003574:	3301      	adds	r3, #1
 8003576:	83bb      	strh	r3, [r7, #28]
 8003578:	8bba      	ldrh	r2, [r7, #28]
 800357a:	89fb      	ldrh	r3, [r7, #14]
 800357c:	429a      	cmp	r2, r3
 800357e:	d3c5      	bcc.n	800350c <Set_Res_Message+0xd0>
			}
		}

		if( end == 0xffff ){
 8003580:	8afb      	ldrh	r3, [r7, #22]
 8003582:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003586:	4293      	cmp	r3, r2
 8003588:	d104      	bne.n	8003594 <Set_Res_Message+0x158>
			status = RET_FALSE;
 800358a:	2300      	movs	r3, #0
 800358c:	77fb      	strb	r3, [r7, #31]
			SKprintf("Error : Respons Data end txt none \r\n");
 800358e:	4847      	ldr	r0, [pc, #284]	; (80036ac <Set_Res_Message+0x270>)
 8003590:	f000 faae 	bl	8003af0 <SKprintf>
		}
	}
	//-------------------------------------------------------------
	// Res[]に転送
	//-------------------------------------------------------------
	if( status == RET_TRUE ){
 8003594:	7ffb      	ldrb	r3, [r7, #31]
 8003596:	2b01      	cmp	r3, #1
 8003598:	d11f      	bne.n	80035da <Set_Res_Message+0x19e>
		j = 0;
 800359a:	2300      	movs	r3, #0
 800359c:	837b      	strh	r3, [r7, #26]
		for( i=start; i < end; i++){
 800359e:	8b3b      	ldrh	r3, [r7, #24]
 80035a0:	83bb      	strh	r3, [r7, #28]
 80035a2:	e016      	b.n	80035d2 <Set_Res_Message+0x196>
			if( j < COM_TABLE_MAX ){
 80035a4:	8b7b      	ldrh	r3, [r7, #26]
 80035a6:	2b21      	cmp	r3, #33	; 0x21
 80035a8:	d808      	bhi.n	80035bc <Set_Res_Message+0x180>
				dist[j] = src[i];
 80035aa:	8bbb      	ldrh	r3, [r7, #28]
 80035ac:	68ba      	ldr	r2, [r7, #8]
 80035ae:	441a      	add	r2, r3
 80035b0:	8b7b      	ldrh	r3, [r7, #26]
 80035b2:	6879      	ldr	r1, [r7, #4]
 80035b4:	440b      	add	r3, r1
 80035b6:	7812      	ldrb	r2, [r2, #0]
 80035b8:	701a      	strb	r2, [r3, #0]
 80035ba:	e004      	b.n	80035c6 <Set_Res_Message+0x18a>
			}
			else{
				status = RET_FALSE;
 80035bc:	2300      	movs	r3, #0
 80035be:	77fb      	strb	r3, [r7, #31]
				SKprintf("Error : Respons data size over\r\n");
 80035c0:	483b      	ldr	r0, [pc, #236]	; (80036b0 <Set_Res_Message+0x274>)
 80035c2:	f000 fa95 	bl	8003af0 <SKprintf>
			}
			j++;
 80035c6:	8b7b      	ldrh	r3, [r7, #26]
 80035c8:	3301      	adds	r3, #1
 80035ca:	837b      	strh	r3, [r7, #26]
		for( i=start; i < end; i++){
 80035cc:	8bbb      	ldrh	r3, [r7, #28]
 80035ce:	3301      	adds	r3, #1
 80035d0:	83bb      	strh	r3, [r7, #28]
 80035d2:	8bba      	ldrh	r2, [r7, #28]
 80035d4:	8afb      	ldrh	r3, [r7, #22]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d3e4      	bcc.n	80035a4 <Set_Res_Message+0x168>
		}
	}
	//-------------------------------------------------------------
	// チェックサム確認
	//-------------------------------------------------------------
	if( status == RET_TRUE ){
 80035da:	7ffb      	ldrb	r3, [r7, #31]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d10f      	bne.n	8003600 <Set_Res_Message+0x1c4>
		if( dist[COM_CHKSUM] !=Get_command_chksum(COM_COUNTER_L, COM_CHKSUM_ID, dist)){
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	331b      	adds	r3, #27
 80035e4:	781c      	ldrb	r4, [r3, #0]
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	211a      	movs	r1, #26
 80035ea:	2006      	movs	r0, #6
 80035ec:	f000 f870 	bl	80036d0 <Get_command_chksum>
 80035f0:	4603      	mov	r3, r0
 80035f2:	429c      	cmp	r4, r3
 80035f4:	d004      	beq.n	8003600 <Set_Res_Message+0x1c4>
			status = RET_FALSE;
 80035f6:	2300      	movs	r3, #0
 80035f8:	77fb      	strb	r3, [r7, #31]
			SKprintf("Error : Respons data chksum eoor");
 80035fa:	482e      	ldr	r0, [pc, #184]	; (80036b4 <Set_Res_Message+0x278>)
 80035fc:	f000 fa78 	bl	8003af0 <SKprintf>
		}
	}
	//-------------------------------------------------------------
	// レスポンスデータをログ表示
	//-------------------------------------------------------------
	for( i=0;  i < COM_TABLE_MAX ; i++ ){
 8003600:	2300      	movs	r3, #0
 8003602:	83bb      	strh	r3, [r7, #28]
 8003604:	e017      	b.n	8003636 <Set_Res_Message+0x1fa>
		cmd_char[i] =  (uint8_t)((dist[i]<0x20||dist[i]>=0x7f)? '.': dist[i]);
 8003606:	8bbb      	ldrh	r3, [r7, #28]
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	4413      	add	r3, r2
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	2b1f      	cmp	r3, #31
 8003610:	d90a      	bls.n	8003628 <Set_Res_Message+0x1ec>
 8003612:	8bbb      	ldrh	r3, [r7, #28]
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	4413      	add	r3, r2
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	2b7e      	cmp	r3, #126	; 0x7e
 800361c:	d804      	bhi.n	8003628 <Set_Res_Message+0x1ec>
 800361e:	8bbb      	ldrh	r3, [r7, #28]
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	4413      	add	r3, r2
 8003624:	781a      	ldrb	r2, [r3, #0]
 8003626:	e000      	b.n	800362a <Set_Res_Message+0x1ee>
 8003628:	222e      	movs	r2, #46	; 0x2e
 800362a:	8bbb      	ldrh	r3, [r7, #28]
 800362c:	4922      	ldr	r1, [pc, #136]	; (80036b8 <Set_Res_Message+0x27c>)
 800362e:	54ca      	strb	r2, [r1, r3]
	for( i=0;  i < COM_TABLE_MAX ; i++ ){
 8003630:	8bbb      	ldrh	r3, [r7, #28]
 8003632:	3301      	adds	r3, #1
 8003634:	83bb      	strh	r3, [r7, #28]
 8003636:	8bbb      	ldrh	r3, [r7, #28]
 8003638:	2b21      	cmp	r3, #33	; 0x21
 800363a:	d9e4      	bls.n	8003606 <Set_Res_Message+0x1ca>
	}

	SKprintf("\r\nRESPONS MESSAGE = \r\n ");
 800363c:	481f      	ldr	r0, [pc, #124]	; (80036bc <Set_Res_Message+0x280>)
 800363e:	f000 fa57 	bl	8003af0 <SKprintf>
	for( i=0; i < COM_TABLE_MAX ; i++){
 8003642:	2300      	movs	r3, #0
 8003644:	83bb      	strh	r3, [r7, #28]
 8003646:	e00a      	b.n	800365e <Set_Res_Message+0x222>
		SKprintf("%02x ", dist[i]);
 8003648:	8bbb      	ldrh	r3, [r7, #28]
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	4413      	add	r3, r2
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	4619      	mov	r1, r3
 8003652:	481b      	ldr	r0, [pc, #108]	; (80036c0 <Set_Res_Message+0x284>)
 8003654:	f000 fa4c 	bl	8003af0 <SKprintf>
	for( i=0; i < COM_TABLE_MAX ; i++){
 8003658:	8bbb      	ldrh	r3, [r7, #28]
 800365a:	3301      	adds	r3, #1
 800365c:	83bb      	strh	r3, [r7, #28]
 800365e:	8bbb      	ldrh	r3, [r7, #28]
 8003660:	2b21      	cmp	r3, #33	; 0x21
 8003662:	d9f1      	bls.n	8003648 <Set_Res_Message+0x20c>
	}
	SKprintf("\r\n ");
 8003664:	4817      	ldr	r0, [pc, #92]	; (80036c4 <Set_Res_Message+0x288>)
 8003666:	f000 fa43 	bl	8003af0 <SKprintf>
	c[1] = '\0';
 800366a:	2300      	movs	r3, #0
 800366c:	757b      	strb	r3, [r7, #21]
	for( i=0; i < COM_TABLE_MAX ; i++){
 800366e:	2300      	movs	r3, #0
 8003670:	83bb      	strh	r3, [r7, #28]
 8003672:	e00c      	b.n	800368e <Set_Res_Message+0x252>
		c[0] = cmd_char[i];
 8003674:	8bbb      	ldrh	r3, [r7, #28]
 8003676:	4a10      	ldr	r2, [pc, #64]	; (80036b8 <Set_Res_Message+0x27c>)
 8003678:	5cd3      	ldrb	r3, [r2, r3]
 800367a:	753b      	strb	r3, [r7, #20]
		SKprintf(" %s ", c);
 800367c:	f107 0314 	add.w	r3, r7, #20
 8003680:	4619      	mov	r1, r3
 8003682:	4811      	ldr	r0, [pc, #68]	; (80036c8 <Set_Res_Message+0x28c>)
 8003684:	f000 fa34 	bl	8003af0 <SKprintf>
	for( i=0; i < COM_TABLE_MAX ; i++){
 8003688:	8bbb      	ldrh	r3, [r7, #28]
 800368a:	3301      	adds	r3, #1
 800368c:	83bb      	strh	r3, [r7, #28]
 800368e:	8bbb      	ldrh	r3, [r7, #28]
 8003690:	2b21      	cmp	r3, #33	; 0x21
 8003692:	d9ef      	bls.n	8003674 <Set_Res_Message+0x238>
	}
	SKprintf("\r\n");
 8003694:	480d      	ldr	r0, [pc, #52]	; (80036cc <Set_Res_Message+0x290>)
 8003696:	f000 fa2b 	bl	8003af0 <SKprintf>


	return status;
 800369a:	7ffb      	ldrb	r3, [r7, #31]

}
 800369c:	4618      	mov	r0, r3
 800369e:	3724      	adds	r7, #36	; 0x24
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd90      	pop	{r4, r7, pc}
 80036a4:	20001a00 	.word	0x20001a00
 80036a8:	0800c530 	.word	0x0800c530
 80036ac:	0800c558 	.word	0x0800c558
 80036b0:	0800c580 	.word	0x0800c580
 80036b4:	0800c5a4 	.word	0x0800c5a4
 80036b8:	20001a24 	.word	0x20001a24
 80036bc:	0800c5c8 	.word	0x0800c5c8
 80036c0:	0800c5e0 	.word	0x0800c5e0
 80036c4:	0800c5e8 	.word	0x0800c5e8
 80036c8:	0800c5ec 	.word	0x0800c5ec
 80036cc:	0800c5f4 	.word	0x0800c5f4

080036d0 <Get_command_chksum>:
//==============================================================================
//
//=============================================================================
uint8_t Get_command_chksum(uint8_t start, uint8_t end,uint8_t *dt )
{
 80036d0:	b480      	push	{r7}
 80036d2:	b085      	sub	sp, #20
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	4603      	mov	r3, r0
 80036d8:	603a      	str	r2, [r7, #0]
 80036da:	71fb      	strb	r3, [r7, #7]
 80036dc:	460b      	mov	r3, r1
 80036de:	71bb      	strb	r3, [r7, #6]
	uint8_t		sum = 0;
 80036e0:	2300      	movs	r3, #0
 80036e2:	73fb      	strb	r3, [r7, #15]
	uint8_t		i;

	for( i=start; i<end; i++){
 80036e4:	79fb      	ldrb	r3, [r7, #7]
 80036e6:	73bb      	strb	r3, [r7, #14]
 80036e8:	e009      	b.n	80036fe <Get_command_chksum+0x2e>
		sum += dt[i];
 80036ea:	7bbb      	ldrb	r3, [r7, #14]
 80036ec:	683a      	ldr	r2, [r7, #0]
 80036ee:	4413      	add	r3, r2
 80036f0:	781a      	ldrb	r2, [r3, #0]
 80036f2:	7bfb      	ldrb	r3, [r7, #15]
 80036f4:	4413      	add	r3, r2
 80036f6:	73fb      	strb	r3, [r7, #15]
	for( i=start; i<end; i++){
 80036f8:	7bbb      	ldrb	r3, [r7, #14]
 80036fa:	3301      	adds	r3, #1
 80036fc:	73bb      	strb	r3, [r7, #14]
 80036fe:	7bba      	ldrb	r2, [r7, #14]
 8003700:	79bb      	ldrb	r3, [r7, #6]
 8003702:	429a      	cmp	r2, r3
 8003704:	d3f1      	bcc.n	80036ea <Get_command_chksum+0x1a>
		//SKprintf("%02x ", dt[i]);
	}
	//SKprintf(" sum=%02x\r\n",sum);

	return sum;
 8003706:	7bfb      	ldrb	r3, [r7, #15]
}
 8003708:	4618      	mov	r0, r3
 800370a:	3714      	adds	r7, #20
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <Send_rx485_cmd_message>:
//==============================================================================
//
//==============================================================================

RETURN_STATUS Send_rx485_cmd_message( CMD_MSG	 *com_msg )
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
	RETURN_STATUS	status = RET_TRUE;
 800371c:	2301      	movs	r3, #1
 800371e:	73bb      	strb	r3, [r7, #14]
	uint8_t		*pt;

	//-------------------------------------------------------
	// Command buffer Clesr
	//-------------------------------------------------------
	for( i=0; i < COM_TABLE_MAX; i++ ){
 8003720:	2300      	movs	r3, #0
 8003722:	73fb      	strb	r3, [r7, #15]
 8003724:	e006      	b.n	8003734 <Send_rx485_cmd_message+0x20>
		Cmd_mesg[i] = 0;
 8003726:	7bfb      	ldrb	r3, [r7, #15]
 8003728:	4a6a      	ldr	r2, [pc, #424]	; (80038d4 <Send_rx485_cmd_message+0x1c0>)
 800372a:	2100      	movs	r1, #0
 800372c:	54d1      	strb	r1, [r2, r3]
	for( i=0; i < COM_TABLE_MAX; i++ ){
 800372e:	7bfb      	ldrb	r3, [r7, #15]
 8003730:	3301      	adds	r3, #1
 8003732:	73fb      	strb	r3, [r7, #15]
 8003734:	7bfb      	ldrb	r3, [r7, #15]
 8003736:	2b21      	cmp	r3, #33	; 0x21
 8003738:	d9f5      	bls.n	8003726 <Send_rx485_cmd_message+0x12>
	}

	//-------------------------------------------------------
	// START Text
	//-------------------------------------------------------
	for( i=0; i < TEXT_LENGTH; i++ ){
 800373a:	2300      	movs	r3, #0
 800373c:	73fb      	strb	r3, [r7, #15]
 800373e:	e00a      	b.n	8003756 <Send_rx485_cmd_message+0x42>
		j = COM_START_TXT_00 + i ;
 8003740:	7bfb      	ldrb	r3, [r7, #15]
 8003742:	737b      	strb	r3, [r7, #13]
		Cmd_mesg[j] = com_start_text[i];
 8003744:	7bfa      	ldrb	r2, [r7, #15]
 8003746:	7b7b      	ldrb	r3, [r7, #13]
 8003748:	4963      	ldr	r1, [pc, #396]	; (80038d8 <Send_rx485_cmd_message+0x1c4>)
 800374a:	5c89      	ldrb	r1, [r1, r2]
 800374c:	4a61      	ldr	r2, [pc, #388]	; (80038d4 <Send_rx485_cmd_message+0x1c0>)
 800374e:	54d1      	strb	r1, [r2, r3]
	for( i=0; i < TEXT_LENGTH; i++ ){
 8003750:	7bfb      	ldrb	r3, [r7, #15]
 8003752:	3301      	adds	r3, #1
 8003754:	73fb      	strb	r3, [r7, #15]
 8003756:	7bfb      	ldrb	r3, [r7, #15]
 8003758:	2b05      	cmp	r3, #5
 800375a:	d9f1      	bls.n	8003740 <Send_rx485_cmd_message+0x2c>
	}

	//-------------------------------------------------------
	// 通信カウンタ
	//-------------------------------------------------------
	com_counter ++;
 800375c:	4b5f      	ldr	r3, [pc, #380]	; (80038dc <Send_rx485_cmd_message+0x1c8>)
 800375e:	881b      	ldrh	r3, [r3, #0]
 8003760:	3301      	adds	r3, #1
 8003762:	b29a      	uxth	r2, r3
 8003764:	4b5d      	ldr	r3, [pc, #372]	; (80038dc <Send_rx485_cmd_message+0x1c8>)
 8003766:	801a      	strh	r2, [r3, #0]
	Cmd_mesg[COM_COUNTER_L] = (uint8_t)com_counter;
 8003768:	4b5c      	ldr	r3, [pc, #368]	; (80038dc <Send_rx485_cmd_message+0x1c8>)
 800376a:	881b      	ldrh	r3, [r3, #0]
 800376c:	b2da      	uxtb	r2, r3
 800376e:	4b59      	ldr	r3, [pc, #356]	; (80038d4 <Send_rx485_cmd_message+0x1c0>)
 8003770:	719a      	strb	r2, [r3, #6]
	Cmd_mesg[COM_COUNTER_H] = (uint8_t)(com_counter >> 8);
 8003772:	4b5a      	ldr	r3, [pc, #360]	; (80038dc <Send_rx485_cmd_message+0x1c8>)
 8003774:	881b      	ldrh	r3, [r3, #0]
 8003776:	0a1b      	lsrs	r3, r3, #8
 8003778:	b29b      	uxth	r3, r3
 800377a:	b2da      	uxtb	r2, r3
 800377c:	4b55      	ldr	r3, [pc, #340]	; (80038d4 <Send_rx485_cmd_message+0x1c0>)
 800377e:	71da      	strb	r2, [r3, #7]

	//-------------------------------------------------------
	// アドレス
	//-------------------------------------------------------
	Cmd_mesg[COM_ADDRESS_ID] = '#';
 8003780:	4b54      	ldr	r3, [pc, #336]	; (80038d4 <Send_rx485_cmd_message+0x1c0>)
 8003782:	2223      	movs	r2, #35	; 0x23
 8003784:	721a      	strb	r2, [r3, #8]
	Cmd_mesg[COM_ADDRESS_DIST] = com_msg->address;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	791a      	ldrb	r2, [r3, #4]
 800378a:	4b52      	ldr	r3, [pc, #328]	; (80038d4 <Send_rx485_cmd_message+0x1c0>)
 800378c:	725a      	strb	r2, [r3, #9]
	Cmd_mesg[COM_ADDRESS_SORC] =  MY_RS485_ADDRESS;
 800378e:	4b51      	ldr	r3, [pc, #324]	; (80038d4 <Send_rx485_cmd_message+0x1c0>)
 8003790:	2200      	movs	r2, #0
 8003792:	729a      	strb	r2, [r3, #10]

	//-------------------------------------------------------
	// コマンド
	//-------------------------------------------------------
	Cmd_mesg[COM_COMMAND_ID] = '*';
 8003794:	4b4f      	ldr	r3, [pc, #316]	; (80038d4 <Send_rx485_cmd_message+0x1c0>)
 8003796:	222a      	movs	r2, #42	; 0x2a
 8003798:	731a      	strb	r2, [r3, #12]
	Cmd_mesg[COM_COMMAND] = com_msg->command;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	789a      	ldrb	r2, [r3, #2]
 800379e:	4b4d      	ldr	r3, [pc, #308]	; (80038d4 <Send_rx485_cmd_message+0x1c0>)
 80037a0:	735a      	strb	r2, [r3, #13]

	switch(com_msg->command){
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	789b      	ldrb	r3, [r3, #2]
 80037a6:	3b01      	subs	r3, #1
 80037a8:	2b03      	cmp	r3, #3
 80037aa:	d815      	bhi.n	80037d8 <Send_rx485_cmd_message+0xc4>
 80037ac:	a201      	add	r2, pc, #4	; (adr r2, 80037b4 <Send_rx485_cmd_message+0xa0>)
 80037ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b2:	bf00      	nop
 80037b4:	080037d9 	.word	0x080037d9
 80037b8:	080037d9 	.word	0x080037d9
 80037bc:	080037c5 	.word	0x080037c5
 80037c0:	080037cf 	.word	0x080037cf
	case RS485_CMD_STATUS:
		break;
	case RS485_CMD_VERSION:
		break;
	case RS485_CMD_MESUR:
		Cmd_mesg[COM_SENS_CTRL] = com_msg->sub1;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	795a      	ldrb	r2, [r3, #5]
 80037c8:	4b42      	ldr	r3, [pc, #264]	; (80038d4 <Send_rx485_cmd_message+0x1c0>)
 80037ca:	73da      	strb	r2, [r3, #15]
		break;
 80037cc:	e005      	b.n	80037da <Send_rx485_cmd_message+0xc6>
	case RS485_CMD_MESUR_DATA:
		Cmd_mesg[COM_DATA_KIND ] = com_msg->sub1;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	795a      	ldrb	r2, [r3, #5]
 80037d2:	4b40      	ldr	r3, [pc, #256]	; (80038d4 <Send_rx485_cmd_message+0x1c0>)
 80037d4:	73da      	strb	r2, [r3, #15]
		break;
 80037d6:	e000      	b.n	80037da <Send_rx485_cmd_message+0xc6>
	default:
		break;
 80037d8:	bf00      	nop
	}

	//-------------------------------------------------------
	// チェックサム計算
	//-------------------------------------------------------
	Cmd_mesg[COM_CHKSUM_ID] = '$';
 80037da:	4b3e      	ldr	r3, [pc, #248]	; (80038d4 <Send_rx485_cmd_message+0x1c0>)
 80037dc:	2224      	movs	r2, #36	; 0x24
 80037de:	769a      	strb	r2, [r3, #26]
	Cmd_mesg[COM_CHKSUM] = Get_command_chksum(COM_COUNTER_L, COM_CHKSUM_ID, Cmd_mesg);
 80037e0:	4a3c      	ldr	r2, [pc, #240]	; (80038d4 <Send_rx485_cmd_message+0x1c0>)
 80037e2:	211a      	movs	r1, #26
 80037e4:	2006      	movs	r0, #6
 80037e6:	f7ff ff73 	bl	80036d0 <Get_command_chksum>
 80037ea:	4603      	mov	r3, r0
 80037ec:	461a      	mov	r2, r3
 80037ee:	4b39      	ldr	r3, [pc, #228]	; (80038d4 <Send_rx485_cmd_message+0x1c0>)
 80037f0:	76da      	strb	r2, [r3, #27]

	//-------------------------------------------------------
	// END Text
	//-------------------------------------------------------
	for( i=0; i < TEXT_LENGTH; i++ ){
 80037f2:	2300      	movs	r3, #0
 80037f4:	73fb      	strb	r3, [r7, #15]
 80037f6:	e00b      	b.n	8003810 <Send_rx485_cmd_message+0xfc>
			j = COM_END_TXT_00 + i ;
 80037f8:	7bfb      	ldrb	r3, [r7, #15]
 80037fa:	331c      	adds	r3, #28
 80037fc:	737b      	strb	r3, [r7, #13]
			Cmd_mesg[j] = message_end_text[i];
 80037fe:	7bfa      	ldrb	r2, [r7, #15]
 8003800:	7b7b      	ldrb	r3, [r7, #13]
 8003802:	4937      	ldr	r1, [pc, #220]	; (80038e0 <Send_rx485_cmd_message+0x1cc>)
 8003804:	5c89      	ldrb	r1, [r1, r2]
 8003806:	4a33      	ldr	r2, [pc, #204]	; (80038d4 <Send_rx485_cmd_message+0x1c0>)
 8003808:	54d1      	strb	r1, [r2, r3]
	for( i=0; i < TEXT_LENGTH; i++ ){
 800380a:	7bfb      	ldrb	r3, [r7, #15]
 800380c:	3301      	adds	r3, #1
 800380e:	73fb      	strb	r3, [r7, #15]
 8003810:	7bfb      	ldrb	r3, [r7, #15]
 8003812:	2b05      	cmp	r3, #5
 8003814:	d9f0      	bls.n	80037f8 <Send_rx485_cmd_message+0xe4>

	//-------------------------------------------------------
	// デバック用ログ
	//-------------------------------------------------------

	for( i=0;  i < COM_TABLE_MAX; i++ ){
 8003816:	2300      	movs	r3, #0
 8003818:	73fb      	strb	r3, [r7, #15]
 800381a:	e014      	b.n	8003846 <Send_rx485_cmd_message+0x132>
		cmd_char[i] =  (uint8_t)((Cmd_mesg[i]<0x20||Cmd_mesg[i]>=0x7f)? '.': Cmd_mesg[i]);
 800381c:	7bfb      	ldrb	r3, [r7, #15]
 800381e:	4a2d      	ldr	r2, [pc, #180]	; (80038d4 <Send_rx485_cmd_message+0x1c0>)
 8003820:	5cd3      	ldrb	r3, [r2, r3]
 8003822:	2b1f      	cmp	r3, #31
 8003824:	d908      	bls.n	8003838 <Send_rx485_cmd_message+0x124>
 8003826:	7bfb      	ldrb	r3, [r7, #15]
 8003828:	4a2a      	ldr	r2, [pc, #168]	; (80038d4 <Send_rx485_cmd_message+0x1c0>)
 800382a:	5cd3      	ldrb	r3, [r2, r3]
 800382c:	2b7e      	cmp	r3, #126	; 0x7e
 800382e:	d803      	bhi.n	8003838 <Send_rx485_cmd_message+0x124>
 8003830:	7bfb      	ldrb	r3, [r7, #15]
 8003832:	4a28      	ldr	r2, [pc, #160]	; (80038d4 <Send_rx485_cmd_message+0x1c0>)
 8003834:	5cd2      	ldrb	r2, [r2, r3]
 8003836:	e000      	b.n	800383a <Send_rx485_cmd_message+0x126>
 8003838:	222e      	movs	r2, #46	; 0x2e
 800383a:	7bfb      	ldrb	r3, [r7, #15]
 800383c:	4929      	ldr	r1, [pc, #164]	; (80038e4 <Send_rx485_cmd_message+0x1d0>)
 800383e:	54ca      	strb	r2, [r1, r3]
	for( i=0;  i < COM_TABLE_MAX; i++ ){
 8003840:	7bfb      	ldrb	r3, [r7, #15]
 8003842:	3301      	adds	r3, #1
 8003844:	73fb      	strb	r3, [r7, #15]
 8003846:	7bfb      	ldrb	r3, [r7, #15]
 8003848:	2b21      	cmp	r3, #33	; 0x21
 800384a:	d9e7      	bls.n	800381c <Send_rx485_cmd_message+0x108>
	}

	SKprintf("\r\nCOMMAND MESSAGE = \r\n ");
 800384c:	4826      	ldr	r0, [pc, #152]	; (80038e8 <Send_rx485_cmd_message+0x1d4>)
 800384e:	f000 f94f 	bl	8003af0 <SKprintf>
	for( i=0;  i < COM_TABLE_MAX; i++ ){
 8003852:	2300      	movs	r3, #0
 8003854:	73fb      	strb	r3, [r7, #15]
 8003856:	e009      	b.n	800386c <Send_rx485_cmd_message+0x158>
		SKprintf("%02x ", Cmd_mesg[i]);
 8003858:	7bfb      	ldrb	r3, [r7, #15]
 800385a:	4a1e      	ldr	r2, [pc, #120]	; (80038d4 <Send_rx485_cmd_message+0x1c0>)
 800385c:	5cd3      	ldrb	r3, [r2, r3]
 800385e:	4619      	mov	r1, r3
 8003860:	4822      	ldr	r0, [pc, #136]	; (80038ec <Send_rx485_cmd_message+0x1d8>)
 8003862:	f000 f945 	bl	8003af0 <SKprintf>
	for( i=0;  i < COM_TABLE_MAX; i++ ){
 8003866:	7bfb      	ldrb	r3, [r7, #15]
 8003868:	3301      	adds	r3, #1
 800386a:	73fb      	strb	r3, [r7, #15]
 800386c:	7bfb      	ldrb	r3, [r7, #15]
 800386e:	2b21      	cmp	r3, #33	; 0x21
 8003870:	d9f2      	bls.n	8003858 <Send_rx485_cmd_message+0x144>
	}
	SKprintf("\r\n ");
 8003872:	481f      	ldr	r0, [pc, #124]	; (80038f0 <Send_rx485_cmd_message+0x1dc>)
 8003874:	f000 f93c 	bl	8003af0 <SKprintf>
	c[1] = '\0';
 8003878:	2300      	movs	r3, #0
 800387a:	727b      	strb	r3, [r7, #9]
	for( i=0;  i < COM_TABLE_MAX; i++ ){
 800387c:	2300      	movs	r3, #0
 800387e:	73fb      	strb	r3, [r7, #15]
 8003880:	e00c      	b.n	800389c <Send_rx485_cmd_message+0x188>
		c[0] = cmd_char[i];
 8003882:	7bfb      	ldrb	r3, [r7, #15]
 8003884:	4a17      	ldr	r2, [pc, #92]	; (80038e4 <Send_rx485_cmd_message+0x1d0>)
 8003886:	5cd3      	ldrb	r3, [r2, r3]
 8003888:	723b      	strb	r3, [r7, #8]
		SKprintf(" %s ", c);
 800388a:	f107 0308 	add.w	r3, r7, #8
 800388e:	4619      	mov	r1, r3
 8003890:	4818      	ldr	r0, [pc, #96]	; (80038f4 <Send_rx485_cmd_message+0x1e0>)
 8003892:	f000 f92d 	bl	8003af0 <SKprintf>
	for( i=0;  i < COM_TABLE_MAX; i++ ){
 8003896:	7bfb      	ldrb	r3, [r7, #15]
 8003898:	3301      	adds	r3, #1
 800389a:	73fb      	strb	r3, [r7, #15]
 800389c:	7bfb      	ldrb	r3, [r7, #15]
 800389e:	2b21      	cmp	r3, #33	; 0x21
 80038a0:	d9ef      	bls.n	8003882 <Send_rx485_cmd_message+0x16e>
	}
	SKprintf("\r\n");
 80038a2:	4815      	ldr	r0, [pc, #84]	; (80038f8 <Send_rx485_cmd_message+0x1e4>)
 80038a4:	f000 f924 	bl	8003af0 <SKprintf>

	//-------------------------------------------------------
	// コマンド送信
	//-------------------------------------------------------
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RS485_TX);
 80038a8:	2201      	movs	r2, #1
 80038aa:	2120      	movs	r1, #32
 80038ac:	4813      	ldr	r0, [pc, #76]	; (80038fc <Send_rx485_cmd_message+0x1e8>)
 80038ae:	f001 fa5b 	bl	8004d68 <HAL_GPIO_WritePin>
	status = Send_rs485((uint8_t *)Cmd_mesg, COM_TABLE_MAX );
 80038b2:	2122      	movs	r1, #34	; 0x22
 80038b4:	4807      	ldr	r0, [pc, #28]	; (80038d4 <Send_rx485_cmd_message+0x1c0>)
 80038b6:	f000 f855 	bl	8003964 <Send_rs485>
 80038ba:	4603      	mov	r3, r0
 80038bc:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RS485_RX);
 80038be:	2200      	movs	r2, #0
 80038c0:	2120      	movs	r1, #32
 80038c2:	480e      	ldr	r0, [pc, #56]	; (80038fc <Send_rx485_cmd_message+0x1e8>)
 80038c4:	f001 fa50 	bl	8004d68 <HAL_GPIO_WritePin>


	return status;
 80038c8:	7bbb      	ldrb	r3, [r7, #14]

}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	200019dc 	.word	0x200019dc
 80038d8:	0800cab8 	.word	0x0800cab8
 80038dc:	20001a48 	.word	0x20001a48
 80038e0:	0800cac0 	.word	0x0800cac0
 80038e4:	20001a24 	.word	0x20001a24
 80038e8:	0800c5f8 	.word	0x0800c5f8
 80038ec:	0800c5e0 	.word	0x0800c5e0
 80038f0:	0800c5e8 	.word	0x0800c5e8
 80038f4:	0800c5ec 	.word	0x0800c5ec
 80038f8:	0800c5f4 	.word	0x0800c5f4
 80038fc:	40020000 	.word	0x40020000

08003900 <Get_huart>:
//==============================================================================
//
//==============================================================================

UART_HandleTypeDef * Get_huart(SK_UART sel)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	4603      	mov	r3, r0
 8003908:	71fb      	strb	r3, [r7, #7]
	return UartList[sel].huart;
 800390a:	79fa      	ldrb	r2, [r7, #7]
 800390c:	4906      	ldr	r1, [pc, #24]	; (8003928 <Get_huart+0x28>)
 800390e:	4613      	mov	r3, r2
 8003910:	005b      	lsls	r3, r3, #1
 8003912:	4413      	add	r3, r2
 8003914:	00db      	lsls	r3, r3, #3
 8003916:	440b      	add	r3, r1
 8003918:	330c      	adds	r3, #12
 800391a:	681b      	ldr	r3, [r3, #0]
}
 800391c:	4618      	mov	r0, r3
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr
 8003928:	0800cac8 	.word	0x0800cac8

0800392c <Get_uart_port>:
//==============================================================================
//
//==============================================================================

SK_UART	Get_uart_port(UART_HandleTypeDef *huart)
{
 800392c:	b480      	push	{r7}
 800392e:	b085      	sub	sp, #20
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
	SK_UART	rtn;

	if( UartList[0].huart == huart){
 8003934:	4a09      	ldr	r2, [pc, #36]	; (800395c <Get_uart_port+0x30>)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4293      	cmp	r3, r2
 800393a:	d102      	bne.n	8003942 <Get_uart_port+0x16>
		rtn = SK_UART1_RS485 ;
 800393c:	2300      	movs	r3, #0
 800393e:	73fb      	strb	r3, [r7, #15]
 8003940:	e005      	b.n	800394e <Get_uart_port+0x22>
	}
	else if( UartList[1].huart == huart){
 8003942:	4a07      	ldr	r2, [pc, #28]	; (8003960 <Get_uart_port+0x34>)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4293      	cmp	r3, r2
 8003948:	d101      	bne.n	800394e <Get_uart_port+0x22>
		rtn = SK_UART2_DEBUG;
 800394a:	2301      	movs	r3, #1
 800394c:	73fb      	strb	r3, [r7, #15]
	}

	return rtn;
 800394e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003950:	4618      	mov	r0, r3
 8003952:	3714      	adds	r7, #20
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr
 800395c:	20001b18 	.word	0x20001b18
 8003960:	20001b5c 	.word	0x20001b5c

08003964 <Send_rs485>:
//==============================================================================
//
//==============================================================================
RETURN_STATUS Send_rs485(uint8_t *pData, uint16_t Size)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	460b      	mov	r3, r1
 800396e:	807b      	strh	r3, [r7, #2]
	RETURN_STATUS status = RET_TRUE;
 8003970:	2301      	movs	r3, #1
 8003972:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef s;

	//SKprintf("Send_rs485() size=%d\r\n",Size);
	s= HAL_UART_Transmit(UartList[SK_UART1_RS485].huart, pData, Size, HAL_MAX_DELAY);
 8003974:	480f      	ldr	r0, [pc, #60]	; (80039b4 <Send_rs485+0x50>)
 8003976:	887a      	ldrh	r2, [r7, #2]
 8003978:	f04f 33ff 	mov.w	r3, #4294967295
 800397c:	6879      	ldr	r1, [r7, #4]
 800397e:	f003 f86c 	bl	8006a5a <HAL_UART_Transmit>
 8003982:	4603      	mov	r3, r0
 8003984:	73bb      	strb	r3, [r7, #14]

	switch(s){
 8003986:	7bbb      	ldrb	r3, [r7, #14]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d00d      	beq.n	80039a8 <Send_rs485+0x44>
 800398c:	2b00      	cmp	r3, #0
 800398e:	db0c      	blt.n	80039aa <Send_rs485+0x46>
 8003990:	3b01      	subs	r3, #1
 8003992:	2b02      	cmp	r3, #2
 8003994:	d809      	bhi.n	80039aa <Send_rs485+0x46>
	case HAL_OK:
		break;
	case HAL_ERROR:
	case HAL_BUSY:
	case HAL_TIMEOUT:
		status = RET_FALSE;
 8003996:	2300      	movs	r3, #0
 8003998:	73fb      	strb	r3, [r7, #15]
		SKprintf("ERROR %s RS485 TRANSMIT = %d\r\n",UartList[SK_UART1_RS485].name, s);
 800399a:	7bbb      	ldrb	r3, [r7, #14]
 800399c:	461a      	mov	r2, r3
 800399e:	4906      	ldr	r1, [pc, #24]	; (80039b8 <Send_rs485+0x54>)
 80039a0:	4806      	ldr	r0, [pc, #24]	; (80039bc <Send_rs485+0x58>)
 80039a2:	f000 f8a5 	bl	8003af0 <SKprintf>
		break;
 80039a6:	e000      	b.n	80039aa <Send_rs485+0x46>
		break;
 80039a8:	bf00      	nop
	}

	return status;
 80039aa:	7bfb      	ldrb	r3, [r7, #15]

}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3710      	adds	r7, #16
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	20001b18 	.word	0x20001b18
 80039b8:	0800cac9 	.word	0x0800cac9
 80039bc:	0800c610 	.word	0x0800c610

080039c0 <uart_Data_init>:

//==============================================================================
//
//==============================================================================
void uart_Data_init(void)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	af00      	add	r7, sp, #0
	SKprintf("uart_Data_init()\r\n");
 80039c4:	480f      	ldr	r0, [pc, #60]	; (8003a04 <uart_Data_init+0x44>)
 80039c6:	f000 f893 	bl	8003af0 <SKprintf>
	Set_logInfo("uart_Data_init()");
 80039ca:	480f      	ldr	r0, [pc, #60]	; (8003a08 <uart_Data_init+0x48>)
 80039cc:	f7fe f9e0 	bl	8001d90 <Set_logInfo>

	uart[SK_UART1_RS485].rcv_wpt = 0;
 80039d0:	4b0e      	ldr	r3, [pc, #56]	; (8003a0c <uart_Data_init+0x4c>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	uart[SK_UART1_RS485].rcv_rpt = 0;
 80039d8:	4b0c      	ldr	r3, [pc, #48]	; (8003a0c <uart_Data_init+0x4c>)
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
	uart[SK_UART1_RS485].rcvnum = 0;
 80039e0:	4b0a      	ldr	r3, [pc, #40]	; (8003a0c <uart_Data_init+0x4c>)
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82

	uart[SK_UART2_DEBUG].rcv_wpt = 0;
 80039e8:	4b08      	ldr	r3, [pc, #32]	; (8003a0c <uart_Data_init+0x4c>)
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
	uart[SK_UART2_DEBUG].rcv_rpt = 0;
 80039f0:	4b06      	ldr	r3, [pc, #24]	; (8003a0c <uart_Data_init+0x4c>)
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
	uart[SK_UART2_DEBUG].rcvnum = 0;
 80039f8:	4b04      	ldr	r3, [pc, #16]	; (8003a0c <uart_Data_init+0x4c>)
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109

}
 8003a00:	bf00      	nop
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	0800c630 	.word	0x0800c630
 8003a08:	0800c644 	.word	0x0800c644
 8003a0c:	200018cc 	.word	0x200018cc

08003a10 <uart_Rcv_init>:
//	huart2: デバックモニター用のUART
//		PA09：TX
//		PA10:RX
//==============================================================================
void uart_Rcv_init(SK_UART sel)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	4603      	mov	r3, r0
 8003a18:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef s;

	//SKprintf("uart_Rcv_init(%d)\r\n",sel);
	//Set_logInfo("uart_Rcv_init()");
	s= HAL_UART_Receive_IT(Get_huart(sel), &uart[sel].rcv_dt[0], 1);
 8003a1a:	79fb      	ldrb	r3, [r7, #7]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7ff ff6f 	bl	8003900 <Get_huart>
 8003a22:	79fa      	ldrb	r2, [r7, #7]
 8003a24:	4613      	mov	r3, r2
 8003a26:	00db      	lsls	r3, r3, #3
 8003a28:	4413      	add	r3, r2
 8003a2a:	011a      	lsls	r2, r3, #4
 8003a2c:	1ad2      	subs	r2, r2, r3
 8003a2e:	4b0b      	ldr	r3, [pc, #44]	; (8003a5c <uart_Rcv_init+0x4c>)
 8003a30:	4413      	add	r3, r2
 8003a32:	2201      	movs	r2, #1
 8003a34:	4619      	mov	r1, r3
 8003a36:	f003 f8a2 	bl	8006b7e <HAL_UART_Receive_IT>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	73fb      	strb	r3, [r7, #15]

	switch(s){
 8003a3e:	7bfb      	ldrb	r3, [r7, #15]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d005      	beq.n	8003a50 <uart_Rcv_init+0x40>
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	db04      	blt.n	8003a52 <uart_Rcv_init+0x42>
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d801      	bhi.n	8003a52 <uart_Rcv_init+0x42>
		break;
	case HAL_ERROR:
	case HAL_BUSY:
	case HAL_TIMEOUT:
		//SKprintf("ERROR %s RECIVE = %d\r\n",UartList[sel].name, s);
		break;
 8003a4e:	e000      	b.n	8003a52 <uart_Rcv_init+0x42>
		break;
 8003a50:	bf00      	nop
	}
}
 8003a52:	bf00      	nop
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	200018cc 	.word	0x200018cc

08003a60 <SKprintf_uart1>:
//	huart1： RS485用のUART
//		PA09：TX
//		PA10:RX
//==============================================================================
int	SKprintf_uart1 (const char *string, ...)
{
 8003a60:	b40f      	push	{r0, r1, r2, r3}
 8003a62:	b580      	push	{r7, lr}
 8003a64:	b084      	sub	sp, #16
 8003a66:	af00      	add	r7, sp, #0
	va_list ap;
	int i;
	char *buffer;

	while( Sem_Printf != 0 );
 8003a68:	bf00      	nop
 8003a6a:	4b1f      	ldr	r3, [pc, #124]	; (8003ae8 <SKprintf_uart1+0x88>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1fb      	bne.n	8003a6a <SKprintf_uart1+0xa>

	buffer = (char *)pvPortMalloc(CHARA_MAX);
 8003a72:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003a76:	f006 fdaf 	bl	800a5d8 <pvPortMalloc>
 8003a7a:	60b8      	str	r0, [r7, #8]

	if( buffer != NULL ){
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d023      	beq.n	8003aca <SKprintf_uart1+0x6a>

		Sem_Printf = 1;
 8003a82:	4b19      	ldr	r3, [pc, #100]	; (8003ae8 <SKprintf_uart1+0x88>)
 8003a84:	2201      	movs	r2, #1
 8003a86:	601a      	str	r2, [r3, #0]

		// 可変個引数の利用準備
		// -- １… va_list 構造体 ap
		// -- 2 … 可変個引数の直前にある引数

		va_start(ap, string);
 8003a88:	f107 031c 	add.w	r3, r7, #28
 8003a8c:	607b      	str	r3, [r7, #4]
		vsprintf(buffer, string, ap);
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	69b9      	ldr	r1, [r7, #24]
 8003a92:	68b8      	ldr	r0, [r7, #8]
 8003a94:	f007 f816 	bl	800aac4 <vsiprintf>
		va_end(ap);

		for(i=0; i<CHARA_MAX; i++){
 8003a98:	2300      	movs	r3, #0
 8003a9a:	60fb      	str	r3, [r7, #12]
 8003a9c:	e008      	b.n	8003ab0 <SKprintf_uart1+0x50>
			if(buffer[i] == '\0'){
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	68ba      	ldr	r2, [r7, #8]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d006      	beq.n	8003ab8 <SKprintf_uart1+0x58>
		for(i=0; i<CHARA_MAX; i++){
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	3301      	adds	r3, #1
 8003aae:	60fb      	str	r3, [r7, #12]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2bff      	cmp	r3, #255	; 0xff
 8003ab4:	ddf3      	ble.n	8003a9e <SKprintf_uart1+0x3e>
 8003ab6:	e000      	b.n	8003aba <SKprintf_uart1+0x5a>
				break;
 8003ab8:	bf00      	nop
			}
		}
		HAL_UART_Transmit(UartList[SK_UART1_RS485].huart, buffer, i, HAL_MAX_DELAY);
 8003aba:	480c      	ldr	r0, [pc, #48]	; (8003aec <SKprintf_uart1+0x8c>)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ac4:	68b9      	ldr	r1, [r7, #8]
 8003ac6:	f002 ffc8 	bl	8006a5a <HAL_UART_Transmit>

	}

	vPortFree(buffer);
 8003aca:	68b8      	ldr	r0, [r7, #8]
 8003acc:	f006 fe50 	bl	800a770 <vPortFree>

	Sem_Printf = 0;
 8003ad0:	4b05      	ldr	r3, [pc, #20]	; (8003ae8 <SKprintf_uart1+0x88>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	601a      	str	r2, [r3, #0]

}
 8003ad6:	bf00      	nop
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3710      	adds	r7, #16
 8003adc:	46bd      	mov	sp, r7
 8003ade:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ae2:	b004      	add	sp, #16
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	20001a54 	.word	0x20001a54
 8003aec:	20001b18 	.word	0x20001b18

08003af0 <SKprintf>:
// 総和を求める関数（値は int 型を想定）
// n は、渡す引数の数、それ以降は計算する値です。
//==============================================================================

int	SKprintf (const char *string, ...)
{
 8003af0:	b40f      	push	{r0, r1, r2, r3}
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b084      	sub	sp, #16
 8003af6:	af00      	add	r7, sp, #0
	va_list ap;
	int i;
	char *buffer;

	while( Sem_Printf != 0 );
 8003af8:	bf00      	nop
 8003afa:	4b1f      	ldr	r3, [pc, #124]	; (8003b78 <SKprintf+0x88>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1fb      	bne.n	8003afa <SKprintf+0xa>

	buffer = (char *)pvPortMalloc(CHARA_MAX);
 8003b02:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003b06:	f006 fd67 	bl	800a5d8 <pvPortMalloc>
 8003b0a:	60b8      	str	r0, [r7, #8]

	if( buffer != NULL ){
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d023      	beq.n	8003b5a <SKprintf+0x6a>

		Sem_Printf = 1;
 8003b12:	4b19      	ldr	r3, [pc, #100]	; (8003b78 <SKprintf+0x88>)
 8003b14:	2201      	movs	r2, #1
 8003b16:	601a      	str	r2, [r3, #0]

		// 可変個引数の利用準備
		// -- １… va_list 構造体 ap
		// -- 2 … 可変個引数の直前にある引数

		va_start(ap, string);
 8003b18:	f107 031c 	add.w	r3, r7, #28
 8003b1c:	607b      	str	r3, [r7, #4]
		vsprintf(buffer, string, ap);
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	69b9      	ldr	r1, [r7, #24]
 8003b22:	68b8      	ldr	r0, [r7, #8]
 8003b24:	f006 ffce 	bl	800aac4 <vsiprintf>
		va_end(ap);

		for(i=0; i<CHARA_MAX; i++){
 8003b28:	2300      	movs	r3, #0
 8003b2a:	60fb      	str	r3, [r7, #12]
 8003b2c:	e008      	b.n	8003b40 <SKprintf+0x50>
			if(buffer[i] == '\0'){
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	68ba      	ldr	r2, [r7, #8]
 8003b32:	4413      	add	r3, r2
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d006      	beq.n	8003b48 <SKprintf+0x58>
		for(i=0; i<CHARA_MAX; i++){
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	60fb      	str	r3, [r7, #12]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2bff      	cmp	r3, #255	; 0xff
 8003b44:	ddf3      	ble.n	8003b2e <SKprintf+0x3e>
 8003b46:	e000      	b.n	8003b4a <SKprintf+0x5a>
				break;
 8003b48:	bf00      	nop
			}
		}
		HAL_UART_Transmit(UartList[SK_UART2_DEBUG].huart, buffer, i, HAL_MAX_DELAY);
 8003b4a:	480c      	ldr	r0, [pc, #48]	; (8003b7c <SKprintf+0x8c>)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	f04f 33ff 	mov.w	r3, #4294967295
 8003b54:	68b9      	ldr	r1, [r7, #8]
 8003b56:	f002 ff80 	bl	8006a5a <HAL_UART_Transmit>

	}

	vPortFree(buffer);
 8003b5a:	68b8      	ldr	r0, [r7, #8]
 8003b5c:	f006 fe08 	bl	800a770 <vPortFree>

	Sem_Printf = 0;
 8003b60:	4b05      	ldr	r3, [pc, #20]	; (8003b78 <SKprintf+0x88>)
 8003b62:	2200      	movs	r2, #0
 8003b64:	601a      	str	r2, [r3, #0]

}
 8003b66:	bf00      	nop
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3710      	adds	r7, #16
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b72:	b004      	add	sp, #16
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	20001a54 	.word	0x20001a54
 8003b7c:	20001b5c 	.word	0x20001b5c

08003b80 <getch>:
//==============================================================================
//
//
//==============================================================================
int getch(SK_UART id)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	4603      	mov	r3, r0
 8003b88:	71fb      	strb	r3, [r7, #7]
	int rtn = 0;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	60fb      	str	r3, [r7, #12]

	if( uart[SK_UART2_DEBUG].rcvnum  > 0 ){
 8003b8e:	4b07      	ldr	r3, [pc, #28]	; (8003bac <getch+0x2c>)
 8003b90:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d003      	beq.n	8003ba0 <getch+0x20>

		//SKprintf("DATA RECIVED \r\n");
		rtn = Get_rcv_data(SK_UART2_DEBUG);
 8003b98:	2001      	movs	r0, #1
 8003b9a:	f7ff f817 	bl	8002bcc <Get_rcv_data>
 8003b9e:	60f8      	str	r0, [r7, #12]
	}

	return rtn;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3710      	adds	r7, #16
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	200018cc 	.word	0x200018cc

08003bb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003bb4:	f000 fd9e 	bl	80046f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003bb8:	f000 f868 	bl	8003c8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003bbc:	f000 fa6c 	bl	8004098 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003bc0:	f000 fa40 	bl	8004044 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8003bc4:	f000 f8d0 	bl	8003d68 <MX_RTC_Init>
  MX_TIM1_Init();
 8003bc8:	f000 f970 	bl	8003eac <MX_TIM1_Init>
  MX_TIM2_Init();
 8003bcc:	f000 f9c2 	bl	8003f54 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8003bd0:	f000 fa0e 	bl	8003ff0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
  LogInfo_clear();
 8003bd4:	f7fe fb72 	bl	80022bc <LogInfo_clear>
  user_init();		// SK ADDSKprint
 8003bd8:	f7fe fd84 	bl	80026e4 <user_init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8003bdc:	f003 ffac 	bl	8007b38 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (16, sizeof(void *), &myQueue01_attributes);
 8003be0:	4a1a      	ldr	r2, [pc, #104]	; (8003c4c <main+0x9c>)
 8003be2:	2104      	movs	r1, #4
 8003be4:	2010      	movs	r0, #16
 8003be6:	f004 f89e 	bl	8007d26 <osMessageQueueNew>
 8003bea:	4603      	mov	r3, r0
 8003bec:	4a18      	ldr	r2, [pc, #96]	; (8003c50 <main+0xa0>)
 8003bee:	6013      	str	r3, [r2, #0]

  /* creation of myQueue02 */
  myQueue02Handle = osMessageQueueNew (16, sizeof(void *), &myQueue02_attributes);
 8003bf0:	4a18      	ldr	r2, [pc, #96]	; (8003c54 <main+0xa4>)
 8003bf2:	2104      	movs	r1, #4
 8003bf4:	2010      	movs	r0, #16
 8003bf6:	f004 f896 	bl	8007d26 <osMessageQueueNew>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	4a16      	ldr	r2, [pc, #88]	; (8003c58 <main+0xa8>)
 8003bfe:	6013      	str	r3, [r2, #0]

  /* creation of myQueue03 */
  myQueue03Handle = osMessageQueueNew (16, sizeof(void *), &myQueue03_attributes);
 8003c00:	4a16      	ldr	r2, [pc, #88]	; (8003c5c <main+0xac>)
 8003c02:	2104      	movs	r1, #4
 8003c04:	2010      	movs	r0, #16
 8003c06:	f004 f88e 	bl	8007d26 <osMessageQueueNew>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	4a14      	ldr	r2, [pc, #80]	; (8003c60 <main+0xb0>)
 8003c0e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task_main */
  Task_mainHandle = osThreadNew(StartDefaultTask, NULL, &Task_main_attributes);
 8003c10:	4a14      	ldr	r2, [pc, #80]	; (8003c64 <main+0xb4>)
 8003c12:	2100      	movs	r1, #0
 8003c14:	4814      	ldr	r0, [pc, #80]	; (8003c68 <main+0xb8>)
 8003c16:	f003 ffd9 	bl	8007bcc <osThreadNew>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	4a13      	ldr	r2, [pc, #76]	; (8003c6c <main+0xbc>)
 8003c1e:	6013      	str	r3, [r2, #0]

  /* creation of Task_sub1 */
  Task_sub1Handle = osThreadNew(StartTask02, NULL, &Task_sub1_attributes);
 8003c20:	4a13      	ldr	r2, [pc, #76]	; (8003c70 <main+0xc0>)
 8003c22:	2100      	movs	r1, #0
 8003c24:	4813      	ldr	r0, [pc, #76]	; (8003c74 <main+0xc4>)
 8003c26:	f003 ffd1 	bl	8007bcc <osThreadNew>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	4a12      	ldr	r2, [pc, #72]	; (8003c78 <main+0xc8>)
 8003c2e:	6013      	str	r3, [r2, #0]

  /* creation of Task_sub2 */
  Task_sub2Handle = osThreadNew(StartTask03, NULL, &Task_sub2_attributes);
 8003c30:	4a12      	ldr	r2, [pc, #72]	; (8003c7c <main+0xcc>)
 8003c32:	2100      	movs	r1, #0
 8003c34:	4812      	ldr	r0, [pc, #72]	; (8003c80 <main+0xd0>)
 8003c36:	f003 ffc9 	bl	8007bcc <osThreadNew>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	4a11      	ldr	r2, [pc, #68]	; (8003c84 <main+0xd4>)
 8003c3e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  SKprintf("osKernelStart()\r\n");
 8003c40:	4811      	ldr	r0, [pc, #68]	; (8003c88 <main+0xd8>)
 8003c42:	f7ff ff55 	bl	8003af0 <SKprintf>
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8003c46:	f003 ff9b 	bl	8007b80 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003c4a:	e7fe      	b.n	8003c4a <main+0x9a>
 8003c4c:	0800cb64 	.word	0x0800cb64
 8003c50:	20001bac 	.word	0x20001bac
 8003c54:	0800cb7c 	.word	0x0800cb7c
 8003c58:	20001bb0 	.word	0x20001bb0
 8003c5c:	0800cb94 	.word	0x0800cb94
 8003c60:	20001bb4 	.word	0x20001bb4
 8003c64:	0800caf8 	.word	0x0800caf8
 8003c68:	0800419d 	.word	0x0800419d
 8003c6c:	20001ba0 	.word	0x20001ba0
 8003c70:	0800cb1c 	.word	0x0800cb1c
 8003c74:	080041ad 	.word	0x080041ad
 8003c78:	20001ba4 	.word	0x20001ba4
 8003c7c:	0800cb40 	.word	0x0800cb40
 8003c80:	080041d9 	.word	0x080041d9
 8003c84:	20001ba8 	.word	0x20001ba8
 8003c88:	0800c6a0 	.word	0x0800c6a0

08003c8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b094      	sub	sp, #80	; 0x50
 8003c90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c92:	f107 0320 	add.w	r3, r7, #32
 8003c96:	2230      	movs	r2, #48	; 0x30
 8003c98:	2100      	movs	r1, #0
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f006 fec6 	bl	800aa2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ca0:	f107 030c 	add.w	r3, r7, #12
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	601a      	str	r2, [r3, #0]
 8003ca8:	605a      	str	r2, [r3, #4]
 8003caa:	609a      	str	r2, [r3, #8]
 8003cac:	60da      	str	r2, [r3, #12]
 8003cae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	60bb      	str	r3, [r7, #8]
 8003cb4:	4b2a      	ldr	r3, [pc, #168]	; (8003d60 <SystemClock_Config+0xd4>)
 8003cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb8:	4a29      	ldr	r2, [pc, #164]	; (8003d60 <SystemClock_Config+0xd4>)
 8003cba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cbe:	6413      	str	r3, [r2, #64]	; 0x40
 8003cc0:	4b27      	ldr	r3, [pc, #156]	; (8003d60 <SystemClock_Config+0xd4>)
 8003cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cc8:	60bb      	str	r3, [r7, #8]
 8003cca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003ccc:	2300      	movs	r3, #0
 8003cce:	607b      	str	r3, [r7, #4]
 8003cd0:	4b24      	ldr	r3, [pc, #144]	; (8003d64 <SystemClock_Config+0xd8>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003cd8:	4a22      	ldr	r2, [pc, #136]	; (8003d64 <SystemClock_Config+0xd8>)
 8003cda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cde:	6013      	str	r3, [r2, #0]
 8003ce0:	4b20      	ldr	r3, [pc, #128]	; (8003d64 <SystemClock_Config+0xd8>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003ce8:	607b      	str	r3, [r7, #4]
 8003cea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8003cec:	2306      	movs	r3, #6
 8003cee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003cf8:	2310      	movs	r3, #16
 8003cfa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003d00:	2300      	movs	r3, #0
 8003d02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8003d04:	2310      	movs	r3, #16
 8003d06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003d08:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8003d0c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003d0e:	2304      	movs	r3, #4
 8003d10:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003d12:	2307      	movs	r3, #7
 8003d14:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003d16:	f107 0320 	add.w	r3, r7, #32
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f001 f83e 	bl	8004d9c <HAL_RCC_OscConfig>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d001      	beq.n	8003d2a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8003d26:	f000 fa7d 	bl	8004224 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003d2a:	230f      	movs	r3, #15
 8003d2c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003d2e:	2302      	movs	r3, #2
 8003d30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003d32:	2300      	movs	r3, #0
 8003d34:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003d36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d3a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003d40:	f107 030c 	add.w	r3, r7, #12
 8003d44:	2102      	movs	r1, #2
 8003d46:	4618      	mov	r0, r3
 8003d48:	f001 faa0 	bl	800528c <HAL_RCC_ClockConfig>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d001      	beq.n	8003d56 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8003d52:	f000 fa67 	bl	8004224 <Error_Handler>
  }
}
 8003d56:	bf00      	nop
 8003d58:	3750      	adds	r7, #80	; 0x50
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	40023800 	.word	0x40023800
 8003d64:	40007000 	.word	0x40007000

08003d68 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b08c      	sub	sp, #48	; 0x30
 8003d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003d6e:	f107 031c 	add.w	r3, r7, #28
 8003d72:	2200      	movs	r2, #0
 8003d74:	601a      	str	r2, [r3, #0]
 8003d76:	605a      	str	r2, [r3, #4]
 8003d78:	609a      	str	r2, [r3, #8]
 8003d7a:	60da      	str	r2, [r3, #12]
 8003d7c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003d7e:	2300      	movs	r3, #0
 8003d80:	61bb      	str	r3, [r7, #24]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003d82:	4b48      	ldr	r3, [pc, #288]	; (8003ea4 <MX_RTC_Init+0x13c>)
 8003d84:	4a48      	ldr	r2, [pc, #288]	; (8003ea8 <MX_RTC_Init+0x140>)
 8003d86:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003d88:	4b46      	ldr	r3, [pc, #280]	; (8003ea4 <MX_RTC_Init+0x13c>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003d8e:	4b45      	ldr	r3, [pc, #276]	; (8003ea4 <MX_RTC_Init+0x13c>)
 8003d90:	227f      	movs	r2, #127	; 0x7f
 8003d92:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003d94:	4b43      	ldr	r3, [pc, #268]	; (8003ea4 <MX_RTC_Init+0x13c>)
 8003d96:	22ff      	movs	r2, #255	; 0xff
 8003d98:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003d9a:	4b42      	ldr	r3, [pc, #264]	; (8003ea4 <MX_RTC_Init+0x13c>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003da0:	4b40      	ldr	r3, [pc, #256]	; (8003ea4 <MX_RTC_Init+0x13c>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003da6:	4b3f      	ldr	r3, [pc, #252]	; (8003ea4 <MX_RTC_Init+0x13c>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003dac:	483d      	ldr	r0, [pc, #244]	; (8003ea4 <MX_RTC_Init+0x13c>)
 8003dae:	f001 fdad 	bl	800590c <HAL_RTC_Init>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d001      	beq.n	8003dbc <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8003db8:	f000 fa34 	bl	8004224 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	773b      	strb	r3, [r7, #28]
  sTime.Minutes = 0x0;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	777b      	strb	r3, [r7, #29]
  sTime.Seconds = 0x0;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	77bb      	strb	r3, [r7, #30]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	62bb      	str	r3, [r7, #40]	; 0x28
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003dd0:	f107 031c 	add.w	r3, r7, #28
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	4832      	ldr	r0, [pc, #200]	; (8003ea4 <MX_RTC_Init+0x13c>)
 8003dda:	f001 fe0d 	bl	80059f8 <HAL_RTC_SetTime>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d001      	beq.n	8003de8 <MX_RTC_Init+0x80>
  {
    Error_Handler();
 8003de4:	f000 fa1e 	bl	8004224 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003de8:	2301      	movs	r3, #1
 8003dea:	763b      	strb	r3, [r7, #24]
  sDate.Month = RTC_MONTH_JANUARY;
 8003dec:	2301      	movs	r3, #1
 8003dee:	767b      	strb	r3, [r7, #25]
  sDate.Date = 0x1;
 8003df0:	2301      	movs	r3, #1
 8003df2:	76bb      	strb	r3, [r7, #26]
  sDate.Year = 0x0;
 8003df4:	2300      	movs	r3, #0
 8003df6:	76fb      	strb	r3, [r7, #27]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003df8:	f107 0318 	add.w	r3, r7, #24
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	4619      	mov	r1, r3
 8003e00:	4828      	ldr	r0, [pc, #160]	; (8003ea4 <MX_RTC_Init+0x13c>)
 8003e02:	f001 fef1 	bl	8005be8 <HAL_RTC_SetDate>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d001      	beq.n	8003e10 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8003e0c:	f000 fa0a 	bl	8004224 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8003e10:	2204      	movs	r2, #4
 8003e12:	2100      	movs	r1, #0
 8003e14:	4823      	ldr	r0, [pc, #140]	; (8003ea4 <MX_RTC_Init+0x13c>)
 8003e16:	f002 f877 	bl	8005f08 <HAL_RTCEx_SetWakeUpTimer_IT>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d001      	beq.n	8003e24 <MX_RTC_Init+0xbc>
  {
    Error_Handler();
 8003e20:	f000 fa00 	bl	8004224 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
#define MAGIC_NO 0x12a5			// SK ADD

  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) != MAGIC_NO)
 8003e24:	2100      	movs	r1, #0
 8003e26:	481f      	ldr	r0, [pc, #124]	; (8003ea4 <MX_RTC_Init+0x13c>)
 8003e28:	f002 f96c 	bl	8006104 <HAL_RTCEx_BKUPRead>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	f241 22a5 	movw	r2, #4773	; 0x12a5
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d032      	beq.n	8003e9c <MX_RTC_Init+0x134>
  {
    RTC_TimeTypeDef sTime = {0};
 8003e36:	1d3b      	adds	r3, r7, #4
 8003e38:	2200      	movs	r2, #0
 8003e3a:	601a      	str	r2, [r3, #0]
 8003e3c:	605a      	str	r2, [r3, #4]
 8003e3e:	609a      	str	r2, [r3, #8]
 8003e40:	60da      	str	r2, [r3, #12]
 8003e42:	611a      	str	r2, [r3, #16]
    RTC_DateTypeDef sDate = {0};
 8003e44:	2300      	movs	r3, #0
 8003e46:	603b      	str	r3, [r7, #0]

    sTime.Hours = 1;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	713b      	strb	r3, [r7, #4]
    sTime.Minutes = 0;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	717b      	strb	r3, [r7, #5]
    sTime.Seconds = 0;
 8003e50:	2300      	movs	r3, #0
 8003e52:	71bb      	strb	r3, [r7, #6]
    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8003e54:	1d3b      	adds	r3, r7, #4
 8003e56:	2200      	movs	r2, #0
 8003e58:	4619      	mov	r1, r3
 8003e5a:	4812      	ldr	r0, [pc, #72]	; (8003ea4 <MX_RTC_Init+0x13c>)
 8003e5c:	f001 fdcc 	bl	80059f8 <HAL_RTC_SetTime>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d001      	beq.n	8003e6a <MX_RTC_Init+0x102>
    {
      Error_Handler();
 8003e66:	f000 f9dd 	bl	8004224 <Error_Handler>
    }
    sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	703b      	strb	r3, [r7, #0]
    sDate.Month = RTC_MONTH_JANUARY;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	707b      	strb	r3, [r7, #1]
    sDate.Date = 1;
 8003e72:	2301      	movs	r3, #1
 8003e74:	70bb      	strb	r3, [r7, #2]
    sDate.Year = 20;
 8003e76:	2314      	movs	r3, #20
 8003e78:	70fb      	strb	r3, [r7, #3]
    if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8003e7a:	463b      	mov	r3, r7
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	4619      	mov	r1, r3
 8003e80:	4808      	ldr	r0, [pc, #32]	; (8003ea4 <MX_RTC_Init+0x13c>)
 8003e82:	f001 feb1 	bl	8005be8 <HAL_RTC_SetDate>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d001      	beq.n	8003e90 <MX_RTC_Init+0x128>
    {
      Error_Handler();
 8003e8c:	f000 f9ca 	bl	8004224 <Error_Handler>

    }
    HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, MAGIC_NO);
 8003e90:	f241 22a5 	movw	r2, #4773	; 0x12a5
 8003e94:	2100      	movs	r1, #0
 8003e96:	4803      	ldr	r0, [pc, #12]	; (8003ea4 <MX_RTC_Init+0x13c>)
 8003e98:	f002 f91a 	bl	80060d0 <HAL_RTCEx_BKUPWrite>
  }
  /* USER CODE END RTC_Init 2 */

}
 8003e9c:	bf00      	nop
 8003e9e:	3730      	adds	r7, #48	; 0x30
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	20001a68 	.word	0x20001a68
 8003ea8:	40002800 	.word	0x40002800

08003eac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b086      	sub	sp, #24
 8003eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003eb2:	f107 0308 	add.w	r3, r7, #8
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	601a      	str	r2, [r3, #0]
 8003eba:	605a      	str	r2, [r3, #4]
 8003ebc:	609a      	str	r2, [r3, #8]
 8003ebe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ec0:	463b      	mov	r3, r7
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	601a      	str	r2, [r3, #0]
 8003ec6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003ec8:	4b20      	ldr	r3, [pc, #128]	; (8003f4c <MX_TIM1_Init+0xa0>)
 8003eca:	4a21      	ldr	r2, [pc, #132]	; (8003f50 <MX_TIM1_Init+0xa4>)
 8003ecc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3999;
 8003ece:	4b1f      	ldr	r3, [pc, #124]	; (8003f4c <MX_TIM1_Init+0xa0>)
 8003ed0:	f640 729f 	movw	r2, #3999	; 0xf9f
 8003ed4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ed6:	4b1d      	ldr	r3, [pc, #116]	; (8003f4c <MX_TIM1_Init+0xa0>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20999;
 8003edc:	4b1b      	ldr	r3, [pc, #108]	; (8003f4c <MX_TIM1_Init+0xa0>)
 8003ede:	f245 2207 	movw	r2, #20999	; 0x5207
 8003ee2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ee4:	4b19      	ldr	r3, [pc, #100]	; (8003f4c <MX_TIM1_Init+0xa0>)
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003eea:	4b18      	ldr	r3, [pc, #96]	; (8003f4c <MX_TIM1_Init+0xa0>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ef0:	4b16      	ldr	r3, [pc, #88]	; (8003f4c <MX_TIM1_Init+0xa0>)
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003ef6:	4815      	ldr	r0, [pc, #84]	; (8003f4c <MX_TIM1_Init+0xa0>)
 8003ef8:	f002 f91c 	bl	8006134 <HAL_TIM_Base_Init>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d001      	beq.n	8003f06 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8003f02:	f000 f98f 	bl	8004224 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f0a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003f0c:	f107 0308 	add.w	r3, r7, #8
 8003f10:	4619      	mov	r1, r3
 8003f12:	480e      	ldr	r0, [pc, #56]	; (8003f4c <MX_TIM1_Init+0xa0>)
 8003f14:	f002 fac8 	bl	80064a8 <HAL_TIM_ConfigClockSource>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d001      	beq.n	8003f22 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8003f1e:	f000 f981 	bl	8004224 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f22:	2300      	movs	r3, #0
 8003f24:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f26:	2300      	movs	r3, #0
 8003f28:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003f2a:	463b      	mov	r3, r7
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	4807      	ldr	r0, [pc, #28]	; (8003f4c <MX_TIM1_Init+0xa0>)
 8003f30:	f002 fcc4 	bl	80068bc <HAL_TIMEx_MasterConfigSynchronization>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d001      	beq.n	8003f3e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8003f3a:	f000 f973 	bl	8004224 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_Base_Start_IT(&htim1);    // SK ADD
 8003f3e:	4803      	ldr	r0, [pc, #12]	; (8003f4c <MX_TIM1_Init+0xa0>)
 8003f40:	f002 f948 	bl	80061d4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM1_Init 2 */

}
 8003f44:	bf00      	nop
 8003f46:	3718      	adds	r7, #24
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	20001a88 	.word	0x20001a88
 8003f50:	40010000 	.word	0x40010000

08003f54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b086      	sub	sp, #24
 8003f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f5a:	f107 0308 	add.w	r3, r7, #8
 8003f5e:	2200      	movs	r2, #0
 8003f60:	601a      	str	r2, [r3, #0]
 8003f62:	605a      	str	r2, [r3, #4]
 8003f64:	609a      	str	r2, [r3, #8]
 8003f66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f68:	463b      	mov	r3, r7
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	601a      	str	r2, [r3, #0]
 8003f6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003f70:	4b1e      	ldr	r3, [pc, #120]	; (8003fec <MX_TIM2_Init+0x98>)
 8003f72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003f76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3;
 8003f78:	4b1c      	ldr	r3, [pc, #112]	; (8003fec <MX_TIM2_Init+0x98>)
 8003f7a:	2203      	movs	r2, #3
 8003f7c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f7e:	4b1b      	ldr	r3, [pc, #108]	; (8003fec <MX_TIM2_Init+0x98>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 209;
 8003f84:	4b19      	ldr	r3, [pc, #100]	; (8003fec <MX_TIM2_Init+0x98>)
 8003f86:	22d1      	movs	r2, #209	; 0xd1
 8003f88:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f8a:	4b18      	ldr	r3, [pc, #96]	; (8003fec <MX_TIM2_Init+0x98>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f90:	4b16      	ldr	r3, [pc, #88]	; (8003fec <MX_TIM2_Init+0x98>)
 8003f92:	2200      	movs	r2, #0
 8003f94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003f96:	4815      	ldr	r0, [pc, #84]	; (8003fec <MX_TIM2_Init+0x98>)
 8003f98:	f002 f8cc 	bl	8006134 <HAL_TIM_Base_Init>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d001      	beq.n	8003fa6 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8003fa2:	f000 f93f 	bl	8004224 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003fa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003faa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003fac:	f107 0308 	add.w	r3, r7, #8
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	480e      	ldr	r0, [pc, #56]	; (8003fec <MX_TIM2_Init+0x98>)
 8003fb4:	f002 fa78 	bl	80064a8 <HAL_TIM_ConfigClockSource>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d001      	beq.n	8003fc2 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8003fbe:	f000 f931 	bl	8004224 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003fca:	463b      	mov	r3, r7
 8003fcc:	4619      	mov	r1, r3
 8003fce:	4807      	ldr	r0, [pc, #28]	; (8003fec <MX_TIM2_Init+0x98>)
 8003fd0:	f002 fc74 	bl	80068bc <HAL_TIMEx_MasterConfigSynchronization>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8003fda:	f000 f923 	bl	8004224 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Base_Start_IT(&htim2);    // SK ADD
 8003fde:	4803      	ldr	r0, [pc, #12]	; (8003fec <MX_TIM2_Init+0x98>)
 8003fe0:	f002 f8f8 	bl	80061d4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM2_Init 2 */

}
 8003fe4:	bf00      	nop
 8003fe6:	3718      	adds	r7, #24
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	20001ad0 	.word	0x20001ad0

08003ff0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003ff4:	4b11      	ldr	r3, [pc, #68]	; (800403c <MX_USART1_UART_Init+0x4c>)
 8003ff6:	4a12      	ldr	r2, [pc, #72]	; (8004040 <MX_USART1_UART_Init+0x50>)
 8003ff8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8003ffa:	4b10      	ldr	r3, [pc, #64]	; (800403c <MX_USART1_UART_Init+0x4c>)
 8003ffc:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8004000:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004002:	4b0e      	ldr	r3, [pc, #56]	; (800403c <MX_USART1_UART_Init+0x4c>)
 8004004:	2200      	movs	r2, #0
 8004006:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004008:	4b0c      	ldr	r3, [pc, #48]	; (800403c <MX_USART1_UART_Init+0x4c>)
 800400a:	2200      	movs	r2, #0
 800400c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800400e:	4b0b      	ldr	r3, [pc, #44]	; (800403c <MX_USART1_UART_Init+0x4c>)
 8004010:	2200      	movs	r2, #0
 8004012:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004014:	4b09      	ldr	r3, [pc, #36]	; (800403c <MX_USART1_UART_Init+0x4c>)
 8004016:	220c      	movs	r2, #12
 8004018:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800401a:	4b08      	ldr	r3, [pc, #32]	; (800403c <MX_USART1_UART_Init+0x4c>)
 800401c:	2200      	movs	r2, #0
 800401e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004020:	4b06      	ldr	r3, [pc, #24]	; (800403c <MX_USART1_UART_Init+0x4c>)
 8004022:	2200      	movs	r2, #0
 8004024:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004026:	4805      	ldr	r0, [pc, #20]	; (800403c <MX_USART1_UART_Init+0x4c>)
 8004028:	f002 fcca 	bl	80069c0 <HAL_UART_Init>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d001      	beq.n	8004036 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004032:	f000 f8f7 	bl	8004224 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004036:	bf00      	nop
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	20001b18 	.word	0x20001b18
 8004040:	40011000 	.word	0x40011000

08004044 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004048:	4b11      	ldr	r3, [pc, #68]	; (8004090 <MX_USART2_UART_Init+0x4c>)
 800404a:	4a12      	ldr	r2, [pc, #72]	; (8004094 <MX_USART2_UART_Init+0x50>)
 800404c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800404e:	4b10      	ldr	r3, [pc, #64]	; (8004090 <MX_USART2_UART_Init+0x4c>)
 8004050:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004054:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004056:	4b0e      	ldr	r3, [pc, #56]	; (8004090 <MX_USART2_UART_Init+0x4c>)
 8004058:	2200      	movs	r2, #0
 800405a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800405c:	4b0c      	ldr	r3, [pc, #48]	; (8004090 <MX_USART2_UART_Init+0x4c>)
 800405e:	2200      	movs	r2, #0
 8004060:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004062:	4b0b      	ldr	r3, [pc, #44]	; (8004090 <MX_USART2_UART_Init+0x4c>)
 8004064:	2200      	movs	r2, #0
 8004066:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004068:	4b09      	ldr	r3, [pc, #36]	; (8004090 <MX_USART2_UART_Init+0x4c>)
 800406a:	220c      	movs	r2, #12
 800406c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800406e:	4b08      	ldr	r3, [pc, #32]	; (8004090 <MX_USART2_UART_Init+0x4c>)
 8004070:	2200      	movs	r2, #0
 8004072:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004074:	4b06      	ldr	r3, [pc, #24]	; (8004090 <MX_USART2_UART_Init+0x4c>)
 8004076:	2200      	movs	r2, #0
 8004078:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800407a:	4805      	ldr	r0, [pc, #20]	; (8004090 <MX_USART2_UART_Init+0x4c>)
 800407c:	f002 fca0 	bl	80069c0 <HAL_UART_Init>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d001      	beq.n	800408a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004086:	f000 f8cd 	bl	8004224 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800408a:	bf00      	nop
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	20001b5c 	.word	0x20001b5c
 8004094:	40004400 	.word	0x40004400

08004098 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b08a      	sub	sp, #40	; 0x28
 800409c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800409e:	f107 0314 	add.w	r3, r7, #20
 80040a2:	2200      	movs	r2, #0
 80040a4:	601a      	str	r2, [r3, #0]
 80040a6:	605a      	str	r2, [r3, #4]
 80040a8:	609a      	str	r2, [r3, #8]
 80040aa:	60da      	str	r2, [r3, #12]
 80040ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80040ae:	2300      	movs	r3, #0
 80040b0:	613b      	str	r3, [r7, #16]
 80040b2:	4b37      	ldr	r3, [pc, #220]	; (8004190 <MX_GPIO_Init+0xf8>)
 80040b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b6:	4a36      	ldr	r2, [pc, #216]	; (8004190 <MX_GPIO_Init+0xf8>)
 80040b8:	f043 0304 	orr.w	r3, r3, #4
 80040bc:	6313      	str	r3, [r2, #48]	; 0x30
 80040be:	4b34      	ldr	r3, [pc, #208]	; (8004190 <MX_GPIO_Init+0xf8>)
 80040c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c2:	f003 0304 	and.w	r3, r3, #4
 80040c6:	613b      	str	r3, [r7, #16]
 80040c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80040ca:	2300      	movs	r3, #0
 80040cc:	60fb      	str	r3, [r7, #12]
 80040ce:	4b30      	ldr	r3, [pc, #192]	; (8004190 <MX_GPIO_Init+0xf8>)
 80040d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d2:	4a2f      	ldr	r2, [pc, #188]	; (8004190 <MX_GPIO_Init+0xf8>)
 80040d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040d8:	6313      	str	r3, [r2, #48]	; 0x30
 80040da:	4b2d      	ldr	r3, [pc, #180]	; (8004190 <MX_GPIO_Init+0xf8>)
 80040dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040e2:	60fb      	str	r3, [r7, #12]
 80040e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80040e6:	2300      	movs	r3, #0
 80040e8:	60bb      	str	r3, [r7, #8]
 80040ea:	4b29      	ldr	r3, [pc, #164]	; (8004190 <MX_GPIO_Init+0xf8>)
 80040ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ee:	4a28      	ldr	r2, [pc, #160]	; (8004190 <MX_GPIO_Init+0xf8>)
 80040f0:	f043 0301 	orr.w	r3, r3, #1
 80040f4:	6313      	str	r3, [r2, #48]	; 0x30
 80040f6:	4b26      	ldr	r3, [pc, #152]	; (8004190 <MX_GPIO_Init+0xf8>)
 80040f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fa:	f003 0301 	and.w	r3, r3, #1
 80040fe:	60bb      	str	r3, [r7, #8]
 8004100:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004102:	2300      	movs	r3, #0
 8004104:	607b      	str	r3, [r7, #4]
 8004106:	4b22      	ldr	r3, [pc, #136]	; (8004190 <MX_GPIO_Init+0xf8>)
 8004108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800410a:	4a21      	ldr	r2, [pc, #132]	; (8004190 <MX_GPIO_Init+0xf8>)
 800410c:	f043 0302 	orr.w	r3, r3, #2
 8004110:	6313      	str	r3, [r2, #48]	; 0x30
 8004112:	4b1f      	ldr	r3, [pc, #124]	; (8004190 <MX_GPIO_Init+0xf8>)
 8004114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004116:	f003 0302 	and.w	r3, r3, #2
 800411a:	607b      	str	r3, [r7, #4]
 800411c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TIM1_PLS_GPIO_Port, TIM1_PLS_Pin, GPIO_PIN_RESET);
 800411e:	2200      	movs	r2, #0
 8004120:	2104      	movs	r1, #4
 8004122:	481c      	ldr	r0, [pc, #112]	; (8004194 <MX_GPIO_Init+0xfc>)
 8004124:	f000 fe20 	bl	8004d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8004128:	2200      	movs	r2, #0
 800412a:	2120      	movs	r1, #32
 800412c:	481a      	ldr	r0, [pc, #104]	; (8004198 <MX_GPIO_Init+0x100>)
 800412e:	f000 fe1b 	bl	8004d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004132:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004136:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004138:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800413c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800413e:	2300      	movs	r3, #0
 8004140:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004142:	f107 0314 	add.w	r3, r7, #20
 8004146:	4619      	mov	r1, r3
 8004148:	4812      	ldr	r0, [pc, #72]	; (8004194 <MX_GPIO_Init+0xfc>)
 800414a:	f000 fc89 	bl	8004a60 <HAL_GPIO_Init>

  /*Configure GPIO pin : TIM1_PLS_Pin */
  GPIO_InitStruct.Pin = TIM1_PLS_Pin;
 800414e:	2304      	movs	r3, #4
 8004150:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004152:	2301      	movs	r3, #1
 8004154:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004156:	2300      	movs	r3, #0
 8004158:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800415a:	2300      	movs	r3, #0
 800415c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TIM1_PLS_GPIO_Port, &GPIO_InitStruct);
 800415e:	f107 0314 	add.w	r3, r7, #20
 8004162:	4619      	mov	r1, r3
 8004164:	480b      	ldr	r0, [pc, #44]	; (8004194 <MX_GPIO_Init+0xfc>)
 8004166:	f000 fc7b 	bl	8004a60 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800416a:	2320      	movs	r3, #32
 800416c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800416e:	2301      	movs	r3, #1
 8004170:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004172:	2300      	movs	r3, #0
 8004174:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004176:	2300      	movs	r3, #0
 8004178:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800417a:	f107 0314 	add.w	r3, r7, #20
 800417e:	4619      	mov	r1, r3
 8004180:	4805      	ldr	r0, [pc, #20]	; (8004198 <MX_GPIO_Init+0x100>)
 8004182:	f000 fc6d 	bl	8004a60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004186:	bf00      	nop
 8004188:	3728      	adds	r7, #40	; 0x28
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	40023800 	.word	0x40023800
 8004194:	40020800 	.word	0x40020800
 8004198:	40020000 	.word	0x40020000

0800419c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
//	  rtc_display();
	  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
    osDelay(100);
 80041a4:	2064      	movs	r0, #100	; 0x64
 80041a6:	f003 fda3 	bl	8007cf0 <osDelay>
 80041aa:	e7fb      	b.n	80041a4 <StartDefaultTask+0x8>

080041ac <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	 SKprintf("task2 start()\r\n");
 80041b4:	4806      	ldr	r0, [pc, #24]	; (80041d0 <StartTask02+0x24>)
 80041b6:	f7ff fc9b 	bl	8003af0 <SKprintf>

	task_chk_init();
 80041ba:	f7fe f8bb 	bl	8002334 <task_chk_init>


	 SKprintf("task2 loop()\r\n");
 80041be:	4805      	ldr	r0, [pc, #20]	; (80041d4 <StartTask02+0x28>)
 80041c0:	f7ff fc96 	bl	8003af0 <SKprintf>
  /* Infinite loop */
  for(;;)
  {
	  //task_stack_chk();
	  debu_main();
 80041c4:	f7fc fd8c 	bl	8000ce0 <debu_main>
	  TimerEventCtrl();
 80041c8:	f7fe fb44 	bl	8002854 <TimerEventCtrl>
  {
 80041cc:	e7fa      	b.n	80041c4 <StartTask02+0x18>
 80041ce:	bf00      	nop
 80041d0:	0800c6b4 	.word	0x0800c6b4
 80041d4:	0800c6c4 	.word	0x0800c6c4

080041d8 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
__weak void StartTask03(void *argument)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
    osDelay(100);
 80041e0:	2064      	movs	r0, #100	; 0x64
 80041e2:	f003 fd85 	bl	8007cf0 <osDelay>
    //char c[2];

	//SKprintf_uart1("===================\r\n");
	SKprintf_uart1("=== UART1 START ===\r\n");
 80041e6:	4805      	ldr	r0, [pc, #20]	; (80041fc <StartTask03+0x24>)
 80041e8:	f7ff fc3a 	bl	8003a60 <SKprintf_uart1>
	//SKprintf_uart1("===================\r\n");
	tasuk3_init();
 80041ec:	f7fe fc0a 	bl	8002a04 <tasuk3_init>

	/* Infinite loop */

	for(;;)
	{
		rs485_com_task();
 80041f0:	f7fe fd76 	bl	8002ce0 <rs485_com_task>
		osDelay(100);
 80041f4:	2064      	movs	r0, #100	; 0x64
 80041f6:	f003 fd7b 	bl	8007cf0 <osDelay>
		rs485_com_task();
 80041fa:	e7f9      	b.n	80041f0 <StartTask03+0x18>
 80041fc:	0800c6d4 	.word	0x0800c6d4

08004200 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b082      	sub	sp, #8
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a04      	ldr	r2, [pc, #16]	; (8004220 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d101      	bne.n	8004216 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004212:	f000 fa91 	bl	8004738 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004216:	bf00      	nop
 8004218:	3708      	adds	r7, #8
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	40014400 	.word	0x40014400

08004224 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004224:	b480      	push	{r7}
 8004226:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004228:	b672      	cpsid	i
}
 800422a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800422c:	e7fe      	b.n	800422c <Error_Handler+0x8>
	...

08004230 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004236:	2300      	movs	r3, #0
 8004238:	607b      	str	r3, [r7, #4]
 800423a:	4b12      	ldr	r3, [pc, #72]	; (8004284 <HAL_MspInit+0x54>)
 800423c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800423e:	4a11      	ldr	r2, [pc, #68]	; (8004284 <HAL_MspInit+0x54>)
 8004240:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004244:	6453      	str	r3, [r2, #68]	; 0x44
 8004246:	4b0f      	ldr	r3, [pc, #60]	; (8004284 <HAL_MspInit+0x54>)
 8004248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800424a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800424e:	607b      	str	r3, [r7, #4]
 8004250:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004252:	2300      	movs	r3, #0
 8004254:	603b      	str	r3, [r7, #0]
 8004256:	4b0b      	ldr	r3, [pc, #44]	; (8004284 <HAL_MspInit+0x54>)
 8004258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425a:	4a0a      	ldr	r2, [pc, #40]	; (8004284 <HAL_MspInit+0x54>)
 800425c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004260:	6413      	str	r3, [r2, #64]	; 0x40
 8004262:	4b08      	ldr	r3, [pc, #32]	; (8004284 <HAL_MspInit+0x54>)
 8004264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800426a:	603b      	str	r3, [r7, #0]
 800426c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800426e:	2200      	movs	r2, #0
 8004270:	210f      	movs	r1, #15
 8004272:	f06f 0001 	mvn.w	r0, #1
 8004276:	f000 fb37 	bl	80048e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800427a:	bf00      	nop
 800427c:	3708      	adds	r7, #8
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	40023800 	.word	0x40023800

08004288 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b088      	sub	sp, #32
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004290:	f107 030c 	add.w	r3, r7, #12
 8004294:	2200      	movs	r2, #0
 8004296:	601a      	str	r2, [r3, #0]
 8004298:	605a      	str	r2, [r3, #4]
 800429a:	609a      	str	r2, [r3, #8]
 800429c:	60da      	str	r2, [r3, #12]
 800429e:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a10      	ldr	r2, [pc, #64]	; (80042e8 <HAL_RTC_MspInit+0x60>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d119      	bne.n	80042de <HAL_RTC_MspInit+0x56>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80042aa:	2302      	movs	r3, #2
 80042ac:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80042ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80042b2:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80042b4:	f107 030c 	add.w	r3, r7, #12
 80042b8:	4618      	mov	r0, r3
 80042ba:	f001 fa39 	bl	8005730 <HAL_RCCEx_PeriphCLKConfig>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d001      	beq.n	80042c8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80042c4:	f7ff ffae 	bl	8004224 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80042c8:	4b08      	ldr	r3, [pc, #32]	; (80042ec <HAL_RTC_MspInit+0x64>)
 80042ca:	2201      	movs	r2, #1
 80042cc:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 5, 0);
 80042ce:	2200      	movs	r2, #0
 80042d0:	2105      	movs	r1, #5
 80042d2:	2003      	movs	r0, #3
 80042d4:	f000 fb08 	bl	80048e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80042d8:	2003      	movs	r0, #3
 80042da:	f000 fb21 	bl	8004920 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80042de:	bf00      	nop
 80042e0:	3720      	adds	r7, #32
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	40002800 	.word	0x40002800
 80042ec:	42470e3c 	.word	0x42470e3c

080042f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a1c      	ldr	r2, [pc, #112]	; (8004370 <HAL_TIM_Base_MspInit+0x80>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d116      	bne.n	8004330 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004302:	2300      	movs	r3, #0
 8004304:	60fb      	str	r3, [r7, #12]
 8004306:	4b1b      	ldr	r3, [pc, #108]	; (8004374 <HAL_TIM_Base_MspInit+0x84>)
 8004308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800430a:	4a1a      	ldr	r2, [pc, #104]	; (8004374 <HAL_TIM_Base_MspInit+0x84>)
 800430c:	f043 0301 	orr.w	r3, r3, #1
 8004310:	6453      	str	r3, [r2, #68]	; 0x44
 8004312:	4b18      	ldr	r3, [pc, #96]	; (8004374 <HAL_TIM_Base_MspInit+0x84>)
 8004314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004316:	f003 0301 	and.w	r3, r3, #1
 800431a:	60fb      	str	r3, [r7, #12]
 800431c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 15, 0);
 800431e:	2200      	movs	r2, #0
 8004320:	210f      	movs	r1, #15
 8004322:	2019      	movs	r0, #25
 8004324:	f000 fae0 	bl	80048e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004328:	2019      	movs	r0, #25
 800432a:	f000 faf9 	bl	8004920 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800432e:	e01a      	b.n	8004366 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM2)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004338:	d115      	bne.n	8004366 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800433a:	2300      	movs	r3, #0
 800433c:	60bb      	str	r3, [r7, #8]
 800433e:	4b0d      	ldr	r3, [pc, #52]	; (8004374 <HAL_TIM_Base_MspInit+0x84>)
 8004340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004342:	4a0c      	ldr	r2, [pc, #48]	; (8004374 <HAL_TIM_Base_MspInit+0x84>)
 8004344:	f043 0301 	orr.w	r3, r3, #1
 8004348:	6413      	str	r3, [r2, #64]	; 0x40
 800434a:	4b0a      	ldr	r3, [pc, #40]	; (8004374 <HAL_TIM_Base_MspInit+0x84>)
 800434c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434e:	f003 0301 	and.w	r3, r3, #1
 8004352:	60bb      	str	r3, [r7, #8]
 8004354:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8004356:	2200      	movs	r2, #0
 8004358:	2105      	movs	r1, #5
 800435a:	201c      	movs	r0, #28
 800435c:	f000 fac4 	bl	80048e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004360:	201c      	movs	r0, #28
 8004362:	f000 fadd 	bl	8004920 <HAL_NVIC_EnableIRQ>
}
 8004366:	bf00      	nop
 8004368:	3710      	adds	r7, #16
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	40010000 	.word	0x40010000
 8004374:	40023800 	.word	0x40023800

08004378 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b08c      	sub	sp, #48	; 0x30
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004380:	f107 031c 	add.w	r3, r7, #28
 8004384:	2200      	movs	r2, #0
 8004386:	601a      	str	r2, [r3, #0]
 8004388:	605a      	str	r2, [r3, #4]
 800438a:	609a      	str	r2, [r3, #8]
 800438c:	60da      	str	r2, [r3, #12]
 800438e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a3a      	ldr	r2, [pc, #232]	; (8004480 <HAL_UART_MspInit+0x108>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d135      	bne.n	8004406 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800439a:	2300      	movs	r3, #0
 800439c:	61bb      	str	r3, [r7, #24]
 800439e:	4b39      	ldr	r3, [pc, #228]	; (8004484 <HAL_UART_MspInit+0x10c>)
 80043a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a2:	4a38      	ldr	r2, [pc, #224]	; (8004484 <HAL_UART_MspInit+0x10c>)
 80043a4:	f043 0310 	orr.w	r3, r3, #16
 80043a8:	6453      	str	r3, [r2, #68]	; 0x44
 80043aa:	4b36      	ldr	r3, [pc, #216]	; (8004484 <HAL_UART_MspInit+0x10c>)
 80043ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ae:	f003 0310 	and.w	r3, r3, #16
 80043b2:	61bb      	str	r3, [r7, #24]
 80043b4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043b6:	2300      	movs	r3, #0
 80043b8:	617b      	str	r3, [r7, #20]
 80043ba:	4b32      	ldr	r3, [pc, #200]	; (8004484 <HAL_UART_MspInit+0x10c>)
 80043bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043be:	4a31      	ldr	r2, [pc, #196]	; (8004484 <HAL_UART_MspInit+0x10c>)
 80043c0:	f043 0301 	orr.w	r3, r3, #1
 80043c4:	6313      	str	r3, [r2, #48]	; 0x30
 80043c6:	4b2f      	ldr	r3, [pc, #188]	; (8004484 <HAL_UART_MspInit+0x10c>)
 80043c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ca:	f003 0301 	and.w	r3, r3, #1
 80043ce:	617b      	str	r3, [r7, #20]
 80043d0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80043d2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80043d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043d8:	2302      	movs	r3, #2
 80043da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043dc:	2300      	movs	r3, #0
 80043de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043e0:	2303      	movs	r3, #3
 80043e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80043e4:	2307      	movs	r3, #7
 80043e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043e8:	f107 031c 	add.w	r3, r7, #28
 80043ec:	4619      	mov	r1, r3
 80043ee:	4826      	ldr	r0, [pc, #152]	; (8004488 <HAL_UART_MspInit+0x110>)
 80043f0:	f000 fb36 	bl	8004a60 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80043f4:	2200      	movs	r2, #0
 80043f6:	2105      	movs	r1, #5
 80043f8:	2025      	movs	r0, #37	; 0x25
 80043fa:	f000 fa75 	bl	80048e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80043fe:	2025      	movs	r0, #37	; 0x25
 8004400:	f000 fa8e 	bl	8004920 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004404:	e038      	b.n	8004478 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a20      	ldr	r2, [pc, #128]	; (800448c <HAL_UART_MspInit+0x114>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d133      	bne.n	8004478 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004410:	2300      	movs	r3, #0
 8004412:	613b      	str	r3, [r7, #16]
 8004414:	4b1b      	ldr	r3, [pc, #108]	; (8004484 <HAL_UART_MspInit+0x10c>)
 8004416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004418:	4a1a      	ldr	r2, [pc, #104]	; (8004484 <HAL_UART_MspInit+0x10c>)
 800441a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800441e:	6413      	str	r3, [r2, #64]	; 0x40
 8004420:	4b18      	ldr	r3, [pc, #96]	; (8004484 <HAL_UART_MspInit+0x10c>)
 8004422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004428:	613b      	str	r3, [r7, #16]
 800442a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800442c:	2300      	movs	r3, #0
 800442e:	60fb      	str	r3, [r7, #12]
 8004430:	4b14      	ldr	r3, [pc, #80]	; (8004484 <HAL_UART_MspInit+0x10c>)
 8004432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004434:	4a13      	ldr	r2, [pc, #76]	; (8004484 <HAL_UART_MspInit+0x10c>)
 8004436:	f043 0301 	orr.w	r3, r3, #1
 800443a:	6313      	str	r3, [r2, #48]	; 0x30
 800443c:	4b11      	ldr	r3, [pc, #68]	; (8004484 <HAL_UART_MspInit+0x10c>)
 800443e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004440:	f003 0301 	and.w	r3, r3, #1
 8004444:	60fb      	str	r3, [r7, #12]
 8004446:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004448:	230c      	movs	r3, #12
 800444a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800444c:	2302      	movs	r3, #2
 800444e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004450:	2300      	movs	r3, #0
 8004452:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004454:	2300      	movs	r3, #0
 8004456:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004458:	2307      	movs	r3, #7
 800445a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800445c:	f107 031c 	add.w	r3, r7, #28
 8004460:	4619      	mov	r1, r3
 8004462:	4809      	ldr	r0, [pc, #36]	; (8004488 <HAL_UART_MspInit+0x110>)
 8004464:	f000 fafc 	bl	8004a60 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8004468:	2200      	movs	r2, #0
 800446a:	2105      	movs	r1, #5
 800446c:	2026      	movs	r0, #38	; 0x26
 800446e:	f000 fa3b 	bl	80048e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004472:	2026      	movs	r0, #38	; 0x26
 8004474:	f000 fa54 	bl	8004920 <HAL_NVIC_EnableIRQ>
}
 8004478:	bf00      	nop
 800447a:	3730      	adds	r7, #48	; 0x30
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	40011000 	.word	0x40011000
 8004484:	40023800 	.word	0x40023800
 8004488:	40020000 	.word	0x40020000
 800448c:	40004400 	.word	0x40004400

08004490 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b08c      	sub	sp, #48	; 0x30
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8004498:	2300      	movs	r3, #0
 800449a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800449c:	2300      	movs	r3, #0
 800449e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 80044a0:	2300      	movs	r3, #0
 80044a2:	60bb      	str	r3, [r7, #8]
 80044a4:	4b2e      	ldr	r3, [pc, #184]	; (8004560 <HAL_InitTick+0xd0>)
 80044a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a8:	4a2d      	ldr	r2, [pc, #180]	; (8004560 <HAL_InitTick+0xd0>)
 80044aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044ae:	6453      	str	r3, [r2, #68]	; 0x44
 80044b0:	4b2b      	ldr	r3, [pc, #172]	; (8004560 <HAL_InitTick+0xd0>)
 80044b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044b8:	60bb      	str	r3, [r7, #8]
 80044ba:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80044bc:	f107 020c 	add.w	r2, r7, #12
 80044c0:	f107 0310 	add.w	r3, r7, #16
 80044c4:	4611      	mov	r1, r2
 80044c6:	4618      	mov	r0, r3
 80044c8:	f001 f900 	bl	80056cc <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80044cc:	f001 f8ea 	bl	80056a4 <HAL_RCC_GetPCLK2Freq>
 80044d0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80044d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d4:	4a23      	ldr	r2, [pc, #140]	; (8004564 <HAL_InitTick+0xd4>)
 80044d6:	fba2 2303 	umull	r2, r3, r2, r3
 80044da:	0c9b      	lsrs	r3, r3, #18
 80044dc:	3b01      	subs	r3, #1
 80044de:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 80044e0:	4b21      	ldr	r3, [pc, #132]	; (8004568 <HAL_InitTick+0xd8>)
 80044e2:	4a22      	ldr	r2, [pc, #136]	; (800456c <HAL_InitTick+0xdc>)
 80044e4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 80044e6:	4b20      	ldr	r3, [pc, #128]	; (8004568 <HAL_InitTick+0xd8>)
 80044e8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80044ec:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 80044ee:	4a1e      	ldr	r2, [pc, #120]	; (8004568 <HAL_InitTick+0xd8>)
 80044f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f2:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 80044f4:	4b1c      	ldr	r3, [pc, #112]	; (8004568 <HAL_InitTick+0xd8>)
 80044f6:	2200      	movs	r2, #0
 80044f8:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044fa:	4b1b      	ldr	r3, [pc, #108]	; (8004568 <HAL_InitTick+0xd8>)
 80044fc:	2200      	movs	r2, #0
 80044fe:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004500:	4b19      	ldr	r3, [pc, #100]	; (8004568 <HAL_InitTick+0xd8>)
 8004502:	2200      	movs	r2, #0
 8004504:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8004506:	4818      	ldr	r0, [pc, #96]	; (8004568 <HAL_InitTick+0xd8>)
 8004508:	f001 fe14 	bl	8006134 <HAL_TIM_Base_Init>
 800450c:	4603      	mov	r3, r0
 800450e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8004512:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004516:	2b00      	cmp	r3, #0
 8004518:	d11b      	bne.n	8004552 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 800451a:	4813      	ldr	r0, [pc, #76]	; (8004568 <HAL_InitTick+0xd8>)
 800451c:	f001 fe5a 	bl	80061d4 <HAL_TIM_Base_Start_IT>
 8004520:	4603      	mov	r3, r0
 8004522:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8004526:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800452a:	2b00      	cmp	r3, #0
 800452c:	d111      	bne.n	8004552 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800452e:	2019      	movs	r0, #25
 8004530:	f000 f9f6 	bl	8004920 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2b0f      	cmp	r3, #15
 8004538:	d808      	bhi.n	800454c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800453a:	2200      	movs	r2, #0
 800453c:	6879      	ldr	r1, [r7, #4]
 800453e:	2019      	movs	r0, #25
 8004540:	f000 f9d2 	bl	80048e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004544:	4a0a      	ldr	r2, [pc, #40]	; (8004570 <HAL_InitTick+0xe0>)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6013      	str	r3, [r2, #0]
 800454a:	e002      	b.n	8004552 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8004552:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004556:	4618      	mov	r0, r3
 8004558:	3730      	adds	r7, #48	; 0x30
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	40023800 	.word	0x40023800
 8004564:	431bde83 	.word	0x431bde83
 8004568:	20001bb8 	.word	0x20001bb8
 800456c:	40014400 	.word	0x40014400
 8004570:	20000054 	.word	0x20000054

08004574 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004574:	b480      	push	{r7}
 8004576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004578:	e7fe      	b.n	8004578 <NMI_Handler+0x4>

0800457a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800457a:	b480      	push	{r7}
 800457c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800457e:	e7fe      	b.n	800457e <HardFault_Handler+0x4>

08004580 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004580:	b480      	push	{r7}
 8004582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004584:	e7fe      	b.n	8004584 <MemManage_Handler+0x4>

08004586 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004586:	b480      	push	{r7}
 8004588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800458a:	e7fe      	b.n	800458a <BusFault_Handler+0x4>

0800458c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800458c:	b480      	push	{r7}
 800458e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004590:	e7fe      	b.n	8004590 <UsageFault_Handler+0x4>

08004592 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004592:	b480      	push	{r7}
 8004594:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004596:	bf00      	nop
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 22.
  */
void RTC_WKUP_IRQHandler(void)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80045a4:	4802      	ldr	r0, [pc, #8]	; (80045b0 <RTC_WKUP_IRQHandler+0x10>)
 80045a6:	f001 fd6f 	bl	8006088 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */
  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);	// SK ADD
  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80045aa:	bf00      	nop
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	20001a68 	.word	0x20001a68

080045b4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80045b8:	4803      	ldr	r0, [pc, #12]	; (80045c8 <TIM1_UP_TIM10_IRQHandler+0x14>)
 80045ba:	f001 fe6d 	bl	8006298 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80045be:	4803      	ldr	r0, [pc, #12]	; (80045cc <TIM1_UP_TIM10_IRQHandler+0x18>)
 80045c0:	f001 fe6a 	bl	8006298 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
//  usr_isr_tim1_up();	// SK ADD
  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);	// SK ADD
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80045c4:	bf00      	nop
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	20001a88 	.word	0x20001a88
 80045cc:	20001bb8 	.word	0x20001bb8

080045d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80045d4:	4803      	ldr	r0, [pc, #12]	; (80045e4 <TIM2_IRQHandler+0x14>)
 80045d6:	f001 fe5f 	bl	8006298 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  usr_isr_tim1_up();	// SK ADD
 80045da:	f7fd f9c5 	bl	8001968 <usr_isr_tim1_up>

  /* USER CODE END TIM2_IRQn 1 */
}
 80045de:	bf00      	nop
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	20001ad0 	.word	0x20001ad0

080045e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80045ec:	4802      	ldr	r0, [pc, #8]	; (80045f8 <USART1_IRQHandler+0x10>)
 80045ee:	f002 faf7 	bl	8006be0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80045f2:	bf00      	nop
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	20001b18 	.word	0x20001b18

080045fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004600:	4802      	ldr	r0, [pc, #8]	; (800460c <USART2_IRQHandler+0x10>)
 8004602:	f002 faed 	bl	8006be0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004606:	bf00      	nop
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	20001b5c 	.word	0x20001b5c

08004610 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b086      	sub	sp, #24
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004618:	4a14      	ldr	r2, [pc, #80]	; (800466c <_sbrk+0x5c>)
 800461a:	4b15      	ldr	r3, [pc, #84]	; (8004670 <_sbrk+0x60>)
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004624:	4b13      	ldr	r3, [pc, #76]	; (8004674 <_sbrk+0x64>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d102      	bne.n	8004632 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800462c:	4b11      	ldr	r3, [pc, #68]	; (8004674 <_sbrk+0x64>)
 800462e:	4a12      	ldr	r2, [pc, #72]	; (8004678 <_sbrk+0x68>)
 8004630:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004632:	4b10      	ldr	r3, [pc, #64]	; (8004674 <_sbrk+0x64>)
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4413      	add	r3, r2
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	429a      	cmp	r2, r3
 800463e:	d207      	bcs.n	8004650 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004640:	f006 f9b4 	bl	800a9ac <__errno>
 8004644:	4603      	mov	r3, r0
 8004646:	220c      	movs	r2, #12
 8004648:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800464a:	f04f 33ff 	mov.w	r3, #4294967295
 800464e:	e009      	b.n	8004664 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004650:	4b08      	ldr	r3, [pc, #32]	; (8004674 <_sbrk+0x64>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004656:	4b07      	ldr	r3, [pc, #28]	; (8004674 <_sbrk+0x64>)
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4413      	add	r3, r2
 800465e:	4a05      	ldr	r2, [pc, #20]	; (8004674 <_sbrk+0x64>)
 8004660:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004662:	68fb      	ldr	r3, [r7, #12]
}
 8004664:	4618      	mov	r0, r3
 8004666:	3718      	adds	r7, #24
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}
 800466c:	20018000 	.word	0x20018000
 8004670:	00000400 	.word	0x00000400
 8004674:	20001c00 	.word	0x20001c00
 8004678:	20006568 	.word	0x20006568

0800467c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800467c:	b480      	push	{r7}
 800467e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004680:	4b06      	ldr	r3, [pc, #24]	; (800469c <SystemInit+0x20>)
 8004682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004686:	4a05      	ldr	r2, [pc, #20]	; (800469c <SystemInit+0x20>)
 8004688:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800468c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004690:	bf00      	nop
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	e000ed00 	.word	0xe000ed00

080046a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80046a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80046d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80046a4:	480d      	ldr	r0, [pc, #52]	; (80046dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80046a6:	490e      	ldr	r1, [pc, #56]	; (80046e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80046a8:	4a0e      	ldr	r2, [pc, #56]	; (80046e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80046aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80046ac:	e002      	b.n	80046b4 <LoopCopyDataInit>

080046ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80046ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80046b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80046b2:	3304      	adds	r3, #4

080046b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80046b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80046b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80046b8:	d3f9      	bcc.n	80046ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80046ba:	4a0b      	ldr	r2, [pc, #44]	; (80046e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80046bc:	4c0b      	ldr	r4, [pc, #44]	; (80046ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80046be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80046c0:	e001      	b.n	80046c6 <LoopFillZerobss>

080046c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80046c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80046c4:	3204      	adds	r2, #4

080046c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80046c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80046c8:	d3fb      	bcc.n	80046c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80046ca:	f7ff ffd7 	bl	800467c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80046ce:	f006 f973 	bl	800a9b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80046d2:	f7ff fa6d 	bl	8003bb0 <main>
  bx  lr    
 80046d6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80046d8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80046dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80046e0:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 80046e4:	0800cd84 	.word	0x0800cd84
  ldr r2, =_sbss
 80046e8:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 80046ec:	20006568 	.word	0x20006568

080046f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80046f0:	e7fe      	b.n	80046f0 <ADC_IRQHandler>
	...

080046f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80046f8:	4b0e      	ldr	r3, [pc, #56]	; (8004734 <HAL_Init+0x40>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a0d      	ldr	r2, [pc, #52]	; (8004734 <HAL_Init+0x40>)
 80046fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004702:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004704:	4b0b      	ldr	r3, [pc, #44]	; (8004734 <HAL_Init+0x40>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a0a      	ldr	r2, [pc, #40]	; (8004734 <HAL_Init+0x40>)
 800470a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800470e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004710:	4b08      	ldr	r3, [pc, #32]	; (8004734 <HAL_Init+0x40>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a07      	ldr	r2, [pc, #28]	; (8004734 <HAL_Init+0x40>)
 8004716:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800471a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800471c:	2003      	movs	r0, #3
 800471e:	f000 f8d8 	bl	80048d2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004722:	200f      	movs	r0, #15
 8004724:	f7ff feb4 	bl	8004490 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004728:	f7ff fd82 	bl	8004230 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	40023c00 	.word	0x40023c00

08004738 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004738:	b480      	push	{r7}
 800473a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800473c:	4b06      	ldr	r3, [pc, #24]	; (8004758 <HAL_IncTick+0x20>)
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	461a      	mov	r2, r3
 8004742:	4b06      	ldr	r3, [pc, #24]	; (800475c <HAL_IncTick+0x24>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4413      	add	r3, r2
 8004748:	4a04      	ldr	r2, [pc, #16]	; (800475c <HAL_IncTick+0x24>)
 800474a:	6013      	str	r3, [r2, #0]
}
 800474c:	bf00      	nop
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop
 8004758:	20000058 	.word	0x20000058
 800475c:	20001c04 	.word	0x20001c04

08004760 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004760:	b480      	push	{r7}
 8004762:	af00      	add	r7, sp, #0
  return uwTick;
 8004764:	4b03      	ldr	r3, [pc, #12]	; (8004774 <HAL_GetTick+0x14>)
 8004766:	681b      	ldr	r3, [r3, #0]
}
 8004768:	4618      	mov	r0, r3
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	20001c04 	.word	0x20001c04

08004778 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004778:	b480      	push	{r7}
 800477a:	b085      	sub	sp, #20
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f003 0307 	and.w	r3, r3, #7
 8004786:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004788:	4b0c      	ldr	r3, [pc, #48]	; (80047bc <__NVIC_SetPriorityGrouping+0x44>)
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800478e:	68ba      	ldr	r2, [r7, #8]
 8004790:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004794:	4013      	ands	r3, r2
 8004796:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80047a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80047a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80047aa:	4a04      	ldr	r2, [pc, #16]	; (80047bc <__NVIC_SetPriorityGrouping+0x44>)
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	60d3      	str	r3, [r2, #12]
}
 80047b0:	bf00      	nop
 80047b2:	3714      	adds	r7, #20
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr
 80047bc:	e000ed00 	.word	0xe000ed00

080047c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80047c0:	b480      	push	{r7}
 80047c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047c4:	4b04      	ldr	r3, [pc, #16]	; (80047d8 <__NVIC_GetPriorityGrouping+0x18>)
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	0a1b      	lsrs	r3, r3, #8
 80047ca:	f003 0307 	and.w	r3, r3, #7
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr
 80047d8:	e000ed00 	.word	0xe000ed00

080047dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	4603      	mov	r3, r0
 80047e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	db0b      	blt.n	8004806 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047ee:	79fb      	ldrb	r3, [r7, #7]
 80047f0:	f003 021f 	and.w	r2, r3, #31
 80047f4:	4907      	ldr	r1, [pc, #28]	; (8004814 <__NVIC_EnableIRQ+0x38>)
 80047f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047fa:	095b      	lsrs	r3, r3, #5
 80047fc:	2001      	movs	r0, #1
 80047fe:	fa00 f202 	lsl.w	r2, r0, r2
 8004802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004806:	bf00      	nop
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	e000e100 	.word	0xe000e100

08004818 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	4603      	mov	r3, r0
 8004820:	6039      	str	r1, [r7, #0]
 8004822:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004828:	2b00      	cmp	r3, #0
 800482a:	db0a      	blt.n	8004842 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	b2da      	uxtb	r2, r3
 8004830:	490c      	ldr	r1, [pc, #48]	; (8004864 <__NVIC_SetPriority+0x4c>)
 8004832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004836:	0112      	lsls	r2, r2, #4
 8004838:	b2d2      	uxtb	r2, r2
 800483a:	440b      	add	r3, r1
 800483c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004840:	e00a      	b.n	8004858 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	b2da      	uxtb	r2, r3
 8004846:	4908      	ldr	r1, [pc, #32]	; (8004868 <__NVIC_SetPriority+0x50>)
 8004848:	79fb      	ldrb	r3, [r7, #7]
 800484a:	f003 030f 	and.w	r3, r3, #15
 800484e:	3b04      	subs	r3, #4
 8004850:	0112      	lsls	r2, r2, #4
 8004852:	b2d2      	uxtb	r2, r2
 8004854:	440b      	add	r3, r1
 8004856:	761a      	strb	r2, [r3, #24]
}
 8004858:	bf00      	nop
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr
 8004864:	e000e100 	.word	0xe000e100
 8004868:	e000ed00 	.word	0xe000ed00

0800486c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800486c:	b480      	push	{r7}
 800486e:	b089      	sub	sp, #36	; 0x24
 8004870:	af00      	add	r7, sp, #0
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	60b9      	str	r1, [r7, #8]
 8004876:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f003 0307 	and.w	r3, r3, #7
 800487e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	f1c3 0307 	rsb	r3, r3, #7
 8004886:	2b04      	cmp	r3, #4
 8004888:	bf28      	it	cs
 800488a:	2304      	movcs	r3, #4
 800488c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	3304      	adds	r3, #4
 8004892:	2b06      	cmp	r3, #6
 8004894:	d902      	bls.n	800489c <NVIC_EncodePriority+0x30>
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	3b03      	subs	r3, #3
 800489a:	e000      	b.n	800489e <NVIC_EncodePriority+0x32>
 800489c:	2300      	movs	r3, #0
 800489e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048a0:	f04f 32ff 	mov.w	r2, #4294967295
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	fa02 f303 	lsl.w	r3, r2, r3
 80048aa:	43da      	mvns	r2, r3
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	401a      	ands	r2, r3
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048b4:	f04f 31ff 	mov.w	r1, #4294967295
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	fa01 f303 	lsl.w	r3, r1, r3
 80048be:	43d9      	mvns	r1, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048c4:	4313      	orrs	r3, r2
         );
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3724      	adds	r7, #36	; 0x24
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr

080048d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048d2:	b580      	push	{r7, lr}
 80048d4:	b082      	sub	sp, #8
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f7ff ff4c 	bl	8004778 <__NVIC_SetPriorityGrouping>
}
 80048e0:	bf00      	nop
 80048e2:	3708      	adds	r7, #8
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b086      	sub	sp, #24
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	4603      	mov	r3, r0
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	607a      	str	r2, [r7, #4]
 80048f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80048f6:	2300      	movs	r3, #0
 80048f8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80048fa:	f7ff ff61 	bl	80047c0 <__NVIC_GetPriorityGrouping>
 80048fe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	68b9      	ldr	r1, [r7, #8]
 8004904:	6978      	ldr	r0, [r7, #20]
 8004906:	f7ff ffb1 	bl	800486c <NVIC_EncodePriority>
 800490a:	4602      	mov	r2, r0
 800490c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004910:	4611      	mov	r1, r2
 8004912:	4618      	mov	r0, r3
 8004914:	f7ff ff80 	bl	8004818 <__NVIC_SetPriority>
}
 8004918:	bf00      	nop
 800491a:	3718      	adds	r7, #24
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
 8004926:	4603      	mov	r3, r0
 8004928:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800492a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800492e:	4618      	mov	r0, r3
 8004930:	f7ff ff54 	bl	80047dc <__NVIC_EnableIRQ>
}
 8004934:	bf00      	nop
 8004936:	3708      	adds	r7, #8
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}

0800493c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004948:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800494a:	f7ff ff09 	bl	8004760 <HAL_GetTick>
 800494e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004956:	b2db      	uxtb	r3, r3
 8004958:	2b02      	cmp	r3, #2
 800495a:	d008      	beq.n	800496e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2280      	movs	r2, #128	; 0x80
 8004960:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e052      	b.n	8004a14 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f022 0216 	bic.w	r2, r2, #22
 800497c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	695a      	ldr	r2, [r3, #20]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800498c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004992:	2b00      	cmp	r3, #0
 8004994:	d103      	bne.n	800499e <HAL_DMA_Abort+0x62>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800499a:	2b00      	cmp	r3, #0
 800499c:	d007      	beq.n	80049ae <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f022 0208 	bic.w	r2, r2, #8
 80049ac:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f022 0201 	bic.w	r2, r2, #1
 80049bc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049be:	e013      	b.n	80049e8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80049c0:	f7ff fece 	bl	8004760 <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	2b05      	cmp	r3, #5
 80049cc:	d90c      	bls.n	80049e8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2220      	movs	r2, #32
 80049d2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2203      	movs	r2, #3
 80049d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	e015      	b.n	8004a14 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0301 	and.w	r3, r3, #1
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d1e4      	bne.n	80049c0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049fa:	223f      	movs	r2, #63	; 0x3f
 80049fc:	409a      	lsls	r2, r3
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2201      	movs	r2, #1
 8004a06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3710      	adds	r7, #16
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d004      	beq.n	8004a3a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2280      	movs	r2, #128	; 0x80
 8004a34:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e00c      	b.n	8004a54 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2205      	movs	r2, #5
 8004a3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f022 0201 	bic.w	r2, r2, #1
 8004a50:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b089      	sub	sp, #36	; 0x24
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004a72:	2300      	movs	r3, #0
 8004a74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a76:	2300      	movs	r3, #0
 8004a78:	61fb      	str	r3, [r7, #28]
 8004a7a:	e159      	b.n	8004d30 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	fa02 f303 	lsl.w	r3, r2, r3
 8004a84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	697a      	ldr	r2, [r7, #20]
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004a90:	693a      	ldr	r2, [r7, #16]
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	f040 8148 	bne.w	8004d2a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f003 0303 	and.w	r3, r3, #3
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d005      	beq.n	8004ab2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d130      	bne.n	8004b14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	005b      	lsls	r3, r3, #1
 8004abc:	2203      	movs	r2, #3
 8004abe:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac2:	43db      	mvns	r3, r3
 8004ac4:	69ba      	ldr	r2, [r7, #24]
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	68da      	ldr	r2, [r3, #12]
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	005b      	lsls	r3, r3, #1
 8004ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad6:	69ba      	ldr	r2, [r7, #24]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	69ba      	ldr	r2, [r7, #24]
 8004ae0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ae8:	2201      	movs	r2, #1
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	fa02 f303 	lsl.w	r3, r2, r3
 8004af0:	43db      	mvns	r3, r3
 8004af2:	69ba      	ldr	r2, [r7, #24]
 8004af4:	4013      	ands	r3, r2
 8004af6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	091b      	lsrs	r3, r3, #4
 8004afe:	f003 0201 	and.w	r2, r3, #1
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	fa02 f303 	lsl.w	r3, r2, r3
 8004b08:	69ba      	ldr	r2, [r7, #24]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	69ba      	ldr	r2, [r7, #24]
 8004b12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	f003 0303 	and.w	r3, r3, #3
 8004b1c:	2b03      	cmp	r3, #3
 8004b1e:	d017      	beq.n	8004b50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	005b      	lsls	r3, r3, #1
 8004b2a:	2203      	movs	r2, #3
 8004b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b30:	43db      	mvns	r3, r3
 8004b32:	69ba      	ldr	r2, [r7, #24]
 8004b34:	4013      	ands	r3, r2
 8004b36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	689a      	ldr	r2, [r3, #8]
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	005b      	lsls	r3, r3, #1
 8004b40:	fa02 f303 	lsl.w	r3, r2, r3
 8004b44:	69ba      	ldr	r2, [r7, #24]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	69ba      	ldr	r2, [r7, #24]
 8004b4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	f003 0303 	and.w	r3, r3, #3
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d123      	bne.n	8004ba4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	08da      	lsrs	r2, r3, #3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	3208      	adds	r2, #8
 8004b64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	f003 0307 	and.w	r3, r3, #7
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	220f      	movs	r2, #15
 8004b74:	fa02 f303 	lsl.w	r3, r2, r3
 8004b78:	43db      	mvns	r3, r3
 8004b7a:	69ba      	ldr	r2, [r7, #24]
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	691a      	ldr	r2, [r3, #16]
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	f003 0307 	and.w	r3, r3, #7
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b90:	69ba      	ldr	r2, [r7, #24]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	08da      	lsrs	r2, r3, #3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	3208      	adds	r2, #8
 8004b9e:	69b9      	ldr	r1, [r7, #24]
 8004ba0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	005b      	lsls	r3, r3, #1
 8004bae:	2203      	movs	r2, #3
 8004bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb4:	43db      	mvns	r3, r3
 8004bb6:	69ba      	ldr	r2, [r7, #24]
 8004bb8:	4013      	ands	r3, r2
 8004bba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f003 0203 	and.w	r2, r3, #3
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	005b      	lsls	r3, r3, #1
 8004bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bcc:	69ba      	ldr	r2, [r7, #24]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	69ba      	ldr	r2, [r7, #24]
 8004bd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	f000 80a2 	beq.w	8004d2a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004be6:	2300      	movs	r3, #0
 8004be8:	60fb      	str	r3, [r7, #12]
 8004bea:	4b57      	ldr	r3, [pc, #348]	; (8004d48 <HAL_GPIO_Init+0x2e8>)
 8004bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bee:	4a56      	ldr	r2, [pc, #344]	; (8004d48 <HAL_GPIO_Init+0x2e8>)
 8004bf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004bf4:	6453      	str	r3, [r2, #68]	; 0x44
 8004bf6:	4b54      	ldr	r3, [pc, #336]	; (8004d48 <HAL_GPIO_Init+0x2e8>)
 8004bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bfe:	60fb      	str	r3, [r7, #12]
 8004c00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c02:	4a52      	ldr	r2, [pc, #328]	; (8004d4c <HAL_GPIO_Init+0x2ec>)
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	089b      	lsrs	r3, r3, #2
 8004c08:	3302      	adds	r3, #2
 8004c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	f003 0303 	and.w	r3, r3, #3
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	220f      	movs	r2, #15
 8004c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c1e:	43db      	mvns	r3, r3
 8004c20:	69ba      	ldr	r2, [r7, #24]
 8004c22:	4013      	ands	r3, r2
 8004c24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a49      	ldr	r2, [pc, #292]	; (8004d50 <HAL_GPIO_Init+0x2f0>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d019      	beq.n	8004c62 <HAL_GPIO_Init+0x202>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a48      	ldr	r2, [pc, #288]	; (8004d54 <HAL_GPIO_Init+0x2f4>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d013      	beq.n	8004c5e <HAL_GPIO_Init+0x1fe>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a47      	ldr	r2, [pc, #284]	; (8004d58 <HAL_GPIO_Init+0x2f8>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d00d      	beq.n	8004c5a <HAL_GPIO_Init+0x1fa>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a46      	ldr	r2, [pc, #280]	; (8004d5c <HAL_GPIO_Init+0x2fc>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d007      	beq.n	8004c56 <HAL_GPIO_Init+0x1f6>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a45      	ldr	r2, [pc, #276]	; (8004d60 <HAL_GPIO_Init+0x300>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d101      	bne.n	8004c52 <HAL_GPIO_Init+0x1f2>
 8004c4e:	2304      	movs	r3, #4
 8004c50:	e008      	b.n	8004c64 <HAL_GPIO_Init+0x204>
 8004c52:	2307      	movs	r3, #7
 8004c54:	e006      	b.n	8004c64 <HAL_GPIO_Init+0x204>
 8004c56:	2303      	movs	r3, #3
 8004c58:	e004      	b.n	8004c64 <HAL_GPIO_Init+0x204>
 8004c5a:	2302      	movs	r3, #2
 8004c5c:	e002      	b.n	8004c64 <HAL_GPIO_Init+0x204>
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e000      	b.n	8004c64 <HAL_GPIO_Init+0x204>
 8004c62:	2300      	movs	r3, #0
 8004c64:	69fa      	ldr	r2, [r7, #28]
 8004c66:	f002 0203 	and.w	r2, r2, #3
 8004c6a:	0092      	lsls	r2, r2, #2
 8004c6c:	4093      	lsls	r3, r2
 8004c6e:	69ba      	ldr	r2, [r7, #24]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c74:	4935      	ldr	r1, [pc, #212]	; (8004d4c <HAL_GPIO_Init+0x2ec>)
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	089b      	lsrs	r3, r3, #2
 8004c7a:	3302      	adds	r3, #2
 8004c7c:	69ba      	ldr	r2, [r7, #24]
 8004c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c82:	4b38      	ldr	r3, [pc, #224]	; (8004d64 <HAL_GPIO_Init+0x304>)
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	43db      	mvns	r3, r3
 8004c8c:	69ba      	ldr	r2, [r7, #24]
 8004c8e:	4013      	ands	r3, r2
 8004c90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d003      	beq.n	8004ca6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004c9e:	69ba      	ldr	r2, [r7, #24]
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004ca6:	4a2f      	ldr	r2, [pc, #188]	; (8004d64 <HAL_GPIO_Init+0x304>)
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004cac:	4b2d      	ldr	r3, [pc, #180]	; (8004d64 <HAL_GPIO_Init+0x304>)
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	43db      	mvns	r3, r3
 8004cb6:	69ba      	ldr	r2, [r7, #24]
 8004cb8:	4013      	ands	r3, r2
 8004cba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d003      	beq.n	8004cd0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004cc8:	69ba      	ldr	r2, [r7, #24]
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004cd0:	4a24      	ldr	r2, [pc, #144]	; (8004d64 <HAL_GPIO_Init+0x304>)
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004cd6:	4b23      	ldr	r3, [pc, #140]	; (8004d64 <HAL_GPIO_Init+0x304>)
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	43db      	mvns	r3, r3
 8004ce0:	69ba      	ldr	r2, [r7, #24]
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d003      	beq.n	8004cfa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004cf2:	69ba      	ldr	r2, [r7, #24]
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004cfa:	4a1a      	ldr	r2, [pc, #104]	; (8004d64 <HAL_GPIO_Init+0x304>)
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d00:	4b18      	ldr	r3, [pc, #96]	; (8004d64 <HAL_GPIO_Init+0x304>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	43db      	mvns	r3, r3
 8004d0a:	69ba      	ldr	r2, [r7, #24]
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d003      	beq.n	8004d24 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004d1c:	69ba      	ldr	r2, [r7, #24]
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004d24:	4a0f      	ldr	r2, [pc, #60]	; (8004d64 <HAL_GPIO_Init+0x304>)
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	61fb      	str	r3, [r7, #28]
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	2b0f      	cmp	r3, #15
 8004d34:	f67f aea2 	bls.w	8004a7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004d38:	bf00      	nop
 8004d3a:	bf00      	nop
 8004d3c:	3724      	adds	r7, #36	; 0x24
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr
 8004d46:	bf00      	nop
 8004d48:	40023800 	.word	0x40023800
 8004d4c:	40013800 	.word	0x40013800
 8004d50:	40020000 	.word	0x40020000
 8004d54:	40020400 	.word	0x40020400
 8004d58:	40020800 	.word	0x40020800
 8004d5c:	40020c00 	.word	0x40020c00
 8004d60:	40021000 	.word	0x40021000
 8004d64:	40013c00 	.word	0x40013c00

08004d68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	460b      	mov	r3, r1
 8004d72:	807b      	strh	r3, [r7, #2]
 8004d74:	4613      	mov	r3, r2
 8004d76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004d78:	787b      	ldrb	r3, [r7, #1]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d003      	beq.n	8004d86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d7e:	887a      	ldrh	r2, [r7, #2]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004d84:	e003      	b.n	8004d8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004d86:	887b      	ldrh	r3, [r7, #2]
 8004d88:	041a      	lsls	r2, r3, #16
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	619a      	str	r2, [r3, #24]
}
 8004d8e:	bf00      	nop
 8004d90:	370c      	adds	r7, #12
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr
	...

08004d9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b086      	sub	sp, #24
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d101      	bne.n	8004dae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e267      	b.n	800527e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 0301 	and.w	r3, r3, #1
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d075      	beq.n	8004ea6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004dba:	4b88      	ldr	r3, [pc, #544]	; (8004fdc <HAL_RCC_OscConfig+0x240>)
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	f003 030c 	and.w	r3, r3, #12
 8004dc2:	2b04      	cmp	r3, #4
 8004dc4:	d00c      	beq.n	8004de0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004dc6:	4b85      	ldr	r3, [pc, #532]	; (8004fdc <HAL_RCC_OscConfig+0x240>)
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004dce:	2b08      	cmp	r3, #8
 8004dd0:	d112      	bne.n	8004df8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004dd2:	4b82      	ldr	r3, [pc, #520]	; (8004fdc <HAL_RCC_OscConfig+0x240>)
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dde:	d10b      	bne.n	8004df8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004de0:	4b7e      	ldr	r3, [pc, #504]	; (8004fdc <HAL_RCC_OscConfig+0x240>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d05b      	beq.n	8004ea4 <HAL_RCC_OscConfig+0x108>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d157      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e242      	b.n	800527e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e00:	d106      	bne.n	8004e10 <HAL_RCC_OscConfig+0x74>
 8004e02:	4b76      	ldr	r3, [pc, #472]	; (8004fdc <HAL_RCC_OscConfig+0x240>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a75      	ldr	r2, [pc, #468]	; (8004fdc <HAL_RCC_OscConfig+0x240>)
 8004e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e0c:	6013      	str	r3, [r2, #0]
 8004e0e:	e01d      	b.n	8004e4c <HAL_RCC_OscConfig+0xb0>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e18:	d10c      	bne.n	8004e34 <HAL_RCC_OscConfig+0x98>
 8004e1a:	4b70      	ldr	r3, [pc, #448]	; (8004fdc <HAL_RCC_OscConfig+0x240>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a6f      	ldr	r2, [pc, #444]	; (8004fdc <HAL_RCC_OscConfig+0x240>)
 8004e20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e24:	6013      	str	r3, [r2, #0]
 8004e26:	4b6d      	ldr	r3, [pc, #436]	; (8004fdc <HAL_RCC_OscConfig+0x240>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a6c      	ldr	r2, [pc, #432]	; (8004fdc <HAL_RCC_OscConfig+0x240>)
 8004e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e30:	6013      	str	r3, [r2, #0]
 8004e32:	e00b      	b.n	8004e4c <HAL_RCC_OscConfig+0xb0>
 8004e34:	4b69      	ldr	r3, [pc, #420]	; (8004fdc <HAL_RCC_OscConfig+0x240>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a68      	ldr	r2, [pc, #416]	; (8004fdc <HAL_RCC_OscConfig+0x240>)
 8004e3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e3e:	6013      	str	r3, [r2, #0]
 8004e40:	4b66      	ldr	r3, [pc, #408]	; (8004fdc <HAL_RCC_OscConfig+0x240>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a65      	ldr	r2, [pc, #404]	; (8004fdc <HAL_RCC_OscConfig+0x240>)
 8004e46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d013      	beq.n	8004e7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e54:	f7ff fc84 	bl	8004760 <HAL_GetTick>
 8004e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e5a:	e008      	b.n	8004e6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e5c:	f7ff fc80 	bl	8004760 <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	2b64      	cmp	r3, #100	; 0x64
 8004e68:	d901      	bls.n	8004e6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e207      	b.n	800527e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e6e:	4b5b      	ldr	r3, [pc, #364]	; (8004fdc <HAL_RCC_OscConfig+0x240>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d0f0      	beq.n	8004e5c <HAL_RCC_OscConfig+0xc0>
 8004e7a:	e014      	b.n	8004ea6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e7c:	f7ff fc70 	bl	8004760 <HAL_GetTick>
 8004e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e82:	e008      	b.n	8004e96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e84:	f7ff fc6c 	bl	8004760 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	2b64      	cmp	r3, #100	; 0x64
 8004e90:	d901      	bls.n	8004e96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e1f3      	b.n	800527e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e96:	4b51      	ldr	r3, [pc, #324]	; (8004fdc <HAL_RCC_OscConfig+0x240>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d1f0      	bne.n	8004e84 <HAL_RCC_OscConfig+0xe8>
 8004ea2:	e000      	b.n	8004ea6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ea4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0302 	and.w	r3, r3, #2
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d063      	beq.n	8004f7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004eb2:	4b4a      	ldr	r3, [pc, #296]	; (8004fdc <HAL_RCC_OscConfig+0x240>)
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f003 030c 	and.w	r3, r3, #12
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00b      	beq.n	8004ed6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ebe:	4b47      	ldr	r3, [pc, #284]	; (8004fdc <HAL_RCC_OscConfig+0x240>)
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ec6:	2b08      	cmp	r3, #8
 8004ec8:	d11c      	bne.n	8004f04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004eca:	4b44      	ldr	r3, [pc, #272]	; (8004fdc <HAL_RCC_OscConfig+0x240>)
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d116      	bne.n	8004f04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ed6:	4b41      	ldr	r3, [pc, #260]	; (8004fdc <HAL_RCC_OscConfig+0x240>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0302 	and.w	r3, r3, #2
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d005      	beq.n	8004eee <HAL_RCC_OscConfig+0x152>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d001      	beq.n	8004eee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e1c7      	b.n	800527e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eee:	4b3b      	ldr	r3, [pc, #236]	; (8004fdc <HAL_RCC_OscConfig+0x240>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	00db      	lsls	r3, r3, #3
 8004efc:	4937      	ldr	r1, [pc, #220]	; (8004fdc <HAL_RCC_OscConfig+0x240>)
 8004efe:	4313      	orrs	r3, r2
 8004f00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f02:	e03a      	b.n	8004f7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d020      	beq.n	8004f4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f0c:	4b34      	ldr	r3, [pc, #208]	; (8004fe0 <HAL_RCC_OscConfig+0x244>)
 8004f0e:	2201      	movs	r2, #1
 8004f10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f12:	f7ff fc25 	bl	8004760 <HAL_GetTick>
 8004f16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f18:	e008      	b.n	8004f2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f1a:	f7ff fc21 	bl	8004760 <HAL_GetTick>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	d901      	bls.n	8004f2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e1a8      	b.n	800527e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f2c:	4b2b      	ldr	r3, [pc, #172]	; (8004fdc <HAL_RCC_OscConfig+0x240>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0302 	and.w	r3, r3, #2
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d0f0      	beq.n	8004f1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f38:	4b28      	ldr	r3, [pc, #160]	; (8004fdc <HAL_RCC_OscConfig+0x240>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	691b      	ldr	r3, [r3, #16]
 8004f44:	00db      	lsls	r3, r3, #3
 8004f46:	4925      	ldr	r1, [pc, #148]	; (8004fdc <HAL_RCC_OscConfig+0x240>)
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	600b      	str	r3, [r1, #0]
 8004f4c:	e015      	b.n	8004f7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f4e:	4b24      	ldr	r3, [pc, #144]	; (8004fe0 <HAL_RCC_OscConfig+0x244>)
 8004f50:	2200      	movs	r2, #0
 8004f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f54:	f7ff fc04 	bl	8004760 <HAL_GetTick>
 8004f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f5a:	e008      	b.n	8004f6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f5c:	f7ff fc00 	bl	8004760 <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d901      	bls.n	8004f6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e187      	b.n	800527e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f6e:	4b1b      	ldr	r3, [pc, #108]	; (8004fdc <HAL_RCC_OscConfig+0x240>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0302 	and.w	r3, r3, #2
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d1f0      	bne.n	8004f5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0308 	and.w	r3, r3, #8
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d036      	beq.n	8004ff4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d016      	beq.n	8004fbc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f8e:	4b15      	ldr	r3, [pc, #84]	; (8004fe4 <HAL_RCC_OscConfig+0x248>)
 8004f90:	2201      	movs	r2, #1
 8004f92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f94:	f7ff fbe4 	bl	8004760 <HAL_GetTick>
 8004f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f9a:	e008      	b.n	8004fae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f9c:	f7ff fbe0 	bl	8004760 <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	d901      	bls.n	8004fae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e167      	b.n	800527e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fae:	4b0b      	ldr	r3, [pc, #44]	; (8004fdc <HAL_RCC_OscConfig+0x240>)
 8004fb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fb2:	f003 0302 	and.w	r3, r3, #2
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d0f0      	beq.n	8004f9c <HAL_RCC_OscConfig+0x200>
 8004fba:	e01b      	b.n	8004ff4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fbc:	4b09      	ldr	r3, [pc, #36]	; (8004fe4 <HAL_RCC_OscConfig+0x248>)
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fc2:	f7ff fbcd 	bl	8004760 <HAL_GetTick>
 8004fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fc8:	e00e      	b.n	8004fe8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fca:	f7ff fbc9 	bl	8004760 <HAL_GetTick>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d907      	bls.n	8004fe8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	e150      	b.n	800527e <HAL_RCC_OscConfig+0x4e2>
 8004fdc:	40023800 	.word	0x40023800
 8004fe0:	42470000 	.word	0x42470000
 8004fe4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fe8:	4b88      	ldr	r3, [pc, #544]	; (800520c <HAL_RCC_OscConfig+0x470>)
 8004fea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fec:	f003 0302 	and.w	r3, r3, #2
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d1ea      	bne.n	8004fca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 0304 	and.w	r3, r3, #4
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	f000 8097 	beq.w	8005130 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005002:	2300      	movs	r3, #0
 8005004:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005006:	4b81      	ldr	r3, [pc, #516]	; (800520c <HAL_RCC_OscConfig+0x470>)
 8005008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d10f      	bne.n	8005032 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005012:	2300      	movs	r3, #0
 8005014:	60bb      	str	r3, [r7, #8]
 8005016:	4b7d      	ldr	r3, [pc, #500]	; (800520c <HAL_RCC_OscConfig+0x470>)
 8005018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501a:	4a7c      	ldr	r2, [pc, #496]	; (800520c <HAL_RCC_OscConfig+0x470>)
 800501c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005020:	6413      	str	r3, [r2, #64]	; 0x40
 8005022:	4b7a      	ldr	r3, [pc, #488]	; (800520c <HAL_RCC_OscConfig+0x470>)
 8005024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800502a:	60bb      	str	r3, [r7, #8]
 800502c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800502e:	2301      	movs	r3, #1
 8005030:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005032:	4b77      	ldr	r3, [pc, #476]	; (8005210 <HAL_RCC_OscConfig+0x474>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800503a:	2b00      	cmp	r3, #0
 800503c:	d118      	bne.n	8005070 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800503e:	4b74      	ldr	r3, [pc, #464]	; (8005210 <HAL_RCC_OscConfig+0x474>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a73      	ldr	r2, [pc, #460]	; (8005210 <HAL_RCC_OscConfig+0x474>)
 8005044:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005048:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800504a:	f7ff fb89 	bl	8004760 <HAL_GetTick>
 800504e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005050:	e008      	b.n	8005064 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005052:	f7ff fb85 	bl	8004760 <HAL_GetTick>
 8005056:	4602      	mov	r2, r0
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	2b02      	cmp	r3, #2
 800505e:	d901      	bls.n	8005064 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	e10c      	b.n	800527e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005064:	4b6a      	ldr	r3, [pc, #424]	; (8005210 <HAL_RCC_OscConfig+0x474>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800506c:	2b00      	cmp	r3, #0
 800506e:	d0f0      	beq.n	8005052 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	2b01      	cmp	r3, #1
 8005076:	d106      	bne.n	8005086 <HAL_RCC_OscConfig+0x2ea>
 8005078:	4b64      	ldr	r3, [pc, #400]	; (800520c <HAL_RCC_OscConfig+0x470>)
 800507a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800507c:	4a63      	ldr	r2, [pc, #396]	; (800520c <HAL_RCC_OscConfig+0x470>)
 800507e:	f043 0301 	orr.w	r3, r3, #1
 8005082:	6713      	str	r3, [r2, #112]	; 0x70
 8005084:	e01c      	b.n	80050c0 <HAL_RCC_OscConfig+0x324>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	2b05      	cmp	r3, #5
 800508c:	d10c      	bne.n	80050a8 <HAL_RCC_OscConfig+0x30c>
 800508e:	4b5f      	ldr	r3, [pc, #380]	; (800520c <HAL_RCC_OscConfig+0x470>)
 8005090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005092:	4a5e      	ldr	r2, [pc, #376]	; (800520c <HAL_RCC_OscConfig+0x470>)
 8005094:	f043 0304 	orr.w	r3, r3, #4
 8005098:	6713      	str	r3, [r2, #112]	; 0x70
 800509a:	4b5c      	ldr	r3, [pc, #368]	; (800520c <HAL_RCC_OscConfig+0x470>)
 800509c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800509e:	4a5b      	ldr	r2, [pc, #364]	; (800520c <HAL_RCC_OscConfig+0x470>)
 80050a0:	f043 0301 	orr.w	r3, r3, #1
 80050a4:	6713      	str	r3, [r2, #112]	; 0x70
 80050a6:	e00b      	b.n	80050c0 <HAL_RCC_OscConfig+0x324>
 80050a8:	4b58      	ldr	r3, [pc, #352]	; (800520c <HAL_RCC_OscConfig+0x470>)
 80050aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ac:	4a57      	ldr	r2, [pc, #348]	; (800520c <HAL_RCC_OscConfig+0x470>)
 80050ae:	f023 0301 	bic.w	r3, r3, #1
 80050b2:	6713      	str	r3, [r2, #112]	; 0x70
 80050b4:	4b55      	ldr	r3, [pc, #340]	; (800520c <HAL_RCC_OscConfig+0x470>)
 80050b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050b8:	4a54      	ldr	r2, [pc, #336]	; (800520c <HAL_RCC_OscConfig+0x470>)
 80050ba:	f023 0304 	bic.w	r3, r3, #4
 80050be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d015      	beq.n	80050f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050c8:	f7ff fb4a 	bl	8004760 <HAL_GetTick>
 80050cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050ce:	e00a      	b.n	80050e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050d0:	f7ff fb46 	bl	8004760 <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	f241 3288 	movw	r2, #5000	; 0x1388
 80050de:	4293      	cmp	r3, r2
 80050e0:	d901      	bls.n	80050e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e0cb      	b.n	800527e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050e6:	4b49      	ldr	r3, [pc, #292]	; (800520c <HAL_RCC_OscConfig+0x470>)
 80050e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ea:	f003 0302 	and.w	r3, r3, #2
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d0ee      	beq.n	80050d0 <HAL_RCC_OscConfig+0x334>
 80050f2:	e014      	b.n	800511e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050f4:	f7ff fb34 	bl	8004760 <HAL_GetTick>
 80050f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050fa:	e00a      	b.n	8005112 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050fc:	f7ff fb30 	bl	8004760 <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	f241 3288 	movw	r2, #5000	; 0x1388
 800510a:	4293      	cmp	r3, r2
 800510c:	d901      	bls.n	8005112 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	e0b5      	b.n	800527e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005112:	4b3e      	ldr	r3, [pc, #248]	; (800520c <HAL_RCC_OscConfig+0x470>)
 8005114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005116:	f003 0302 	and.w	r3, r3, #2
 800511a:	2b00      	cmp	r3, #0
 800511c:	d1ee      	bne.n	80050fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800511e:	7dfb      	ldrb	r3, [r7, #23]
 8005120:	2b01      	cmp	r3, #1
 8005122:	d105      	bne.n	8005130 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005124:	4b39      	ldr	r3, [pc, #228]	; (800520c <HAL_RCC_OscConfig+0x470>)
 8005126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005128:	4a38      	ldr	r2, [pc, #224]	; (800520c <HAL_RCC_OscConfig+0x470>)
 800512a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800512e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	699b      	ldr	r3, [r3, #24]
 8005134:	2b00      	cmp	r3, #0
 8005136:	f000 80a1 	beq.w	800527c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800513a:	4b34      	ldr	r3, [pc, #208]	; (800520c <HAL_RCC_OscConfig+0x470>)
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f003 030c 	and.w	r3, r3, #12
 8005142:	2b08      	cmp	r3, #8
 8005144:	d05c      	beq.n	8005200 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	2b02      	cmp	r3, #2
 800514c:	d141      	bne.n	80051d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800514e:	4b31      	ldr	r3, [pc, #196]	; (8005214 <HAL_RCC_OscConfig+0x478>)
 8005150:	2200      	movs	r2, #0
 8005152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005154:	f7ff fb04 	bl	8004760 <HAL_GetTick>
 8005158:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800515a:	e008      	b.n	800516e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800515c:	f7ff fb00 	bl	8004760 <HAL_GetTick>
 8005160:	4602      	mov	r2, r0
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	2b02      	cmp	r3, #2
 8005168:	d901      	bls.n	800516e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e087      	b.n	800527e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800516e:	4b27      	ldr	r3, [pc, #156]	; (800520c <HAL_RCC_OscConfig+0x470>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1f0      	bne.n	800515c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	69da      	ldr	r2, [r3, #28]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a1b      	ldr	r3, [r3, #32]
 8005182:	431a      	orrs	r2, r3
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005188:	019b      	lsls	r3, r3, #6
 800518a:	431a      	orrs	r2, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005190:	085b      	lsrs	r3, r3, #1
 8005192:	3b01      	subs	r3, #1
 8005194:	041b      	lsls	r3, r3, #16
 8005196:	431a      	orrs	r2, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800519c:	061b      	lsls	r3, r3, #24
 800519e:	491b      	ldr	r1, [pc, #108]	; (800520c <HAL_RCC_OscConfig+0x470>)
 80051a0:	4313      	orrs	r3, r2
 80051a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051a4:	4b1b      	ldr	r3, [pc, #108]	; (8005214 <HAL_RCC_OscConfig+0x478>)
 80051a6:	2201      	movs	r2, #1
 80051a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051aa:	f7ff fad9 	bl	8004760 <HAL_GetTick>
 80051ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051b0:	e008      	b.n	80051c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051b2:	f7ff fad5 	bl	8004760 <HAL_GetTick>
 80051b6:	4602      	mov	r2, r0
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d901      	bls.n	80051c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80051c0:	2303      	movs	r3, #3
 80051c2:	e05c      	b.n	800527e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051c4:	4b11      	ldr	r3, [pc, #68]	; (800520c <HAL_RCC_OscConfig+0x470>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d0f0      	beq.n	80051b2 <HAL_RCC_OscConfig+0x416>
 80051d0:	e054      	b.n	800527c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051d2:	4b10      	ldr	r3, [pc, #64]	; (8005214 <HAL_RCC_OscConfig+0x478>)
 80051d4:	2200      	movs	r2, #0
 80051d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051d8:	f7ff fac2 	bl	8004760 <HAL_GetTick>
 80051dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051de:	e008      	b.n	80051f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051e0:	f7ff fabe 	bl	8004760 <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d901      	bls.n	80051f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e045      	b.n	800527e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051f2:	4b06      	ldr	r3, [pc, #24]	; (800520c <HAL_RCC_OscConfig+0x470>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d1f0      	bne.n	80051e0 <HAL_RCC_OscConfig+0x444>
 80051fe:	e03d      	b.n	800527c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	699b      	ldr	r3, [r3, #24]
 8005204:	2b01      	cmp	r3, #1
 8005206:	d107      	bne.n	8005218 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e038      	b.n	800527e <HAL_RCC_OscConfig+0x4e2>
 800520c:	40023800 	.word	0x40023800
 8005210:	40007000 	.word	0x40007000
 8005214:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005218:	4b1b      	ldr	r3, [pc, #108]	; (8005288 <HAL_RCC_OscConfig+0x4ec>)
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	2b01      	cmp	r3, #1
 8005224:	d028      	beq.n	8005278 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005230:	429a      	cmp	r2, r3
 8005232:	d121      	bne.n	8005278 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800523e:	429a      	cmp	r2, r3
 8005240:	d11a      	bne.n	8005278 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005248:	4013      	ands	r3, r2
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800524e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005250:	4293      	cmp	r3, r2
 8005252:	d111      	bne.n	8005278 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800525e:	085b      	lsrs	r3, r3, #1
 8005260:	3b01      	subs	r3, #1
 8005262:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005264:	429a      	cmp	r2, r3
 8005266:	d107      	bne.n	8005278 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005272:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005274:	429a      	cmp	r2, r3
 8005276:	d001      	beq.n	800527c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e000      	b.n	800527e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3718      	adds	r7, #24
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	40023800 	.word	0x40023800

0800528c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d101      	bne.n	80052a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e0cc      	b.n	800543a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052a0:	4b68      	ldr	r3, [pc, #416]	; (8005444 <HAL_RCC_ClockConfig+0x1b8>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 0307 	and.w	r3, r3, #7
 80052a8:	683a      	ldr	r2, [r7, #0]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d90c      	bls.n	80052c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052ae:	4b65      	ldr	r3, [pc, #404]	; (8005444 <HAL_RCC_ClockConfig+0x1b8>)
 80052b0:	683a      	ldr	r2, [r7, #0]
 80052b2:	b2d2      	uxtb	r2, r2
 80052b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052b6:	4b63      	ldr	r3, [pc, #396]	; (8005444 <HAL_RCC_ClockConfig+0x1b8>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 0307 	and.w	r3, r3, #7
 80052be:	683a      	ldr	r2, [r7, #0]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d001      	beq.n	80052c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e0b8      	b.n	800543a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0302 	and.w	r3, r3, #2
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d020      	beq.n	8005316 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 0304 	and.w	r3, r3, #4
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d005      	beq.n	80052ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052e0:	4b59      	ldr	r3, [pc, #356]	; (8005448 <HAL_RCC_ClockConfig+0x1bc>)
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	4a58      	ldr	r2, [pc, #352]	; (8005448 <HAL_RCC_ClockConfig+0x1bc>)
 80052e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80052ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 0308 	and.w	r3, r3, #8
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d005      	beq.n	8005304 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052f8:	4b53      	ldr	r3, [pc, #332]	; (8005448 <HAL_RCC_ClockConfig+0x1bc>)
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	4a52      	ldr	r2, [pc, #328]	; (8005448 <HAL_RCC_ClockConfig+0x1bc>)
 80052fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005302:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005304:	4b50      	ldr	r3, [pc, #320]	; (8005448 <HAL_RCC_ClockConfig+0x1bc>)
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	494d      	ldr	r1, [pc, #308]	; (8005448 <HAL_RCC_ClockConfig+0x1bc>)
 8005312:	4313      	orrs	r3, r2
 8005314:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 0301 	and.w	r3, r3, #1
 800531e:	2b00      	cmp	r3, #0
 8005320:	d044      	beq.n	80053ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	2b01      	cmp	r3, #1
 8005328:	d107      	bne.n	800533a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800532a:	4b47      	ldr	r3, [pc, #284]	; (8005448 <HAL_RCC_ClockConfig+0x1bc>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005332:	2b00      	cmp	r3, #0
 8005334:	d119      	bne.n	800536a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e07f      	b.n	800543a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	2b02      	cmp	r3, #2
 8005340:	d003      	beq.n	800534a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005346:	2b03      	cmp	r3, #3
 8005348:	d107      	bne.n	800535a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800534a:	4b3f      	ldr	r3, [pc, #252]	; (8005448 <HAL_RCC_ClockConfig+0x1bc>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005352:	2b00      	cmp	r3, #0
 8005354:	d109      	bne.n	800536a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e06f      	b.n	800543a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800535a:	4b3b      	ldr	r3, [pc, #236]	; (8005448 <HAL_RCC_ClockConfig+0x1bc>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 0302 	and.w	r3, r3, #2
 8005362:	2b00      	cmp	r3, #0
 8005364:	d101      	bne.n	800536a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e067      	b.n	800543a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800536a:	4b37      	ldr	r3, [pc, #220]	; (8005448 <HAL_RCC_ClockConfig+0x1bc>)
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	f023 0203 	bic.w	r2, r3, #3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	4934      	ldr	r1, [pc, #208]	; (8005448 <HAL_RCC_ClockConfig+0x1bc>)
 8005378:	4313      	orrs	r3, r2
 800537a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800537c:	f7ff f9f0 	bl	8004760 <HAL_GetTick>
 8005380:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005382:	e00a      	b.n	800539a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005384:	f7ff f9ec 	bl	8004760 <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005392:	4293      	cmp	r3, r2
 8005394:	d901      	bls.n	800539a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	e04f      	b.n	800543a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800539a:	4b2b      	ldr	r3, [pc, #172]	; (8005448 <HAL_RCC_ClockConfig+0x1bc>)
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	f003 020c 	and.w	r2, r3, #12
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d1eb      	bne.n	8005384 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053ac:	4b25      	ldr	r3, [pc, #148]	; (8005444 <HAL_RCC_ClockConfig+0x1b8>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0307 	and.w	r3, r3, #7
 80053b4:	683a      	ldr	r2, [r7, #0]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d20c      	bcs.n	80053d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053ba:	4b22      	ldr	r3, [pc, #136]	; (8005444 <HAL_RCC_ClockConfig+0x1b8>)
 80053bc:	683a      	ldr	r2, [r7, #0]
 80053be:	b2d2      	uxtb	r2, r2
 80053c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053c2:	4b20      	ldr	r3, [pc, #128]	; (8005444 <HAL_RCC_ClockConfig+0x1b8>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0307 	and.w	r3, r3, #7
 80053ca:	683a      	ldr	r2, [r7, #0]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d001      	beq.n	80053d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e032      	b.n	800543a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 0304 	and.w	r3, r3, #4
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d008      	beq.n	80053f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053e0:	4b19      	ldr	r3, [pc, #100]	; (8005448 <HAL_RCC_ClockConfig+0x1bc>)
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	4916      	ldr	r1, [pc, #88]	; (8005448 <HAL_RCC_ClockConfig+0x1bc>)
 80053ee:	4313      	orrs	r3, r2
 80053f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 0308 	and.w	r3, r3, #8
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d009      	beq.n	8005412 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053fe:	4b12      	ldr	r3, [pc, #72]	; (8005448 <HAL_RCC_ClockConfig+0x1bc>)
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	691b      	ldr	r3, [r3, #16]
 800540a:	00db      	lsls	r3, r3, #3
 800540c:	490e      	ldr	r1, [pc, #56]	; (8005448 <HAL_RCC_ClockConfig+0x1bc>)
 800540e:	4313      	orrs	r3, r2
 8005410:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005412:	f000 f821 	bl	8005458 <HAL_RCC_GetSysClockFreq>
 8005416:	4602      	mov	r2, r0
 8005418:	4b0b      	ldr	r3, [pc, #44]	; (8005448 <HAL_RCC_ClockConfig+0x1bc>)
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	091b      	lsrs	r3, r3, #4
 800541e:	f003 030f 	and.w	r3, r3, #15
 8005422:	490a      	ldr	r1, [pc, #40]	; (800544c <HAL_RCC_ClockConfig+0x1c0>)
 8005424:	5ccb      	ldrb	r3, [r1, r3]
 8005426:	fa22 f303 	lsr.w	r3, r2, r3
 800542a:	4a09      	ldr	r2, [pc, #36]	; (8005450 <HAL_RCC_ClockConfig+0x1c4>)
 800542c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800542e:	4b09      	ldr	r3, [pc, #36]	; (8005454 <HAL_RCC_ClockConfig+0x1c8>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4618      	mov	r0, r3
 8005434:	f7ff f82c 	bl	8004490 <HAL_InitTick>

  return HAL_OK;
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	3710      	adds	r7, #16
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	40023c00 	.word	0x40023c00
 8005448:	40023800 	.word	0x40023800
 800544c:	0800cbac 	.word	0x0800cbac
 8005450:	20000050 	.word	0x20000050
 8005454:	20000054 	.word	0x20000054

08005458 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005458:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800545c:	b094      	sub	sp, #80	; 0x50
 800545e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005460:	2300      	movs	r3, #0
 8005462:	647b      	str	r3, [r7, #68]	; 0x44
 8005464:	2300      	movs	r3, #0
 8005466:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005468:	2300      	movs	r3, #0
 800546a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800546c:	2300      	movs	r3, #0
 800546e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005470:	4b79      	ldr	r3, [pc, #484]	; (8005658 <HAL_RCC_GetSysClockFreq+0x200>)
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	f003 030c 	and.w	r3, r3, #12
 8005478:	2b08      	cmp	r3, #8
 800547a:	d00d      	beq.n	8005498 <HAL_RCC_GetSysClockFreq+0x40>
 800547c:	2b08      	cmp	r3, #8
 800547e:	f200 80e1 	bhi.w	8005644 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005482:	2b00      	cmp	r3, #0
 8005484:	d002      	beq.n	800548c <HAL_RCC_GetSysClockFreq+0x34>
 8005486:	2b04      	cmp	r3, #4
 8005488:	d003      	beq.n	8005492 <HAL_RCC_GetSysClockFreq+0x3a>
 800548a:	e0db      	b.n	8005644 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800548c:	4b73      	ldr	r3, [pc, #460]	; (800565c <HAL_RCC_GetSysClockFreq+0x204>)
 800548e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005490:	e0db      	b.n	800564a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005492:	4b73      	ldr	r3, [pc, #460]	; (8005660 <HAL_RCC_GetSysClockFreq+0x208>)
 8005494:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005496:	e0d8      	b.n	800564a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005498:	4b6f      	ldr	r3, [pc, #444]	; (8005658 <HAL_RCC_GetSysClockFreq+0x200>)
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054a0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054a2:	4b6d      	ldr	r3, [pc, #436]	; (8005658 <HAL_RCC_GetSysClockFreq+0x200>)
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d063      	beq.n	8005576 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054ae:	4b6a      	ldr	r3, [pc, #424]	; (8005658 <HAL_RCC_GetSysClockFreq+0x200>)
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	099b      	lsrs	r3, r3, #6
 80054b4:	2200      	movs	r2, #0
 80054b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80054b8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80054ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054c0:	633b      	str	r3, [r7, #48]	; 0x30
 80054c2:	2300      	movs	r3, #0
 80054c4:	637b      	str	r3, [r7, #52]	; 0x34
 80054c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80054ca:	4622      	mov	r2, r4
 80054cc:	462b      	mov	r3, r5
 80054ce:	f04f 0000 	mov.w	r0, #0
 80054d2:	f04f 0100 	mov.w	r1, #0
 80054d6:	0159      	lsls	r1, r3, #5
 80054d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80054dc:	0150      	lsls	r0, r2, #5
 80054de:	4602      	mov	r2, r0
 80054e0:	460b      	mov	r3, r1
 80054e2:	4621      	mov	r1, r4
 80054e4:	1a51      	subs	r1, r2, r1
 80054e6:	6139      	str	r1, [r7, #16]
 80054e8:	4629      	mov	r1, r5
 80054ea:	eb63 0301 	sbc.w	r3, r3, r1
 80054ee:	617b      	str	r3, [r7, #20]
 80054f0:	f04f 0200 	mov.w	r2, #0
 80054f4:	f04f 0300 	mov.w	r3, #0
 80054f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80054fc:	4659      	mov	r1, fp
 80054fe:	018b      	lsls	r3, r1, #6
 8005500:	4651      	mov	r1, sl
 8005502:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005506:	4651      	mov	r1, sl
 8005508:	018a      	lsls	r2, r1, #6
 800550a:	4651      	mov	r1, sl
 800550c:	ebb2 0801 	subs.w	r8, r2, r1
 8005510:	4659      	mov	r1, fp
 8005512:	eb63 0901 	sbc.w	r9, r3, r1
 8005516:	f04f 0200 	mov.w	r2, #0
 800551a:	f04f 0300 	mov.w	r3, #0
 800551e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005522:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005526:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800552a:	4690      	mov	r8, r2
 800552c:	4699      	mov	r9, r3
 800552e:	4623      	mov	r3, r4
 8005530:	eb18 0303 	adds.w	r3, r8, r3
 8005534:	60bb      	str	r3, [r7, #8]
 8005536:	462b      	mov	r3, r5
 8005538:	eb49 0303 	adc.w	r3, r9, r3
 800553c:	60fb      	str	r3, [r7, #12]
 800553e:	f04f 0200 	mov.w	r2, #0
 8005542:	f04f 0300 	mov.w	r3, #0
 8005546:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800554a:	4629      	mov	r1, r5
 800554c:	024b      	lsls	r3, r1, #9
 800554e:	4621      	mov	r1, r4
 8005550:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005554:	4621      	mov	r1, r4
 8005556:	024a      	lsls	r2, r1, #9
 8005558:	4610      	mov	r0, r2
 800555a:	4619      	mov	r1, r3
 800555c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800555e:	2200      	movs	r2, #0
 8005560:	62bb      	str	r3, [r7, #40]	; 0x28
 8005562:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005564:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005568:	f7fb fa38 	bl	80009dc <__aeabi_uldivmod>
 800556c:	4602      	mov	r2, r0
 800556e:	460b      	mov	r3, r1
 8005570:	4613      	mov	r3, r2
 8005572:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005574:	e058      	b.n	8005628 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005576:	4b38      	ldr	r3, [pc, #224]	; (8005658 <HAL_RCC_GetSysClockFreq+0x200>)
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	099b      	lsrs	r3, r3, #6
 800557c:	2200      	movs	r2, #0
 800557e:	4618      	mov	r0, r3
 8005580:	4611      	mov	r1, r2
 8005582:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005586:	623b      	str	r3, [r7, #32]
 8005588:	2300      	movs	r3, #0
 800558a:	627b      	str	r3, [r7, #36]	; 0x24
 800558c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005590:	4642      	mov	r2, r8
 8005592:	464b      	mov	r3, r9
 8005594:	f04f 0000 	mov.w	r0, #0
 8005598:	f04f 0100 	mov.w	r1, #0
 800559c:	0159      	lsls	r1, r3, #5
 800559e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055a2:	0150      	lsls	r0, r2, #5
 80055a4:	4602      	mov	r2, r0
 80055a6:	460b      	mov	r3, r1
 80055a8:	4641      	mov	r1, r8
 80055aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80055ae:	4649      	mov	r1, r9
 80055b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80055b4:	f04f 0200 	mov.w	r2, #0
 80055b8:	f04f 0300 	mov.w	r3, #0
 80055bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80055c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80055c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80055c8:	ebb2 040a 	subs.w	r4, r2, sl
 80055cc:	eb63 050b 	sbc.w	r5, r3, fp
 80055d0:	f04f 0200 	mov.w	r2, #0
 80055d4:	f04f 0300 	mov.w	r3, #0
 80055d8:	00eb      	lsls	r3, r5, #3
 80055da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055de:	00e2      	lsls	r2, r4, #3
 80055e0:	4614      	mov	r4, r2
 80055e2:	461d      	mov	r5, r3
 80055e4:	4643      	mov	r3, r8
 80055e6:	18e3      	adds	r3, r4, r3
 80055e8:	603b      	str	r3, [r7, #0]
 80055ea:	464b      	mov	r3, r9
 80055ec:	eb45 0303 	adc.w	r3, r5, r3
 80055f0:	607b      	str	r3, [r7, #4]
 80055f2:	f04f 0200 	mov.w	r2, #0
 80055f6:	f04f 0300 	mov.w	r3, #0
 80055fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80055fe:	4629      	mov	r1, r5
 8005600:	028b      	lsls	r3, r1, #10
 8005602:	4621      	mov	r1, r4
 8005604:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005608:	4621      	mov	r1, r4
 800560a:	028a      	lsls	r2, r1, #10
 800560c:	4610      	mov	r0, r2
 800560e:	4619      	mov	r1, r3
 8005610:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005612:	2200      	movs	r2, #0
 8005614:	61bb      	str	r3, [r7, #24]
 8005616:	61fa      	str	r2, [r7, #28]
 8005618:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800561c:	f7fb f9de 	bl	80009dc <__aeabi_uldivmod>
 8005620:	4602      	mov	r2, r0
 8005622:	460b      	mov	r3, r1
 8005624:	4613      	mov	r3, r2
 8005626:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005628:	4b0b      	ldr	r3, [pc, #44]	; (8005658 <HAL_RCC_GetSysClockFreq+0x200>)
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	0c1b      	lsrs	r3, r3, #16
 800562e:	f003 0303 	and.w	r3, r3, #3
 8005632:	3301      	adds	r3, #1
 8005634:	005b      	lsls	r3, r3, #1
 8005636:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005638:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800563a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800563c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005640:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005642:	e002      	b.n	800564a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005644:	4b05      	ldr	r3, [pc, #20]	; (800565c <HAL_RCC_GetSysClockFreq+0x204>)
 8005646:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005648:	bf00      	nop
    }
  }
  return sysclockfreq;
 800564a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800564c:	4618      	mov	r0, r3
 800564e:	3750      	adds	r7, #80	; 0x50
 8005650:	46bd      	mov	sp, r7
 8005652:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005656:	bf00      	nop
 8005658:	40023800 	.word	0x40023800
 800565c:	00f42400 	.word	0x00f42400
 8005660:	007a1200 	.word	0x007a1200

08005664 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005664:	b480      	push	{r7}
 8005666:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005668:	4b03      	ldr	r3, [pc, #12]	; (8005678 <HAL_RCC_GetHCLKFreq+0x14>)
 800566a:	681b      	ldr	r3, [r3, #0]
}
 800566c:	4618      	mov	r0, r3
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop
 8005678:	20000050 	.word	0x20000050

0800567c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005680:	f7ff fff0 	bl	8005664 <HAL_RCC_GetHCLKFreq>
 8005684:	4602      	mov	r2, r0
 8005686:	4b05      	ldr	r3, [pc, #20]	; (800569c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	0a9b      	lsrs	r3, r3, #10
 800568c:	f003 0307 	and.w	r3, r3, #7
 8005690:	4903      	ldr	r1, [pc, #12]	; (80056a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005692:	5ccb      	ldrb	r3, [r1, r3]
 8005694:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005698:	4618      	mov	r0, r3
 800569a:	bd80      	pop	{r7, pc}
 800569c:	40023800 	.word	0x40023800
 80056a0:	0800cbbc 	.word	0x0800cbbc

080056a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80056a8:	f7ff ffdc 	bl	8005664 <HAL_RCC_GetHCLKFreq>
 80056ac:	4602      	mov	r2, r0
 80056ae:	4b05      	ldr	r3, [pc, #20]	; (80056c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	0b5b      	lsrs	r3, r3, #13
 80056b4:	f003 0307 	and.w	r3, r3, #7
 80056b8:	4903      	ldr	r1, [pc, #12]	; (80056c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80056ba:	5ccb      	ldrb	r3, [r1, r3]
 80056bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	40023800 	.word	0x40023800
 80056c8:	0800cbbc 	.word	0x0800cbbc

080056cc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	220f      	movs	r2, #15
 80056da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80056dc:	4b12      	ldr	r3, [pc, #72]	; (8005728 <HAL_RCC_GetClockConfig+0x5c>)
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	f003 0203 	and.w	r2, r3, #3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80056e8:	4b0f      	ldr	r3, [pc, #60]	; (8005728 <HAL_RCC_GetClockConfig+0x5c>)
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80056f4:	4b0c      	ldr	r3, [pc, #48]	; (8005728 <HAL_RCC_GetClockConfig+0x5c>)
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005700:	4b09      	ldr	r3, [pc, #36]	; (8005728 <HAL_RCC_GetClockConfig+0x5c>)
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	08db      	lsrs	r3, r3, #3
 8005706:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800570e:	4b07      	ldr	r3, [pc, #28]	; (800572c <HAL_RCC_GetClockConfig+0x60>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 0207 	and.w	r2, r3, #7
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	601a      	str	r2, [r3, #0]
}
 800571a:	bf00      	nop
 800571c:	370c      	adds	r7, #12
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr
 8005726:	bf00      	nop
 8005728:	40023800 	.word	0x40023800
 800572c:	40023c00 	.word	0x40023c00

08005730 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b086      	sub	sp, #24
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005738:	2300      	movs	r3, #0
 800573a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800573c:	2300      	movs	r3, #0
 800573e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 0301 	and.w	r3, r3, #1
 8005748:	2b00      	cmp	r3, #0
 800574a:	d105      	bne.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005754:	2b00      	cmp	r3, #0
 8005756:	d035      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005758:	4b67      	ldr	r3, [pc, #412]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800575a:	2200      	movs	r2, #0
 800575c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800575e:	f7fe ffff 	bl	8004760 <HAL_GetTick>
 8005762:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005764:	e008      	b.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005766:	f7fe fffb 	bl	8004760 <HAL_GetTick>
 800576a:	4602      	mov	r2, r0
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	2b02      	cmp	r3, #2
 8005772:	d901      	bls.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005774:	2303      	movs	r3, #3
 8005776:	e0ba      	b.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005778:	4b60      	ldr	r3, [pc, #384]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005780:	2b00      	cmp	r3, #0
 8005782:	d1f0      	bne.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	019a      	lsls	r2, r3, #6
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	071b      	lsls	r3, r3, #28
 8005790:	495a      	ldr	r1, [pc, #360]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005792:	4313      	orrs	r3, r2
 8005794:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005798:	4b57      	ldr	r3, [pc, #348]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800579a:	2201      	movs	r2, #1
 800579c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800579e:	f7fe ffdf 	bl	8004760 <HAL_GetTick>
 80057a2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80057a4:	e008      	b.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80057a6:	f7fe ffdb 	bl	8004760 <HAL_GetTick>
 80057aa:	4602      	mov	r2, r0
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d901      	bls.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	e09a      	b.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80057b8:	4b50      	ldr	r3, [pc, #320]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d0f0      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 0302 	and.w	r3, r3, #2
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	f000 8083 	beq.w	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80057d2:	2300      	movs	r3, #0
 80057d4:	60fb      	str	r3, [r7, #12]
 80057d6:	4b49      	ldr	r3, [pc, #292]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80057d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057da:	4a48      	ldr	r2, [pc, #288]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80057dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057e0:	6413      	str	r3, [r2, #64]	; 0x40
 80057e2:	4b46      	ldr	r3, [pc, #280]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80057e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057ea:	60fb      	str	r3, [r7, #12]
 80057ec:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80057ee:	4b44      	ldr	r3, [pc, #272]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a43      	ldr	r2, [pc, #268]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057f8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80057fa:	f7fe ffb1 	bl	8004760 <HAL_GetTick>
 80057fe:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005800:	e008      	b.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005802:	f7fe ffad 	bl	8004760 <HAL_GetTick>
 8005806:	4602      	mov	r2, r0
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	1ad3      	subs	r3, r2, r3
 800580c:	2b02      	cmp	r3, #2
 800580e:	d901      	bls.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005810:	2303      	movs	r3, #3
 8005812:	e06c      	b.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005814:	4b3a      	ldr	r3, [pc, #232]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800581c:	2b00      	cmp	r3, #0
 800581e:	d0f0      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005820:	4b36      	ldr	r3, [pc, #216]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005824:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005828:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d02f      	beq.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005838:	693a      	ldr	r2, [r7, #16]
 800583a:	429a      	cmp	r2, r3
 800583c:	d028      	beq.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800583e:	4b2f      	ldr	r3, [pc, #188]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005842:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005846:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005848:	4b2e      	ldr	r3, [pc, #184]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800584a:	2201      	movs	r2, #1
 800584c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800584e:	4b2d      	ldr	r3, [pc, #180]	; (8005904 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005850:	2200      	movs	r2, #0
 8005852:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005854:	4a29      	ldr	r2, [pc, #164]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800585a:	4b28      	ldr	r3, [pc, #160]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800585c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800585e:	f003 0301 	and.w	r3, r3, #1
 8005862:	2b01      	cmp	r3, #1
 8005864:	d114      	bne.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005866:	f7fe ff7b 	bl	8004760 <HAL_GetTick>
 800586a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800586c:	e00a      	b.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800586e:	f7fe ff77 	bl	8004760 <HAL_GetTick>
 8005872:	4602      	mov	r2, r0
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	1ad3      	subs	r3, r2, r3
 8005878:	f241 3288 	movw	r2, #5000	; 0x1388
 800587c:	4293      	cmp	r3, r2
 800587e:	d901      	bls.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005880:	2303      	movs	r3, #3
 8005882:	e034      	b.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005884:	4b1d      	ldr	r3, [pc, #116]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005888:	f003 0302 	and.w	r3, r3, #2
 800588c:	2b00      	cmp	r3, #0
 800588e:	d0ee      	beq.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005898:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800589c:	d10d      	bne.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800589e:	4b17      	ldr	r3, [pc, #92]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80058ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058b2:	4912      	ldr	r1, [pc, #72]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80058b4:	4313      	orrs	r3, r2
 80058b6:	608b      	str	r3, [r1, #8]
 80058b8:	e005      	b.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80058ba:	4b10      	ldr	r3, [pc, #64]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	4a0f      	ldr	r2, [pc, #60]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80058c0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80058c4:	6093      	str	r3, [r2, #8]
 80058c6:	4b0d      	ldr	r3, [pc, #52]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80058c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058d2:	490a      	ldr	r1, [pc, #40]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80058d4:	4313      	orrs	r3, r2
 80058d6:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 0308 	and.w	r3, r3, #8
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d003      	beq.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	7c1a      	ldrb	r2, [r3, #16]
 80058e8:	4b07      	ldr	r3, [pc, #28]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80058ea:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3718      	adds	r7, #24
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	42470068 	.word	0x42470068
 80058fc:	40023800 	.word	0x40023800
 8005900:	40007000 	.word	0x40007000
 8005904:	42470e40 	.word	0x42470e40
 8005908:	424711e0 	.word	0x424711e0

0800590c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d101      	bne.n	8005922 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e066      	b.n	80059f0 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	7f5b      	ldrb	r3, [r3, #29]
 8005926:	b2db      	uxtb	r3, r3
 8005928:	2b00      	cmp	r3, #0
 800592a:	d105      	bne.n	8005938 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f7fe fca8 	bl	8004288 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2202      	movs	r2, #2
 800593c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	22ca      	movs	r2, #202	; 0xca
 8005944:	625a      	str	r2, [r3, #36]	; 0x24
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2253      	movs	r2, #83	; 0x53
 800594c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 fa45 	bl	8005dde <RTC_EnterInitMode>
 8005954:	4603      	mov	r3, r0
 8005956:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005958:	7bfb      	ldrb	r3, [r7, #15]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d12c      	bne.n	80059b8 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	6812      	ldr	r2, [r2, #0]
 8005968:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800596c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005970:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	6899      	ldr	r1, [r3, #8]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	685a      	ldr	r2, [r3, #4]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	691b      	ldr	r3, [r3, #16]
 8005980:	431a      	orrs	r2, r3
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	695b      	ldr	r3, [r3, #20]
 8005986:	431a      	orrs	r2, r3
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	430a      	orrs	r2, r1
 800598e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	68d2      	ldr	r2, [r2, #12]
 8005998:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	6919      	ldr	r1, [r3, #16]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	041a      	lsls	r2, r3, #16
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	430a      	orrs	r2, r1
 80059ac:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 fa4c 	bl	8005e4c <RTC_ExitInitMode>
 80059b4:	4603      	mov	r3, r0
 80059b6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80059b8:	7bfb      	ldrb	r3, [r7, #15]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d113      	bne.n	80059e6 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80059cc:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	699a      	ldr	r2, [r3, #24]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	430a      	orrs	r2, r1
 80059de:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	22ff      	movs	r2, #255	; 0xff
 80059ec:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80059ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3710      	adds	r7, #16
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80059f8:	b590      	push	{r4, r7, lr}
 80059fa:	b087      	sub	sp, #28
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	60b9      	str	r1, [r7, #8]
 8005a02:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005a04:	2300      	movs	r3, #0
 8005a06:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	7f1b      	ldrb	r3, [r3, #28]
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d101      	bne.n	8005a14 <HAL_RTC_SetTime+0x1c>
 8005a10:	2302      	movs	r3, #2
 8005a12:	e087      	b.n	8005b24 <HAL_RTC_SetTime+0x12c>
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2201      	movs	r2, #1
 8005a18:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2202      	movs	r2, #2
 8005a1e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d126      	bne.n	8005a74 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d102      	bne.n	8005a3a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	2200      	movs	r2, #0
 8005a38:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f000 fa29 	bl	8005e96 <RTC_ByteToBcd2>
 8005a44:	4603      	mov	r3, r0
 8005a46:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	785b      	ldrb	r3, [r3, #1]
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f000 fa22 	bl	8005e96 <RTC_ByteToBcd2>
 8005a52:	4603      	mov	r3, r0
 8005a54:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005a56:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	789b      	ldrb	r3, [r3, #2]
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f000 fa1a 	bl	8005e96 <RTC_ByteToBcd2>
 8005a62:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005a64:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	78db      	ldrb	r3, [r3, #3]
 8005a6c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	617b      	str	r3, [r7, #20]
 8005a72:	e018      	b.n	8005aa6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d102      	bne.n	8005a88 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	2200      	movs	r2, #0
 8005a86:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	785b      	ldrb	r3, [r3, #1]
 8005a92:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005a94:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005a96:	68ba      	ldr	r2, [r7, #8]
 8005a98:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005a9a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	78db      	ldrb	r3, [r3, #3]
 8005aa0:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	22ca      	movs	r2, #202	; 0xca
 8005aac:	625a      	str	r2, [r3, #36]	; 0x24
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2253      	movs	r2, #83	; 0x53
 8005ab4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005ab6:	68f8      	ldr	r0, [r7, #12]
 8005ab8:	f000 f991 	bl	8005dde <RTC_EnterInitMode>
 8005abc:	4603      	mov	r3, r0
 8005abe:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005ac0:	7cfb      	ldrb	r3, [r7, #19]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d120      	bne.n	8005b08 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005ad0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005ad4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	689a      	ldr	r2, [r3, #8]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005ae4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	6899      	ldr	r1, [r3, #8]
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	68da      	ldr	r2, [r3, #12]
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	691b      	ldr	r3, [r3, #16]
 8005af4:	431a      	orrs	r2, r3
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	430a      	orrs	r2, r1
 8005afc:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005afe:	68f8      	ldr	r0, [r7, #12]
 8005b00:	f000 f9a4 	bl	8005e4c <RTC_ExitInitMode>
 8005b04:	4603      	mov	r3, r0
 8005b06:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005b08:	7cfb      	ldrb	r3, [r7, #19]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d102      	bne.n	8005b14 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2201      	movs	r2, #1
 8005b12:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	22ff      	movs	r2, #255	; 0xff
 8005b1a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	771a      	strb	r2, [r3, #28]

  return status;
 8005b22:	7cfb      	ldrb	r3, [r7, #19]
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	371c      	adds	r7, #28
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd90      	pop	{r4, r7, pc}

08005b2c <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b086      	sub	sp, #24
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	60b9      	str	r1, [r7, #8]
 8005b36:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	691b      	ldr	r3, [r3, #16]
 8005b4c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005b5e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005b62:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	0c1b      	lsrs	r3, r3, #16
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b6e:	b2da      	uxtb	r2, r3
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	0a1b      	lsrs	r3, r3, #8
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b7e:	b2da      	uxtb	r2, r3
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b8c:	b2da      	uxtb	r2, r3
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	0d9b      	lsrs	r3, r3, #22
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	f003 0301 	and.w	r3, r3, #1
 8005b9c:	b2da      	uxtb	r2, r3
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d11a      	bne.n	8005bde <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	4618      	mov	r0, r3
 8005bae:	f000 f98f 	bl	8005ed0 <RTC_Bcd2ToByte>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	785b      	ldrb	r3, [r3, #1]
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f000 f986 	bl	8005ed0 <RTC_Bcd2ToByte>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	789b      	ldrb	r3, [r3, #2]
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f000 f97d 	bl	8005ed0 <RTC_Bcd2ToByte>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	461a      	mov	r2, r3
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005bde:	2300      	movs	r3, #0
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3718      	adds	r7, #24
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005be8:	b590      	push	{r4, r7, lr}
 8005bea:	b087      	sub	sp, #28
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	7f1b      	ldrb	r3, [r3, #28]
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d101      	bne.n	8005c04 <HAL_RTC_SetDate+0x1c>
 8005c00:	2302      	movs	r3, #2
 8005c02:	e071      	b.n	8005ce8 <HAL_RTC_SetDate+0x100>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2201      	movs	r2, #1
 8005c08:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2202      	movs	r2, #2
 8005c0e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d10e      	bne.n	8005c34 <HAL_RTC_SetDate+0x4c>
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	785b      	ldrb	r3, [r3, #1]
 8005c1a:	f003 0310 	and.w	r3, r3, #16
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d008      	beq.n	8005c34 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	785b      	ldrb	r3, [r3, #1]
 8005c26:	f023 0310 	bic.w	r3, r3, #16
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	330a      	adds	r3, #10
 8005c2e:	b2da      	uxtb	r2, r3
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d11c      	bne.n	8005c74 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	78db      	ldrb	r3, [r3, #3]
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f000 f929 	bl	8005e96 <RTC_ByteToBcd2>
 8005c44:	4603      	mov	r3, r0
 8005c46:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	785b      	ldrb	r3, [r3, #1]
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f000 f922 	bl	8005e96 <RTC_ByteToBcd2>
 8005c52:	4603      	mov	r3, r0
 8005c54:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005c56:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	789b      	ldrb	r3, [r3, #2]
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f000 f91a 	bl	8005e96 <RTC_ByteToBcd2>
 8005c62:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005c64:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	617b      	str	r3, [r7, #20]
 8005c72:	e00e      	b.n	8005c92 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	78db      	ldrb	r3, [r3, #3]
 8005c78:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	785b      	ldrb	r3, [r3, #1]
 8005c7e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005c80:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005c82:	68ba      	ldr	r2, [r7, #8]
 8005c84:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005c86:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	22ca      	movs	r2, #202	; 0xca
 8005c98:	625a      	str	r2, [r3, #36]	; 0x24
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	2253      	movs	r2, #83	; 0x53
 8005ca0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005ca2:	68f8      	ldr	r0, [r7, #12]
 8005ca4:	f000 f89b 	bl	8005dde <RTC_EnterInitMode>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005cac:	7cfb      	ldrb	r3, [r7, #19]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d10c      	bne.n	8005ccc <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005cbc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005cc0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005cc2:	68f8      	ldr	r0, [r7, #12]
 8005cc4:	f000 f8c2 	bl	8005e4c <RTC_ExitInitMode>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005ccc:	7cfb      	ldrb	r3, [r7, #19]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d102      	bne.n	8005cd8 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	22ff      	movs	r2, #255	; 0xff
 8005cde:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	771a      	strb	r2, [r3, #28]

  return status;
 8005ce6:	7cfb      	ldrb	r3, [r7, #19]
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	371c      	adds	r7, #28
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd90      	pop	{r4, r7, pc}

08005cf0 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b086      	sub	sp, #24
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005d0a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005d0e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	0c1b      	lsrs	r3, r3, #16
 8005d14:	b2da      	uxtb	r2, r3
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	0a1b      	lsrs	r3, r3, #8
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	f003 031f 	and.w	r3, r3, #31
 8005d24:	b2da      	uxtb	r2, r3
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d32:	b2da      	uxtb	r2, r3
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	0b5b      	lsrs	r3, r3, #13
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	f003 0307 	and.w	r3, r3, #7
 8005d42:	b2da      	uxtb	r2, r3
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d11a      	bne.n	8005d84 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	78db      	ldrb	r3, [r3, #3]
 8005d52:	4618      	mov	r0, r3
 8005d54:	f000 f8bc 	bl	8005ed0 <RTC_Bcd2ToByte>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	785b      	ldrb	r3, [r3, #1]
 8005d64:	4618      	mov	r0, r3
 8005d66:	f000 f8b3 	bl	8005ed0 <RTC_Bcd2ToByte>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	789b      	ldrb	r3, [r3, #2]
 8005d76:	4618      	mov	r0, r3
 8005d78:	f000 f8aa 	bl	8005ed0 <RTC_Bcd2ToByte>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	461a      	mov	r2, r3
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3718      	adds	r7, #24
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005d8e:	b580      	push	{r7, lr}
 8005d90:	b084      	sub	sp, #16
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d96:	2300      	movs	r3, #0
 8005d98:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	68da      	ldr	r2, [r3, #12]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005da8:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005daa:	f7fe fcd9 	bl	8004760 <HAL_GetTick>
 8005dae:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005db0:	e009      	b.n	8005dc6 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005db2:	f7fe fcd5 	bl	8004760 <HAL_GetTick>
 8005db6:	4602      	mov	r2, r0
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	1ad3      	subs	r3, r2, r3
 8005dbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005dc0:	d901      	bls.n	8005dc6 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005dc2:	2303      	movs	r3, #3
 8005dc4:	e007      	b.n	8005dd6 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	f003 0320 	and.w	r3, r3, #32
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d0ee      	beq.n	8005db2 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3710      	adds	r7, #16
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}

08005dde <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005dde:	b580      	push	{r7, lr}
 8005de0:	b084      	sub	sp, #16
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005de6:	2300      	movs	r3, #0
 8005de8:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005dea:	2300      	movs	r3, #0
 8005dec:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d122      	bne.n	8005e42 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	68da      	ldr	r2, [r3, #12]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005e0a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005e0c:	f7fe fca8 	bl	8004760 <HAL_GetTick>
 8005e10:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005e12:	e00c      	b.n	8005e2e <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005e14:	f7fe fca4 	bl	8004760 <HAL_GetTick>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	1ad3      	subs	r3, r2, r3
 8005e1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e22:	d904      	bls.n	8005e2e <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2204      	movs	r2, #4
 8005e28:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d102      	bne.n	8005e42 <RTC_EnterInitMode+0x64>
 8005e3c:	7bfb      	ldrb	r3, [r7, #15]
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d1e8      	bne.n	8005e14 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3710      	adds	r7, #16
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e54:	2300      	movs	r3, #0
 8005e56:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	68da      	ldr	r2, [r3, #12]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e66:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	f003 0320 	and.w	r3, r3, #32
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d10a      	bne.n	8005e8c <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f7ff ff89 	bl	8005d8e <HAL_RTC_WaitForSynchro>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d004      	beq.n	8005e8c <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2204      	movs	r2, #4
 8005e86:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3710      	adds	r7, #16
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}

08005e96 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005e96:	b480      	push	{r7}
 8005e98:	b085      	sub	sp, #20
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8005ea4:	e005      	b.n	8005eb2 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005ea6:	7bfb      	ldrb	r3, [r7, #15]
 8005ea8:	3301      	adds	r3, #1
 8005eaa:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8005eac:	79fb      	ldrb	r3, [r7, #7]
 8005eae:	3b0a      	subs	r3, #10
 8005eb0:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005eb2:	79fb      	ldrb	r3, [r7, #7]
 8005eb4:	2b09      	cmp	r3, #9
 8005eb6:	d8f6      	bhi.n	8005ea6 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005eb8:	7bfb      	ldrb	r3, [r7, #15]
 8005eba:	011b      	lsls	r3, r3, #4
 8005ebc:	b2da      	uxtb	r2, r3
 8005ebe:	79fb      	ldrb	r3, [r7, #7]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	b2db      	uxtb	r3, r3
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3714      	adds	r7, #20
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr

08005ed0 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b085      	sub	sp, #20
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8005eda:	2300      	movs	r3, #0
 8005edc:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8005ede:	79fb      	ldrb	r3, [r7, #7]
 8005ee0:	091b      	lsrs	r3, r3, #4
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	0092      	lsls	r2, r2, #2
 8005ee8:	4413      	add	r3, r2
 8005eea:	005b      	lsls	r3, r3, #1
 8005eec:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8005eee:	79fb      	ldrb	r3, [r7, #7]
 8005ef0:	f003 030f 	and.w	r3, r3, #15
 8005ef4:	b2da      	uxtb	r2, r3
 8005ef6:	7bfb      	ldrb	r3, [r7, #15]
 8005ef8:	4413      	add	r3, r2
 8005efa:	b2db      	uxtb	r3, r3
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3714      	adds	r7, #20
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b087      	sub	sp, #28
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	60f8      	str	r0, [r7, #12]
 8005f10:	60b9      	str	r1, [r7, #8]
 8005f12:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8005f14:	4b59      	ldr	r3, [pc, #356]	; (800607c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a59      	ldr	r2, [pc, #356]	; (8006080 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 8005f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f1e:	0adb      	lsrs	r3, r3, #11
 8005f20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005f24:	fb02 f303 	mul.w	r3, r2, r3
 8005f28:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	7f1b      	ldrb	r3, [r3, #28]
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d101      	bne.n	8005f36 <HAL_RTCEx_SetWakeUpTimer_IT+0x2e>
 8005f32:	2302      	movs	r3, #2
 8005f34:	e09b      	b.n	800606e <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2201      	movs	r2, #1
 8005f3a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2202      	movs	r2, #2
 8005f40:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	22ca      	movs	r2, #202	; 0xca
 8005f48:	625a      	str	r2, [r3, #36]	; 0x24
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	2253      	movs	r2, #83	; 0x53
 8005f50:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d017      	beq.n	8005f90 <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	1e5a      	subs	r2, r3, #1
 8005f64:	617a      	str	r2, [r7, #20]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d10b      	bne.n	8005f82 <HAL_RTCEx_SetWakeUpTimer_IT+0x7a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	22ff      	movs	r2, #255	; 0xff
 8005f70:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2203      	movs	r2, #3
 8005f76:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005f7e:	2303      	movs	r3, #3
 8005f80:	e075      	b.n	800606e <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	f003 0304 	and.w	r3, r3, #4
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d1e7      	bne.n	8005f60 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	689a      	ldr	r2, [r3, #8]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f9e:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	b2da      	uxtb	r2, r3
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8005fb0:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8005fb2:	4b32      	ldr	r3, [pc, #200]	; (800607c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a32      	ldr	r2, [pc, #200]	; (8006080 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 8005fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8005fbc:	0adb      	lsrs	r3, r3, #11
 8005fbe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005fc2:	fb02 f303 	mul.w	r3, r2, r3
 8005fc6:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    if (count-- == 0U)
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	1e5a      	subs	r2, r3, #1
 8005fcc:	617a      	str	r2, [r7, #20]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d10b      	bne.n	8005fea <HAL_RTCEx_SetWakeUpTimer_IT+0xe2>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	22ff      	movs	r2, #255	; 0xff
 8005fd8:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2203      	movs	r2, #3
 8005fde:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	e041      	b.n	800606e <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	f003 0304 	and.w	r3, r3, #4
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d0e7      	beq.n	8005fc8 <HAL_RTCEx_SetWakeUpTimer_IT+0xc0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	689a      	ldr	r2, [r3, #8]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f022 0207 	bic.w	r2, r2, #7
 8006006:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	6899      	ldr	r1, [r3, #8]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	430a      	orrs	r2, r1
 8006016:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	68ba      	ldr	r2, [r7, #8]
 800601e:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8006020:	4b18      	ldr	r3, [pc, #96]	; (8006084 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a17      	ldr	r2, [pc, #92]	; (8006084 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8006026:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800602a:	6013      	str	r3, [r2, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800602c:	4b15      	ldr	r3, [pc, #84]	; (8006084 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	4a14      	ldr	r2, [pc, #80]	; (8006084 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8006032:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006036:	6093      	str	r3, [r2, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	689a      	ldr	r2, [r3, #8]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006046:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	689a      	ldr	r2, [r3, #8]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006056:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	22ff      	movs	r2, #255	; 0xff
 800605e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2201      	movs	r2, #1
 8006064:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2200      	movs	r2, #0
 800606a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800606c:	2300      	movs	r3, #0
}
 800606e:	4618      	mov	r0, r3
 8006070:	371c      	adds	r7, #28
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr
 800607a:	bf00      	nop
 800607c:	20000050 	.word	0x20000050
 8006080:	10624dd3 	.word	0x10624dd3
 8006084:	40013c00 	.word	0x40013c00

08006088 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b082      	sub	sp, #8
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the Wakeup timer Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800609a:	2b00      	cmp	r3, #0
 800609c:	d00b      	beq.n	80060b6 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f7fb fc04 	bl	80018ac <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the Wakeup timer interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	b2da      	uxtb	r2, r3
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80060b4:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80060b6:	4b05      	ldr	r3, [pc, #20]	; (80060cc <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 80060b8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80060bc:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2201      	movs	r2, #1
 80060c2:	775a      	strb	r2, [r3, #29]
}
 80060c4:	bf00      	nop
 80060c6:	3708      	adds	r7, #8
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	40013c00 	.word	0x40013c00

080060d0 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b087      	sub	sp, #28
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	60f8      	str	r0, [r7, #12]
 80060d8:	60b9      	str	r1, [r7, #8]
 80060da:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80060dc:	2300      	movs	r3, #0
 80060de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	3350      	adds	r3, #80	; 0x50
 80060e6:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	697a      	ldr	r2, [r7, #20]
 80060ee:	4413      	add	r3, r2
 80060f0:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	601a      	str	r2, [r3, #0]
}
 80060f8:	bf00      	nop
 80060fa:	371c      	adds	r7, #28
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8006104:	b480      	push	{r7}
 8006106:	b085      	sub	sp, #20
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800610e:	2300      	movs	r3, #0
 8006110:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	3350      	adds	r3, #80	; 0x50
 8006118:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	68fa      	ldr	r2, [r7, #12]
 8006120:	4413      	add	r3, r2
 8006122:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
}
 8006128:	4618      	mov	r0, r3
 800612a:	3714      	adds	r7, #20
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b082      	sub	sp, #8
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d101      	bne.n	8006146 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	e041      	b.n	80061ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800614c:	b2db      	uxtb	r3, r3
 800614e:	2b00      	cmp	r3, #0
 8006150:	d106      	bne.n	8006160 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2200      	movs	r2, #0
 8006156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f7fe f8c8 	bl	80042f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2202      	movs	r2, #2
 8006164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	3304      	adds	r3, #4
 8006170:	4619      	mov	r1, r3
 8006172:	4610      	mov	r0, r2
 8006174:	f000 fa88 	bl	8006688 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3708      	adds	r7, #8
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
	...

080061d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b085      	sub	sp, #20
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d001      	beq.n	80061ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	e044      	b.n	8006276 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2202      	movs	r2, #2
 80061f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68da      	ldr	r2, [r3, #12]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f042 0201 	orr.w	r2, r2, #1
 8006202:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a1e      	ldr	r2, [pc, #120]	; (8006284 <HAL_TIM_Base_Start_IT+0xb0>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d018      	beq.n	8006240 <HAL_TIM_Base_Start_IT+0x6c>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006216:	d013      	beq.n	8006240 <HAL_TIM_Base_Start_IT+0x6c>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a1a      	ldr	r2, [pc, #104]	; (8006288 <HAL_TIM_Base_Start_IT+0xb4>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d00e      	beq.n	8006240 <HAL_TIM_Base_Start_IT+0x6c>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a19      	ldr	r2, [pc, #100]	; (800628c <HAL_TIM_Base_Start_IT+0xb8>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d009      	beq.n	8006240 <HAL_TIM_Base_Start_IT+0x6c>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a17      	ldr	r2, [pc, #92]	; (8006290 <HAL_TIM_Base_Start_IT+0xbc>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d004      	beq.n	8006240 <HAL_TIM_Base_Start_IT+0x6c>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a16      	ldr	r2, [pc, #88]	; (8006294 <HAL_TIM_Base_Start_IT+0xc0>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d111      	bne.n	8006264 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	f003 0307 	and.w	r3, r3, #7
 800624a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2b06      	cmp	r3, #6
 8006250:	d010      	beq.n	8006274 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f042 0201 	orr.w	r2, r2, #1
 8006260:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006262:	e007      	b.n	8006274 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f042 0201 	orr.w	r2, r2, #1
 8006272:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006274:	2300      	movs	r3, #0
}
 8006276:	4618      	mov	r0, r3
 8006278:	3714      	adds	r7, #20
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr
 8006282:	bf00      	nop
 8006284:	40010000 	.word	0x40010000
 8006288:	40000400 	.word	0x40000400
 800628c:	40000800 	.word	0x40000800
 8006290:	40000c00 	.word	0x40000c00
 8006294:	40014000 	.word	0x40014000

08006298 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b082      	sub	sp, #8
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	691b      	ldr	r3, [r3, #16]
 80062a6:	f003 0302 	and.w	r3, r3, #2
 80062aa:	2b02      	cmp	r3, #2
 80062ac:	d122      	bne.n	80062f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	f003 0302 	and.w	r3, r3, #2
 80062b8:	2b02      	cmp	r3, #2
 80062ba:	d11b      	bne.n	80062f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f06f 0202 	mvn.w	r2, #2
 80062c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2201      	movs	r2, #1
 80062ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	699b      	ldr	r3, [r3, #24]
 80062d2:	f003 0303 	and.w	r3, r3, #3
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d003      	beq.n	80062e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 f9b5 	bl	800664a <HAL_TIM_IC_CaptureCallback>
 80062e0:	e005      	b.n	80062ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 f9a7 	bl	8006636 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f000 f9b8 	bl	800665e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	f003 0304 	and.w	r3, r3, #4
 80062fe:	2b04      	cmp	r3, #4
 8006300:	d122      	bne.n	8006348 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	f003 0304 	and.w	r3, r3, #4
 800630c:	2b04      	cmp	r3, #4
 800630e:	d11b      	bne.n	8006348 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f06f 0204 	mvn.w	r2, #4
 8006318:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2202      	movs	r2, #2
 800631e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	699b      	ldr	r3, [r3, #24]
 8006326:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800632a:	2b00      	cmp	r3, #0
 800632c:	d003      	beq.n	8006336 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 f98b 	bl	800664a <HAL_TIM_IC_CaptureCallback>
 8006334:	e005      	b.n	8006342 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 f97d 	bl	8006636 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 f98e 	bl	800665e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	f003 0308 	and.w	r3, r3, #8
 8006352:	2b08      	cmp	r3, #8
 8006354:	d122      	bne.n	800639c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	f003 0308 	and.w	r3, r3, #8
 8006360:	2b08      	cmp	r3, #8
 8006362:	d11b      	bne.n	800639c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f06f 0208 	mvn.w	r2, #8
 800636c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2204      	movs	r2, #4
 8006372:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	69db      	ldr	r3, [r3, #28]
 800637a:	f003 0303 	and.w	r3, r3, #3
 800637e:	2b00      	cmp	r3, #0
 8006380:	d003      	beq.n	800638a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 f961 	bl	800664a <HAL_TIM_IC_CaptureCallback>
 8006388:	e005      	b.n	8006396 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 f953 	bl	8006636 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f000 f964 	bl	800665e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2200      	movs	r2, #0
 800639a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	f003 0310 	and.w	r3, r3, #16
 80063a6:	2b10      	cmp	r3, #16
 80063a8:	d122      	bne.n	80063f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	f003 0310 	and.w	r3, r3, #16
 80063b4:	2b10      	cmp	r3, #16
 80063b6:	d11b      	bne.n	80063f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f06f 0210 	mvn.w	r2, #16
 80063c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2208      	movs	r2, #8
 80063c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	69db      	ldr	r3, [r3, #28]
 80063ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d003      	beq.n	80063de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 f937 	bl	800664a <HAL_TIM_IC_CaptureCallback>
 80063dc:	e005      	b.n	80063ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f000 f929 	bl	8006636 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 f93a 	bl	800665e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	f003 0301 	and.w	r3, r3, #1
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d10e      	bne.n	800641c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	f003 0301 	and.w	r3, r3, #1
 8006408:	2b01      	cmp	r3, #1
 800640a:	d107      	bne.n	800641c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f06f 0201 	mvn.w	r2, #1
 8006414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f7fd fef2 	bl	8004200 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	691b      	ldr	r3, [r3, #16]
 8006422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006426:	2b80      	cmp	r3, #128	; 0x80
 8006428:	d10e      	bne.n	8006448 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006434:	2b80      	cmp	r3, #128	; 0x80
 8006436:	d107      	bne.n	8006448 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006440:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f000 fab2 	bl	80069ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006452:	2b40      	cmp	r3, #64	; 0x40
 8006454:	d10e      	bne.n	8006474 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006460:	2b40      	cmp	r3, #64	; 0x40
 8006462:	d107      	bne.n	8006474 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800646c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 f8ff 	bl	8006672 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	f003 0320 	and.w	r3, r3, #32
 800647e:	2b20      	cmp	r3, #32
 8006480:	d10e      	bne.n	80064a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	f003 0320 	and.w	r3, r3, #32
 800648c:	2b20      	cmp	r3, #32
 800648e:	d107      	bne.n	80064a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f06f 0220 	mvn.w	r2, #32
 8006498:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 fa7c 	bl	8006998 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80064a0:	bf00      	nop
 80064a2:	3708      	adds	r7, #8
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}

080064a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b084      	sub	sp, #16
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80064b2:	2300      	movs	r3, #0
 80064b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d101      	bne.n	80064c4 <HAL_TIM_ConfigClockSource+0x1c>
 80064c0:	2302      	movs	r3, #2
 80064c2:	e0b4      	b.n	800662e <HAL_TIM_ConfigClockSource+0x186>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2202      	movs	r2, #2
 80064d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80064e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	68ba      	ldr	r2, [r7, #8]
 80064f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064fc:	d03e      	beq.n	800657c <HAL_TIM_ConfigClockSource+0xd4>
 80064fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006502:	f200 8087 	bhi.w	8006614 <HAL_TIM_ConfigClockSource+0x16c>
 8006506:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800650a:	f000 8086 	beq.w	800661a <HAL_TIM_ConfigClockSource+0x172>
 800650e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006512:	d87f      	bhi.n	8006614 <HAL_TIM_ConfigClockSource+0x16c>
 8006514:	2b70      	cmp	r3, #112	; 0x70
 8006516:	d01a      	beq.n	800654e <HAL_TIM_ConfigClockSource+0xa6>
 8006518:	2b70      	cmp	r3, #112	; 0x70
 800651a:	d87b      	bhi.n	8006614 <HAL_TIM_ConfigClockSource+0x16c>
 800651c:	2b60      	cmp	r3, #96	; 0x60
 800651e:	d050      	beq.n	80065c2 <HAL_TIM_ConfigClockSource+0x11a>
 8006520:	2b60      	cmp	r3, #96	; 0x60
 8006522:	d877      	bhi.n	8006614 <HAL_TIM_ConfigClockSource+0x16c>
 8006524:	2b50      	cmp	r3, #80	; 0x50
 8006526:	d03c      	beq.n	80065a2 <HAL_TIM_ConfigClockSource+0xfa>
 8006528:	2b50      	cmp	r3, #80	; 0x50
 800652a:	d873      	bhi.n	8006614 <HAL_TIM_ConfigClockSource+0x16c>
 800652c:	2b40      	cmp	r3, #64	; 0x40
 800652e:	d058      	beq.n	80065e2 <HAL_TIM_ConfigClockSource+0x13a>
 8006530:	2b40      	cmp	r3, #64	; 0x40
 8006532:	d86f      	bhi.n	8006614 <HAL_TIM_ConfigClockSource+0x16c>
 8006534:	2b30      	cmp	r3, #48	; 0x30
 8006536:	d064      	beq.n	8006602 <HAL_TIM_ConfigClockSource+0x15a>
 8006538:	2b30      	cmp	r3, #48	; 0x30
 800653a:	d86b      	bhi.n	8006614 <HAL_TIM_ConfigClockSource+0x16c>
 800653c:	2b20      	cmp	r3, #32
 800653e:	d060      	beq.n	8006602 <HAL_TIM_ConfigClockSource+0x15a>
 8006540:	2b20      	cmp	r3, #32
 8006542:	d867      	bhi.n	8006614 <HAL_TIM_ConfigClockSource+0x16c>
 8006544:	2b00      	cmp	r3, #0
 8006546:	d05c      	beq.n	8006602 <HAL_TIM_ConfigClockSource+0x15a>
 8006548:	2b10      	cmp	r3, #16
 800654a:	d05a      	beq.n	8006602 <HAL_TIM_ConfigClockSource+0x15a>
 800654c:	e062      	b.n	8006614 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6818      	ldr	r0, [r3, #0]
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	6899      	ldr	r1, [r3, #8]
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	685a      	ldr	r2, [r3, #4]
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	68db      	ldr	r3, [r3, #12]
 800655e:	f000 f98d 	bl	800687c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006570:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	68ba      	ldr	r2, [r7, #8]
 8006578:	609a      	str	r2, [r3, #8]
      break;
 800657a:	e04f      	b.n	800661c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6818      	ldr	r0, [r3, #0]
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	6899      	ldr	r1, [r3, #8]
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	685a      	ldr	r2, [r3, #4]
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	f000 f976 	bl	800687c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	689a      	ldr	r2, [r3, #8]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800659e:	609a      	str	r2, [r3, #8]
      break;
 80065a0:	e03c      	b.n	800661c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6818      	ldr	r0, [r3, #0]
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	6859      	ldr	r1, [r3, #4]
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	68db      	ldr	r3, [r3, #12]
 80065ae:	461a      	mov	r2, r3
 80065b0:	f000 f8ea 	bl	8006788 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2150      	movs	r1, #80	; 0x50
 80065ba:	4618      	mov	r0, r3
 80065bc:	f000 f943 	bl	8006846 <TIM_ITRx_SetConfig>
      break;
 80065c0:	e02c      	b.n	800661c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6818      	ldr	r0, [r3, #0]
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	6859      	ldr	r1, [r3, #4]
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	461a      	mov	r2, r3
 80065d0:	f000 f909 	bl	80067e6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2160      	movs	r1, #96	; 0x60
 80065da:	4618      	mov	r0, r3
 80065dc:	f000 f933 	bl	8006846 <TIM_ITRx_SetConfig>
      break;
 80065e0:	e01c      	b.n	800661c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6818      	ldr	r0, [r3, #0]
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	6859      	ldr	r1, [r3, #4]
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	461a      	mov	r2, r3
 80065f0:	f000 f8ca 	bl	8006788 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	2140      	movs	r1, #64	; 0x40
 80065fa:	4618      	mov	r0, r3
 80065fc:	f000 f923 	bl	8006846 <TIM_ITRx_SetConfig>
      break;
 8006600:	e00c      	b.n	800661c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4619      	mov	r1, r3
 800660c:	4610      	mov	r0, r2
 800660e:	f000 f91a 	bl	8006846 <TIM_ITRx_SetConfig>
      break;
 8006612:	e003      	b.n	800661c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	73fb      	strb	r3, [r7, #15]
      break;
 8006618:	e000      	b.n	800661c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800661a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800662c:	7bfb      	ldrb	r3, [r7, #15]
}
 800662e:	4618      	mov	r0, r3
 8006630:	3710      	adds	r7, #16
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}

08006636 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006636:	b480      	push	{r7}
 8006638:	b083      	sub	sp, #12
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800663e:	bf00      	nop
 8006640:	370c      	adds	r7, #12
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr

0800664a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800664a:	b480      	push	{r7}
 800664c:	b083      	sub	sp, #12
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006652:	bf00      	nop
 8006654:	370c      	adds	r7, #12
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr

0800665e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800665e:	b480      	push	{r7}
 8006660:	b083      	sub	sp, #12
 8006662:	af00      	add	r7, sp, #0
 8006664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006666:	bf00      	nop
 8006668:	370c      	adds	r7, #12
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr

08006672 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006672:	b480      	push	{r7}
 8006674:	b083      	sub	sp, #12
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800667a:	bf00      	nop
 800667c:	370c      	adds	r7, #12
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr
	...

08006688 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006688:	b480      	push	{r7}
 800668a:	b085      	sub	sp, #20
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	4a34      	ldr	r2, [pc, #208]	; (800676c <TIM_Base_SetConfig+0xe4>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d00f      	beq.n	80066c0 <TIM_Base_SetConfig+0x38>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066a6:	d00b      	beq.n	80066c0 <TIM_Base_SetConfig+0x38>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	4a31      	ldr	r2, [pc, #196]	; (8006770 <TIM_Base_SetConfig+0xe8>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d007      	beq.n	80066c0 <TIM_Base_SetConfig+0x38>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4a30      	ldr	r2, [pc, #192]	; (8006774 <TIM_Base_SetConfig+0xec>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d003      	beq.n	80066c0 <TIM_Base_SetConfig+0x38>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	4a2f      	ldr	r2, [pc, #188]	; (8006778 <TIM_Base_SetConfig+0xf0>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d108      	bne.n	80066d2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	68fa      	ldr	r2, [r7, #12]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4a25      	ldr	r2, [pc, #148]	; (800676c <TIM_Base_SetConfig+0xe4>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d01b      	beq.n	8006712 <TIM_Base_SetConfig+0x8a>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066e0:	d017      	beq.n	8006712 <TIM_Base_SetConfig+0x8a>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	4a22      	ldr	r2, [pc, #136]	; (8006770 <TIM_Base_SetConfig+0xe8>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d013      	beq.n	8006712 <TIM_Base_SetConfig+0x8a>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	4a21      	ldr	r2, [pc, #132]	; (8006774 <TIM_Base_SetConfig+0xec>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d00f      	beq.n	8006712 <TIM_Base_SetConfig+0x8a>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	4a20      	ldr	r2, [pc, #128]	; (8006778 <TIM_Base_SetConfig+0xf0>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d00b      	beq.n	8006712 <TIM_Base_SetConfig+0x8a>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	4a1f      	ldr	r2, [pc, #124]	; (800677c <TIM_Base_SetConfig+0xf4>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d007      	beq.n	8006712 <TIM_Base_SetConfig+0x8a>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	4a1e      	ldr	r2, [pc, #120]	; (8006780 <TIM_Base_SetConfig+0xf8>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d003      	beq.n	8006712 <TIM_Base_SetConfig+0x8a>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4a1d      	ldr	r2, [pc, #116]	; (8006784 <TIM_Base_SetConfig+0xfc>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d108      	bne.n	8006724 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006718:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	68fa      	ldr	r2, [r7, #12]
 8006720:	4313      	orrs	r3, r2
 8006722:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	695b      	ldr	r3, [r3, #20]
 800672e:	4313      	orrs	r3, r2
 8006730:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	68fa      	ldr	r2, [r7, #12]
 8006736:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	689a      	ldr	r2, [r3, #8]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4a08      	ldr	r2, [pc, #32]	; (800676c <TIM_Base_SetConfig+0xe4>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d103      	bne.n	8006758 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	691a      	ldr	r2, [r3, #16]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	615a      	str	r2, [r3, #20]
}
 800675e:	bf00      	nop
 8006760:	3714      	adds	r7, #20
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr
 800676a:	bf00      	nop
 800676c:	40010000 	.word	0x40010000
 8006770:	40000400 	.word	0x40000400
 8006774:	40000800 	.word	0x40000800
 8006778:	40000c00 	.word	0x40000c00
 800677c:	40014000 	.word	0x40014000
 8006780:	40014400 	.word	0x40014400
 8006784:	40014800 	.word	0x40014800

08006788 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006788:	b480      	push	{r7}
 800678a:	b087      	sub	sp, #28
 800678c:	af00      	add	r7, sp, #0
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	60b9      	str	r1, [r7, #8]
 8006792:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	6a1b      	ldr	r3, [r3, #32]
 8006798:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	6a1b      	ldr	r3, [r3, #32]
 800679e:	f023 0201 	bic.w	r2, r3, #1
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	699b      	ldr	r3, [r3, #24]
 80067aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80067b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	011b      	lsls	r3, r3, #4
 80067b8:	693a      	ldr	r2, [r7, #16]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	f023 030a 	bic.w	r3, r3, #10
 80067c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80067c6:	697a      	ldr	r2, [r7, #20]
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	4313      	orrs	r3, r2
 80067cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	693a      	ldr	r2, [r7, #16]
 80067d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	697a      	ldr	r2, [r7, #20]
 80067d8:	621a      	str	r2, [r3, #32]
}
 80067da:	bf00      	nop
 80067dc:	371c      	adds	r7, #28
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr

080067e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067e6:	b480      	push	{r7}
 80067e8:	b087      	sub	sp, #28
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	60f8      	str	r0, [r7, #12]
 80067ee:	60b9      	str	r1, [r7, #8]
 80067f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	6a1b      	ldr	r3, [r3, #32]
 80067f6:	f023 0210 	bic.w	r2, r3, #16
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	699b      	ldr	r3, [r3, #24]
 8006802:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6a1b      	ldr	r3, [r3, #32]
 8006808:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006810:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	031b      	lsls	r3, r3, #12
 8006816:	697a      	ldr	r2, [r7, #20]
 8006818:	4313      	orrs	r3, r2
 800681a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006822:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	011b      	lsls	r3, r3, #4
 8006828:	693a      	ldr	r2, [r7, #16]
 800682a:	4313      	orrs	r3, r2
 800682c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	697a      	ldr	r2, [r7, #20]
 8006832:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	693a      	ldr	r2, [r7, #16]
 8006838:	621a      	str	r2, [r3, #32]
}
 800683a:	bf00      	nop
 800683c:	371c      	adds	r7, #28
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr

08006846 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006846:	b480      	push	{r7}
 8006848:	b085      	sub	sp, #20
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
 800684e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800685c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800685e:	683a      	ldr	r2, [r7, #0]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	4313      	orrs	r3, r2
 8006864:	f043 0307 	orr.w	r3, r3, #7
 8006868:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	609a      	str	r2, [r3, #8]
}
 8006870:	bf00      	nop
 8006872:	3714      	adds	r7, #20
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr

0800687c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800687c:	b480      	push	{r7}
 800687e:	b087      	sub	sp, #28
 8006880:	af00      	add	r7, sp, #0
 8006882:	60f8      	str	r0, [r7, #12]
 8006884:	60b9      	str	r1, [r7, #8]
 8006886:	607a      	str	r2, [r7, #4]
 8006888:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006896:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	021a      	lsls	r2, r3, #8
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	431a      	orrs	r2, r3
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	4313      	orrs	r3, r2
 80068a4:	697a      	ldr	r2, [r7, #20]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	697a      	ldr	r2, [r7, #20]
 80068ae:	609a      	str	r2, [r3, #8]
}
 80068b0:	bf00      	nop
 80068b2:	371c      	adds	r7, #28
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr

080068bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068bc:	b480      	push	{r7}
 80068be:	b085      	sub	sp, #20
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d101      	bne.n	80068d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80068d0:	2302      	movs	r3, #2
 80068d2:	e050      	b.n	8006976 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2201      	movs	r2, #1
 80068d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2202      	movs	r2, #2
 80068e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	68fa      	ldr	r2, [r7, #12]
 8006902:	4313      	orrs	r3, r2
 8006904:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	68fa      	ldr	r2, [r7, #12]
 800690c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a1c      	ldr	r2, [pc, #112]	; (8006984 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d018      	beq.n	800694a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006920:	d013      	beq.n	800694a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a18      	ldr	r2, [pc, #96]	; (8006988 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d00e      	beq.n	800694a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a16      	ldr	r2, [pc, #88]	; (800698c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d009      	beq.n	800694a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a15      	ldr	r2, [pc, #84]	; (8006990 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d004      	beq.n	800694a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a13      	ldr	r2, [pc, #76]	; (8006994 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d10c      	bne.n	8006964 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006950:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	68ba      	ldr	r2, [r7, #8]
 8006958:	4313      	orrs	r3, r2
 800695a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	68ba      	ldr	r2, [r7, #8]
 8006962:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2201      	movs	r2, #1
 8006968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006974:	2300      	movs	r3, #0
}
 8006976:	4618      	mov	r0, r3
 8006978:	3714      	adds	r7, #20
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr
 8006982:	bf00      	nop
 8006984:	40010000 	.word	0x40010000
 8006988:	40000400 	.word	0x40000400
 800698c:	40000800 	.word	0x40000800
 8006990:	40000c00 	.word	0x40000c00
 8006994:	40014000 	.word	0x40014000

08006998 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006998:	b480      	push	{r7}
 800699a:	b083      	sub	sp, #12
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069a0:	bf00      	nop
 80069a2:	370c      	adds	r7, #12
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr

080069ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b083      	sub	sp, #12
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80069b4:	bf00      	nop
 80069b6:	370c      	adds	r7, #12
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b082      	sub	sp, #8
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d101      	bne.n	80069d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	e03f      	b.n	8006a52 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d106      	bne.n	80069ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f7fd fcc6 	bl	8004378 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2224      	movs	r2, #36	; 0x24
 80069f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	68da      	ldr	r2, [r3, #12]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f000 fddf 	bl	80075c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	691a      	ldr	r2, [r3, #16]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	695a      	ldr	r2, [r3, #20]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	68da      	ldr	r2, [r3, #12]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2220      	movs	r2, #32
 8006a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2220      	movs	r2, #32
 8006a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3708      	adds	r7, #8
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}

08006a5a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a5a:	b580      	push	{r7, lr}
 8006a5c:	b08a      	sub	sp, #40	; 0x28
 8006a5e:	af02      	add	r7, sp, #8
 8006a60:	60f8      	str	r0, [r7, #12]
 8006a62:	60b9      	str	r1, [r7, #8]
 8006a64:	603b      	str	r3, [r7, #0]
 8006a66:	4613      	mov	r3, r2
 8006a68:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	2b20      	cmp	r3, #32
 8006a78:	d17c      	bne.n	8006b74 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d002      	beq.n	8006a86 <HAL_UART_Transmit+0x2c>
 8006a80:	88fb      	ldrh	r3, [r7, #6]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d101      	bne.n	8006a8a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	e075      	b.n	8006b76 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d101      	bne.n	8006a98 <HAL_UART_Transmit+0x3e>
 8006a94:	2302      	movs	r3, #2
 8006a96:	e06e      	b.n	8006b76 <HAL_UART_Transmit+0x11c>
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2221      	movs	r2, #33	; 0x21
 8006aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006aae:	f7fd fe57 	bl	8004760 <HAL_GetTick>
 8006ab2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	88fa      	ldrh	r2, [r7, #6]
 8006ab8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	88fa      	ldrh	r2, [r7, #6]
 8006abe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ac8:	d108      	bne.n	8006adc <HAL_UART_Transmit+0x82>
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	691b      	ldr	r3, [r3, #16]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d104      	bne.n	8006adc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	61bb      	str	r3, [r7, #24]
 8006ada:	e003      	b.n	8006ae4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006aec:	e02a      	b.n	8006b44 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	9300      	str	r3, [sp, #0]
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	2200      	movs	r2, #0
 8006af6:	2180      	movs	r1, #128	; 0x80
 8006af8:	68f8      	ldr	r0, [r7, #12]
 8006afa:	f000 fb1f 	bl	800713c <UART_WaitOnFlagUntilTimeout>
 8006afe:	4603      	mov	r3, r0
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d001      	beq.n	8006b08 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006b04:	2303      	movs	r3, #3
 8006b06:	e036      	b.n	8006b76 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006b08:	69fb      	ldr	r3, [r7, #28]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d10b      	bne.n	8006b26 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	881b      	ldrh	r3, [r3, #0]
 8006b12:	461a      	mov	r2, r3
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b1c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006b1e:	69bb      	ldr	r3, [r7, #24]
 8006b20:	3302      	adds	r3, #2
 8006b22:	61bb      	str	r3, [r7, #24]
 8006b24:	e007      	b.n	8006b36 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b26:	69fb      	ldr	r3, [r7, #28]
 8006b28:	781a      	ldrb	r2, [r3, #0]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	3301      	adds	r3, #1
 8006b34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	3b01      	subs	r3, #1
 8006b3e:	b29a      	uxth	r2, r3
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d1cf      	bne.n	8006aee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	9300      	str	r3, [sp, #0]
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	2200      	movs	r2, #0
 8006b56:	2140      	movs	r1, #64	; 0x40
 8006b58:	68f8      	ldr	r0, [r7, #12]
 8006b5a:	f000 faef 	bl	800713c <UART_WaitOnFlagUntilTimeout>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d001      	beq.n	8006b68 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006b64:	2303      	movs	r3, #3
 8006b66:	e006      	b.n	8006b76 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2220      	movs	r2, #32
 8006b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006b70:	2300      	movs	r3, #0
 8006b72:	e000      	b.n	8006b76 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006b74:	2302      	movs	r3, #2
  }
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3720      	adds	r7, #32
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}

08006b7e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b7e:	b580      	push	{r7, lr}
 8006b80:	b084      	sub	sp, #16
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	60f8      	str	r0, [r7, #12]
 8006b86:	60b9      	str	r1, [r7, #8]
 8006b88:	4613      	mov	r3, r2
 8006b8a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b92:	b2db      	uxtb	r3, r3
 8006b94:	2b20      	cmp	r3, #32
 8006b96:	d11d      	bne.n	8006bd4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d002      	beq.n	8006ba4 <HAL_UART_Receive_IT+0x26>
 8006b9e:	88fb      	ldrh	r3, [r7, #6]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d101      	bne.n	8006ba8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	e016      	b.n	8006bd6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d101      	bne.n	8006bb6 <HAL_UART_Receive_IT+0x38>
 8006bb2:	2302      	movs	r3, #2
 8006bb4:	e00f      	b.n	8006bd6 <HAL_UART_Receive_IT+0x58>
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2201      	movs	r2, #1
 8006bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006bc4:	88fb      	ldrh	r3, [r7, #6]
 8006bc6:	461a      	mov	r2, r3
 8006bc8:	68b9      	ldr	r1, [r7, #8]
 8006bca:	68f8      	ldr	r0, [r7, #12]
 8006bcc:	f000 fb24 	bl	8007218 <UART_Start_Receive_IT>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	e000      	b.n	8006bd6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006bd4:	2302      	movs	r3, #2
  }
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3710      	adds	r7, #16
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
	...

08006be0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b0ba      	sub	sp, #232	; 0xe8
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	68db      	ldr	r3, [r3, #12]
 8006bf8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	695b      	ldr	r3, [r3, #20]
 8006c02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006c06:	2300      	movs	r3, #0
 8006c08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006c12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c16:	f003 030f 	and.w	r3, r3, #15
 8006c1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006c1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d10f      	bne.n	8006c46 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c2a:	f003 0320 	and.w	r3, r3, #32
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d009      	beq.n	8006c46 <HAL_UART_IRQHandler+0x66>
 8006c32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c36:	f003 0320 	and.w	r3, r3, #32
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d003      	beq.n	8006c46 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 fc07 	bl	8007452 <UART_Receive_IT>
      return;
 8006c44:	e256      	b.n	80070f4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006c46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	f000 80de 	beq.w	8006e0c <HAL_UART_IRQHandler+0x22c>
 8006c50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c54:	f003 0301 	and.w	r3, r3, #1
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d106      	bne.n	8006c6a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006c5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c60:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	f000 80d1 	beq.w	8006e0c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c6e:	f003 0301 	and.w	r3, r3, #1
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d00b      	beq.n	8006c8e <HAL_UART_IRQHandler+0xae>
 8006c76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d005      	beq.n	8006c8e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c86:	f043 0201 	orr.w	r2, r3, #1
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c92:	f003 0304 	and.w	r3, r3, #4
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d00b      	beq.n	8006cb2 <HAL_UART_IRQHandler+0xd2>
 8006c9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c9e:	f003 0301 	and.w	r3, r3, #1
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d005      	beq.n	8006cb2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006caa:	f043 0202 	orr.w	r2, r3, #2
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cb6:	f003 0302 	and.w	r3, r3, #2
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d00b      	beq.n	8006cd6 <HAL_UART_IRQHandler+0xf6>
 8006cbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cc2:	f003 0301 	and.w	r3, r3, #1
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d005      	beq.n	8006cd6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cce:	f043 0204 	orr.w	r2, r3, #4
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cda:	f003 0308 	and.w	r3, r3, #8
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d011      	beq.n	8006d06 <HAL_UART_IRQHandler+0x126>
 8006ce2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ce6:	f003 0320 	and.w	r3, r3, #32
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d105      	bne.n	8006cfa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006cee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cf2:	f003 0301 	and.w	r3, r3, #1
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d005      	beq.n	8006d06 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cfe:	f043 0208 	orr.w	r2, r3, #8
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	f000 81ed 	beq.w	80070ea <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006d10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d14:	f003 0320 	and.w	r3, r3, #32
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d008      	beq.n	8006d2e <HAL_UART_IRQHandler+0x14e>
 8006d1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d20:	f003 0320 	and.w	r3, r3, #32
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d002      	beq.n	8006d2e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f000 fb92 	bl	8007452 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	695b      	ldr	r3, [r3, #20]
 8006d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d38:	2b40      	cmp	r3, #64	; 0x40
 8006d3a:	bf0c      	ite	eq
 8006d3c:	2301      	moveq	r3, #1
 8006d3e:	2300      	movne	r3, #0
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4a:	f003 0308 	and.w	r3, r3, #8
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d103      	bne.n	8006d5a <HAL_UART_IRQHandler+0x17a>
 8006d52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d04f      	beq.n	8006dfa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 fa9a 	bl	8007294 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	695b      	ldr	r3, [r3, #20]
 8006d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d6a:	2b40      	cmp	r3, #64	; 0x40
 8006d6c:	d141      	bne.n	8006df2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	3314      	adds	r3, #20
 8006d74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006d7c:	e853 3f00 	ldrex	r3, [r3]
 8006d80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006d84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	3314      	adds	r3, #20
 8006d96:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006d9a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006d9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006da6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006daa:	e841 2300 	strex	r3, r2, [r1]
 8006dae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006db2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d1d9      	bne.n	8006d6e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d013      	beq.n	8006dea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc6:	4a7d      	ldr	r2, [pc, #500]	; (8006fbc <HAL_UART_IRQHandler+0x3dc>)
 8006dc8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f7fd fe24 	bl	8004a1c <HAL_DMA_Abort_IT>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d016      	beq.n	8006e08 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006de4:	4610      	mov	r0, r2
 8006de6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006de8:	e00e      	b.n	8006e08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 f990 	bl	8007110 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006df0:	e00a      	b.n	8006e08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 f98c 	bl	8007110 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006df8:	e006      	b.n	8006e08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 f988 	bl	8007110 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2200      	movs	r2, #0
 8006e04:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006e06:	e170      	b.n	80070ea <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e08:	bf00      	nop
    return;
 8006e0a:	e16e      	b.n	80070ea <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	f040 814a 	bne.w	80070aa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006e16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e1a:	f003 0310 	and.w	r3, r3, #16
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	f000 8143 	beq.w	80070aa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006e24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e28:	f003 0310 	and.w	r3, r3, #16
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	f000 813c 	beq.w	80070aa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006e32:	2300      	movs	r3, #0
 8006e34:	60bb      	str	r3, [r7, #8]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	60bb      	str	r3, [r7, #8]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	60bb      	str	r3, [r7, #8]
 8006e46:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	695b      	ldr	r3, [r3, #20]
 8006e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e52:	2b40      	cmp	r3, #64	; 0x40
 8006e54:	f040 80b4 	bne.w	8006fc0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006e64:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	f000 8140 	beq.w	80070ee <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006e72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e76:	429a      	cmp	r2, r3
 8006e78:	f080 8139 	bcs.w	80070ee <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e82:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e88:	69db      	ldr	r3, [r3, #28]
 8006e8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e8e:	f000 8088 	beq.w	8006fa2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	330c      	adds	r3, #12
 8006e98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006ea0:	e853 3f00 	ldrex	r3, [r3]
 8006ea4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006ea8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006eac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006eb0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	330c      	adds	r3, #12
 8006eba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006ebe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006ec2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006eca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006ece:	e841 2300 	strex	r3, r2, [r1]
 8006ed2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006ed6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d1d9      	bne.n	8006e92 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	3314      	adds	r3, #20
 8006ee4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ee8:	e853 3f00 	ldrex	r3, [r3]
 8006eec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006eee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ef0:	f023 0301 	bic.w	r3, r3, #1
 8006ef4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	3314      	adds	r3, #20
 8006efe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006f02:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006f06:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f08:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006f0a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006f0e:	e841 2300 	strex	r3, r2, [r1]
 8006f12:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006f14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d1e1      	bne.n	8006ede <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	3314      	adds	r3, #20
 8006f20:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f24:	e853 3f00 	ldrex	r3, [r3]
 8006f28:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006f2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	3314      	adds	r3, #20
 8006f3a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006f3e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006f40:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f42:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006f44:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006f46:	e841 2300 	strex	r3, r2, [r1]
 8006f4a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006f4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d1e3      	bne.n	8006f1a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2220      	movs	r2, #32
 8006f56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	330c      	adds	r3, #12
 8006f66:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f6a:	e853 3f00 	ldrex	r3, [r3]
 8006f6e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006f70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f72:	f023 0310 	bic.w	r3, r3, #16
 8006f76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	330c      	adds	r3, #12
 8006f80:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006f84:	65ba      	str	r2, [r7, #88]	; 0x58
 8006f86:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f88:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006f8a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f8c:	e841 2300 	strex	r3, r2, [r1]
 8006f90:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006f92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d1e3      	bne.n	8006f60 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f7fd fccd 	bl	800493c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	1ad3      	subs	r3, r2, r3
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	4619      	mov	r1, r3
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 f8b6 	bl	8007124 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006fb8:	e099      	b.n	80070ee <HAL_UART_IRQHandler+0x50e>
 8006fba:	bf00      	nop
 8006fbc:	0800735b 	.word	0x0800735b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	1ad3      	subs	r3, r2, r3
 8006fcc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	f000 808b 	beq.w	80070f2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006fdc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	f000 8086 	beq.w	80070f2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	330c      	adds	r3, #12
 8006fec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff0:	e853 3f00 	ldrex	r3, [r3]
 8006ff4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ff8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ffc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	330c      	adds	r3, #12
 8007006:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800700a:	647a      	str	r2, [r7, #68]	; 0x44
 800700c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800700e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007010:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007012:	e841 2300 	strex	r3, r2, [r1]
 8007016:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800701a:	2b00      	cmp	r3, #0
 800701c:	d1e3      	bne.n	8006fe6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	3314      	adds	r3, #20
 8007024:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007028:	e853 3f00 	ldrex	r3, [r3]
 800702c:	623b      	str	r3, [r7, #32]
   return(result);
 800702e:	6a3b      	ldr	r3, [r7, #32]
 8007030:	f023 0301 	bic.w	r3, r3, #1
 8007034:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	3314      	adds	r3, #20
 800703e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007042:	633a      	str	r2, [r7, #48]	; 0x30
 8007044:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007046:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007048:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800704a:	e841 2300 	strex	r3, r2, [r1]
 800704e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007052:	2b00      	cmp	r3, #0
 8007054:	d1e3      	bne.n	800701e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2220      	movs	r2, #32
 800705a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	330c      	adds	r3, #12
 800706a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	e853 3f00 	ldrex	r3, [r3]
 8007072:	60fb      	str	r3, [r7, #12]
   return(result);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f023 0310 	bic.w	r3, r3, #16
 800707a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	330c      	adds	r3, #12
 8007084:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007088:	61fa      	str	r2, [r7, #28]
 800708a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800708c:	69b9      	ldr	r1, [r7, #24]
 800708e:	69fa      	ldr	r2, [r7, #28]
 8007090:	e841 2300 	strex	r3, r2, [r1]
 8007094:	617b      	str	r3, [r7, #20]
   return(result);
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d1e3      	bne.n	8007064 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800709c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80070a0:	4619      	mov	r1, r3
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 f83e 	bl	8007124 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80070a8:	e023      	b.n	80070f2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80070aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d009      	beq.n	80070ca <HAL_UART_IRQHandler+0x4ea>
 80070b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d003      	beq.n	80070ca <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 f95d 	bl	8007382 <UART_Transmit_IT>
    return;
 80070c8:	e014      	b.n	80070f4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80070ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d00e      	beq.n	80070f4 <HAL_UART_IRQHandler+0x514>
 80070d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d008      	beq.n	80070f4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f000 f99d 	bl	8007422 <UART_EndTransmit_IT>
    return;
 80070e8:	e004      	b.n	80070f4 <HAL_UART_IRQHandler+0x514>
    return;
 80070ea:	bf00      	nop
 80070ec:	e002      	b.n	80070f4 <HAL_UART_IRQHandler+0x514>
      return;
 80070ee:	bf00      	nop
 80070f0:	e000      	b.n	80070f4 <HAL_UART_IRQHandler+0x514>
      return;
 80070f2:	bf00      	nop
  }
}
 80070f4:	37e8      	adds	r7, #232	; 0xe8
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop

080070fc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b083      	sub	sp, #12
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007104:	bf00      	nop
 8007106:	370c      	adds	r7, #12
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr

08007110 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007110:	b480      	push	{r7}
 8007112:	b083      	sub	sp, #12
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007118:	bf00      	nop
 800711a:	370c      	adds	r7, #12
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr

08007124 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007124:	b480      	push	{r7}
 8007126:	b083      	sub	sp, #12
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	460b      	mov	r3, r1
 800712e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007130:	bf00      	nop
 8007132:	370c      	adds	r7, #12
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr

0800713c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b090      	sub	sp, #64	; 0x40
 8007140:	af00      	add	r7, sp, #0
 8007142:	60f8      	str	r0, [r7, #12]
 8007144:	60b9      	str	r1, [r7, #8]
 8007146:	603b      	str	r3, [r7, #0]
 8007148:	4613      	mov	r3, r2
 800714a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800714c:	e050      	b.n	80071f0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800714e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007154:	d04c      	beq.n	80071f0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007156:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007158:	2b00      	cmp	r3, #0
 800715a:	d007      	beq.n	800716c <UART_WaitOnFlagUntilTimeout+0x30>
 800715c:	f7fd fb00 	bl	8004760 <HAL_GetTick>
 8007160:	4602      	mov	r2, r0
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	1ad3      	subs	r3, r2, r3
 8007166:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007168:	429a      	cmp	r2, r3
 800716a:	d241      	bcs.n	80071f0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	330c      	adds	r3, #12
 8007172:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007176:	e853 3f00 	ldrex	r3, [r3]
 800717a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800717c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007182:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	330c      	adds	r3, #12
 800718a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800718c:	637a      	str	r2, [r7, #52]	; 0x34
 800718e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007190:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007192:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007194:	e841 2300 	strex	r3, r2, [r1]
 8007198:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800719a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800719c:	2b00      	cmp	r3, #0
 800719e:	d1e5      	bne.n	800716c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	3314      	adds	r3, #20
 80071a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	e853 3f00 	ldrex	r3, [r3]
 80071ae:	613b      	str	r3, [r7, #16]
   return(result);
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	f023 0301 	bic.w	r3, r3, #1
 80071b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	3314      	adds	r3, #20
 80071be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071c0:	623a      	str	r2, [r7, #32]
 80071c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c4:	69f9      	ldr	r1, [r7, #28]
 80071c6:	6a3a      	ldr	r2, [r7, #32]
 80071c8:	e841 2300 	strex	r3, r2, [r1]
 80071cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80071ce:	69bb      	ldr	r3, [r7, #24]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d1e5      	bne.n	80071a0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2220      	movs	r2, #32
 80071d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2220      	movs	r2, #32
 80071e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2200      	movs	r2, #0
 80071e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80071ec:	2303      	movs	r3, #3
 80071ee:	e00f      	b.n	8007210 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	681a      	ldr	r2, [r3, #0]
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	4013      	ands	r3, r2
 80071fa:	68ba      	ldr	r2, [r7, #8]
 80071fc:	429a      	cmp	r2, r3
 80071fe:	bf0c      	ite	eq
 8007200:	2301      	moveq	r3, #1
 8007202:	2300      	movne	r3, #0
 8007204:	b2db      	uxtb	r3, r3
 8007206:	461a      	mov	r2, r3
 8007208:	79fb      	ldrb	r3, [r7, #7]
 800720a:	429a      	cmp	r2, r3
 800720c:	d09f      	beq.n	800714e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800720e:	2300      	movs	r3, #0
}
 8007210:	4618      	mov	r0, r3
 8007212:	3740      	adds	r7, #64	; 0x40
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007218:	b480      	push	{r7}
 800721a:	b085      	sub	sp, #20
 800721c:	af00      	add	r7, sp, #0
 800721e:	60f8      	str	r0, [r7, #12]
 8007220:	60b9      	str	r1, [r7, #8]
 8007222:	4613      	mov	r3, r2
 8007224:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	68ba      	ldr	r2, [r7, #8]
 800722a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	88fa      	ldrh	r2, [r7, #6]
 8007230:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	88fa      	ldrh	r2, [r7, #6]
 8007236:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2200      	movs	r2, #0
 800723c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2222      	movs	r2, #34	; 0x22
 8007242:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2200      	movs	r2, #0
 800724a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d007      	beq.n	8007266 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	68da      	ldr	r2, [r3, #12]
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007264:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	695a      	ldr	r2, [r3, #20]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f042 0201 	orr.w	r2, r2, #1
 8007274:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	68da      	ldr	r2, [r3, #12]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f042 0220 	orr.w	r2, r2, #32
 8007284:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007286:	2300      	movs	r3, #0
}
 8007288:	4618      	mov	r0, r3
 800728a:	3714      	adds	r7, #20
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr

08007294 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007294:	b480      	push	{r7}
 8007296:	b095      	sub	sp, #84	; 0x54
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	330c      	adds	r3, #12
 80072a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072a6:	e853 3f00 	ldrex	r3, [r3]
 80072aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80072ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80072b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	330c      	adds	r3, #12
 80072ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80072bc:	643a      	str	r2, [r7, #64]	; 0x40
 80072be:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80072c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80072c4:	e841 2300 	strex	r3, r2, [r1]
 80072c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80072ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d1e5      	bne.n	800729c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	3314      	adds	r3, #20
 80072d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d8:	6a3b      	ldr	r3, [r7, #32]
 80072da:	e853 3f00 	ldrex	r3, [r3]
 80072de:	61fb      	str	r3, [r7, #28]
   return(result);
 80072e0:	69fb      	ldr	r3, [r7, #28]
 80072e2:	f023 0301 	bic.w	r3, r3, #1
 80072e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	3314      	adds	r3, #20
 80072ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80072f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072f8:	e841 2300 	strex	r3, r2, [r1]
 80072fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80072fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007300:	2b00      	cmp	r3, #0
 8007302:	d1e5      	bne.n	80072d0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007308:	2b01      	cmp	r3, #1
 800730a:	d119      	bne.n	8007340 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	330c      	adds	r3, #12
 8007312:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	e853 3f00 	ldrex	r3, [r3]
 800731a:	60bb      	str	r3, [r7, #8]
   return(result);
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	f023 0310 	bic.w	r3, r3, #16
 8007322:	647b      	str	r3, [r7, #68]	; 0x44
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	330c      	adds	r3, #12
 800732a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800732c:	61ba      	str	r2, [r7, #24]
 800732e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007330:	6979      	ldr	r1, [r7, #20]
 8007332:	69ba      	ldr	r2, [r7, #24]
 8007334:	e841 2300 	strex	r3, r2, [r1]
 8007338:	613b      	str	r3, [r7, #16]
   return(result);
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d1e5      	bne.n	800730c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2220      	movs	r2, #32
 8007344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800734e:	bf00      	nop
 8007350:	3754      	adds	r7, #84	; 0x54
 8007352:	46bd      	mov	sp, r7
 8007354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007358:	4770      	bx	lr

0800735a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800735a:	b580      	push	{r7, lr}
 800735c:	b084      	sub	sp, #16
 800735e:	af00      	add	r7, sp, #0
 8007360:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007366:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2200      	movs	r2, #0
 800736c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2200      	movs	r2, #0
 8007372:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007374:	68f8      	ldr	r0, [r7, #12]
 8007376:	f7ff fecb 	bl	8007110 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800737a:	bf00      	nop
 800737c:	3710      	adds	r7, #16
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}

08007382 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007382:	b480      	push	{r7}
 8007384:	b085      	sub	sp, #20
 8007386:	af00      	add	r7, sp, #0
 8007388:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007390:	b2db      	uxtb	r3, r3
 8007392:	2b21      	cmp	r3, #33	; 0x21
 8007394:	d13e      	bne.n	8007414 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800739e:	d114      	bne.n	80073ca <UART_Transmit_IT+0x48>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	691b      	ldr	r3, [r3, #16]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d110      	bne.n	80073ca <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6a1b      	ldr	r3, [r3, #32]
 80073ac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	881b      	ldrh	r3, [r3, #0]
 80073b2:	461a      	mov	r2, r3
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073bc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6a1b      	ldr	r3, [r3, #32]
 80073c2:	1c9a      	adds	r2, r3, #2
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	621a      	str	r2, [r3, #32]
 80073c8:	e008      	b.n	80073dc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6a1b      	ldr	r3, [r3, #32]
 80073ce:	1c59      	adds	r1, r3, #1
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	6211      	str	r1, [r2, #32]
 80073d4:	781a      	ldrb	r2, [r3, #0]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	3b01      	subs	r3, #1
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	687a      	ldr	r2, [r7, #4]
 80073e8:	4619      	mov	r1, r3
 80073ea:	84d1      	strh	r1, [r2, #38]	; 0x26
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d10f      	bne.n	8007410 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	68da      	ldr	r2, [r3, #12]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80073fe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	68da      	ldr	r2, [r3, #12]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800740e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007410:	2300      	movs	r3, #0
 8007412:	e000      	b.n	8007416 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007414:	2302      	movs	r3, #2
  }
}
 8007416:	4618      	mov	r0, r3
 8007418:	3714      	adds	r7, #20
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr

08007422 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007422:	b580      	push	{r7, lr}
 8007424:	b082      	sub	sp, #8
 8007426:	af00      	add	r7, sp, #0
 8007428:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	68da      	ldr	r2, [r3, #12]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007438:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2220      	movs	r2, #32
 800743e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f7ff fe5a 	bl	80070fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007448:	2300      	movs	r3, #0
}
 800744a:	4618      	mov	r0, r3
 800744c:	3708      	adds	r7, #8
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}

08007452 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007452:	b580      	push	{r7, lr}
 8007454:	b08c      	sub	sp, #48	; 0x30
 8007456:	af00      	add	r7, sp, #0
 8007458:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007460:	b2db      	uxtb	r3, r3
 8007462:	2b22      	cmp	r3, #34	; 0x22
 8007464:	f040 80ab 	bne.w	80075be <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007470:	d117      	bne.n	80074a2 <UART_Receive_IT+0x50>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	691b      	ldr	r3, [r3, #16]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d113      	bne.n	80074a2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800747a:	2300      	movs	r3, #0
 800747c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007482:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	b29b      	uxth	r3, r3
 800748c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007490:	b29a      	uxth	r2, r3
 8007492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007494:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800749a:	1c9a      	adds	r2, r3, #2
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	629a      	str	r2, [r3, #40]	; 0x28
 80074a0:	e026      	b.n	80074f0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80074a8:	2300      	movs	r3, #0
 80074aa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074b4:	d007      	beq.n	80074c6 <UART_Receive_IT+0x74>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	689b      	ldr	r3, [r3, #8]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d10a      	bne.n	80074d4 <UART_Receive_IT+0x82>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	691b      	ldr	r3, [r3, #16]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d106      	bne.n	80074d4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	b2da      	uxtb	r2, r3
 80074ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074d0:	701a      	strb	r2, [r3, #0]
 80074d2:	e008      	b.n	80074e6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	b2db      	uxtb	r3, r3
 80074dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074e0:	b2da      	uxtb	r2, r3
 80074e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ea:	1c5a      	adds	r2, r3, #1
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	3b01      	subs	r3, #1
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	4619      	mov	r1, r3
 80074fe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007500:	2b00      	cmp	r3, #0
 8007502:	d15a      	bne.n	80075ba <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	68da      	ldr	r2, [r3, #12]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f022 0220 	bic.w	r2, r2, #32
 8007512:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	68da      	ldr	r2, [r3, #12]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007522:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	695a      	ldr	r2, [r3, #20]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f022 0201 	bic.w	r2, r2, #1
 8007532:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2220      	movs	r2, #32
 8007538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007540:	2b01      	cmp	r3, #1
 8007542:	d135      	bne.n	80075b0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	330c      	adds	r3, #12
 8007550:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	e853 3f00 	ldrex	r3, [r3]
 8007558:	613b      	str	r3, [r7, #16]
   return(result);
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	f023 0310 	bic.w	r3, r3, #16
 8007560:	627b      	str	r3, [r7, #36]	; 0x24
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	330c      	adds	r3, #12
 8007568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800756a:	623a      	str	r2, [r7, #32]
 800756c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800756e:	69f9      	ldr	r1, [r7, #28]
 8007570:	6a3a      	ldr	r2, [r7, #32]
 8007572:	e841 2300 	strex	r3, r2, [r1]
 8007576:	61bb      	str	r3, [r7, #24]
   return(result);
 8007578:	69bb      	ldr	r3, [r7, #24]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d1e5      	bne.n	800754a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f003 0310 	and.w	r3, r3, #16
 8007588:	2b10      	cmp	r3, #16
 800758a:	d10a      	bne.n	80075a2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800758c:	2300      	movs	r3, #0
 800758e:	60fb      	str	r3, [r7, #12]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	60fb      	str	r3, [r7, #12]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	60fb      	str	r3, [r7, #12]
 80075a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80075a6:	4619      	mov	r1, r3
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f7ff fdbb 	bl	8007124 <HAL_UARTEx_RxEventCallback>
 80075ae:	e002      	b.n	80075b6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f7fb fad9 	bl	8002b68 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80075b6:	2300      	movs	r3, #0
 80075b8:	e002      	b.n	80075c0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80075ba:	2300      	movs	r3, #0
 80075bc:	e000      	b.n	80075c0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80075be:	2302      	movs	r3, #2
  }
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3730      	adds	r7, #48	; 0x30
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80075c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80075cc:	b0c0      	sub	sp, #256	; 0x100
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	691b      	ldr	r3, [r3, #16]
 80075dc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80075e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075e4:	68d9      	ldr	r1, [r3, #12]
 80075e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075ea:	681a      	ldr	r2, [r3, #0]
 80075ec:	ea40 0301 	orr.w	r3, r0, r1
 80075f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80075f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075f6:	689a      	ldr	r2, [r3, #8]
 80075f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075fc:	691b      	ldr	r3, [r3, #16]
 80075fe:	431a      	orrs	r2, r3
 8007600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007604:	695b      	ldr	r3, [r3, #20]
 8007606:	431a      	orrs	r2, r3
 8007608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800760c:	69db      	ldr	r3, [r3, #28]
 800760e:	4313      	orrs	r3, r2
 8007610:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	68db      	ldr	r3, [r3, #12]
 800761c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007620:	f021 010c 	bic.w	r1, r1, #12
 8007624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007628:	681a      	ldr	r2, [r3, #0]
 800762a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800762e:	430b      	orrs	r3, r1
 8007630:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007632:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	695b      	ldr	r3, [r3, #20]
 800763a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800763e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007642:	6999      	ldr	r1, [r3, #24]
 8007644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	ea40 0301 	orr.w	r3, r0, r1
 800764e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007654:	681a      	ldr	r2, [r3, #0]
 8007656:	4b8f      	ldr	r3, [pc, #572]	; (8007894 <UART_SetConfig+0x2cc>)
 8007658:	429a      	cmp	r2, r3
 800765a:	d005      	beq.n	8007668 <UART_SetConfig+0xa0>
 800765c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	4b8d      	ldr	r3, [pc, #564]	; (8007898 <UART_SetConfig+0x2d0>)
 8007664:	429a      	cmp	r2, r3
 8007666:	d104      	bne.n	8007672 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007668:	f7fe f81c 	bl	80056a4 <HAL_RCC_GetPCLK2Freq>
 800766c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007670:	e003      	b.n	800767a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007672:	f7fe f803 	bl	800567c <HAL_RCC_GetPCLK1Freq>
 8007676:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800767a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800767e:	69db      	ldr	r3, [r3, #28]
 8007680:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007684:	f040 810c 	bne.w	80078a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007688:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800768c:	2200      	movs	r2, #0
 800768e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007692:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007696:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800769a:	4622      	mov	r2, r4
 800769c:	462b      	mov	r3, r5
 800769e:	1891      	adds	r1, r2, r2
 80076a0:	65b9      	str	r1, [r7, #88]	; 0x58
 80076a2:	415b      	adcs	r3, r3
 80076a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80076a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80076aa:	4621      	mov	r1, r4
 80076ac:	eb12 0801 	adds.w	r8, r2, r1
 80076b0:	4629      	mov	r1, r5
 80076b2:	eb43 0901 	adc.w	r9, r3, r1
 80076b6:	f04f 0200 	mov.w	r2, #0
 80076ba:	f04f 0300 	mov.w	r3, #0
 80076be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80076c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80076c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80076ca:	4690      	mov	r8, r2
 80076cc:	4699      	mov	r9, r3
 80076ce:	4623      	mov	r3, r4
 80076d0:	eb18 0303 	adds.w	r3, r8, r3
 80076d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80076d8:	462b      	mov	r3, r5
 80076da:	eb49 0303 	adc.w	r3, r9, r3
 80076de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80076e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80076ee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80076f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80076f6:	460b      	mov	r3, r1
 80076f8:	18db      	adds	r3, r3, r3
 80076fa:	653b      	str	r3, [r7, #80]	; 0x50
 80076fc:	4613      	mov	r3, r2
 80076fe:	eb42 0303 	adc.w	r3, r2, r3
 8007702:	657b      	str	r3, [r7, #84]	; 0x54
 8007704:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007708:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800770c:	f7f9 f966 	bl	80009dc <__aeabi_uldivmod>
 8007710:	4602      	mov	r2, r0
 8007712:	460b      	mov	r3, r1
 8007714:	4b61      	ldr	r3, [pc, #388]	; (800789c <UART_SetConfig+0x2d4>)
 8007716:	fba3 2302 	umull	r2, r3, r3, r2
 800771a:	095b      	lsrs	r3, r3, #5
 800771c:	011c      	lsls	r4, r3, #4
 800771e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007722:	2200      	movs	r2, #0
 8007724:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007728:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800772c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007730:	4642      	mov	r2, r8
 8007732:	464b      	mov	r3, r9
 8007734:	1891      	adds	r1, r2, r2
 8007736:	64b9      	str	r1, [r7, #72]	; 0x48
 8007738:	415b      	adcs	r3, r3
 800773a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800773c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007740:	4641      	mov	r1, r8
 8007742:	eb12 0a01 	adds.w	sl, r2, r1
 8007746:	4649      	mov	r1, r9
 8007748:	eb43 0b01 	adc.w	fp, r3, r1
 800774c:	f04f 0200 	mov.w	r2, #0
 8007750:	f04f 0300 	mov.w	r3, #0
 8007754:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007758:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800775c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007760:	4692      	mov	sl, r2
 8007762:	469b      	mov	fp, r3
 8007764:	4643      	mov	r3, r8
 8007766:	eb1a 0303 	adds.w	r3, sl, r3
 800776a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800776e:	464b      	mov	r3, r9
 8007770:	eb4b 0303 	adc.w	r3, fp, r3
 8007774:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	2200      	movs	r2, #0
 8007780:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007784:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007788:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800778c:	460b      	mov	r3, r1
 800778e:	18db      	adds	r3, r3, r3
 8007790:	643b      	str	r3, [r7, #64]	; 0x40
 8007792:	4613      	mov	r3, r2
 8007794:	eb42 0303 	adc.w	r3, r2, r3
 8007798:	647b      	str	r3, [r7, #68]	; 0x44
 800779a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800779e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80077a2:	f7f9 f91b 	bl	80009dc <__aeabi_uldivmod>
 80077a6:	4602      	mov	r2, r0
 80077a8:	460b      	mov	r3, r1
 80077aa:	4611      	mov	r1, r2
 80077ac:	4b3b      	ldr	r3, [pc, #236]	; (800789c <UART_SetConfig+0x2d4>)
 80077ae:	fba3 2301 	umull	r2, r3, r3, r1
 80077b2:	095b      	lsrs	r3, r3, #5
 80077b4:	2264      	movs	r2, #100	; 0x64
 80077b6:	fb02 f303 	mul.w	r3, r2, r3
 80077ba:	1acb      	subs	r3, r1, r3
 80077bc:	00db      	lsls	r3, r3, #3
 80077be:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80077c2:	4b36      	ldr	r3, [pc, #216]	; (800789c <UART_SetConfig+0x2d4>)
 80077c4:	fba3 2302 	umull	r2, r3, r3, r2
 80077c8:	095b      	lsrs	r3, r3, #5
 80077ca:	005b      	lsls	r3, r3, #1
 80077cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80077d0:	441c      	add	r4, r3
 80077d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80077d6:	2200      	movs	r2, #0
 80077d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80077dc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80077e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80077e4:	4642      	mov	r2, r8
 80077e6:	464b      	mov	r3, r9
 80077e8:	1891      	adds	r1, r2, r2
 80077ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80077ec:	415b      	adcs	r3, r3
 80077ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80077f4:	4641      	mov	r1, r8
 80077f6:	1851      	adds	r1, r2, r1
 80077f8:	6339      	str	r1, [r7, #48]	; 0x30
 80077fa:	4649      	mov	r1, r9
 80077fc:	414b      	adcs	r3, r1
 80077fe:	637b      	str	r3, [r7, #52]	; 0x34
 8007800:	f04f 0200 	mov.w	r2, #0
 8007804:	f04f 0300 	mov.w	r3, #0
 8007808:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800780c:	4659      	mov	r1, fp
 800780e:	00cb      	lsls	r3, r1, #3
 8007810:	4651      	mov	r1, sl
 8007812:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007816:	4651      	mov	r1, sl
 8007818:	00ca      	lsls	r2, r1, #3
 800781a:	4610      	mov	r0, r2
 800781c:	4619      	mov	r1, r3
 800781e:	4603      	mov	r3, r0
 8007820:	4642      	mov	r2, r8
 8007822:	189b      	adds	r3, r3, r2
 8007824:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007828:	464b      	mov	r3, r9
 800782a:	460a      	mov	r2, r1
 800782c:	eb42 0303 	adc.w	r3, r2, r3
 8007830:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	2200      	movs	r2, #0
 800783c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007840:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007844:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007848:	460b      	mov	r3, r1
 800784a:	18db      	adds	r3, r3, r3
 800784c:	62bb      	str	r3, [r7, #40]	; 0x28
 800784e:	4613      	mov	r3, r2
 8007850:	eb42 0303 	adc.w	r3, r2, r3
 8007854:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007856:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800785a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800785e:	f7f9 f8bd 	bl	80009dc <__aeabi_uldivmod>
 8007862:	4602      	mov	r2, r0
 8007864:	460b      	mov	r3, r1
 8007866:	4b0d      	ldr	r3, [pc, #52]	; (800789c <UART_SetConfig+0x2d4>)
 8007868:	fba3 1302 	umull	r1, r3, r3, r2
 800786c:	095b      	lsrs	r3, r3, #5
 800786e:	2164      	movs	r1, #100	; 0x64
 8007870:	fb01 f303 	mul.w	r3, r1, r3
 8007874:	1ad3      	subs	r3, r2, r3
 8007876:	00db      	lsls	r3, r3, #3
 8007878:	3332      	adds	r3, #50	; 0x32
 800787a:	4a08      	ldr	r2, [pc, #32]	; (800789c <UART_SetConfig+0x2d4>)
 800787c:	fba2 2303 	umull	r2, r3, r2, r3
 8007880:	095b      	lsrs	r3, r3, #5
 8007882:	f003 0207 	and.w	r2, r3, #7
 8007886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4422      	add	r2, r4
 800788e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007890:	e105      	b.n	8007a9e <UART_SetConfig+0x4d6>
 8007892:	bf00      	nop
 8007894:	40011000 	.word	0x40011000
 8007898:	40011400 	.word	0x40011400
 800789c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80078a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078a4:	2200      	movs	r2, #0
 80078a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80078aa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80078ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80078b2:	4642      	mov	r2, r8
 80078b4:	464b      	mov	r3, r9
 80078b6:	1891      	adds	r1, r2, r2
 80078b8:	6239      	str	r1, [r7, #32]
 80078ba:	415b      	adcs	r3, r3
 80078bc:	627b      	str	r3, [r7, #36]	; 0x24
 80078be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80078c2:	4641      	mov	r1, r8
 80078c4:	1854      	adds	r4, r2, r1
 80078c6:	4649      	mov	r1, r9
 80078c8:	eb43 0501 	adc.w	r5, r3, r1
 80078cc:	f04f 0200 	mov.w	r2, #0
 80078d0:	f04f 0300 	mov.w	r3, #0
 80078d4:	00eb      	lsls	r3, r5, #3
 80078d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80078da:	00e2      	lsls	r2, r4, #3
 80078dc:	4614      	mov	r4, r2
 80078de:	461d      	mov	r5, r3
 80078e0:	4643      	mov	r3, r8
 80078e2:	18e3      	adds	r3, r4, r3
 80078e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80078e8:	464b      	mov	r3, r9
 80078ea:	eb45 0303 	adc.w	r3, r5, r3
 80078ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80078f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	2200      	movs	r2, #0
 80078fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80078fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007902:	f04f 0200 	mov.w	r2, #0
 8007906:	f04f 0300 	mov.w	r3, #0
 800790a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800790e:	4629      	mov	r1, r5
 8007910:	008b      	lsls	r3, r1, #2
 8007912:	4621      	mov	r1, r4
 8007914:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007918:	4621      	mov	r1, r4
 800791a:	008a      	lsls	r2, r1, #2
 800791c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007920:	f7f9 f85c 	bl	80009dc <__aeabi_uldivmod>
 8007924:	4602      	mov	r2, r0
 8007926:	460b      	mov	r3, r1
 8007928:	4b60      	ldr	r3, [pc, #384]	; (8007aac <UART_SetConfig+0x4e4>)
 800792a:	fba3 2302 	umull	r2, r3, r3, r2
 800792e:	095b      	lsrs	r3, r3, #5
 8007930:	011c      	lsls	r4, r3, #4
 8007932:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007936:	2200      	movs	r2, #0
 8007938:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800793c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007940:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007944:	4642      	mov	r2, r8
 8007946:	464b      	mov	r3, r9
 8007948:	1891      	adds	r1, r2, r2
 800794a:	61b9      	str	r1, [r7, #24]
 800794c:	415b      	adcs	r3, r3
 800794e:	61fb      	str	r3, [r7, #28]
 8007950:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007954:	4641      	mov	r1, r8
 8007956:	1851      	adds	r1, r2, r1
 8007958:	6139      	str	r1, [r7, #16]
 800795a:	4649      	mov	r1, r9
 800795c:	414b      	adcs	r3, r1
 800795e:	617b      	str	r3, [r7, #20]
 8007960:	f04f 0200 	mov.w	r2, #0
 8007964:	f04f 0300 	mov.w	r3, #0
 8007968:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800796c:	4659      	mov	r1, fp
 800796e:	00cb      	lsls	r3, r1, #3
 8007970:	4651      	mov	r1, sl
 8007972:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007976:	4651      	mov	r1, sl
 8007978:	00ca      	lsls	r2, r1, #3
 800797a:	4610      	mov	r0, r2
 800797c:	4619      	mov	r1, r3
 800797e:	4603      	mov	r3, r0
 8007980:	4642      	mov	r2, r8
 8007982:	189b      	adds	r3, r3, r2
 8007984:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007988:	464b      	mov	r3, r9
 800798a:	460a      	mov	r2, r1
 800798c:	eb42 0303 	adc.w	r3, r2, r3
 8007990:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	67bb      	str	r3, [r7, #120]	; 0x78
 800799e:	67fa      	str	r2, [r7, #124]	; 0x7c
 80079a0:	f04f 0200 	mov.w	r2, #0
 80079a4:	f04f 0300 	mov.w	r3, #0
 80079a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80079ac:	4649      	mov	r1, r9
 80079ae:	008b      	lsls	r3, r1, #2
 80079b0:	4641      	mov	r1, r8
 80079b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80079b6:	4641      	mov	r1, r8
 80079b8:	008a      	lsls	r2, r1, #2
 80079ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80079be:	f7f9 f80d 	bl	80009dc <__aeabi_uldivmod>
 80079c2:	4602      	mov	r2, r0
 80079c4:	460b      	mov	r3, r1
 80079c6:	4b39      	ldr	r3, [pc, #228]	; (8007aac <UART_SetConfig+0x4e4>)
 80079c8:	fba3 1302 	umull	r1, r3, r3, r2
 80079cc:	095b      	lsrs	r3, r3, #5
 80079ce:	2164      	movs	r1, #100	; 0x64
 80079d0:	fb01 f303 	mul.w	r3, r1, r3
 80079d4:	1ad3      	subs	r3, r2, r3
 80079d6:	011b      	lsls	r3, r3, #4
 80079d8:	3332      	adds	r3, #50	; 0x32
 80079da:	4a34      	ldr	r2, [pc, #208]	; (8007aac <UART_SetConfig+0x4e4>)
 80079dc:	fba2 2303 	umull	r2, r3, r2, r3
 80079e0:	095b      	lsrs	r3, r3, #5
 80079e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80079e6:	441c      	add	r4, r3
 80079e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079ec:	2200      	movs	r2, #0
 80079ee:	673b      	str	r3, [r7, #112]	; 0x70
 80079f0:	677a      	str	r2, [r7, #116]	; 0x74
 80079f2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80079f6:	4642      	mov	r2, r8
 80079f8:	464b      	mov	r3, r9
 80079fa:	1891      	adds	r1, r2, r2
 80079fc:	60b9      	str	r1, [r7, #8]
 80079fe:	415b      	adcs	r3, r3
 8007a00:	60fb      	str	r3, [r7, #12]
 8007a02:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007a06:	4641      	mov	r1, r8
 8007a08:	1851      	adds	r1, r2, r1
 8007a0a:	6039      	str	r1, [r7, #0]
 8007a0c:	4649      	mov	r1, r9
 8007a0e:	414b      	adcs	r3, r1
 8007a10:	607b      	str	r3, [r7, #4]
 8007a12:	f04f 0200 	mov.w	r2, #0
 8007a16:	f04f 0300 	mov.w	r3, #0
 8007a1a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007a1e:	4659      	mov	r1, fp
 8007a20:	00cb      	lsls	r3, r1, #3
 8007a22:	4651      	mov	r1, sl
 8007a24:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a28:	4651      	mov	r1, sl
 8007a2a:	00ca      	lsls	r2, r1, #3
 8007a2c:	4610      	mov	r0, r2
 8007a2e:	4619      	mov	r1, r3
 8007a30:	4603      	mov	r3, r0
 8007a32:	4642      	mov	r2, r8
 8007a34:	189b      	adds	r3, r3, r2
 8007a36:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a38:	464b      	mov	r3, r9
 8007a3a:	460a      	mov	r2, r1
 8007a3c:	eb42 0303 	adc.w	r3, r2, r3
 8007a40:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	663b      	str	r3, [r7, #96]	; 0x60
 8007a4c:	667a      	str	r2, [r7, #100]	; 0x64
 8007a4e:	f04f 0200 	mov.w	r2, #0
 8007a52:	f04f 0300 	mov.w	r3, #0
 8007a56:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007a5a:	4649      	mov	r1, r9
 8007a5c:	008b      	lsls	r3, r1, #2
 8007a5e:	4641      	mov	r1, r8
 8007a60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a64:	4641      	mov	r1, r8
 8007a66:	008a      	lsls	r2, r1, #2
 8007a68:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007a6c:	f7f8 ffb6 	bl	80009dc <__aeabi_uldivmod>
 8007a70:	4602      	mov	r2, r0
 8007a72:	460b      	mov	r3, r1
 8007a74:	4b0d      	ldr	r3, [pc, #52]	; (8007aac <UART_SetConfig+0x4e4>)
 8007a76:	fba3 1302 	umull	r1, r3, r3, r2
 8007a7a:	095b      	lsrs	r3, r3, #5
 8007a7c:	2164      	movs	r1, #100	; 0x64
 8007a7e:	fb01 f303 	mul.w	r3, r1, r3
 8007a82:	1ad3      	subs	r3, r2, r3
 8007a84:	011b      	lsls	r3, r3, #4
 8007a86:	3332      	adds	r3, #50	; 0x32
 8007a88:	4a08      	ldr	r2, [pc, #32]	; (8007aac <UART_SetConfig+0x4e4>)
 8007a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8007a8e:	095b      	lsrs	r3, r3, #5
 8007a90:	f003 020f 	and.w	r2, r3, #15
 8007a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4422      	add	r2, r4
 8007a9c:	609a      	str	r2, [r3, #8]
}
 8007a9e:	bf00      	nop
 8007aa0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007aaa:	bf00      	nop
 8007aac:	51eb851f 	.word	0x51eb851f

08007ab0 <__NVIC_SetPriority>:
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b083      	sub	sp, #12
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	6039      	str	r1, [r7, #0]
 8007aba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	db0a      	blt.n	8007ada <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	b2da      	uxtb	r2, r3
 8007ac8:	490c      	ldr	r1, [pc, #48]	; (8007afc <__NVIC_SetPriority+0x4c>)
 8007aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ace:	0112      	lsls	r2, r2, #4
 8007ad0:	b2d2      	uxtb	r2, r2
 8007ad2:	440b      	add	r3, r1
 8007ad4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007ad8:	e00a      	b.n	8007af0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	b2da      	uxtb	r2, r3
 8007ade:	4908      	ldr	r1, [pc, #32]	; (8007b00 <__NVIC_SetPriority+0x50>)
 8007ae0:	79fb      	ldrb	r3, [r7, #7]
 8007ae2:	f003 030f 	and.w	r3, r3, #15
 8007ae6:	3b04      	subs	r3, #4
 8007ae8:	0112      	lsls	r2, r2, #4
 8007aea:	b2d2      	uxtb	r2, r2
 8007aec:	440b      	add	r3, r1
 8007aee:	761a      	strb	r2, [r3, #24]
}
 8007af0:	bf00      	nop
 8007af2:	370c      	adds	r7, #12
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr
 8007afc:	e000e100 	.word	0xe000e100
 8007b00:	e000ed00 	.word	0xe000ed00

08007b04 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007b04:	b580      	push	{r7, lr}
 8007b06:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007b08:	4b05      	ldr	r3, [pc, #20]	; (8007b20 <SysTick_Handler+0x1c>)
 8007b0a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007b0c:	f001 fee8 	bl	80098e0 <xTaskGetSchedulerState>
 8007b10:	4603      	mov	r3, r0
 8007b12:	2b01      	cmp	r3, #1
 8007b14:	d001      	beq.n	8007b1a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007b16:	f002 fccf 	bl	800a4b8 <xPortSysTickHandler>
  }
}
 8007b1a:	bf00      	nop
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	e000e010 	.word	0xe000e010

08007b24 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007b24:	b580      	push	{r7, lr}
 8007b26:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007b28:	2100      	movs	r1, #0
 8007b2a:	f06f 0004 	mvn.w	r0, #4
 8007b2e:	f7ff ffbf 	bl	8007ab0 <__NVIC_SetPriority>
#endif
}
 8007b32:	bf00      	nop
 8007b34:	bd80      	pop	{r7, pc}
	...

08007b38 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007b38:	b480      	push	{r7}
 8007b3a:	b083      	sub	sp, #12
 8007b3c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b3e:	f3ef 8305 	mrs	r3, IPSR
 8007b42:	603b      	str	r3, [r7, #0]
  return(result);
 8007b44:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d003      	beq.n	8007b52 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007b4a:	f06f 0305 	mvn.w	r3, #5
 8007b4e:	607b      	str	r3, [r7, #4]
 8007b50:	e00c      	b.n	8007b6c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007b52:	4b0a      	ldr	r3, [pc, #40]	; (8007b7c <osKernelInitialize+0x44>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d105      	bne.n	8007b66 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007b5a:	4b08      	ldr	r3, [pc, #32]	; (8007b7c <osKernelInitialize+0x44>)
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007b60:	2300      	movs	r3, #0
 8007b62:	607b      	str	r3, [r7, #4]
 8007b64:	e002      	b.n	8007b6c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007b66:	f04f 33ff 	mov.w	r3, #4294967295
 8007b6a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007b6c:	687b      	ldr	r3, [r7, #4]
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	370c      	adds	r7, #12
 8007b72:	46bd      	mov	sp, r7
 8007b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b78:	4770      	bx	lr
 8007b7a:	bf00      	nop
 8007b7c:	20001c08 	.word	0x20001c08

08007b80 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b082      	sub	sp, #8
 8007b84:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b86:	f3ef 8305 	mrs	r3, IPSR
 8007b8a:	603b      	str	r3, [r7, #0]
  return(result);
 8007b8c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d003      	beq.n	8007b9a <osKernelStart+0x1a>
    stat = osErrorISR;
 8007b92:	f06f 0305 	mvn.w	r3, #5
 8007b96:	607b      	str	r3, [r7, #4]
 8007b98:	e010      	b.n	8007bbc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007b9a:	4b0b      	ldr	r3, [pc, #44]	; (8007bc8 <osKernelStart+0x48>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	d109      	bne.n	8007bb6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007ba2:	f7ff ffbf 	bl	8007b24 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007ba6:	4b08      	ldr	r3, [pc, #32]	; (8007bc8 <osKernelStart+0x48>)
 8007ba8:	2202      	movs	r2, #2
 8007baa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007bac:	f001 fa50 	bl	8009050 <vTaskStartScheduler>
      stat = osOK;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	607b      	str	r3, [r7, #4]
 8007bb4:	e002      	b.n	8007bbc <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8007bba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007bbc:	687b      	ldr	r3, [r7, #4]
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3708      	adds	r7, #8
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}
 8007bc6:	bf00      	nop
 8007bc8:	20001c08 	.word	0x20001c08

08007bcc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b08e      	sub	sp, #56	; 0x38
 8007bd0:	af04      	add	r7, sp, #16
 8007bd2:	60f8      	str	r0, [r7, #12]
 8007bd4:	60b9      	str	r1, [r7, #8]
 8007bd6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007bdc:	f3ef 8305 	mrs	r3, IPSR
 8007be0:	617b      	str	r3, [r7, #20]
  return(result);
 8007be2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d17e      	bne.n	8007ce6 <osThreadNew+0x11a>
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d07b      	beq.n	8007ce6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007bee:	2380      	movs	r3, #128	; 0x80
 8007bf0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007bf2:	2318      	movs	r3, #24
 8007bf4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8007bfe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d045      	beq.n	8007c92 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d002      	beq.n	8007c14 <osThreadNew+0x48>
        name = attr->name;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	699b      	ldr	r3, [r3, #24]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d002      	beq.n	8007c22 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	699b      	ldr	r3, [r3, #24]
 8007c20:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007c22:	69fb      	ldr	r3, [r7, #28]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d008      	beq.n	8007c3a <osThreadNew+0x6e>
 8007c28:	69fb      	ldr	r3, [r7, #28]
 8007c2a:	2b38      	cmp	r3, #56	; 0x38
 8007c2c:	d805      	bhi.n	8007c3a <osThreadNew+0x6e>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	f003 0301 	and.w	r3, r3, #1
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d001      	beq.n	8007c3e <osThreadNew+0x72>
        return (NULL);
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	e054      	b.n	8007ce8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	695b      	ldr	r3, [r3, #20]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d003      	beq.n	8007c4e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	695b      	ldr	r3, [r3, #20]
 8007c4a:	089b      	lsrs	r3, r3, #2
 8007c4c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	689b      	ldr	r3, [r3, #8]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d00e      	beq.n	8007c74 <osThreadNew+0xa8>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	68db      	ldr	r3, [r3, #12]
 8007c5a:	2b5b      	cmp	r3, #91	; 0x5b
 8007c5c:	d90a      	bls.n	8007c74 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d006      	beq.n	8007c74 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	695b      	ldr	r3, [r3, #20]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d002      	beq.n	8007c74 <osThreadNew+0xa8>
        mem = 1;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	61bb      	str	r3, [r7, #24]
 8007c72:	e010      	b.n	8007c96 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	689b      	ldr	r3, [r3, #8]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d10c      	bne.n	8007c96 <osThreadNew+0xca>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	68db      	ldr	r3, [r3, #12]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d108      	bne.n	8007c96 <osThreadNew+0xca>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	691b      	ldr	r3, [r3, #16]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d104      	bne.n	8007c96 <osThreadNew+0xca>
          mem = 0;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	61bb      	str	r3, [r7, #24]
 8007c90:	e001      	b.n	8007c96 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007c92:	2300      	movs	r3, #0
 8007c94:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007c96:	69bb      	ldr	r3, [r7, #24]
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	d110      	bne.n	8007cbe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007ca0:	687a      	ldr	r2, [r7, #4]
 8007ca2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007ca4:	9202      	str	r2, [sp, #8]
 8007ca6:	9301      	str	r3, [sp, #4]
 8007ca8:	69fb      	ldr	r3, [r7, #28]
 8007caa:	9300      	str	r3, [sp, #0]
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	6a3a      	ldr	r2, [r7, #32]
 8007cb0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007cb2:	68f8      	ldr	r0, [r7, #12]
 8007cb4:	f000 fff6 	bl	8008ca4 <xTaskCreateStatic>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	613b      	str	r3, [r7, #16]
 8007cbc:	e013      	b.n	8007ce6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007cbe:	69bb      	ldr	r3, [r7, #24]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d110      	bne.n	8007ce6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007cc4:	6a3b      	ldr	r3, [r7, #32]
 8007cc6:	b29a      	uxth	r2, r3
 8007cc8:	f107 0310 	add.w	r3, r7, #16
 8007ccc:	9301      	str	r3, [sp, #4]
 8007cce:	69fb      	ldr	r3, [r7, #28]
 8007cd0:	9300      	str	r3, [sp, #0]
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007cd6:	68f8      	ldr	r0, [r7, #12]
 8007cd8:	f001 f841 	bl	8008d5e <xTaskCreate>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	d001      	beq.n	8007ce6 <osThreadNew+0x11a>
            hTask = NULL;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007ce6:	693b      	ldr	r3, [r7, #16]
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3728      	adds	r7, #40	; 0x28
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b084      	sub	sp, #16
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007cf8:	f3ef 8305 	mrs	r3, IPSR
 8007cfc:	60bb      	str	r3, [r7, #8]
  return(result);
 8007cfe:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d003      	beq.n	8007d0c <osDelay+0x1c>
    stat = osErrorISR;
 8007d04:	f06f 0305 	mvn.w	r3, #5
 8007d08:	60fb      	str	r3, [r7, #12]
 8007d0a:	e007      	b.n	8007d1c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d002      	beq.n	8007d1c <osDelay+0x2c>
      vTaskDelay(ticks);
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f001 f966 	bl	8008fe8 <vTaskDelay>
    }
  }

  return (stat);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3710      	adds	r7, #16
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}

08007d26 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007d26:	b580      	push	{r7, lr}
 8007d28:	b08a      	sub	sp, #40	; 0x28
 8007d2a:	af02      	add	r7, sp, #8
 8007d2c:	60f8      	str	r0, [r7, #12]
 8007d2e:	60b9      	str	r1, [r7, #8]
 8007d30:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007d32:	2300      	movs	r3, #0
 8007d34:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d36:	f3ef 8305 	mrs	r3, IPSR
 8007d3a:	613b      	str	r3, [r7, #16]
  return(result);
 8007d3c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d15f      	bne.n	8007e02 <osMessageQueueNew+0xdc>
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d05c      	beq.n	8007e02 <osMessageQueueNew+0xdc>
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d059      	beq.n	8007e02 <osMessageQueueNew+0xdc>
    mem = -1;
 8007d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8007d52:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d029      	beq.n	8007dae <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d012      	beq.n	8007d88 <osMessageQueueNew+0x62>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	68db      	ldr	r3, [r3, #12]
 8007d66:	2b4f      	cmp	r3, #79	; 0x4f
 8007d68:	d90e      	bls.n	8007d88 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d00a      	beq.n	8007d88 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	695a      	ldr	r2, [r3, #20]
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	68b9      	ldr	r1, [r7, #8]
 8007d7a:	fb01 f303 	mul.w	r3, r1, r3
 8007d7e:	429a      	cmp	r2, r3
 8007d80:	d302      	bcc.n	8007d88 <osMessageQueueNew+0x62>
        mem = 1;
 8007d82:	2301      	movs	r3, #1
 8007d84:	61bb      	str	r3, [r7, #24]
 8007d86:	e014      	b.n	8007db2 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	689b      	ldr	r3, [r3, #8]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d110      	bne.n	8007db2 <osMessageQueueNew+0x8c>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	68db      	ldr	r3, [r3, #12]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d10c      	bne.n	8007db2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d108      	bne.n	8007db2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	695b      	ldr	r3, [r3, #20]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d104      	bne.n	8007db2 <osMessageQueueNew+0x8c>
          mem = 0;
 8007da8:	2300      	movs	r3, #0
 8007daa:	61bb      	str	r3, [r7, #24]
 8007dac:	e001      	b.n	8007db2 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8007dae:	2300      	movs	r3, #0
 8007db0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007db2:	69bb      	ldr	r3, [r7, #24]
 8007db4:	2b01      	cmp	r3, #1
 8007db6:	d10b      	bne.n	8007dd0 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	691a      	ldr	r2, [r3, #16]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	689b      	ldr	r3, [r3, #8]
 8007dc0:	2100      	movs	r1, #0
 8007dc2:	9100      	str	r1, [sp, #0]
 8007dc4:	68b9      	ldr	r1, [r7, #8]
 8007dc6:	68f8      	ldr	r0, [r7, #12]
 8007dc8:	f000 fa2e 	bl	8008228 <xQueueGenericCreateStatic>
 8007dcc:	61f8      	str	r0, [r7, #28]
 8007dce:	e008      	b.n	8007de2 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8007dd0:	69bb      	ldr	r3, [r7, #24]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d105      	bne.n	8007de2 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	68b9      	ldr	r1, [r7, #8]
 8007dda:	68f8      	ldr	r0, [r7, #12]
 8007ddc:	f000 fa9c 	bl	8008318 <xQueueGenericCreate>
 8007de0:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007de2:	69fb      	ldr	r3, [r7, #28]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d00c      	beq.n	8007e02 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d003      	beq.n	8007df6 <osMessageQueueNew+0xd0>
        name = attr->name;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	617b      	str	r3, [r7, #20]
 8007df4:	e001      	b.n	8007dfa <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8007df6:	2300      	movs	r3, #0
 8007df8:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8007dfa:	6979      	ldr	r1, [r7, #20]
 8007dfc:	69f8      	ldr	r0, [r7, #28]
 8007dfe:	f000 fef3 	bl	8008be8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007e02:	69fb      	ldr	r3, [r7, #28]
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3720      	adds	r7, #32
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b088      	sub	sp, #32
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	60f8      	str	r0, [r7, #12]
 8007e14:	60b9      	str	r1, [r7, #8]
 8007e16:	603b      	str	r3, [r7, #0]
 8007e18:	4613      	mov	r3, r2
 8007e1a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007e20:	2300      	movs	r3, #0
 8007e22:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e24:	f3ef 8305 	mrs	r3, IPSR
 8007e28:	617b      	str	r3, [r7, #20]
  return(result);
 8007e2a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d028      	beq.n	8007e82 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007e30:	69bb      	ldr	r3, [r7, #24]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d005      	beq.n	8007e42 <osMessageQueuePut+0x36>
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d002      	beq.n	8007e42 <osMessageQueuePut+0x36>
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d003      	beq.n	8007e4a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8007e42:	f06f 0303 	mvn.w	r3, #3
 8007e46:	61fb      	str	r3, [r7, #28]
 8007e48:	e038      	b.n	8007ebc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007e4e:	f107 0210 	add.w	r2, r7, #16
 8007e52:	2300      	movs	r3, #0
 8007e54:	68b9      	ldr	r1, [r7, #8]
 8007e56:	69b8      	ldr	r0, [r7, #24]
 8007e58:	f000 fbba 	bl	80085d0 <xQueueGenericSendFromISR>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	2b01      	cmp	r3, #1
 8007e60:	d003      	beq.n	8007e6a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8007e62:	f06f 0302 	mvn.w	r3, #2
 8007e66:	61fb      	str	r3, [r7, #28]
 8007e68:	e028      	b.n	8007ebc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d025      	beq.n	8007ebc <osMessageQueuePut+0xb0>
 8007e70:	4b15      	ldr	r3, [pc, #84]	; (8007ec8 <osMessageQueuePut+0xbc>)
 8007e72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e76:	601a      	str	r2, [r3, #0]
 8007e78:	f3bf 8f4f 	dsb	sy
 8007e7c:	f3bf 8f6f 	isb	sy
 8007e80:	e01c      	b.n	8007ebc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007e82:	69bb      	ldr	r3, [r7, #24]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d002      	beq.n	8007e8e <osMessageQueuePut+0x82>
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d103      	bne.n	8007e96 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8007e8e:	f06f 0303 	mvn.w	r3, #3
 8007e92:	61fb      	str	r3, [r7, #28]
 8007e94:	e012      	b.n	8007ebc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007e96:	2300      	movs	r3, #0
 8007e98:	683a      	ldr	r2, [r7, #0]
 8007e9a:	68b9      	ldr	r1, [r7, #8]
 8007e9c:	69b8      	ldr	r0, [r7, #24]
 8007e9e:	f000 fa99 	bl	80083d4 <xQueueGenericSend>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	d009      	beq.n	8007ebc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d003      	beq.n	8007eb6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8007eae:	f06f 0301 	mvn.w	r3, #1
 8007eb2:	61fb      	str	r3, [r7, #28]
 8007eb4:	e002      	b.n	8007ebc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8007eb6:	f06f 0302 	mvn.w	r3, #2
 8007eba:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007ebc:	69fb      	ldr	r3, [r7, #28]
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3720      	adds	r7, #32
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
 8007ec6:	bf00      	nop
 8007ec8:	e000ed04 	.word	0xe000ed04

08007ecc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b088      	sub	sp, #32
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	60f8      	str	r0, [r7, #12]
 8007ed4:	60b9      	str	r1, [r7, #8]
 8007ed6:	607a      	str	r2, [r7, #4]
 8007ed8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ee2:	f3ef 8305 	mrs	r3, IPSR
 8007ee6:	617b      	str	r3, [r7, #20]
  return(result);
 8007ee8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d028      	beq.n	8007f40 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007eee:	69bb      	ldr	r3, [r7, #24]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d005      	beq.n	8007f00 <osMessageQueueGet+0x34>
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d002      	beq.n	8007f00 <osMessageQueueGet+0x34>
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d003      	beq.n	8007f08 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8007f00:	f06f 0303 	mvn.w	r3, #3
 8007f04:	61fb      	str	r3, [r7, #28]
 8007f06:	e037      	b.n	8007f78 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007f0c:	f107 0310 	add.w	r3, r7, #16
 8007f10:	461a      	mov	r2, r3
 8007f12:	68b9      	ldr	r1, [r7, #8]
 8007f14:	69b8      	ldr	r0, [r7, #24]
 8007f16:	f000 fcd7 	bl	80088c8 <xQueueReceiveFromISR>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	d003      	beq.n	8007f28 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8007f20:	f06f 0302 	mvn.w	r3, #2
 8007f24:	61fb      	str	r3, [r7, #28]
 8007f26:	e027      	b.n	8007f78 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d024      	beq.n	8007f78 <osMessageQueueGet+0xac>
 8007f2e:	4b15      	ldr	r3, [pc, #84]	; (8007f84 <osMessageQueueGet+0xb8>)
 8007f30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f34:	601a      	str	r2, [r3, #0]
 8007f36:	f3bf 8f4f 	dsb	sy
 8007f3a:	f3bf 8f6f 	isb	sy
 8007f3e:	e01b      	b.n	8007f78 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007f40:	69bb      	ldr	r3, [r7, #24]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d002      	beq.n	8007f4c <osMessageQueueGet+0x80>
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d103      	bne.n	8007f54 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8007f4c:	f06f 0303 	mvn.w	r3, #3
 8007f50:	61fb      	str	r3, [r7, #28]
 8007f52:	e011      	b.n	8007f78 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007f54:	683a      	ldr	r2, [r7, #0]
 8007f56:	68b9      	ldr	r1, [r7, #8]
 8007f58:	69b8      	ldr	r0, [r7, #24]
 8007f5a:	f000 fbd5 	bl	8008708 <xQueueReceive>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d009      	beq.n	8007f78 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d003      	beq.n	8007f72 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8007f6a:	f06f 0301 	mvn.w	r3, #1
 8007f6e:	61fb      	str	r3, [r7, #28]
 8007f70:	e002      	b.n	8007f78 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8007f72:	f06f 0302 	mvn.w	r3, #2
 8007f76:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007f78:	69fb      	ldr	r3, [r7, #28]
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3720      	adds	r7, #32
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}
 8007f82:	bf00      	nop
 8007f84:	e000ed04 	.word	0xe000ed04

08007f88 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007f88:	b480      	push	{r7}
 8007f8a:	b085      	sub	sp, #20
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	60f8      	str	r0, [r7, #12]
 8007f90:	60b9      	str	r1, [r7, #8]
 8007f92:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	4a07      	ldr	r2, [pc, #28]	; (8007fb4 <vApplicationGetIdleTaskMemory+0x2c>)
 8007f98:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	4a06      	ldr	r2, [pc, #24]	; (8007fb8 <vApplicationGetIdleTaskMemory+0x30>)
 8007f9e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2280      	movs	r2, #128	; 0x80
 8007fa4:	601a      	str	r2, [r3, #0]
}
 8007fa6:	bf00      	nop
 8007fa8:	3714      	adds	r7, #20
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr
 8007fb2:	bf00      	nop
 8007fb4:	20001c0c 	.word	0x20001c0c
 8007fb8:	20001c68 	.word	0x20001c68

08007fbc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007fbc:	b480      	push	{r7}
 8007fbe:	b085      	sub	sp, #20
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	60f8      	str	r0, [r7, #12]
 8007fc4:	60b9      	str	r1, [r7, #8]
 8007fc6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	4a07      	ldr	r2, [pc, #28]	; (8007fe8 <vApplicationGetTimerTaskMemory+0x2c>)
 8007fcc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	4a06      	ldr	r2, [pc, #24]	; (8007fec <vApplicationGetTimerTaskMemory+0x30>)
 8007fd2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007fda:	601a      	str	r2, [r3, #0]
}
 8007fdc:	bf00      	nop
 8007fde:	3714      	adds	r7, #20
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr
 8007fe8:	20001e68 	.word	0x20001e68
 8007fec:	20001ec4 	.word	0x20001ec4

08007ff0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b083      	sub	sp, #12
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f103 0208 	add.w	r2, r3, #8
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f04f 32ff 	mov.w	r2, #4294967295
 8008008:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f103 0208 	add.w	r2, r3, #8
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f103 0208 	add.w	r2, r3, #8
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2200      	movs	r2, #0
 8008022:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008024:	bf00      	nop
 8008026:	370c      	adds	r7, #12
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr

08008030 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008030:	b480      	push	{r7}
 8008032:	b083      	sub	sp, #12
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2200      	movs	r2, #0
 800803c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800803e:	bf00      	nop
 8008040:	370c      	adds	r7, #12
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr

0800804a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800804a:	b480      	push	{r7}
 800804c:	b085      	sub	sp, #20
 800804e:	af00      	add	r7, sp, #0
 8008050:	6078      	str	r0, [r7, #4]
 8008052:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	68fa      	ldr	r2, [r7, #12]
 800805e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	689a      	ldr	r2, [r3, #8]
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	683a      	ldr	r2, [r7, #0]
 800806e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	683a      	ldr	r2, [r7, #0]
 8008074:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	687a      	ldr	r2, [r7, #4]
 800807a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	1c5a      	adds	r2, r3, #1
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	601a      	str	r2, [r3, #0]
}
 8008086:	bf00      	nop
 8008088:	3714      	adds	r7, #20
 800808a:	46bd      	mov	sp, r7
 800808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008090:	4770      	bx	lr

08008092 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008092:	b480      	push	{r7}
 8008094:	b085      	sub	sp, #20
 8008096:	af00      	add	r7, sp, #0
 8008098:	6078      	str	r0, [r7, #4]
 800809a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080a8:	d103      	bne.n	80080b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	691b      	ldr	r3, [r3, #16]
 80080ae:	60fb      	str	r3, [r7, #12]
 80080b0:	e00c      	b.n	80080cc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	3308      	adds	r3, #8
 80080b6:	60fb      	str	r3, [r7, #12]
 80080b8:	e002      	b.n	80080c0 <vListInsert+0x2e>
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	60fb      	str	r3, [r7, #12]
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	68ba      	ldr	r2, [r7, #8]
 80080c8:	429a      	cmp	r2, r3
 80080ca:	d2f6      	bcs.n	80080ba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	685a      	ldr	r2, [r3, #4]
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	683a      	ldr	r2, [r7, #0]
 80080da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	68fa      	ldr	r2, [r7, #12]
 80080e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	683a      	ldr	r2, [r7, #0]
 80080e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	687a      	ldr	r2, [r7, #4]
 80080ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	1c5a      	adds	r2, r3, #1
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	601a      	str	r2, [r3, #0]
}
 80080f8:	bf00      	nop
 80080fa:	3714      	adds	r7, #20
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr

08008104 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008104:	b480      	push	{r7}
 8008106:	b085      	sub	sp, #20
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	691b      	ldr	r3, [r3, #16]
 8008110:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	685b      	ldr	r3, [r3, #4]
 8008116:	687a      	ldr	r2, [r7, #4]
 8008118:	6892      	ldr	r2, [r2, #8]
 800811a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	689b      	ldr	r3, [r3, #8]
 8008120:	687a      	ldr	r2, [r7, #4]
 8008122:	6852      	ldr	r2, [r2, #4]
 8008124:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	687a      	ldr	r2, [r7, #4]
 800812c:	429a      	cmp	r2, r3
 800812e:	d103      	bne.n	8008138 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	689a      	ldr	r2, [r3, #8]
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2200      	movs	r2, #0
 800813c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	1e5a      	subs	r2, r3, #1
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
}
 800814c:	4618      	mov	r0, r3
 800814e:	3714      	adds	r7, #20
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr

08008158 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b084      	sub	sp, #16
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d10a      	bne.n	8008182 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800816c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008170:	f383 8811 	msr	BASEPRI, r3
 8008174:	f3bf 8f6f 	isb	sy
 8008178:	f3bf 8f4f 	dsb	sy
 800817c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800817e:	bf00      	nop
 8008180:	e7fe      	b.n	8008180 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008182:	f002 f907 	bl	800a394 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681a      	ldr	r2, [r3, #0]
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800818e:	68f9      	ldr	r1, [r7, #12]
 8008190:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008192:	fb01 f303 	mul.w	r3, r1, r3
 8008196:	441a      	add	r2, r3
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2200      	movs	r2, #0
 80081a0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681a      	ldr	r2, [r3, #0]
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681a      	ldr	r2, [r3, #0]
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081b2:	3b01      	subs	r3, #1
 80081b4:	68f9      	ldr	r1, [r7, #12]
 80081b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80081b8:	fb01 f303 	mul.w	r3, r1, r3
 80081bc:	441a      	add	r2, r3
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	22ff      	movs	r2, #255	; 0xff
 80081c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	22ff      	movs	r2, #255	; 0xff
 80081ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d114      	bne.n	8008202 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	691b      	ldr	r3, [r3, #16]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d01a      	beq.n	8008216 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	3310      	adds	r3, #16
 80081e4:	4618      	mov	r0, r3
 80081e6:	f001 f9bd 	bl	8009564 <xTaskRemoveFromEventList>
 80081ea:	4603      	mov	r3, r0
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d012      	beq.n	8008216 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80081f0:	4b0c      	ldr	r3, [pc, #48]	; (8008224 <xQueueGenericReset+0xcc>)
 80081f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081f6:	601a      	str	r2, [r3, #0]
 80081f8:	f3bf 8f4f 	dsb	sy
 80081fc:	f3bf 8f6f 	isb	sy
 8008200:	e009      	b.n	8008216 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	3310      	adds	r3, #16
 8008206:	4618      	mov	r0, r3
 8008208:	f7ff fef2 	bl	8007ff0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	3324      	adds	r3, #36	; 0x24
 8008210:	4618      	mov	r0, r3
 8008212:	f7ff feed 	bl	8007ff0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008216:	f002 f8ed 	bl	800a3f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800821a:	2301      	movs	r3, #1
}
 800821c:	4618      	mov	r0, r3
 800821e:	3710      	adds	r7, #16
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}
 8008224:	e000ed04 	.word	0xe000ed04

08008228 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008228:	b580      	push	{r7, lr}
 800822a:	b08e      	sub	sp, #56	; 0x38
 800822c:	af02      	add	r7, sp, #8
 800822e:	60f8      	str	r0, [r7, #12]
 8008230:	60b9      	str	r1, [r7, #8]
 8008232:	607a      	str	r2, [r7, #4]
 8008234:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d10a      	bne.n	8008252 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800823c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008240:	f383 8811 	msr	BASEPRI, r3
 8008244:	f3bf 8f6f 	isb	sy
 8008248:	f3bf 8f4f 	dsb	sy
 800824c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800824e:	bf00      	nop
 8008250:	e7fe      	b.n	8008250 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d10a      	bne.n	800826e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800825c:	f383 8811 	msr	BASEPRI, r3
 8008260:	f3bf 8f6f 	isb	sy
 8008264:	f3bf 8f4f 	dsb	sy
 8008268:	627b      	str	r3, [r7, #36]	; 0x24
}
 800826a:	bf00      	nop
 800826c:	e7fe      	b.n	800826c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d002      	beq.n	800827a <xQueueGenericCreateStatic+0x52>
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d001      	beq.n	800827e <xQueueGenericCreateStatic+0x56>
 800827a:	2301      	movs	r3, #1
 800827c:	e000      	b.n	8008280 <xQueueGenericCreateStatic+0x58>
 800827e:	2300      	movs	r3, #0
 8008280:	2b00      	cmp	r3, #0
 8008282:	d10a      	bne.n	800829a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008288:	f383 8811 	msr	BASEPRI, r3
 800828c:	f3bf 8f6f 	isb	sy
 8008290:	f3bf 8f4f 	dsb	sy
 8008294:	623b      	str	r3, [r7, #32]
}
 8008296:	bf00      	nop
 8008298:	e7fe      	b.n	8008298 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d102      	bne.n	80082a6 <xQueueGenericCreateStatic+0x7e>
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d101      	bne.n	80082aa <xQueueGenericCreateStatic+0x82>
 80082a6:	2301      	movs	r3, #1
 80082a8:	e000      	b.n	80082ac <xQueueGenericCreateStatic+0x84>
 80082aa:	2300      	movs	r3, #0
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d10a      	bne.n	80082c6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80082b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b4:	f383 8811 	msr	BASEPRI, r3
 80082b8:	f3bf 8f6f 	isb	sy
 80082bc:	f3bf 8f4f 	dsb	sy
 80082c0:	61fb      	str	r3, [r7, #28]
}
 80082c2:	bf00      	nop
 80082c4:	e7fe      	b.n	80082c4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80082c6:	2350      	movs	r3, #80	; 0x50
 80082c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	2b50      	cmp	r3, #80	; 0x50
 80082ce:	d00a      	beq.n	80082e6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80082d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d4:	f383 8811 	msr	BASEPRI, r3
 80082d8:	f3bf 8f6f 	isb	sy
 80082dc:	f3bf 8f4f 	dsb	sy
 80082e0:	61bb      	str	r3, [r7, #24]
}
 80082e2:	bf00      	nop
 80082e4:	e7fe      	b.n	80082e4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80082e6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80082ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d00d      	beq.n	800830e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80082f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f4:	2201      	movs	r2, #1
 80082f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80082fa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80082fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008300:	9300      	str	r3, [sp, #0]
 8008302:	4613      	mov	r3, r2
 8008304:	687a      	ldr	r2, [r7, #4]
 8008306:	68b9      	ldr	r1, [r7, #8]
 8008308:	68f8      	ldr	r0, [r7, #12]
 800830a:	f000 f83f 	bl	800838c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800830e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008310:	4618      	mov	r0, r3
 8008312:	3730      	adds	r7, #48	; 0x30
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008318:	b580      	push	{r7, lr}
 800831a:	b08a      	sub	sp, #40	; 0x28
 800831c:	af02      	add	r7, sp, #8
 800831e:	60f8      	str	r0, [r7, #12]
 8008320:	60b9      	str	r1, [r7, #8]
 8008322:	4613      	mov	r3, r2
 8008324:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d10a      	bne.n	8008342 <xQueueGenericCreate+0x2a>
	__asm volatile
 800832c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008330:	f383 8811 	msr	BASEPRI, r3
 8008334:	f3bf 8f6f 	isb	sy
 8008338:	f3bf 8f4f 	dsb	sy
 800833c:	613b      	str	r3, [r7, #16]
}
 800833e:	bf00      	nop
 8008340:	e7fe      	b.n	8008340 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	68ba      	ldr	r2, [r7, #8]
 8008346:	fb02 f303 	mul.w	r3, r2, r3
 800834a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800834c:	69fb      	ldr	r3, [r7, #28]
 800834e:	3350      	adds	r3, #80	; 0x50
 8008350:	4618      	mov	r0, r3
 8008352:	f002 f941 	bl	800a5d8 <pvPortMalloc>
 8008356:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008358:	69bb      	ldr	r3, [r7, #24]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d011      	beq.n	8008382 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800835e:	69bb      	ldr	r3, [r7, #24]
 8008360:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	3350      	adds	r3, #80	; 0x50
 8008366:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008368:	69bb      	ldr	r3, [r7, #24]
 800836a:	2200      	movs	r2, #0
 800836c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008370:	79fa      	ldrb	r2, [r7, #7]
 8008372:	69bb      	ldr	r3, [r7, #24]
 8008374:	9300      	str	r3, [sp, #0]
 8008376:	4613      	mov	r3, r2
 8008378:	697a      	ldr	r2, [r7, #20]
 800837a:	68b9      	ldr	r1, [r7, #8]
 800837c:	68f8      	ldr	r0, [r7, #12]
 800837e:	f000 f805 	bl	800838c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008382:	69bb      	ldr	r3, [r7, #24]
	}
 8008384:	4618      	mov	r0, r3
 8008386:	3720      	adds	r7, #32
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}

0800838c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b084      	sub	sp, #16
 8008390:	af00      	add	r7, sp, #0
 8008392:	60f8      	str	r0, [r7, #12]
 8008394:	60b9      	str	r1, [r7, #8]
 8008396:	607a      	str	r2, [r7, #4]
 8008398:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d103      	bne.n	80083a8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80083a0:	69bb      	ldr	r3, [r7, #24]
 80083a2:	69ba      	ldr	r2, [r7, #24]
 80083a4:	601a      	str	r2, [r3, #0]
 80083a6:	e002      	b.n	80083ae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80083a8:	69bb      	ldr	r3, [r7, #24]
 80083aa:	687a      	ldr	r2, [r7, #4]
 80083ac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80083ae:	69bb      	ldr	r3, [r7, #24]
 80083b0:	68fa      	ldr	r2, [r7, #12]
 80083b2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80083b4:	69bb      	ldr	r3, [r7, #24]
 80083b6:	68ba      	ldr	r2, [r7, #8]
 80083b8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80083ba:	2101      	movs	r1, #1
 80083bc:	69b8      	ldr	r0, [r7, #24]
 80083be:	f7ff fecb 	bl	8008158 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80083c2:	69bb      	ldr	r3, [r7, #24]
 80083c4:	78fa      	ldrb	r2, [r7, #3]
 80083c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80083ca:	bf00      	nop
 80083cc:	3710      	adds	r7, #16
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
	...

080083d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b08e      	sub	sp, #56	; 0x38
 80083d8:	af00      	add	r7, sp, #0
 80083da:	60f8      	str	r0, [r7, #12]
 80083dc:	60b9      	str	r1, [r7, #8]
 80083de:	607a      	str	r2, [r7, #4]
 80083e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80083e2:	2300      	movs	r3, #0
 80083e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80083ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d10a      	bne.n	8008406 <xQueueGenericSend+0x32>
	__asm volatile
 80083f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f4:	f383 8811 	msr	BASEPRI, r3
 80083f8:	f3bf 8f6f 	isb	sy
 80083fc:	f3bf 8f4f 	dsb	sy
 8008400:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008402:	bf00      	nop
 8008404:	e7fe      	b.n	8008404 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d103      	bne.n	8008414 <xQueueGenericSend+0x40>
 800840c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800840e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008410:	2b00      	cmp	r3, #0
 8008412:	d101      	bne.n	8008418 <xQueueGenericSend+0x44>
 8008414:	2301      	movs	r3, #1
 8008416:	e000      	b.n	800841a <xQueueGenericSend+0x46>
 8008418:	2300      	movs	r3, #0
 800841a:	2b00      	cmp	r3, #0
 800841c:	d10a      	bne.n	8008434 <xQueueGenericSend+0x60>
	__asm volatile
 800841e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008422:	f383 8811 	msr	BASEPRI, r3
 8008426:	f3bf 8f6f 	isb	sy
 800842a:	f3bf 8f4f 	dsb	sy
 800842e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008430:	bf00      	nop
 8008432:	e7fe      	b.n	8008432 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	2b02      	cmp	r3, #2
 8008438:	d103      	bne.n	8008442 <xQueueGenericSend+0x6e>
 800843a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800843c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800843e:	2b01      	cmp	r3, #1
 8008440:	d101      	bne.n	8008446 <xQueueGenericSend+0x72>
 8008442:	2301      	movs	r3, #1
 8008444:	e000      	b.n	8008448 <xQueueGenericSend+0x74>
 8008446:	2300      	movs	r3, #0
 8008448:	2b00      	cmp	r3, #0
 800844a:	d10a      	bne.n	8008462 <xQueueGenericSend+0x8e>
	__asm volatile
 800844c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008450:	f383 8811 	msr	BASEPRI, r3
 8008454:	f3bf 8f6f 	isb	sy
 8008458:	f3bf 8f4f 	dsb	sy
 800845c:	623b      	str	r3, [r7, #32]
}
 800845e:	bf00      	nop
 8008460:	e7fe      	b.n	8008460 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008462:	f001 fa3d 	bl	80098e0 <xTaskGetSchedulerState>
 8008466:	4603      	mov	r3, r0
 8008468:	2b00      	cmp	r3, #0
 800846a:	d102      	bne.n	8008472 <xQueueGenericSend+0x9e>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d101      	bne.n	8008476 <xQueueGenericSend+0xa2>
 8008472:	2301      	movs	r3, #1
 8008474:	e000      	b.n	8008478 <xQueueGenericSend+0xa4>
 8008476:	2300      	movs	r3, #0
 8008478:	2b00      	cmp	r3, #0
 800847a:	d10a      	bne.n	8008492 <xQueueGenericSend+0xbe>
	__asm volatile
 800847c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008480:	f383 8811 	msr	BASEPRI, r3
 8008484:	f3bf 8f6f 	isb	sy
 8008488:	f3bf 8f4f 	dsb	sy
 800848c:	61fb      	str	r3, [r7, #28]
}
 800848e:	bf00      	nop
 8008490:	e7fe      	b.n	8008490 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008492:	f001 ff7f 	bl	800a394 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008498:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800849a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800849c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800849e:	429a      	cmp	r2, r3
 80084a0:	d302      	bcc.n	80084a8 <xQueueGenericSend+0xd4>
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	2b02      	cmp	r3, #2
 80084a6:	d129      	bne.n	80084fc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80084a8:	683a      	ldr	r2, [r7, #0]
 80084aa:	68b9      	ldr	r1, [r7, #8]
 80084ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80084ae:	f000 fa8b 	bl	80089c8 <prvCopyDataToQueue>
 80084b2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80084b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d010      	beq.n	80084de <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80084bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084be:	3324      	adds	r3, #36	; 0x24
 80084c0:	4618      	mov	r0, r3
 80084c2:	f001 f84f 	bl	8009564 <xTaskRemoveFromEventList>
 80084c6:	4603      	mov	r3, r0
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d013      	beq.n	80084f4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80084cc:	4b3f      	ldr	r3, [pc, #252]	; (80085cc <xQueueGenericSend+0x1f8>)
 80084ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084d2:	601a      	str	r2, [r3, #0]
 80084d4:	f3bf 8f4f 	dsb	sy
 80084d8:	f3bf 8f6f 	isb	sy
 80084dc:	e00a      	b.n	80084f4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80084de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d007      	beq.n	80084f4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80084e4:	4b39      	ldr	r3, [pc, #228]	; (80085cc <xQueueGenericSend+0x1f8>)
 80084e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084ea:	601a      	str	r2, [r3, #0]
 80084ec:	f3bf 8f4f 	dsb	sy
 80084f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80084f4:	f001 ff7e 	bl	800a3f4 <vPortExitCritical>
				return pdPASS;
 80084f8:	2301      	movs	r3, #1
 80084fa:	e063      	b.n	80085c4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d103      	bne.n	800850a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008502:	f001 ff77 	bl	800a3f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008506:	2300      	movs	r3, #0
 8008508:	e05c      	b.n	80085c4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800850a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800850c:	2b00      	cmp	r3, #0
 800850e:	d106      	bne.n	800851e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008510:	f107 0314 	add.w	r3, r7, #20
 8008514:	4618      	mov	r0, r3
 8008516:	f001 f889 	bl	800962c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800851a:	2301      	movs	r3, #1
 800851c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800851e:	f001 ff69 	bl	800a3f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008522:	f000 fdfb 	bl	800911c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008526:	f001 ff35 	bl	800a394 <vPortEnterCritical>
 800852a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800852c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008530:	b25b      	sxtb	r3, r3
 8008532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008536:	d103      	bne.n	8008540 <xQueueGenericSend+0x16c>
 8008538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800853a:	2200      	movs	r2, #0
 800853c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008542:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008546:	b25b      	sxtb	r3, r3
 8008548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800854c:	d103      	bne.n	8008556 <xQueueGenericSend+0x182>
 800854e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008550:	2200      	movs	r2, #0
 8008552:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008556:	f001 ff4d 	bl	800a3f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800855a:	1d3a      	adds	r2, r7, #4
 800855c:	f107 0314 	add.w	r3, r7, #20
 8008560:	4611      	mov	r1, r2
 8008562:	4618      	mov	r0, r3
 8008564:	f001 f878 	bl	8009658 <xTaskCheckForTimeOut>
 8008568:	4603      	mov	r3, r0
 800856a:	2b00      	cmp	r3, #0
 800856c:	d124      	bne.n	80085b8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800856e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008570:	f000 fb22 	bl	8008bb8 <prvIsQueueFull>
 8008574:	4603      	mov	r3, r0
 8008576:	2b00      	cmp	r3, #0
 8008578:	d018      	beq.n	80085ac <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800857a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800857c:	3310      	adds	r3, #16
 800857e:	687a      	ldr	r2, [r7, #4]
 8008580:	4611      	mov	r1, r2
 8008582:	4618      	mov	r0, r3
 8008584:	f000 ff9e 	bl	80094c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008588:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800858a:	f000 faad 	bl	8008ae8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800858e:	f000 fdd3 	bl	8009138 <xTaskResumeAll>
 8008592:	4603      	mov	r3, r0
 8008594:	2b00      	cmp	r3, #0
 8008596:	f47f af7c 	bne.w	8008492 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800859a:	4b0c      	ldr	r3, [pc, #48]	; (80085cc <xQueueGenericSend+0x1f8>)
 800859c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085a0:	601a      	str	r2, [r3, #0]
 80085a2:	f3bf 8f4f 	dsb	sy
 80085a6:	f3bf 8f6f 	isb	sy
 80085aa:	e772      	b.n	8008492 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80085ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80085ae:	f000 fa9b 	bl	8008ae8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80085b2:	f000 fdc1 	bl	8009138 <xTaskResumeAll>
 80085b6:	e76c      	b.n	8008492 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80085b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80085ba:	f000 fa95 	bl	8008ae8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80085be:	f000 fdbb 	bl	8009138 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80085c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3738      	adds	r7, #56	; 0x38
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}
 80085cc:	e000ed04 	.word	0xe000ed04

080085d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b090      	sub	sp, #64	; 0x40
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	60f8      	str	r0, [r7, #12]
 80085d8:	60b9      	str	r1, [r7, #8]
 80085da:	607a      	str	r2, [r7, #4]
 80085dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80085e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d10a      	bne.n	80085fe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80085e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ec:	f383 8811 	msr	BASEPRI, r3
 80085f0:	f3bf 8f6f 	isb	sy
 80085f4:	f3bf 8f4f 	dsb	sy
 80085f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80085fa:	bf00      	nop
 80085fc:	e7fe      	b.n	80085fc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d103      	bne.n	800860c <xQueueGenericSendFromISR+0x3c>
 8008604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008608:	2b00      	cmp	r3, #0
 800860a:	d101      	bne.n	8008610 <xQueueGenericSendFromISR+0x40>
 800860c:	2301      	movs	r3, #1
 800860e:	e000      	b.n	8008612 <xQueueGenericSendFromISR+0x42>
 8008610:	2300      	movs	r3, #0
 8008612:	2b00      	cmp	r3, #0
 8008614:	d10a      	bne.n	800862c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800861a:	f383 8811 	msr	BASEPRI, r3
 800861e:	f3bf 8f6f 	isb	sy
 8008622:	f3bf 8f4f 	dsb	sy
 8008626:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008628:	bf00      	nop
 800862a:	e7fe      	b.n	800862a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	2b02      	cmp	r3, #2
 8008630:	d103      	bne.n	800863a <xQueueGenericSendFromISR+0x6a>
 8008632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008636:	2b01      	cmp	r3, #1
 8008638:	d101      	bne.n	800863e <xQueueGenericSendFromISR+0x6e>
 800863a:	2301      	movs	r3, #1
 800863c:	e000      	b.n	8008640 <xQueueGenericSendFromISR+0x70>
 800863e:	2300      	movs	r3, #0
 8008640:	2b00      	cmp	r3, #0
 8008642:	d10a      	bne.n	800865a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008648:	f383 8811 	msr	BASEPRI, r3
 800864c:	f3bf 8f6f 	isb	sy
 8008650:	f3bf 8f4f 	dsb	sy
 8008654:	623b      	str	r3, [r7, #32]
}
 8008656:	bf00      	nop
 8008658:	e7fe      	b.n	8008658 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800865a:	f001 ff7d 	bl	800a558 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800865e:	f3ef 8211 	mrs	r2, BASEPRI
 8008662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008666:	f383 8811 	msr	BASEPRI, r3
 800866a:	f3bf 8f6f 	isb	sy
 800866e:	f3bf 8f4f 	dsb	sy
 8008672:	61fa      	str	r2, [r7, #28]
 8008674:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008676:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008678:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800867a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800867c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800867e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008682:	429a      	cmp	r2, r3
 8008684:	d302      	bcc.n	800868c <xQueueGenericSendFromISR+0xbc>
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	2b02      	cmp	r3, #2
 800868a:	d12f      	bne.n	80086ec <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800868c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800868e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008692:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800869a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800869c:	683a      	ldr	r2, [r7, #0]
 800869e:	68b9      	ldr	r1, [r7, #8]
 80086a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80086a2:	f000 f991 	bl	80089c8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80086a6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80086aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086ae:	d112      	bne.n	80086d6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80086b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d016      	beq.n	80086e6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80086b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ba:	3324      	adds	r3, #36	; 0x24
 80086bc:	4618      	mov	r0, r3
 80086be:	f000 ff51 	bl	8009564 <xTaskRemoveFromEventList>
 80086c2:	4603      	mov	r3, r0
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d00e      	beq.n	80086e6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d00b      	beq.n	80086e6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2201      	movs	r2, #1
 80086d2:	601a      	str	r2, [r3, #0]
 80086d4:	e007      	b.n	80086e6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80086d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80086da:	3301      	adds	r3, #1
 80086dc:	b2db      	uxtb	r3, r3
 80086de:	b25a      	sxtb	r2, r3
 80086e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80086e6:	2301      	movs	r3, #1
 80086e8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80086ea:	e001      	b.n	80086f0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80086ec:	2300      	movs	r3, #0
 80086ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086f2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80086fa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80086fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3740      	adds	r7, #64	; 0x40
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
	...

08008708 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b08c      	sub	sp, #48	; 0x30
 800870c:	af00      	add	r7, sp, #0
 800870e:	60f8      	str	r0, [r7, #12]
 8008710:	60b9      	str	r1, [r7, #8]
 8008712:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008714:	2300      	movs	r3, #0
 8008716:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800871c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800871e:	2b00      	cmp	r3, #0
 8008720:	d10a      	bne.n	8008738 <xQueueReceive+0x30>
	__asm volatile
 8008722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008726:	f383 8811 	msr	BASEPRI, r3
 800872a:	f3bf 8f6f 	isb	sy
 800872e:	f3bf 8f4f 	dsb	sy
 8008732:	623b      	str	r3, [r7, #32]
}
 8008734:	bf00      	nop
 8008736:	e7fe      	b.n	8008736 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d103      	bne.n	8008746 <xQueueReceive+0x3e>
 800873e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008742:	2b00      	cmp	r3, #0
 8008744:	d101      	bne.n	800874a <xQueueReceive+0x42>
 8008746:	2301      	movs	r3, #1
 8008748:	e000      	b.n	800874c <xQueueReceive+0x44>
 800874a:	2300      	movs	r3, #0
 800874c:	2b00      	cmp	r3, #0
 800874e:	d10a      	bne.n	8008766 <xQueueReceive+0x5e>
	__asm volatile
 8008750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008754:	f383 8811 	msr	BASEPRI, r3
 8008758:	f3bf 8f6f 	isb	sy
 800875c:	f3bf 8f4f 	dsb	sy
 8008760:	61fb      	str	r3, [r7, #28]
}
 8008762:	bf00      	nop
 8008764:	e7fe      	b.n	8008764 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008766:	f001 f8bb 	bl	80098e0 <xTaskGetSchedulerState>
 800876a:	4603      	mov	r3, r0
 800876c:	2b00      	cmp	r3, #0
 800876e:	d102      	bne.n	8008776 <xQueueReceive+0x6e>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d101      	bne.n	800877a <xQueueReceive+0x72>
 8008776:	2301      	movs	r3, #1
 8008778:	e000      	b.n	800877c <xQueueReceive+0x74>
 800877a:	2300      	movs	r3, #0
 800877c:	2b00      	cmp	r3, #0
 800877e:	d10a      	bne.n	8008796 <xQueueReceive+0x8e>
	__asm volatile
 8008780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008784:	f383 8811 	msr	BASEPRI, r3
 8008788:	f3bf 8f6f 	isb	sy
 800878c:	f3bf 8f4f 	dsb	sy
 8008790:	61bb      	str	r3, [r7, #24]
}
 8008792:	bf00      	nop
 8008794:	e7fe      	b.n	8008794 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008796:	f001 fdfd 	bl	800a394 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800879a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800879c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800879e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80087a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d01f      	beq.n	80087e6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80087a6:	68b9      	ldr	r1, [r7, #8]
 80087a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087aa:	f000 f977 	bl	8008a9c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80087ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b0:	1e5a      	subs	r2, r3, #1
 80087b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087b4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80087b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087b8:	691b      	ldr	r3, [r3, #16]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d00f      	beq.n	80087de <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c0:	3310      	adds	r3, #16
 80087c2:	4618      	mov	r0, r3
 80087c4:	f000 fece 	bl	8009564 <xTaskRemoveFromEventList>
 80087c8:	4603      	mov	r3, r0
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d007      	beq.n	80087de <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80087ce:	4b3d      	ldr	r3, [pc, #244]	; (80088c4 <xQueueReceive+0x1bc>)
 80087d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087d4:	601a      	str	r2, [r3, #0]
 80087d6:	f3bf 8f4f 	dsb	sy
 80087da:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80087de:	f001 fe09 	bl	800a3f4 <vPortExitCritical>
				return pdPASS;
 80087e2:	2301      	movs	r3, #1
 80087e4:	e069      	b.n	80088ba <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d103      	bne.n	80087f4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80087ec:	f001 fe02 	bl	800a3f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80087f0:	2300      	movs	r3, #0
 80087f2:	e062      	b.n	80088ba <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80087f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d106      	bne.n	8008808 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80087fa:	f107 0310 	add.w	r3, r7, #16
 80087fe:	4618      	mov	r0, r3
 8008800:	f000 ff14 	bl	800962c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008804:	2301      	movs	r3, #1
 8008806:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008808:	f001 fdf4 	bl	800a3f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800880c:	f000 fc86 	bl	800911c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008810:	f001 fdc0 	bl	800a394 <vPortEnterCritical>
 8008814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008816:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800881a:	b25b      	sxtb	r3, r3
 800881c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008820:	d103      	bne.n	800882a <xQueueReceive+0x122>
 8008822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008824:	2200      	movs	r2, #0
 8008826:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800882a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800882c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008830:	b25b      	sxtb	r3, r3
 8008832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008836:	d103      	bne.n	8008840 <xQueueReceive+0x138>
 8008838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800883a:	2200      	movs	r2, #0
 800883c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008840:	f001 fdd8 	bl	800a3f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008844:	1d3a      	adds	r2, r7, #4
 8008846:	f107 0310 	add.w	r3, r7, #16
 800884a:	4611      	mov	r1, r2
 800884c:	4618      	mov	r0, r3
 800884e:	f000 ff03 	bl	8009658 <xTaskCheckForTimeOut>
 8008852:	4603      	mov	r3, r0
 8008854:	2b00      	cmp	r3, #0
 8008856:	d123      	bne.n	80088a0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008858:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800885a:	f000 f997 	bl	8008b8c <prvIsQueueEmpty>
 800885e:	4603      	mov	r3, r0
 8008860:	2b00      	cmp	r3, #0
 8008862:	d017      	beq.n	8008894 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008866:	3324      	adds	r3, #36	; 0x24
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	4611      	mov	r1, r2
 800886c:	4618      	mov	r0, r3
 800886e:	f000 fe29 	bl	80094c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008872:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008874:	f000 f938 	bl	8008ae8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008878:	f000 fc5e 	bl	8009138 <xTaskResumeAll>
 800887c:	4603      	mov	r3, r0
 800887e:	2b00      	cmp	r3, #0
 8008880:	d189      	bne.n	8008796 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008882:	4b10      	ldr	r3, [pc, #64]	; (80088c4 <xQueueReceive+0x1bc>)
 8008884:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008888:	601a      	str	r2, [r3, #0]
 800888a:	f3bf 8f4f 	dsb	sy
 800888e:	f3bf 8f6f 	isb	sy
 8008892:	e780      	b.n	8008796 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008894:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008896:	f000 f927 	bl	8008ae8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800889a:	f000 fc4d 	bl	8009138 <xTaskResumeAll>
 800889e:	e77a      	b.n	8008796 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80088a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088a2:	f000 f921 	bl	8008ae8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80088a6:	f000 fc47 	bl	8009138 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80088aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088ac:	f000 f96e 	bl	8008b8c <prvIsQueueEmpty>
 80088b0:	4603      	mov	r3, r0
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	f43f af6f 	beq.w	8008796 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80088b8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3730      	adds	r7, #48	; 0x30
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
 80088c2:	bf00      	nop
 80088c4:	e000ed04 	.word	0xe000ed04

080088c8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b08e      	sub	sp, #56	; 0x38
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	60f8      	str	r0, [r7, #12]
 80088d0:	60b9      	str	r1, [r7, #8]
 80088d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80088d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d10a      	bne.n	80088f4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80088de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e2:	f383 8811 	msr	BASEPRI, r3
 80088e6:	f3bf 8f6f 	isb	sy
 80088ea:	f3bf 8f4f 	dsb	sy
 80088ee:	623b      	str	r3, [r7, #32]
}
 80088f0:	bf00      	nop
 80088f2:	e7fe      	b.n	80088f2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d103      	bne.n	8008902 <xQueueReceiveFromISR+0x3a>
 80088fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d101      	bne.n	8008906 <xQueueReceiveFromISR+0x3e>
 8008902:	2301      	movs	r3, #1
 8008904:	e000      	b.n	8008908 <xQueueReceiveFromISR+0x40>
 8008906:	2300      	movs	r3, #0
 8008908:	2b00      	cmp	r3, #0
 800890a:	d10a      	bne.n	8008922 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800890c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008910:	f383 8811 	msr	BASEPRI, r3
 8008914:	f3bf 8f6f 	isb	sy
 8008918:	f3bf 8f4f 	dsb	sy
 800891c:	61fb      	str	r3, [r7, #28]
}
 800891e:	bf00      	nop
 8008920:	e7fe      	b.n	8008920 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008922:	f001 fe19 	bl	800a558 <vPortValidateInterruptPriority>
	__asm volatile
 8008926:	f3ef 8211 	mrs	r2, BASEPRI
 800892a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800892e:	f383 8811 	msr	BASEPRI, r3
 8008932:	f3bf 8f6f 	isb	sy
 8008936:	f3bf 8f4f 	dsb	sy
 800893a:	61ba      	str	r2, [r7, #24]
 800893c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800893e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008940:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008946:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800894a:	2b00      	cmp	r3, #0
 800894c:	d02f      	beq.n	80089ae <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800894e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008950:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008954:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008958:	68b9      	ldr	r1, [r7, #8]
 800895a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800895c:	f000 f89e 	bl	8008a9c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008962:	1e5a      	subs	r2, r3, #1
 8008964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008966:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008968:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800896c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008970:	d112      	bne.n	8008998 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008974:	691b      	ldr	r3, [r3, #16]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d016      	beq.n	80089a8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800897a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800897c:	3310      	adds	r3, #16
 800897e:	4618      	mov	r0, r3
 8008980:	f000 fdf0 	bl	8009564 <xTaskRemoveFromEventList>
 8008984:	4603      	mov	r3, r0
 8008986:	2b00      	cmp	r3, #0
 8008988:	d00e      	beq.n	80089a8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d00b      	beq.n	80089a8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2201      	movs	r2, #1
 8008994:	601a      	str	r2, [r3, #0]
 8008996:	e007      	b.n	80089a8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008998:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800899c:	3301      	adds	r3, #1
 800899e:	b2db      	uxtb	r3, r3
 80089a0:	b25a      	sxtb	r2, r3
 80089a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80089a8:	2301      	movs	r3, #1
 80089aa:	637b      	str	r3, [r7, #52]	; 0x34
 80089ac:	e001      	b.n	80089b2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80089ae:	2300      	movs	r3, #0
 80089b0:	637b      	str	r3, [r7, #52]	; 0x34
 80089b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089b4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	f383 8811 	msr	BASEPRI, r3
}
 80089bc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80089be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3738      	adds	r7, #56	; 0x38
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b086      	sub	sp, #24
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	60f8      	str	r0, [r7, #12]
 80089d0:	60b9      	str	r1, [r7, #8]
 80089d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80089d4:	2300      	movs	r3, #0
 80089d6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089dc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d10d      	bne.n	8008a02 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d14d      	bne.n	8008a8a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	689b      	ldr	r3, [r3, #8]
 80089f2:	4618      	mov	r0, r3
 80089f4:	f000 ff92 	bl	800991c <xTaskPriorityDisinherit>
 80089f8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	2200      	movs	r2, #0
 80089fe:	609a      	str	r2, [r3, #8]
 8008a00:	e043      	b.n	8008a8a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d119      	bne.n	8008a3c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	6858      	ldr	r0, [r3, #4]
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a10:	461a      	mov	r2, r3
 8008a12:	68b9      	ldr	r1, [r7, #8]
 8008a14:	f001 fffc 	bl	800aa10 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	685a      	ldr	r2, [r3, #4]
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a20:	441a      	add	r2, r3
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	685a      	ldr	r2, [r3, #4]
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	689b      	ldr	r3, [r3, #8]
 8008a2e:	429a      	cmp	r2, r3
 8008a30:	d32b      	bcc.n	8008a8a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681a      	ldr	r2, [r3, #0]
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	605a      	str	r2, [r3, #4]
 8008a3a:	e026      	b.n	8008a8a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	68d8      	ldr	r0, [r3, #12]
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a44:	461a      	mov	r2, r3
 8008a46:	68b9      	ldr	r1, [r7, #8]
 8008a48:	f001 ffe2 	bl	800aa10 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	68da      	ldr	r2, [r3, #12]
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a54:	425b      	negs	r3, r3
 8008a56:	441a      	add	r2, r3
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	68da      	ldr	r2, [r3, #12]
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	429a      	cmp	r2, r3
 8008a66:	d207      	bcs.n	8008a78 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	689a      	ldr	r2, [r3, #8]
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a70:	425b      	negs	r3, r3
 8008a72:	441a      	add	r2, r3
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2b02      	cmp	r3, #2
 8008a7c:	d105      	bne.n	8008a8a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008a7e:	693b      	ldr	r3, [r7, #16]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d002      	beq.n	8008a8a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	3b01      	subs	r3, #1
 8008a88:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	1c5a      	adds	r2, r3, #1
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008a92:	697b      	ldr	r3, [r7, #20]
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3718      	adds	r7, #24
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}

08008a9c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b082      	sub	sp, #8
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d018      	beq.n	8008ae0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	68da      	ldr	r2, [r3, #12]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ab6:	441a      	add	r2, r3
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	68da      	ldr	r2, [r3, #12]
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	689b      	ldr	r3, [r3, #8]
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	d303      	bcc.n	8008ad0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681a      	ldr	r2, [r3, #0]
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	68d9      	ldr	r1, [r3, #12]
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ad8:	461a      	mov	r2, r3
 8008ada:	6838      	ldr	r0, [r7, #0]
 8008adc:	f001 ff98 	bl	800aa10 <memcpy>
	}
}
 8008ae0:	bf00      	nop
 8008ae2:	3708      	adds	r7, #8
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b084      	sub	sp, #16
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008af0:	f001 fc50 	bl	800a394 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008afa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008afc:	e011      	b.n	8008b22 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d012      	beq.n	8008b2c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	3324      	adds	r3, #36	; 0x24
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f000 fd2a 	bl	8009564 <xTaskRemoveFromEventList>
 8008b10:	4603      	mov	r3, r0
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d001      	beq.n	8008b1a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008b16:	f000 fe01 	bl	800971c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008b1a:	7bfb      	ldrb	r3, [r7, #15]
 8008b1c:	3b01      	subs	r3, #1
 8008b1e:	b2db      	uxtb	r3, r3
 8008b20:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	dce9      	bgt.n	8008afe <prvUnlockQueue+0x16>
 8008b2a:	e000      	b.n	8008b2e <prvUnlockQueue+0x46>
					break;
 8008b2c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	22ff      	movs	r2, #255	; 0xff
 8008b32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008b36:	f001 fc5d 	bl	800a3f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008b3a:	f001 fc2b 	bl	800a394 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b44:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008b46:	e011      	b.n	8008b6c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	691b      	ldr	r3, [r3, #16]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d012      	beq.n	8008b76 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	3310      	adds	r3, #16
 8008b54:	4618      	mov	r0, r3
 8008b56:	f000 fd05 	bl	8009564 <xTaskRemoveFromEventList>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d001      	beq.n	8008b64 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008b60:	f000 fddc 	bl	800971c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008b64:	7bbb      	ldrb	r3, [r7, #14]
 8008b66:	3b01      	subs	r3, #1
 8008b68:	b2db      	uxtb	r3, r3
 8008b6a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008b6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	dce9      	bgt.n	8008b48 <prvUnlockQueue+0x60>
 8008b74:	e000      	b.n	8008b78 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008b76:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	22ff      	movs	r2, #255	; 0xff
 8008b7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008b80:	f001 fc38 	bl	800a3f4 <vPortExitCritical>
}
 8008b84:	bf00      	nop
 8008b86:	3710      	adds	r7, #16
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}

08008b8c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b084      	sub	sp, #16
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008b94:	f001 fbfe 	bl	800a394 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d102      	bne.n	8008ba6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	60fb      	str	r3, [r7, #12]
 8008ba4:	e001      	b.n	8008baa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008baa:	f001 fc23 	bl	800a3f4 <vPortExitCritical>

	return xReturn;
 8008bae:	68fb      	ldr	r3, [r7, #12]
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3710      	adds	r7, #16
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}

08008bb8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b084      	sub	sp, #16
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008bc0:	f001 fbe8 	bl	800a394 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bcc:	429a      	cmp	r2, r3
 8008bce:	d102      	bne.n	8008bd6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	60fb      	str	r3, [r7, #12]
 8008bd4:	e001      	b.n	8008bda <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008bda:	f001 fc0b 	bl	800a3f4 <vPortExitCritical>

	return xReturn;
 8008bde:	68fb      	ldr	r3, [r7, #12]
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	3710      	adds	r7, #16
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}

08008be8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008be8:	b480      	push	{r7}
 8008bea:	b085      	sub	sp, #20
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
 8008bf0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	60fb      	str	r3, [r7, #12]
 8008bf6:	e014      	b.n	8008c22 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008bf8:	4a0f      	ldr	r2, [pc, #60]	; (8008c38 <vQueueAddToRegistry+0x50>)
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d10b      	bne.n	8008c1c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008c04:	490c      	ldr	r1, [pc, #48]	; (8008c38 <vQueueAddToRegistry+0x50>)
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	683a      	ldr	r2, [r7, #0]
 8008c0a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008c0e:	4a0a      	ldr	r2, [pc, #40]	; (8008c38 <vQueueAddToRegistry+0x50>)
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	00db      	lsls	r3, r3, #3
 8008c14:	4413      	add	r3, r2
 8008c16:	687a      	ldr	r2, [r7, #4]
 8008c18:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008c1a:	e006      	b.n	8008c2a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	3301      	adds	r3, #1
 8008c20:	60fb      	str	r3, [r7, #12]
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2b07      	cmp	r3, #7
 8008c26:	d9e7      	bls.n	8008bf8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008c28:	bf00      	nop
 8008c2a:	bf00      	nop
 8008c2c:	3714      	adds	r7, #20
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c34:	4770      	bx	lr
 8008c36:	bf00      	nop
 8008c38:	200022c4 	.word	0x200022c4

08008c3c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b086      	sub	sp, #24
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	60f8      	str	r0, [r7, #12]
 8008c44:	60b9      	str	r1, [r7, #8]
 8008c46:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008c4c:	f001 fba2 	bl	800a394 <vPortEnterCritical>
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c56:	b25b      	sxtb	r3, r3
 8008c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c5c:	d103      	bne.n	8008c66 <vQueueWaitForMessageRestricted+0x2a>
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	2200      	movs	r2, #0
 8008c62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c6c:	b25b      	sxtb	r3, r3
 8008c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c72:	d103      	bne.n	8008c7c <vQueueWaitForMessageRestricted+0x40>
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	2200      	movs	r2, #0
 8008c78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c7c:	f001 fbba 	bl	800a3f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d106      	bne.n	8008c96 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	3324      	adds	r3, #36	; 0x24
 8008c8c:	687a      	ldr	r2, [r7, #4]
 8008c8e:	68b9      	ldr	r1, [r7, #8]
 8008c90:	4618      	mov	r0, r3
 8008c92:	f000 fc3b 	bl	800950c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008c96:	6978      	ldr	r0, [r7, #20]
 8008c98:	f7ff ff26 	bl	8008ae8 <prvUnlockQueue>
	}
 8008c9c:	bf00      	nop
 8008c9e:	3718      	adds	r7, #24
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b08e      	sub	sp, #56	; 0x38
 8008ca8:	af04      	add	r7, sp, #16
 8008caa:	60f8      	str	r0, [r7, #12]
 8008cac:	60b9      	str	r1, [r7, #8]
 8008cae:	607a      	str	r2, [r7, #4]
 8008cb0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d10a      	bne.n	8008cce <xTaskCreateStatic+0x2a>
	__asm volatile
 8008cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cbc:	f383 8811 	msr	BASEPRI, r3
 8008cc0:	f3bf 8f6f 	isb	sy
 8008cc4:	f3bf 8f4f 	dsb	sy
 8008cc8:	623b      	str	r3, [r7, #32]
}
 8008cca:	bf00      	nop
 8008ccc:	e7fe      	b.n	8008ccc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d10a      	bne.n	8008cea <xTaskCreateStatic+0x46>
	__asm volatile
 8008cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd8:	f383 8811 	msr	BASEPRI, r3
 8008cdc:	f3bf 8f6f 	isb	sy
 8008ce0:	f3bf 8f4f 	dsb	sy
 8008ce4:	61fb      	str	r3, [r7, #28]
}
 8008ce6:	bf00      	nop
 8008ce8:	e7fe      	b.n	8008ce8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008cea:	235c      	movs	r3, #92	; 0x5c
 8008cec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	2b5c      	cmp	r3, #92	; 0x5c
 8008cf2:	d00a      	beq.n	8008d0a <xTaskCreateStatic+0x66>
	__asm volatile
 8008cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf8:	f383 8811 	msr	BASEPRI, r3
 8008cfc:	f3bf 8f6f 	isb	sy
 8008d00:	f3bf 8f4f 	dsb	sy
 8008d04:	61bb      	str	r3, [r7, #24]
}
 8008d06:	bf00      	nop
 8008d08:	e7fe      	b.n	8008d08 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008d0a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d01e      	beq.n	8008d50 <xTaskCreateStatic+0xac>
 8008d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d01b      	beq.n	8008d50 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d1a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d20:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d24:	2202      	movs	r2, #2
 8008d26:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	9303      	str	r3, [sp, #12]
 8008d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d30:	9302      	str	r3, [sp, #8]
 8008d32:	f107 0314 	add.w	r3, r7, #20
 8008d36:	9301      	str	r3, [sp, #4]
 8008d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d3a:	9300      	str	r3, [sp, #0]
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	687a      	ldr	r2, [r7, #4]
 8008d40:	68b9      	ldr	r1, [r7, #8]
 8008d42:	68f8      	ldr	r0, [r7, #12]
 8008d44:	f000 f850 	bl	8008de8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008d48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008d4a:	f000 f8dd 	bl	8008f08 <prvAddNewTaskToReadyList>
 8008d4e:	e001      	b.n	8008d54 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008d50:	2300      	movs	r3, #0
 8008d52:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008d54:	697b      	ldr	r3, [r7, #20]
	}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3728      	adds	r7, #40	; 0x28
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}

08008d5e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008d5e:	b580      	push	{r7, lr}
 8008d60:	b08c      	sub	sp, #48	; 0x30
 8008d62:	af04      	add	r7, sp, #16
 8008d64:	60f8      	str	r0, [r7, #12]
 8008d66:	60b9      	str	r1, [r7, #8]
 8008d68:	603b      	str	r3, [r7, #0]
 8008d6a:	4613      	mov	r3, r2
 8008d6c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008d6e:	88fb      	ldrh	r3, [r7, #6]
 8008d70:	009b      	lsls	r3, r3, #2
 8008d72:	4618      	mov	r0, r3
 8008d74:	f001 fc30 	bl	800a5d8 <pvPortMalloc>
 8008d78:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d00e      	beq.n	8008d9e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008d80:	205c      	movs	r0, #92	; 0x5c
 8008d82:	f001 fc29 	bl	800a5d8 <pvPortMalloc>
 8008d86:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008d88:	69fb      	ldr	r3, [r7, #28]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d003      	beq.n	8008d96 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008d8e:	69fb      	ldr	r3, [r7, #28]
 8008d90:	697a      	ldr	r2, [r7, #20]
 8008d92:	631a      	str	r2, [r3, #48]	; 0x30
 8008d94:	e005      	b.n	8008da2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008d96:	6978      	ldr	r0, [r7, #20]
 8008d98:	f001 fcea 	bl	800a770 <vPortFree>
 8008d9c:	e001      	b.n	8008da2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008da2:	69fb      	ldr	r3, [r7, #28]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d017      	beq.n	8008dd8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008da8:	69fb      	ldr	r3, [r7, #28]
 8008daa:	2200      	movs	r2, #0
 8008dac:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008db0:	88fa      	ldrh	r2, [r7, #6]
 8008db2:	2300      	movs	r3, #0
 8008db4:	9303      	str	r3, [sp, #12]
 8008db6:	69fb      	ldr	r3, [r7, #28]
 8008db8:	9302      	str	r3, [sp, #8]
 8008dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dbc:	9301      	str	r3, [sp, #4]
 8008dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dc0:	9300      	str	r3, [sp, #0]
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	68b9      	ldr	r1, [r7, #8]
 8008dc6:	68f8      	ldr	r0, [r7, #12]
 8008dc8:	f000 f80e 	bl	8008de8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008dcc:	69f8      	ldr	r0, [r7, #28]
 8008dce:	f000 f89b 	bl	8008f08 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	61bb      	str	r3, [r7, #24]
 8008dd6:	e002      	b.n	8008dde <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8008ddc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008dde:	69bb      	ldr	r3, [r7, #24]
	}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3720      	adds	r7, #32
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b088      	sub	sp, #32
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	60f8      	str	r0, [r7, #12]
 8008df0:	60b9      	str	r1, [r7, #8]
 8008df2:	607a      	str	r2, [r7, #4]
 8008df4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	009b      	lsls	r3, r3, #2
 8008dfe:	461a      	mov	r2, r3
 8008e00:	21a5      	movs	r1, #165	; 0xa5
 8008e02:	f001 fe13 	bl	800aa2c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008e10:	3b01      	subs	r3, #1
 8008e12:	009b      	lsls	r3, r3, #2
 8008e14:	4413      	add	r3, r2
 8008e16:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008e18:	69bb      	ldr	r3, [r7, #24]
 8008e1a:	f023 0307 	bic.w	r3, r3, #7
 8008e1e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008e20:	69bb      	ldr	r3, [r7, #24]
 8008e22:	f003 0307 	and.w	r3, r3, #7
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d00a      	beq.n	8008e40 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e2e:	f383 8811 	msr	BASEPRI, r3
 8008e32:	f3bf 8f6f 	isb	sy
 8008e36:	f3bf 8f4f 	dsb	sy
 8008e3a:	617b      	str	r3, [r7, #20]
}
 8008e3c:	bf00      	nop
 8008e3e:	e7fe      	b.n	8008e3e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d01f      	beq.n	8008e86 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008e46:	2300      	movs	r3, #0
 8008e48:	61fb      	str	r3, [r7, #28]
 8008e4a:	e012      	b.n	8008e72 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008e4c:	68ba      	ldr	r2, [r7, #8]
 8008e4e:	69fb      	ldr	r3, [r7, #28]
 8008e50:	4413      	add	r3, r2
 8008e52:	7819      	ldrb	r1, [r3, #0]
 8008e54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e56:	69fb      	ldr	r3, [r7, #28]
 8008e58:	4413      	add	r3, r2
 8008e5a:	3334      	adds	r3, #52	; 0x34
 8008e5c:	460a      	mov	r2, r1
 8008e5e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008e60:	68ba      	ldr	r2, [r7, #8]
 8008e62:	69fb      	ldr	r3, [r7, #28]
 8008e64:	4413      	add	r3, r2
 8008e66:	781b      	ldrb	r3, [r3, #0]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d006      	beq.n	8008e7a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008e6c:	69fb      	ldr	r3, [r7, #28]
 8008e6e:	3301      	adds	r3, #1
 8008e70:	61fb      	str	r3, [r7, #28]
 8008e72:	69fb      	ldr	r3, [r7, #28]
 8008e74:	2b0f      	cmp	r3, #15
 8008e76:	d9e9      	bls.n	8008e4c <prvInitialiseNewTask+0x64>
 8008e78:	e000      	b.n	8008e7c <prvInitialiseNewTask+0x94>
			{
				break;
 8008e7a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e7e:	2200      	movs	r2, #0
 8008e80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008e84:	e003      	b.n	8008e8e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e88:	2200      	movs	r2, #0
 8008e8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e90:	2b37      	cmp	r3, #55	; 0x37
 8008e92:	d901      	bls.n	8008e98 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008e94:	2337      	movs	r3, #55	; 0x37
 8008e96:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e9c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ea2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eac:	3304      	adds	r3, #4
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f7ff f8be 	bl	8008030 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb6:	3318      	adds	r3, #24
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f7ff f8b9 	bl	8008030 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ec2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ecc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ed2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008edc:	2200      	movs	r2, #0
 8008ede:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008ee2:	683a      	ldr	r2, [r7, #0]
 8008ee4:	68f9      	ldr	r1, [r7, #12]
 8008ee6:	69b8      	ldr	r0, [r7, #24]
 8008ee8:	f001 f928 	bl	800a13c <pxPortInitialiseStack>
 8008eec:	4602      	mov	r2, r0
 8008eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d002      	beq.n	8008efe <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008efa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008efc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008efe:	bf00      	nop
 8008f00:	3720      	adds	r7, #32
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}
	...

08008f08 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b082      	sub	sp, #8
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008f10:	f001 fa40 	bl	800a394 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008f14:	4b2d      	ldr	r3, [pc, #180]	; (8008fcc <prvAddNewTaskToReadyList+0xc4>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	3301      	adds	r3, #1
 8008f1a:	4a2c      	ldr	r2, [pc, #176]	; (8008fcc <prvAddNewTaskToReadyList+0xc4>)
 8008f1c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008f1e:	4b2c      	ldr	r3, [pc, #176]	; (8008fd0 <prvAddNewTaskToReadyList+0xc8>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d109      	bne.n	8008f3a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008f26:	4a2a      	ldr	r2, [pc, #168]	; (8008fd0 <prvAddNewTaskToReadyList+0xc8>)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008f2c:	4b27      	ldr	r3, [pc, #156]	; (8008fcc <prvAddNewTaskToReadyList+0xc4>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	2b01      	cmp	r3, #1
 8008f32:	d110      	bne.n	8008f56 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008f34:	f000 fc16 	bl	8009764 <prvInitialiseTaskLists>
 8008f38:	e00d      	b.n	8008f56 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008f3a:	4b26      	ldr	r3, [pc, #152]	; (8008fd4 <prvAddNewTaskToReadyList+0xcc>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d109      	bne.n	8008f56 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008f42:	4b23      	ldr	r3, [pc, #140]	; (8008fd0 <prvAddNewTaskToReadyList+0xc8>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	d802      	bhi.n	8008f56 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008f50:	4a1f      	ldr	r2, [pc, #124]	; (8008fd0 <prvAddNewTaskToReadyList+0xc8>)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008f56:	4b20      	ldr	r3, [pc, #128]	; (8008fd8 <prvAddNewTaskToReadyList+0xd0>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	4a1e      	ldr	r2, [pc, #120]	; (8008fd8 <prvAddNewTaskToReadyList+0xd0>)
 8008f5e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008f60:	4b1d      	ldr	r3, [pc, #116]	; (8008fd8 <prvAddNewTaskToReadyList+0xd0>)
 8008f62:	681a      	ldr	r2, [r3, #0]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f6c:	4b1b      	ldr	r3, [pc, #108]	; (8008fdc <prvAddNewTaskToReadyList+0xd4>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	429a      	cmp	r2, r3
 8008f72:	d903      	bls.n	8008f7c <prvAddNewTaskToReadyList+0x74>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f78:	4a18      	ldr	r2, [pc, #96]	; (8008fdc <prvAddNewTaskToReadyList+0xd4>)
 8008f7a:	6013      	str	r3, [r2, #0]
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f80:	4613      	mov	r3, r2
 8008f82:	009b      	lsls	r3, r3, #2
 8008f84:	4413      	add	r3, r2
 8008f86:	009b      	lsls	r3, r3, #2
 8008f88:	4a15      	ldr	r2, [pc, #84]	; (8008fe0 <prvAddNewTaskToReadyList+0xd8>)
 8008f8a:	441a      	add	r2, r3
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	3304      	adds	r3, #4
 8008f90:	4619      	mov	r1, r3
 8008f92:	4610      	mov	r0, r2
 8008f94:	f7ff f859 	bl	800804a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008f98:	f001 fa2c 	bl	800a3f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008f9c:	4b0d      	ldr	r3, [pc, #52]	; (8008fd4 <prvAddNewTaskToReadyList+0xcc>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d00e      	beq.n	8008fc2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008fa4:	4b0a      	ldr	r3, [pc, #40]	; (8008fd0 <prvAddNewTaskToReadyList+0xc8>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fae:	429a      	cmp	r2, r3
 8008fb0:	d207      	bcs.n	8008fc2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008fb2:	4b0c      	ldr	r3, [pc, #48]	; (8008fe4 <prvAddNewTaskToReadyList+0xdc>)
 8008fb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fb8:	601a      	str	r2, [r3, #0]
 8008fba:	f3bf 8f4f 	dsb	sy
 8008fbe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008fc2:	bf00      	nop
 8008fc4:	3708      	adds	r7, #8
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}
 8008fca:	bf00      	nop
 8008fcc:	200027d8 	.word	0x200027d8
 8008fd0:	20002304 	.word	0x20002304
 8008fd4:	200027e4 	.word	0x200027e4
 8008fd8:	200027f4 	.word	0x200027f4
 8008fdc:	200027e0 	.word	0x200027e0
 8008fe0:	20002308 	.word	0x20002308
 8008fe4:	e000ed04 	.word	0xe000ed04

08008fe8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b084      	sub	sp, #16
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d017      	beq.n	800902a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008ffa:	4b13      	ldr	r3, [pc, #76]	; (8009048 <vTaskDelay+0x60>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d00a      	beq.n	8009018 <vTaskDelay+0x30>
	__asm volatile
 8009002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009006:	f383 8811 	msr	BASEPRI, r3
 800900a:	f3bf 8f6f 	isb	sy
 800900e:	f3bf 8f4f 	dsb	sy
 8009012:	60bb      	str	r3, [r7, #8]
}
 8009014:	bf00      	nop
 8009016:	e7fe      	b.n	8009016 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009018:	f000 f880 	bl	800911c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800901c:	2100      	movs	r1, #0
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 fcea 	bl	80099f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009024:	f000 f888 	bl	8009138 <xTaskResumeAll>
 8009028:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d107      	bne.n	8009040 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009030:	4b06      	ldr	r3, [pc, #24]	; (800904c <vTaskDelay+0x64>)
 8009032:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009036:	601a      	str	r2, [r3, #0]
 8009038:	f3bf 8f4f 	dsb	sy
 800903c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009040:	bf00      	nop
 8009042:	3710      	adds	r7, #16
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}
 8009048:	20002800 	.word	0x20002800
 800904c:	e000ed04 	.word	0xe000ed04

08009050 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b08a      	sub	sp, #40	; 0x28
 8009054:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009056:	2300      	movs	r3, #0
 8009058:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800905a:	2300      	movs	r3, #0
 800905c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800905e:	463a      	mov	r2, r7
 8009060:	1d39      	adds	r1, r7, #4
 8009062:	f107 0308 	add.w	r3, r7, #8
 8009066:	4618      	mov	r0, r3
 8009068:	f7fe ff8e 	bl	8007f88 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800906c:	6839      	ldr	r1, [r7, #0]
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	68ba      	ldr	r2, [r7, #8]
 8009072:	9202      	str	r2, [sp, #8]
 8009074:	9301      	str	r3, [sp, #4]
 8009076:	2300      	movs	r3, #0
 8009078:	9300      	str	r3, [sp, #0]
 800907a:	2300      	movs	r3, #0
 800907c:	460a      	mov	r2, r1
 800907e:	4921      	ldr	r1, [pc, #132]	; (8009104 <vTaskStartScheduler+0xb4>)
 8009080:	4821      	ldr	r0, [pc, #132]	; (8009108 <vTaskStartScheduler+0xb8>)
 8009082:	f7ff fe0f 	bl	8008ca4 <xTaskCreateStatic>
 8009086:	4603      	mov	r3, r0
 8009088:	4a20      	ldr	r2, [pc, #128]	; (800910c <vTaskStartScheduler+0xbc>)
 800908a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800908c:	4b1f      	ldr	r3, [pc, #124]	; (800910c <vTaskStartScheduler+0xbc>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d002      	beq.n	800909a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009094:	2301      	movs	r3, #1
 8009096:	617b      	str	r3, [r7, #20]
 8009098:	e001      	b.n	800909e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800909a:	2300      	movs	r3, #0
 800909c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	2b01      	cmp	r3, #1
 80090a2:	d102      	bne.n	80090aa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80090a4:	f000 fcfc 	bl	8009aa0 <xTimerCreateTimerTask>
 80090a8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	d116      	bne.n	80090de <vTaskStartScheduler+0x8e>
	__asm volatile
 80090b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b4:	f383 8811 	msr	BASEPRI, r3
 80090b8:	f3bf 8f6f 	isb	sy
 80090bc:	f3bf 8f4f 	dsb	sy
 80090c0:	613b      	str	r3, [r7, #16]
}
 80090c2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80090c4:	4b12      	ldr	r3, [pc, #72]	; (8009110 <vTaskStartScheduler+0xc0>)
 80090c6:	f04f 32ff 	mov.w	r2, #4294967295
 80090ca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80090cc:	4b11      	ldr	r3, [pc, #68]	; (8009114 <vTaskStartScheduler+0xc4>)
 80090ce:	2201      	movs	r2, #1
 80090d0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80090d2:	4b11      	ldr	r3, [pc, #68]	; (8009118 <vTaskStartScheduler+0xc8>)
 80090d4:	2200      	movs	r2, #0
 80090d6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80090d8:	f001 f8ba 	bl	800a250 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80090dc:	e00e      	b.n	80090fc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090e4:	d10a      	bne.n	80090fc <vTaskStartScheduler+0xac>
	__asm volatile
 80090e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ea:	f383 8811 	msr	BASEPRI, r3
 80090ee:	f3bf 8f6f 	isb	sy
 80090f2:	f3bf 8f4f 	dsb	sy
 80090f6:	60fb      	str	r3, [r7, #12]
}
 80090f8:	bf00      	nop
 80090fa:	e7fe      	b.n	80090fa <vTaskStartScheduler+0xaa>
}
 80090fc:	bf00      	nop
 80090fe:	3718      	adds	r7, #24
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}
 8009104:	0800c6ec 	.word	0x0800c6ec
 8009108:	08009735 	.word	0x08009735
 800910c:	200027fc 	.word	0x200027fc
 8009110:	200027f8 	.word	0x200027f8
 8009114:	200027e4 	.word	0x200027e4
 8009118:	200027dc 	.word	0x200027dc

0800911c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800911c:	b480      	push	{r7}
 800911e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009120:	4b04      	ldr	r3, [pc, #16]	; (8009134 <vTaskSuspendAll+0x18>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	3301      	adds	r3, #1
 8009126:	4a03      	ldr	r2, [pc, #12]	; (8009134 <vTaskSuspendAll+0x18>)
 8009128:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800912a:	bf00      	nop
 800912c:	46bd      	mov	sp, r7
 800912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009132:	4770      	bx	lr
 8009134:	20002800 	.word	0x20002800

08009138 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b084      	sub	sp, #16
 800913c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800913e:	2300      	movs	r3, #0
 8009140:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009142:	2300      	movs	r3, #0
 8009144:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009146:	4b42      	ldr	r3, [pc, #264]	; (8009250 <xTaskResumeAll+0x118>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d10a      	bne.n	8009164 <xTaskResumeAll+0x2c>
	__asm volatile
 800914e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009152:	f383 8811 	msr	BASEPRI, r3
 8009156:	f3bf 8f6f 	isb	sy
 800915a:	f3bf 8f4f 	dsb	sy
 800915e:	603b      	str	r3, [r7, #0]
}
 8009160:	bf00      	nop
 8009162:	e7fe      	b.n	8009162 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009164:	f001 f916 	bl	800a394 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009168:	4b39      	ldr	r3, [pc, #228]	; (8009250 <xTaskResumeAll+0x118>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	3b01      	subs	r3, #1
 800916e:	4a38      	ldr	r2, [pc, #224]	; (8009250 <xTaskResumeAll+0x118>)
 8009170:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009172:	4b37      	ldr	r3, [pc, #220]	; (8009250 <xTaskResumeAll+0x118>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d162      	bne.n	8009240 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800917a:	4b36      	ldr	r3, [pc, #216]	; (8009254 <xTaskResumeAll+0x11c>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d05e      	beq.n	8009240 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009182:	e02f      	b.n	80091e4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009184:	4b34      	ldr	r3, [pc, #208]	; (8009258 <xTaskResumeAll+0x120>)
 8009186:	68db      	ldr	r3, [r3, #12]
 8009188:	68db      	ldr	r3, [r3, #12]
 800918a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	3318      	adds	r3, #24
 8009190:	4618      	mov	r0, r3
 8009192:	f7fe ffb7 	bl	8008104 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	3304      	adds	r3, #4
 800919a:	4618      	mov	r0, r3
 800919c:	f7fe ffb2 	bl	8008104 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091a4:	4b2d      	ldr	r3, [pc, #180]	; (800925c <xTaskResumeAll+0x124>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	429a      	cmp	r2, r3
 80091aa:	d903      	bls.n	80091b4 <xTaskResumeAll+0x7c>
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091b0:	4a2a      	ldr	r2, [pc, #168]	; (800925c <xTaskResumeAll+0x124>)
 80091b2:	6013      	str	r3, [r2, #0]
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091b8:	4613      	mov	r3, r2
 80091ba:	009b      	lsls	r3, r3, #2
 80091bc:	4413      	add	r3, r2
 80091be:	009b      	lsls	r3, r3, #2
 80091c0:	4a27      	ldr	r2, [pc, #156]	; (8009260 <xTaskResumeAll+0x128>)
 80091c2:	441a      	add	r2, r3
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	3304      	adds	r3, #4
 80091c8:	4619      	mov	r1, r3
 80091ca:	4610      	mov	r0, r2
 80091cc:	f7fe ff3d 	bl	800804a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091d4:	4b23      	ldr	r3, [pc, #140]	; (8009264 <xTaskResumeAll+0x12c>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091da:	429a      	cmp	r2, r3
 80091dc:	d302      	bcc.n	80091e4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80091de:	4b22      	ldr	r3, [pc, #136]	; (8009268 <xTaskResumeAll+0x130>)
 80091e0:	2201      	movs	r2, #1
 80091e2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80091e4:	4b1c      	ldr	r3, [pc, #112]	; (8009258 <xTaskResumeAll+0x120>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d1cb      	bne.n	8009184 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d001      	beq.n	80091f6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80091f2:	f000 fb55 	bl	80098a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80091f6:	4b1d      	ldr	r3, [pc, #116]	; (800926c <xTaskResumeAll+0x134>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d010      	beq.n	8009224 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009202:	f000 f847 	bl	8009294 <xTaskIncrementTick>
 8009206:	4603      	mov	r3, r0
 8009208:	2b00      	cmp	r3, #0
 800920a:	d002      	beq.n	8009212 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800920c:	4b16      	ldr	r3, [pc, #88]	; (8009268 <xTaskResumeAll+0x130>)
 800920e:	2201      	movs	r2, #1
 8009210:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	3b01      	subs	r3, #1
 8009216:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d1f1      	bne.n	8009202 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800921e:	4b13      	ldr	r3, [pc, #76]	; (800926c <xTaskResumeAll+0x134>)
 8009220:	2200      	movs	r2, #0
 8009222:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009224:	4b10      	ldr	r3, [pc, #64]	; (8009268 <xTaskResumeAll+0x130>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d009      	beq.n	8009240 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800922c:	2301      	movs	r3, #1
 800922e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009230:	4b0f      	ldr	r3, [pc, #60]	; (8009270 <xTaskResumeAll+0x138>)
 8009232:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009236:	601a      	str	r2, [r3, #0]
 8009238:	f3bf 8f4f 	dsb	sy
 800923c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009240:	f001 f8d8 	bl	800a3f4 <vPortExitCritical>

	return xAlreadyYielded;
 8009244:	68bb      	ldr	r3, [r7, #8]
}
 8009246:	4618      	mov	r0, r3
 8009248:	3710      	adds	r7, #16
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}
 800924e:	bf00      	nop
 8009250:	20002800 	.word	0x20002800
 8009254:	200027d8 	.word	0x200027d8
 8009258:	20002798 	.word	0x20002798
 800925c:	200027e0 	.word	0x200027e0
 8009260:	20002308 	.word	0x20002308
 8009264:	20002304 	.word	0x20002304
 8009268:	200027ec 	.word	0x200027ec
 800926c:	200027e8 	.word	0x200027e8
 8009270:	e000ed04 	.word	0xe000ed04

08009274 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009274:	b480      	push	{r7}
 8009276:	b083      	sub	sp, #12
 8009278:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800927a:	4b05      	ldr	r3, [pc, #20]	; (8009290 <xTaskGetTickCount+0x1c>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009280:	687b      	ldr	r3, [r7, #4]
}
 8009282:	4618      	mov	r0, r3
 8009284:	370c      	adds	r7, #12
 8009286:	46bd      	mov	sp, r7
 8009288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928c:	4770      	bx	lr
 800928e:	bf00      	nop
 8009290:	200027dc 	.word	0x200027dc

08009294 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b086      	sub	sp, #24
 8009298:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800929a:	2300      	movs	r3, #0
 800929c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800929e:	4b4f      	ldr	r3, [pc, #316]	; (80093dc <xTaskIncrementTick+0x148>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	f040 808f 	bne.w	80093c6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80092a8:	4b4d      	ldr	r3, [pc, #308]	; (80093e0 <xTaskIncrementTick+0x14c>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	3301      	adds	r3, #1
 80092ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80092b0:	4a4b      	ldr	r2, [pc, #300]	; (80093e0 <xTaskIncrementTick+0x14c>)
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d120      	bne.n	80092fe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80092bc:	4b49      	ldr	r3, [pc, #292]	; (80093e4 <xTaskIncrementTick+0x150>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d00a      	beq.n	80092dc <xTaskIncrementTick+0x48>
	__asm volatile
 80092c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ca:	f383 8811 	msr	BASEPRI, r3
 80092ce:	f3bf 8f6f 	isb	sy
 80092d2:	f3bf 8f4f 	dsb	sy
 80092d6:	603b      	str	r3, [r7, #0]
}
 80092d8:	bf00      	nop
 80092da:	e7fe      	b.n	80092da <xTaskIncrementTick+0x46>
 80092dc:	4b41      	ldr	r3, [pc, #260]	; (80093e4 <xTaskIncrementTick+0x150>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	60fb      	str	r3, [r7, #12]
 80092e2:	4b41      	ldr	r3, [pc, #260]	; (80093e8 <xTaskIncrementTick+0x154>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4a3f      	ldr	r2, [pc, #252]	; (80093e4 <xTaskIncrementTick+0x150>)
 80092e8:	6013      	str	r3, [r2, #0]
 80092ea:	4a3f      	ldr	r2, [pc, #252]	; (80093e8 <xTaskIncrementTick+0x154>)
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	6013      	str	r3, [r2, #0]
 80092f0:	4b3e      	ldr	r3, [pc, #248]	; (80093ec <xTaskIncrementTick+0x158>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	3301      	adds	r3, #1
 80092f6:	4a3d      	ldr	r2, [pc, #244]	; (80093ec <xTaskIncrementTick+0x158>)
 80092f8:	6013      	str	r3, [r2, #0]
 80092fa:	f000 fad1 	bl	80098a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80092fe:	4b3c      	ldr	r3, [pc, #240]	; (80093f0 <xTaskIncrementTick+0x15c>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	693a      	ldr	r2, [r7, #16]
 8009304:	429a      	cmp	r2, r3
 8009306:	d349      	bcc.n	800939c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009308:	4b36      	ldr	r3, [pc, #216]	; (80093e4 <xTaskIncrementTick+0x150>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d104      	bne.n	800931c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009312:	4b37      	ldr	r3, [pc, #220]	; (80093f0 <xTaskIncrementTick+0x15c>)
 8009314:	f04f 32ff 	mov.w	r2, #4294967295
 8009318:	601a      	str	r2, [r3, #0]
					break;
 800931a:	e03f      	b.n	800939c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800931c:	4b31      	ldr	r3, [pc, #196]	; (80093e4 <xTaskIncrementTick+0x150>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	68db      	ldr	r3, [r3, #12]
 8009322:	68db      	ldr	r3, [r3, #12]
 8009324:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	685b      	ldr	r3, [r3, #4]
 800932a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800932c:	693a      	ldr	r2, [r7, #16]
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	429a      	cmp	r2, r3
 8009332:	d203      	bcs.n	800933c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009334:	4a2e      	ldr	r2, [pc, #184]	; (80093f0 <xTaskIncrementTick+0x15c>)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800933a:	e02f      	b.n	800939c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	3304      	adds	r3, #4
 8009340:	4618      	mov	r0, r3
 8009342:	f7fe fedf 	bl	8008104 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800934a:	2b00      	cmp	r3, #0
 800934c:	d004      	beq.n	8009358 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	3318      	adds	r3, #24
 8009352:	4618      	mov	r0, r3
 8009354:	f7fe fed6 	bl	8008104 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800935c:	4b25      	ldr	r3, [pc, #148]	; (80093f4 <xTaskIncrementTick+0x160>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	429a      	cmp	r2, r3
 8009362:	d903      	bls.n	800936c <xTaskIncrementTick+0xd8>
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009368:	4a22      	ldr	r2, [pc, #136]	; (80093f4 <xTaskIncrementTick+0x160>)
 800936a:	6013      	str	r3, [r2, #0]
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009370:	4613      	mov	r3, r2
 8009372:	009b      	lsls	r3, r3, #2
 8009374:	4413      	add	r3, r2
 8009376:	009b      	lsls	r3, r3, #2
 8009378:	4a1f      	ldr	r2, [pc, #124]	; (80093f8 <xTaskIncrementTick+0x164>)
 800937a:	441a      	add	r2, r3
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	3304      	adds	r3, #4
 8009380:	4619      	mov	r1, r3
 8009382:	4610      	mov	r0, r2
 8009384:	f7fe fe61 	bl	800804a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800938c:	4b1b      	ldr	r3, [pc, #108]	; (80093fc <xTaskIncrementTick+0x168>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009392:	429a      	cmp	r2, r3
 8009394:	d3b8      	bcc.n	8009308 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009396:	2301      	movs	r3, #1
 8009398:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800939a:	e7b5      	b.n	8009308 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800939c:	4b17      	ldr	r3, [pc, #92]	; (80093fc <xTaskIncrementTick+0x168>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093a2:	4915      	ldr	r1, [pc, #84]	; (80093f8 <xTaskIncrementTick+0x164>)
 80093a4:	4613      	mov	r3, r2
 80093a6:	009b      	lsls	r3, r3, #2
 80093a8:	4413      	add	r3, r2
 80093aa:	009b      	lsls	r3, r3, #2
 80093ac:	440b      	add	r3, r1
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	2b01      	cmp	r3, #1
 80093b2:	d901      	bls.n	80093b8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80093b4:	2301      	movs	r3, #1
 80093b6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80093b8:	4b11      	ldr	r3, [pc, #68]	; (8009400 <xTaskIncrementTick+0x16c>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d007      	beq.n	80093d0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80093c0:	2301      	movs	r3, #1
 80093c2:	617b      	str	r3, [r7, #20]
 80093c4:	e004      	b.n	80093d0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80093c6:	4b0f      	ldr	r3, [pc, #60]	; (8009404 <xTaskIncrementTick+0x170>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	3301      	adds	r3, #1
 80093cc:	4a0d      	ldr	r2, [pc, #52]	; (8009404 <xTaskIncrementTick+0x170>)
 80093ce:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80093d0:	697b      	ldr	r3, [r7, #20]
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3718      	adds	r7, #24
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}
 80093da:	bf00      	nop
 80093dc:	20002800 	.word	0x20002800
 80093e0:	200027dc 	.word	0x200027dc
 80093e4:	20002790 	.word	0x20002790
 80093e8:	20002794 	.word	0x20002794
 80093ec:	200027f0 	.word	0x200027f0
 80093f0:	200027f8 	.word	0x200027f8
 80093f4:	200027e0 	.word	0x200027e0
 80093f8:	20002308 	.word	0x20002308
 80093fc:	20002304 	.word	0x20002304
 8009400:	200027ec 	.word	0x200027ec
 8009404:	200027e8 	.word	0x200027e8

08009408 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009408:	b480      	push	{r7}
 800940a:	b085      	sub	sp, #20
 800940c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800940e:	4b28      	ldr	r3, [pc, #160]	; (80094b0 <vTaskSwitchContext+0xa8>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d003      	beq.n	800941e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009416:	4b27      	ldr	r3, [pc, #156]	; (80094b4 <vTaskSwitchContext+0xac>)
 8009418:	2201      	movs	r2, #1
 800941a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800941c:	e041      	b.n	80094a2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800941e:	4b25      	ldr	r3, [pc, #148]	; (80094b4 <vTaskSwitchContext+0xac>)
 8009420:	2200      	movs	r2, #0
 8009422:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009424:	4b24      	ldr	r3, [pc, #144]	; (80094b8 <vTaskSwitchContext+0xb0>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	60fb      	str	r3, [r7, #12]
 800942a:	e010      	b.n	800944e <vTaskSwitchContext+0x46>
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d10a      	bne.n	8009448 <vTaskSwitchContext+0x40>
	__asm volatile
 8009432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009436:	f383 8811 	msr	BASEPRI, r3
 800943a:	f3bf 8f6f 	isb	sy
 800943e:	f3bf 8f4f 	dsb	sy
 8009442:	607b      	str	r3, [r7, #4]
}
 8009444:	bf00      	nop
 8009446:	e7fe      	b.n	8009446 <vTaskSwitchContext+0x3e>
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	3b01      	subs	r3, #1
 800944c:	60fb      	str	r3, [r7, #12]
 800944e:	491b      	ldr	r1, [pc, #108]	; (80094bc <vTaskSwitchContext+0xb4>)
 8009450:	68fa      	ldr	r2, [r7, #12]
 8009452:	4613      	mov	r3, r2
 8009454:	009b      	lsls	r3, r3, #2
 8009456:	4413      	add	r3, r2
 8009458:	009b      	lsls	r3, r3, #2
 800945a:	440b      	add	r3, r1
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d0e4      	beq.n	800942c <vTaskSwitchContext+0x24>
 8009462:	68fa      	ldr	r2, [r7, #12]
 8009464:	4613      	mov	r3, r2
 8009466:	009b      	lsls	r3, r3, #2
 8009468:	4413      	add	r3, r2
 800946a:	009b      	lsls	r3, r3, #2
 800946c:	4a13      	ldr	r2, [pc, #76]	; (80094bc <vTaskSwitchContext+0xb4>)
 800946e:	4413      	add	r3, r2
 8009470:	60bb      	str	r3, [r7, #8]
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	685b      	ldr	r3, [r3, #4]
 8009476:	685a      	ldr	r2, [r3, #4]
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	605a      	str	r2, [r3, #4]
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	685a      	ldr	r2, [r3, #4]
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	3308      	adds	r3, #8
 8009484:	429a      	cmp	r2, r3
 8009486:	d104      	bne.n	8009492 <vTaskSwitchContext+0x8a>
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	685b      	ldr	r3, [r3, #4]
 800948c:	685a      	ldr	r2, [r3, #4]
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	605a      	str	r2, [r3, #4]
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	68db      	ldr	r3, [r3, #12]
 8009498:	4a09      	ldr	r2, [pc, #36]	; (80094c0 <vTaskSwitchContext+0xb8>)
 800949a:	6013      	str	r3, [r2, #0]
 800949c:	4a06      	ldr	r2, [pc, #24]	; (80094b8 <vTaskSwitchContext+0xb0>)
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	6013      	str	r3, [r2, #0]
}
 80094a2:	bf00      	nop
 80094a4:	3714      	adds	r7, #20
 80094a6:	46bd      	mov	sp, r7
 80094a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ac:	4770      	bx	lr
 80094ae:	bf00      	nop
 80094b0:	20002800 	.word	0x20002800
 80094b4:	200027ec 	.word	0x200027ec
 80094b8:	200027e0 	.word	0x200027e0
 80094bc:	20002308 	.word	0x20002308
 80094c0:	20002304 	.word	0x20002304

080094c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b084      	sub	sp, #16
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
 80094cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d10a      	bne.n	80094ea <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80094d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d8:	f383 8811 	msr	BASEPRI, r3
 80094dc:	f3bf 8f6f 	isb	sy
 80094e0:	f3bf 8f4f 	dsb	sy
 80094e4:	60fb      	str	r3, [r7, #12]
}
 80094e6:	bf00      	nop
 80094e8:	e7fe      	b.n	80094e8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80094ea:	4b07      	ldr	r3, [pc, #28]	; (8009508 <vTaskPlaceOnEventList+0x44>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	3318      	adds	r3, #24
 80094f0:	4619      	mov	r1, r3
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f7fe fdcd 	bl	8008092 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80094f8:	2101      	movs	r1, #1
 80094fa:	6838      	ldr	r0, [r7, #0]
 80094fc:	f000 fa7c 	bl	80099f8 <prvAddCurrentTaskToDelayedList>
}
 8009500:	bf00      	nop
 8009502:	3710      	adds	r7, #16
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}
 8009508:	20002304 	.word	0x20002304

0800950c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800950c:	b580      	push	{r7, lr}
 800950e:	b086      	sub	sp, #24
 8009510:	af00      	add	r7, sp, #0
 8009512:	60f8      	str	r0, [r7, #12]
 8009514:	60b9      	str	r1, [r7, #8]
 8009516:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d10a      	bne.n	8009534 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800951e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009522:	f383 8811 	msr	BASEPRI, r3
 8009526:	f3bf 8f6f 	isb	sy
 800952a:	f3bf 8f4f 	dsb	sy
 800952e:	617b      	str	r3, [r7, #20]
}
 8009530:	bf00      	nop
 8009532:	e7fe      	b.n	8009532 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009534:	4b0a      	ldr	r3, [pc, #40]	; (8009560 <vTaskPlaceOnEventListRestricted+0x54>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	3318      	adds	r3, #24
 800953a:	4619      	mov	r1, r3
 800953c:	68f8      	ldr	r0, [r7, #12]
 800953e:	f7fe fd84 	bl	800804a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d002      	beq.n	800954e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009548:	f04f 33ff 	mov.w	r3, #4294967295
 800954c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800954e:	6879      	ldr	r1, [r7, #4]
 8009550:	68b8      	ldr	r0, [r7, #8]
 8009552:	f000 fa51 	bl	80099f8 <prvAddCurrentTaskToDelayedList>
	}
 8009556:	bf00      	nop
 8009558:	3718      	adds	r7, #24
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}
 800955e:	bf00      	nop
 8009560:	20002304 	.word	0x20002304

08009564 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b086      	sub	sp, #24
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	68db      	ldr	r3, [r3, #12]
 8009570:	68db      	ldr	r3, [r3, #12]
 8009572:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009574:	693b      	ldr	r3, [r7, #16]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d10a      	bne.n	8009590 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800957a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800957e:	f383 8811 	msr	BASEPRI, r3
 8009582:	f3bf 8f6f 	isb	sy
 8009586:	f3bf 8f4f 	dsb	sy
 800958a:	60fb      	str	r3, [r7, #12]
}
 800958c:	bf00      	nop
 800958e:	e7fe      	b.n	800958e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009590:	693b      	ldr	r3, [r7, #16]
 8009592:	3318      	adds	r3, #24
 8009594:	4618      	mov	r0, r3
 8009596:	f7fe fdb5 	bl	8008104 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800959a:	4b1e      	ldr	r3, [pc, #120]	; (8009614 <xTaskRemoveFromEventList+0xb0>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d11d      	bne.n	80095de <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	3304      	adds	r3, #4
 80095a6:	4618      	mov	r0, r3
 80095a8:	f7fe fdac 	bl	8008104 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095b0:	4b19      	ldr	r3, [pc, #100]	; (8009618 <xTaskRemoveFromEventList+0xb4>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	429a      	cmp	r2, r3
 80095b6:	d903      	bls.n	80095c0 <xTaskRemoveFromEventList+0x5c>
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095bc:	4a16      	ldr	r2, [pc, #88]	; (8009618 <xTaskRemoveFromEventList+0xb4>)
 80095be:	6013      	str	r3, [r2, #0]
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095c4:	4613      	mov	r3, r2
 80095c6:	009b      	lsls	r3, r3, #2
 80095c8:	4413      	add	r3, r2
 80095ca:	009b      	lsls	r3, r3, #2
 80095cc:	4a13      	ldr	r2, [pc, #76]	; (800961c <xTaskRemoveFromEventList+0xb8>)
 80095ce:	441a      	add	r2, r3
 80095d0:	693b      	ldr	r3, [r7, #16]
 80095d2:	3304      	adds	r3, #4
 80095d4:	4619      	mov	r1, r3
 80095d6:	4610      	mov	r0, r2
 80095d8:	f7fe fd37 	bl	800804a <vListInsertEnd>
 80095dc:	e005      	b.n	80095ea <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	3318      	adds	r3, #24
 80095e2:	4619      	mov	r1, r3
 80095e4:	480e      	ldr	r0, [pc, #56]	; (8009620 <xTaskRemoveFromEventList+0xbc>)
 80095e6:	f7fe fd30 	bl	800804a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095ee:	4b0d      	ldr	r3, [pc, #52]	; (8009624 <xTaskRemoveFromEventList+0xc0>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095f4:	429a      	cmp	r2, r3
 80095f6:	d905      	bls.n	8009604 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80095f8:	2301      	movs	r3, #1
 80095fa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80095fc:	4b0a      	ldr	r3, [pc, #40]	; (8009628 <xTaskRemoveFromEventList+0xc4>)
 80095fe:	2201      	movs	r2, #1
 8009600:	601a      	str	r2, [r3, #0]
 8009602:	e001      	b.n	8009608 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009604:	2300      	movs	r3, #0
 8009606:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009608:	697b      	ldr	r3, [r7, #20]
}
 800960a:	4618      	mov	r0, r3
 800960c:	3718      	adds	r7, #24
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}
 8009612:	bf00      	nop
 8009614:	20002800 	.word	0x20002800
 8009618:	200027e0 	.word	0x200027e0
 800961c:	20002308 	.word	0x20002308
 8009620:	20002798 	.word	0x20002798
 8009624:	20002304 	.word	0x20002304
 8009628:	200027ec 	.word	0x200027ec

0800962c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800962c:	b480      	push	{r7}
 800962e:	b083      	sub	sp, #12
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009634:	4b06      	ldr	r3, [pc, #24]	; (8009650 <vTaskInternalSetTimeOutState+0x24>)
 8009636:	681a      	ldr	r2, [r3, #0]
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800963c:	4b05      	ldr	r3, [pc, #20]	; (8009654 <vTaskInternalSetTimeOutState+0x28>)
 800963e:	681a      	ldr	r2, [r3, #0]
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	605a      	str	r2, [r3, #4]
}
 8009644:	bf00      	nop
 8009646:	370c      	adds	r7, #12
 8009648:	46bd      	mov	sp, r7
 800964a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964e:	4770      	bx	lr
 8009650:	200027f0 	.word	0x200027f0
 8009654:	200027dc 	.word	0x200027dc

08009658 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b088      	sub	sp, #32
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d10a      	bne.n	800967e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800966c:	f383 8811 	msr	BASEPRI, r3
 8009670:	f3bf 8f6f 	isb	sy
 8009674:	f3bf 8f4f 	dsb	sy
 8009678:	613b      	str	r3, [r7, #16]
}
 800967a:	bf00      	nop
 800967c:	e7fe      	b.n	800967c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d10a      	bne.n	800969a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009688:	f383 8811 	msr	BASEPRI, r3
 800968c:	f3bf 8f6f 	isb	sy
 8009690:	f3bf 8f4f 	dsb	sy
 8009694:	60fb      	str	r3, [r7, #12]
}
 8009696:	bf00      	nop
 8009698:	e7fe      	b.n	8009698 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800969a:	f000 fe7b 	bl	800a394 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800969e:	4b1d      	ldr	r3, [pc, #116]	; (8009714 <xTaskCheckForTimeOut+0xbc>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	685b      	ldr	r3, [r3, #4]
 80096a8:	69ba      	ldr	r2, [r7, #24]
 80096aa:	1ad3      	subs	r3, r2, r3
 80096ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096b6:	d102      	bne.n	80096be <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80096b8:	2300      	movs	r3, #0
 80096ba:	61fb      	str	r3, [r7, #28]
 80096bc:	e023      	b.n	8009706 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681a      	ldr	r2, [r3, #0]
 80096c2:	4b15      	ldr	r3, [pc, #84]	; (8009718 <xTaskCheckForTimeOut+0xc0>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	429a      	cmp	r2, r3
 80096c8:	d007      	beq.n	80096da <xTaskCheckForTimeOut+0x82>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	685b      	ldr	r3, [r3, #4]
 80096ce:	69ba      	ldr	r2, [r7, #24]
 80096d0:	429a      	cmp	r2, r3
 80096d2:	d302      	bcc.n	80096da <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80096d4:	2301      	movs	r3, #1
 80096d6:	61fb      	str	r3, [r7, #28]
 80096d8:	e015      	b.n	8009706 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	697a      	ldr	r2, [r7, #20]
 80096e0:	429a      	cmp	r2, r3
 80096e2:	d20b      	bcs.n	80096fc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	681a      	ldr	r2, [r3, #0]
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	1ad2      	subs	r2, r2, r3
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	f7ff ff9b 	bl	800962c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80096f6:	2300      	movs	r3, #0
 80096f8:	61fb      	str	r3, [r7, #28]
 80096fa:	e004      	b.n	8009706 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	2200      	movs	r2, #0
 8009700:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009702:	2301      	movs	r3, #1
 8009704:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009706:	f000 fe75 	bl	800a3f4 <vPortExitCritical>

	return xReturn;
 800970a:	69fb      	ldr	r3, [r7, #28]
}
 800970c:	4618      	mov	r0, r3
 800970e:	3720      	adds	r7, #32
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}
 8009714:	200027dc 	.word	0x200027dc
 8009718:	200027f0 	.word	0x200027f0

0800971c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800971c:	b480      	push	{r7}
 800971e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009720:	4b03      	ldr	r3, [pc, #12]	; (8009730 <vTaskMissedYield+0x14>)
 8009722:	2201      	movs	r2, #1
 8009724:	601a      	str	r2, [r3, #0]
}
 8009726:	bf00      	nop
 8009728:	46bd      	mov	sp, r7
 800972a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972e:	4770      	bx	lr
 8009730:	200027ec 	.word	0x200027ec

08009734 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b082      	sub	sp, #8
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800973c:	f000 f852 	bl	80097e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009740:	4b06      	ldr	r3, [pc, #24]	; (800975c <prvIdleTask+0x28>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	2b01      	cmp	r3, #1
 8009746:	d9f9      	bls.n	800973c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009748:	4b05      	ldr	r3, [pc, #20]	; (8009760 <prvIdleTask+0x2c>)
 800974a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800974e:	601a      	str	r2, [r3, #0]
 8009750:	f3bf 8f4f 	dsb	sy
 8009754:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009758:	e7f0      	b.n	800973c <prvIdleTask+0x8>
 800975a:	bf00      	nop
 800975c:	20002308 	.word	0x20002308
 8009760:	e000ed04 	.word	0xe000ed04

08009764 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b082      	sub	sp, #8
 8009768:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800976a:	2300      	movs	r3, #0
 800976c:	607b      	str	r3, [r7, #4]
 800976e:	e00c      	b.n	800978a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009770:	687a      	ldr	r2, [r7, #4]
 8009772:	4613      	mov	r3, r2
 8009774:	009b      	lsls	r3, r3, #2
 8009776:	4413      	add	r3, r2
 8009778:	009b      	lsls	r3, r3, #2
 800977a:	4a12      	ldr	r2, [pc, #72]	; (80097c4 <prvInitialiseTaskLists+0x60>)
 800977c:	4413      	add	r3, r2
 800977e:	4618      	mov	r0, r3
 8009780:	f7fe fc36 	bl	8007ff0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	3301      	adds	r3, #1
 8009788:	607b      	str	r3, [r7, #4]
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2b37      	cmp	r3, #55	; 0x37
 800978e:	d9ef      	bls.n	8009770 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009790:	480d      	ldr	r0, [pc, #52]	; (80097c8 <prvInitialiseTaskLists+0x64>)
 8009792:	f7fe fc2d 	bl	8007ff0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009796:	480d      	ldr	r0, [pc, #52]	; (80097cc <prvInitialiseTaskLists+0x68>)
 8009798:	f7fe fc2a 	bl	8007ff0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800979c:	480c      	ldr	r0, [pc, #48]	; (80097d0 <prvInitialiseTaskLists+0x6c>)
 800979e:	f7fe fc27 	bl	8007ff0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80097a2:	480c      	ldr	r0, [pc, #48]	; (80097d4 <prvInitialiseTaskLists+0x70>)
 80097a4:	f7fe fc24 	bl	8007ff0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80097a8:	480b      	ldr	r0, [pc, #44]	; (80097d8 <prvInitialiseTaskLists+0x74>)
 80097aa:	f7fe fc21 	bl	8007ff0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80097ae:	4b0b      	ldr	r3, [pc, #44]	; (80097dc <prvInitialiseTaskLists+0x78>)
 80097b0:	4a05      	ldr	r2, [pc, #20]	; (80097c8 <prvInitialiseTaskLists+0x64>)
 80097b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80097b4:	4b0a      	ldr	r3, [pc, #40]	; (80097e0 <prvInitialiseTaskLists+0x7c>)
 80097b6:	4a05      	ldr	r2, [pc, #20]	; (80097cc <prvInitialiseTaskLists+0x68>)
 80097b8:	601a      	str	r2, [r3, #0]
}
 80097ba:	bf00      	nop
 80097bc:	3708      	adds	r7, #8
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}
 80097c2:	bf00      	nop
 80097c4:	20002308 	.word	0x20002308
 80097c8:	20002768 	.word	0x20002768
 80097cc:	2000277c 	.word	0x2000277c
 80097d0:	20002798 	.word	0x20002798
 80097d4:	200027ac 	.word	0x200027ac
 80097d8:	200027c4 	.word	0x200027c4
 80097dc:	20002790 	.word	0x20002790
 80097e0:	20002794 	.word	0x20002794

080097e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b082      	sub	sp, #8
 80097e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80097ea:	e019      	b.n	8009820 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80097ec:	f000 fdd2 	bl	800a394 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097f0:	4b10      	ldr	r3, [pc, #64]	; (8009834 <prvCheckTasksWaitingTermination+0x50>)
 80097f2:	68db      	ldr	r3, [r3, #12]
 80097f4:	68db      	ldr	r3, [r3, #12]
 80097f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	3304      	adds	r3, #4
 80097fc:	4618      	mov	r0, r3
 80097fe:	f7fe fc81 	bl	8008104 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009802:	4b0d      	ldr	r3, [pc, #52]	; (8009838 <prvCheckTasksWaitingTermination+0x54>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	3b01      	subs	r3, #1
 8009808:	4a0b      	ldr	r2, [pc, #44]	; (8009838 <prvCheckTasksWaitingTermination+0x54>)
 800980a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800980c:	4b0b      	ldr	r3, [pc, #44]	; (800983c <prvCheckTasksWaitingTermination+0x58>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	3b01      	subs	r3, #1
 8009812:	4a0a      	ldr	r2, [pc, #40]	; (800983c <prvCheckTasksWaitingTermination+0x58>)
 8009814:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009816:	f000 fded 	bl	800a3f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f000 f810 	bl	8009840 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009820:	4b06      	ldr	r3, [pc, #24]	; (800983c <prvCheckTasksWaitingTermination+0x58>)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d1e1      	bne.n	80097ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009828:	bf00      	nop
 800982a:	bf00      	nop
 800982c:	3708      	adds	r7, #8
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}
 8009832:	bf00      	nop
 8009834:	200027ac 	.word	0x200027ac
 8009838:	200027d8 	.word	0x200027d8
 800983c:	200027c0 	.word	0x200027c0

08009840 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009840:	b580      	push	{r7, lr}
 8009842:	b084      	sub	sp, #16
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800984e:	2b00      	cmp	r3, #0
 8009850:	d108      	bne.n	8009864 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009856:	4618      	mov	r0, r3
 8009858:	f000 ff8a 	bl	800a770 <vPortFree>
				vPortFree( pxTCB );
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f000 ff87 	bl	800a770 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009862:	e018      	b.n	8009896 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800986a:	2b01      	cmp	r3, #1
 800986c:	d103      	bne.n	8009876 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f000 ff7e 	bl	800a770 <vPortFree>
	}
 8009874:	e00f      	b.n	8009896 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800987c:	2b02      	cmp	r3, #2
 800987e:	d00a      	beq.n	8009896 <prvDeleteTCB+0x56>
	__asm volatile
 8009880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009884:	f383 8811 	msr	BASEPRI, r3
 8009888:	f3bf 8f6f 	isb	sy
 800988c:	f3bf 8f4f 	dsb	sy
 8009890:	60fb      	str	r3, [r7, #12]
}
 8009892:	bf00      	nop
 8009894:	e7fe      	b.n	8009894 <prvDeleteTCB+0x54>
	}
 8009896:	bf00      	nop
 8009898:	3710      	adds	r7, #16
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}
	...

080098a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80098a0:	b480      	push	{r7}
 80098a2:	b083      	sub	sp, #12
 80098a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80098a6:	4b0c      	ldr	r3, [pc, #48]	; (80098d8 <prvResetNextTaskUnblockTime+0x38>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d104      	bne.n	80098ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80098b0:	4b0a      	ldr	r3, [pc, #40]	; (80098dc <prvResetNextTaskUnblockTime+0x3c>)
 80098b2:	f04f 32ff 	mov.w	r2, #4294967295
 80098b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80098b8:	e008      	b.n	80098cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098ba:	4b07      	ldr	r3, [pc, #28]	; (80098d8 <prvResetNextTaskUnblockTime+0x38>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	68db      	ldr	r3, [r3, #12]
 80098c0:	68db      	ldr	r3, [r3, #12]
 80098c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	685b      	ldr	r3, [r3, #4]
 80098c8:	4a04      	ldr	r2, [pc, #16]	; (80098dc <prvResetNextTaskUnblockTime+0x3c>)
 80098ca:	6013      	str	r3, [r2, #0]
}
 80098cc:	bf00      	nop
 80098ce:	370c      	adds	r7, #12
 80098d0:	46bd      	mov	sp, r7
 80098d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d6:	4770      	bx	lr
 80098d8:	20002790 	.word	0x20002790
 80098dc:	200027f8 	.word	0x200027f8

080098e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80098e0:	b480      	push	{r7}
 80098e2:	b083      	sub	sp, #12
 80098e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80098e6:	4b0b      	ldr	r3, [pc, #44]	; (8009914 <xTaskGetSchedulerState+0x34>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d102      	bne.n	80098f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80098ee:	2301      	movs	r3, #1
 80098f0:	607b      	str	r3, [r7, #4]
 80098f2:	e008      	b.n	8009906 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80098f4:	4b08      	ldr	r3, [pc, #32]	; (8009918 <xTaskGetSchedulerState+0x38>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d102      	bne.n	8009902 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80098fc:	2302      	movs	r3, #2
 80098fe:	607b      	str	r3, [r7, #4]
 8009900:	e001      	b.n	8009906 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009902:	2300      	movs	r3, #0
 8009904:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009906:	687b      	ldr	r3, [r7, #4]
	}
 8009908:	4618      	mov	r0, r3
 800990a:	370c      	adds	r7, #12
 800990c:	46bd      	mov	sp, r7
 800990e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009912:	4770      	bx	lr
 8009914:	200027e4 	.word	0x200027e4
 8009918:	20002800 	.word	0x20002800

0800991c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800991c:	b580      	push	{r7, lr}
 800991e:	b086      	sub	sp, #24
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009928:	2300      	movs	r3, #0
 800992a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d056      	beq.n	80099e0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009932:	4b2e      	ldr	r3, [pc, #184]	; (80099ec <xTaskPriorityDisinherit+0xd0>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	693a      	ldr	r2, [r7, #16]
 8009938:	429a      	cmp	r2, r3
 800993a:	d00a      	beq.n	8009952 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800993c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009940:	f383 8811 	msr	BASEPRI, r3
 8009944:	f3bf 8f6f 	isb	sy
 8009948:	f3bf 8f4f 	dsb	sy
 800994c:	60fb      	str	r3, [r7, #12]
}
 800994e:	bf00      	nop
 8009950:	e7fe      	b.n	8009950 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009952:	693b      	ldr	r3, [r7, #16]
 8009954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009956:	2b00      	cmp	r3, #0
 8009958:	d10a      	bne.n	8009970 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800995a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800995e:	f383 8811 	msr	BASEPRI, r3
 8009962:	f3bf 8f6f 	isb	sy
 8009966:	f3bf 8f4f 	dsb	sy
 800996a:	60bb      	str	r3, [r7, #8]
}
 800996c:	bf00      	nop
 800996e:	e7fe      	b.n	800996e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009970:	693b      	ldr	r3, [r7, #16]
 8009972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009974:	1e5a      	subs	r2, r3, #1
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009982:	429a      	cmp	r2, r3
 8009984:	d02c      	beq.n	80099e0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800998a:	2b00      	cmp	r3, #0
 800998c:	d128      	bne.n	80099e0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800998e:	693b      	ldr	r3, [r7, #16]
 8009990:	3304      	adds	r3, #4
 8009992:	4618      	mov	r0, r3
 8009994:	f7fe fbb6 	bl	8008104 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009998:	693b      	ldr	r3, [r7, #16]
 800999a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800999c:	693b      	ldr	r3, [r7, #16]
 800999e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099a4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80099ac:	693b      	ldr	r3, [r7, #16]
 80099ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099b0:	4b0f      	ldr	r3, [pc, #60]	; (80099f0 <xTaskPriorityDisinherit+0xd4>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	429a      	cmp	r2, r3
 80099b6:	d903      	bls.n	80099c0 <xTaskPriorityDisinherit+0xa4>
 80099b8:	693b      	ldr	r3, [r7, #16]
 80099ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099bc:	4a0c      	ldr	r2, [pc, #48]	; (80099f0 <xTaskPriorityDisinherit+0xd4>)
 80099be:	6013      	str	r3, [r2, #0]
 80099c0:	693b      	ldr	r3, [r7, #16]
 80099c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099c4:	4613      	mov	r3, r2
 80099c6:	009b      	lsls	r3, r3, #2
 80099c8:	4413      	add	r3, r2
 80099ca:	009b      	lsls	r3, r3, #2
 80099cc:	4a09      	ldr	r2, [pc, #36]	; (80099f4 <xTaskPriorityDisinherit+0xd8>)
 80099ce:	441a      	add	r2, r3
 80099d0:	693b      	ldr	r3, [r7, #16]
 80099d2:	3304      	adds	r3, #4
 80099d4:	4619      	mov	r1, r3
 80099d6:	4610      	mov	r0, r2
 80099d8:	f7fe fb37 	bl	800804a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80099dc:	2301      	movs	r3, #1
 80099de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80099e0:	697b      	ldr	r3, [r7, #20]
	}
 80099e2:	4618      	mov	r0, r3
 80099e4:	3718      	adds	r7, #24
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}
 80099ea:	bf00      	nop
 80099ec:	20002304 	.word	0x20002304
 80099f0:	200027e0 	.word	0x200027e0
 80099f4:	20002308 	.word	0x20002308

080099f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b084      	sub	sp, #16
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
 8009a00:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009a02:	4b21      	ldr	r3, [pc, #132]	; (8009a88 <prvAddCurrentTaskToDelayedList+0x90>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a08:	4b20      	ldr	r3, [pc, #128]	; (8009a8c <prvAddCurrentTaskToDelayedList+0x94>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	3304      	adds	r3, #4
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f7fe fb78 	bl	8008104 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a1a:	d10a      	bne.n	8009a32 <prvAddCurrentTaskToDelayedList+0x3a>
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d007      	beq.n	8009a32 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a22:	4b1a      	ldr	r3, [pc, #104]	; (8009a8c <prvAddCurrentTaskToDelayedList+0x94>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	3304      	adds	r3, #4
 8009a28:	4619      	mov	r1, r3
 8009a2a:	4819      	ldr	r0, [pc, #100]	; (8009a90 <prvAddCurrentTaskToDelayedList+0x98>)
 8009a2c:	f7fe fb0d 	bl	800804a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009a30:	e026      	b.n	8009a80 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009a32:	68fa      	ldr	r2, [r7, #12]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	4413      	add	r3, r2
 8009a38:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009a3a:	4b14      	ldr	r3, [pc, #80]	; (8009a8c <prvAddCurrentTaskToDelayedList+0x94>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	68ba      	ldr	r2, [r7, #8]
 8009a40:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009a42:	68ba      	ldr	r2, [r7, #8]
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	429a      	cmp	r2, r3
 8009a48:	d209      	bcs.n	8009a5e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a4a:	4b12      	ldr	r3, [pc, #72]	; (8009a94 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009a4c:	681a      	ldr	r2, [r3, #0]
 8009a4e:	4b0f      	ldr	r3, [pc, #60]	; (8009a8c <prvAddCurrentTaskToDelayedList+0x94>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	3304      	adds	r3, #4
 8009a54:	4619      	mov	r1, r3
 8009a56:	4610      	mov	r0, r2
 8009a58:	f7fe fb1b 	bl	8008092 <vListInsert>
}
 8009a5c:	e010      	b.n	8009a80 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a5e:	4b0e      	ldr	r3, [pc, #56]	; (8009a98 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009a60:	681a      	ldr	r2, [r3, #0]
 8009a62:	4b0a      	ldr	r3, [pc, #40]	; (8009a8c <prvAddCurrentTaskToDelayedList+0x94>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	3304      	adds	r3, #4
 8009a68:	4619      	mov	r1, r3
 8009a6a:	4610      	mov	r0, r2
 8009a6c:	f7fe fb11 	bl	8008092 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009a70:	4b0a      	ldr	r3, [pc, #40]	; (8009a9c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	68ba      	ldr	r2, [r7, #8]
 8009a76:	429a      	cmp	r2, r3
 8009a78:	d202      	bcs.n	8009a80 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009a7a:	4a08      	ldr	r2, [pc, #32]	; (8009a9c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	6013      	str	r3, [r2, #0]
}
 8009a80:	bf00      	nop
 8009a82:	3710      	adds	r7, #16
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}
 8009a88:	200027dc 	.word	0x200027dc
 8009a8c:	20002304 	.word	0x20002304
 8009a90:	200027c4 	.word	0x200027c4
 8009a94:	20002794 	.word	0x20002794
 8009a98:	20002790 	.word	0x20002790
 8009a9c:	200027f8 	.word	0x200027f8

08009aa0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b08a      	sub	sp, #40	; 0x28
 8009aa4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009aaa:	f000 fb07 	bl	800a0bc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009aae:	4b1c      	ldr	r3, [pc, #112]	; (8009b20 <xTimerCreateTimerTask+0x80>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d021      	beq.n	8009afa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009aba:	2300      	movs	r3, #0
 8009abc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009abe:	1d3a      	adds	r2, r7, #4
 8009ac0:	f107 0108 	add.w	r1, r7, #8
 8009ac4:	f107 030c 	add.w	r3, r7, #12
 8009ac8:	4618      	mov	r0, r3
 8009aca:	f7fe fa77 	bl	8007fbc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009ace:	6879      	ldr	r1, [r7, #4]
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	68fa      	ldr	r2, [r7, #12]
 8009ad4:	9202      	str	r2, [sp, #8]
 8009ad6:	9301      	str	r3, [sp, #4]
 8009ad8:	2302      	movs	r3, #2
 8009ada:	9300      	str	r3, [sp, #0]
 8009adc:	2300      	movs	r3, #0
 8009ade:	460a      	mov	r2, r1
 8009ae0:	4910      	ldr	r1, [pc, #64]	; (8009b24 <xTimerCreateTimerTask+0x84>)
 8009ae2:	4811      	ldr	r0, [pc, #68]	; (8009b28 <xTimerCreateTimerTask+0x88>)
 8009ae4:	f7ff f8de 	bl	8008ca4 <xTaskCreateStatic>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	4a10      	ldr	r2, [pc, #64]	; (8009b2c <xTimerCreateTimerTask+0x8c>)
 8009aec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009aee:	4b0f      	ldr	r3, [pc, #60]	; (8009b2c <xTimerCreateTimerTask+0x8c>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d001      	beq.n	8009afa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009af6:	2301      	movs	r3, #1
 8009af8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009afa:	697b      	ldr	r3, [r7, #20]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d10a      	bne.n	8009b16 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b04:	f383 8811 	msr	BASEPRI, r3
 8009b08:	f3bf 8f6f 	isb	sy
 8009b0c:	f3bf 8f4f 	dsb	sy
 8009b10:	613b      	str	r3, [r7, #16]
}
 8009b12:	bf00      	nop
 8009b14:	e7fe      	b.n	8009b14 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009b16:	697b      	ldr	r3, [r7, #20]
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	3718      	adds	r7, #24
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}
 8009b20:	20002834 	.word	0x20002834
 8009b24:	0800c6f4 	.word	0x0800c6f4
 8009b28:	08009c65 	.word	0x08009c65
 8009b2c:	20002838 	.word	0x20002838

08009b30 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b08a      	sub	sp, #40	; 0x28
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	60f8      	str	r0, [r7, #12]
 8009b38:	60b9      	str	r1, [r7, #8]
 8009b3a:	607a      	str	r2, [r7, #4]
 8009b3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d10a      	bne.n	8009b5e <xTimerGenericCommand+0x2e>
	__asm volatile
 8009b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b4c:	f383 8811 	msr	BASEPRI, r3
 8009b50:	f3bf 8f6f 	isb	sy
 8009b54:	f3bf 8f4f 	dsb	sy
 8009b58:	623b      	str	r3, [r7, #32]
}
 8009b5a:	bf00      	nop
 8009b5c:	e7fe      	b.n	8009b5c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009b5e:	4b1a      	ldr	r3, [pc, #104]	; (8009bc8 <xTimerGenericCommand+0x98>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d02a      	beq.n	8009bbc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	2b05      	cmp	r3, #5
 8009b76:	dc18      	bgt.n	8009baa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009b78:	f7ff feb2 	bl	80098e0 <xTaskGetSchedulerState>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	2b02      	cmp	r3, #2
 8009b80:	d109      	bne.n	8009b96 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009b82:	4b11      	ldr	r3, [pc, #68]	; (8009bc8 <xTimerGenericCommand+0x98>)
 8009b84:	6818      	ldr	r0, [r3, #0]
 8009b86:	f107 0110 	add.w	r1, r7, #16
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b8e:	f7fe fc21 	bl	80083d4 <xQueueGenericSend>
 8009b92:	6278      	str	r0, [r7, #36]	; 0x24
 8009b94:	e012      	b.n	8009bbc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009b96:	4b0c      	ldr	r3, [pc, #48]	; (8009bc8 <xTimerGenericCommand+0x98>)
 8009b98:	6818      	ldr	r0, [r3, #0]
 8009b9a:	f107 0110 	add.w	r1, r7, #16
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	f7fe fc17 	bl	80083d4 <xQueueGenericSend>
 8009ba6:	6278      	str	r0, [r7, #36]	; 0x24
 8009ba8:	e008      	b.n	8009bbc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009baa:	4b07      	ldr	r3, [pc, #28]	; (8009bc8 <xTimerGenericCommand+0x98>)
 8009bac:	6818      	ldr	r0, [r3, #0]
 8009bae:	f107 0110 	add.w	r1, r7, #16
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	683a      	ldr	r2, [r7, #0]
 8009bb6:	f7fe fd0b 	bl	80085d0 <xQueueGenericSendFromISR>
 8009bba:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3728      	adds	r7, #40	; 0x28
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}
 8009bc6:	bf00      	nop
 8009bc8:	20002834 	.word	0x20002834

08009bcc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b088      	sub	sp, #32
 8009bd0:	af02      	add	r7, sp, #8
 8009bd2:	6078      	str	r0, [r7, #4]
 8009bd4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bd6:	4b22      	ldr	r3, [pc, #136]	; (8009c60 <prvProcessExpiredTimer+0x94>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	68db      	ldr	r3, [r3, #12]
 8009bdc:	68db      	ldr	r3, [r3, #12]
 8009bde:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	3304      	adds	r3, #4
 8009be4:	4618      	mov	r0, r3
 8009be6:	f7fe fa8d 	bl	8008104 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009bea:	697b      	ldr	r3, [r7, #20]
 8009bec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009bf0:	f003 0304 	and.w	r3, r3, #4
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d022      	beq.n	8009c3e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009bf8:	697b      	ldr	r3, [r7, #20]
 8009bfa:	699a      	ldr	r2, [r3, #24]
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	18d1      	adds	r1, r2, r3
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	683a      	ldr	r2, [r7, #0]
 8009c04:	6978      	ldr	r0, [r7, #20]
 8009c06:	f000 f8d1 	bl	8009dac <prvInsertTimerInActiveList>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d01f      	beq.n	8009c50 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009c10:	2300      	movs	r3, #0
 8009c12:	9300      	str	r3, [sp, #0]
 8009c14:	2300      	movs	r3, #0
 8009c16:	687a      	ldr	r2, [r7, #4]
 8009c18:	2100      	movs	r1, #0
 8009c1a:	6978      	ldr	r0, [r7, #20]
 8009c1c:	f7ff ff88 	bl	8009b30 <xTimerGenericCommand>
 8009c20:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009c22:	693b      	ldr	r3, [r7, #16]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d113      	bne.n	8009c50 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c2c:	f383 8811 	msr	BASEPRI, r3
 8009c30:	f3bf 8f6f 	isb	sy
 8009c34:	f3bf 8f4f 	dsb	sy
 8009c38:	60fb      	str	r3, [r7, #12]
}
 8009c3a:	bf00      	nop
 8009c3c:	e7fe      	b.n	8009c3c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c44:	f023 0301 	bic.w	r3, r3, #1
 8009c48:	b2da      	uxtb	r2, r3
 8009c4a:	697b      	ldr	r3, [r7, #20]
 8009c4c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	6a1b      	ldr	r3, [r3, #32]
 8009c54:	6978      	ldr	r0, [r7, #20]
 8009c56:	4798      	blx	r3
}
 8009c58:	bf00      	nop
 8009c5a:	3718      	adds	r7, #24
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}
 8009c60:	2000282c 	.word	0x2000282c

08009c64 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b084      	sub	sp, #16
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009c6c:	f107 0308 	add.w	r3, r7, #8
 8009c70:	4618      	mov	r0, r3
 8009c72:	f000 f857 	bl	8009d24 <prvGetNextExpireTime>
 8009c76:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	4619      	mov	r1, r3
 8009c7c:	68f8      	ldr	r0, [r7, #12]
 8009c7e:	f000 f803 	bl	8009c88 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009c82:	f000 f8d5 	bl	8009e30 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009c86:	e7f1      	b.n	8009c6c <prvTimerTask+0x8>

08009c88 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b084      	sub	sp, #16
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
 8009c90:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009c92:	f7ff fa43 	bl	800911c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009c96:	f107 0308 	add.w	r3, r7, #8
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f000 f866 	bl	8009d6c <prvSampleTimeNow>
 8009ca0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d130      	bne.n	8009d0a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d10a      	bne.n	8009cc4 <prvProcessTimerOrBlockTask+0x3c>
 8009cae:	687a      	ldr	r2, [r7, #4]
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	429a      	cmp	r2, r3
 8009cb4:	d806      	bhi.n	8009cc4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009cb6:	f7ff fa3f 	bl	8009138 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009cba:	68f9      	ldr	r1, [r7, #12]
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f7ff ff85 	bl	8009bcc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009cc2:	e024      	b.n	8009d0e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d008      	beq.n	8009cdc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009cca:	4b13      	ldr	r3, [pc, #76]	; (8009d18 <prvProcessTimerOrBlockTask+0x90>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d101      	bne.n	8009cd8 <prvProcessTimerOrBlockTask+0x50>
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	e000      	b.n	8009cda <prvProcessTimerOrBlockTask+0x52>
 8009cd8:	2300      	movs	r3, #0
 8009cda:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009cdc:	4b0f      	ldr	r3, [pc, #60]	; (8009d1c <prvProcessTimerOrBlockTask+0x94>)
 8009cde:	6818      	ldr	r0, [r3, #0]
 8009ce0:	687a      	ldr	r2, [r7, #4]
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	1ad3      	subs	r3, r2, r3
 8009ce6:	683a      	ldr	r2, [r7, #0]
 8009ce8:	4619      	mov	r1, r3
 8009cea:	f7fe ffa7 	bl	8008c3c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009cee:	f7ff fa23 	bl	8009138 <xTaskResumeAll>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d10a      	bne.n	8009d0e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009cf8:	4b09      	ldr	r3, [pc, #36]	; (8009d20 <prvProcessTimerOrBlockTask+0x98>)
 8009cfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cfe:	601a      	str	r2, [r3, #0]
 8009d00:	f3bf 8f4f 	dsb	sy
 8009d04:	f3bf 8f6f 	isb	sy
}
 8009d08:	e001      	b.n	8009d0e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009d0a:	f7ff fa15 	bl	8009138 <xTaskResumeAll>
}
 8009d0e:	bf00      	nop
 8009d10:	3710      	adds	r7, #16
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}
 8009d16:	bf00      	nop
 8009d18:	20002830 	.word	0x20002830
 8009d1c:	20002834 	.word	0x20002834
 8009d20:	e000ed04 	.word	0xe000ed04

08009d24 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009d24:	b480      	push	{r7}
 8009d26:	b085      	sub	sp, #20
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009d2c:	4b0e      	ldr	r3, [pc, #56]	; (8009d68 <prvGetNextExpireTime+0x44>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d101      	bne.n	8009d3a <prvGetNextExpireTime+0x16>
 8009d36:	2201      	movs	r2, #1
 8009d38:	e000      	b.n	8009d3c <prvGetNextExpireTime+0x18>
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d105      	bne.n	8009d54 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009d48:	4b07      	ldr	r3, [pc, #28]	; (8009d68 <prvGetNextExpireTime+0x44>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	68db      	ldr	r3, [r3, #12]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	60fb      	str	r3, [r7, #12]
 8009d52:	e001      	b.n	8009d58 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009d54:	2300      	movs	r3, #0
 8009d56:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009d58:	68fb      	ldr	r3, [r7, #12]
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	3714      	adds	r7, #20
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d64:	4770      	bx	lr
 8009d66:	bf00      	nop
 8009d68:	2000282c 	.word	0x2000282c

08009d6c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b084      	sub	sp, #16
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009d74:	f7ff fa7e 	bl	8009274 <xTaskGetTickCount>
 8009d78:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009d7a:	4b0b      	ldr	r3, [pc, #44]	; (8009da8 <prvSampleTimeNow+0x3c>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	68fa      	ldr	r2, [r7, #12]
 8009d80:	429a      	cmp	r2, r3
 8009d82:	d205      	bcs.n	8009d90 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009d84:	f000 f936 	bl	8009ff4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2201      	movs	r2, #1
 8009d8c:	601a      	str	r2, [r3, #0]
 8009d8e:	e002      	b.n	8009d96 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2200      	movs	r2, #0
 8009d94:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009d96:	4a04      	ldr	r2, [pc, #16]	; (8009da8 <prvSampleTimeNow+0x3c>)
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3710      	adds	r7, #16
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}
 8009da6:	bf00      	nop
 8009da8:	2000283c 	.word	0x2000283c

08009dac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b086      	sub	sp, #24
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	60f8      	str	r0, [r7, #12]
 8009db4:	60b9      	str	r1, [r7, #8]
 8009db6:	607a      	str	r2, [r7, #4]
 8009db8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	68ba      	ldr	r2, [r7, #8]
 8009dc2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	68fa      	ldr	r2, [r7, #12]
 8009dc8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009dca:	68ba      	ldr	r2, [r7, #8]
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	429a      	cmp	r2, r3
 8009dd0:	d812      	bhi.n	8009df8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009dd2:	687a      	ldr	r2, [r7, #4]
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	1ad2      	subs	r2, r2, r3
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	699b      	ldr	r3, [r3, #24]
 8009ddc:	429a      	cmp	r2, r3
 8009dde:	d302      	bcc.n	8009de6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009de0:	2301      	movs	r3, #1
 8009de2:	617b      	str	r3, [r7, #20]
 8009de4:	e01b      	b.n	8009e1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009de6:	4b10      	ldr	r3, [pc, #64]	; (8009e28 <prvInsertTimerInActiveList+0x7c>)
 8009de8:	681a      	ldr	r2, [r3, #0]
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	3304      	adds	r3, #4
 8009dee:	4619      	mov	r1, r3
 8009df0:	4610      	mov	r0, r2
 8009df2:	f7fe f94e 	bl	8008092 <vListInsert>
 8009df6:	e012      	b.n	8009e1e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009df8:	687a      	ldr	r2, [r7, #4]
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	429a      	cmp	r2, r3
 8009dfe:	d206      	bcs.n	8009e0e <prvInsertTimerInActiveList+0x62>
 8009e00:	68ba      	ldr	r2, [r7, #8]
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	429a      	cmp	r2, r3
 8009e06:	d302      	bcc.n	8009e0e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009e08:	2301      	movs	r3, #1
 8009e0a:	617b      	str	r3, [r7, #20]
 8009e0c:	e007      	b.n	8009e1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009e0e:	4b07      	ldr	r3, [pc, #28]	; (8009e2c <prvInsertTimerInActiveList+0x80>)
 8009e10:	681a      	ldr	r2, [r3, #0]
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	3304      	adds	r3, #4
 8009e16:	4619      	mov	r1, r3
 8009e18:	4610      	mov	r0, r2
 8009e1a:	f7fe f93a 	bl	8008092 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009e1e:	697b      	ldr	r3, [r7, #20]
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	3718      	adds	r7, #24
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd80      	pop	{r7, pc}
 8009e28:	20002830 	.word	0x20002830
 8009e2c:	2000282c 	.word	0x2000282c

08009e30 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b08e      	sub	sp, #56	; 0x38
 8009e34:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009e36:	e0ca      	b.n	8009fce <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	da18      	bge.n	8009e70 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009e3e:	1d3b      	adds	r3, r7, #4
 8009e40:	3304      	adds	r3, #4
 8009e42:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d10a      	bne.n	8009e60 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e4e:	f383 8811 	msr	BASEPRI, r3
 8009e52:	f3bf 8f6f 	isb	sy
 8009e56:	f3bf 8f4f 	dsb	sy
 8009e5a:	61fb      	str	r3, [r7, #28]
}
 8009e5c:	bf00      	nop
 8009e5e:	e7fe      	b.n	8009e5e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e66:	6850      	ldr	r0, [r2, #4]
 8009e68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e6a:	6892      	ldr	r2, [r2, #8]
 8009e6c:	4611      	mov	r1, r2
 8009e6e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	f2c0 80aa 	blt.w	8009fcc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e7e:	695b      	ldr	r3, [r3, #20]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d004      	beq.n	8009e8e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e86:	3304      	adds	r3, #4
 8009e88:	4618      	mov	r0, r3
 8009e8a:	f7fe f93b 	bl	8008104 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009e8e:	463b      	mov	r3, r7
 8009e90:	4618      	mov	r0, r3
 8009e92:	f7ff ff6b 	bl	8009d6c <prvSampleTimeNow>
 8009e96:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2b09      	cmp	r3, #9
 8009e9c:	f200 8097 	bhi.w	8009fce <prvProcessReceivedCommands+0x19e>
 8009ea0:	a201      	add	r2, pc, #4	; (adr r2, 8009ea8 <prvProcessReceivedCommands+0x78>)
 8009ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ea6:	bf00      	nop
 8009ea8:	08009ed1 	.word	0x08009ed1
 8009eac:	08009ed1 	.word	0x08009ed1
 8009eb0:	08009ed1 	.word	0x08009ed1
 8009eb4:	08009f45 	.word	0x08009f45
 8009eb8:	08009f59 	.word	0x08009f59
 8009ebc:	08009fa3 	.word	0x08009fa3
 8009ec0:	08009ed1 	.word	0x08009ed1
 8009ec4:	08009ed1 	.word	0x08009ed1
 8009ec8:	08009f45 	.word	0x08009f45
 8009ecc:	08009f59 	.word	0x08009f59
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ed2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ed6:	f043 0301 	orr.w	r3, r3, #1
 8009eda:	b2da      	uxtb	r2, r3
 8009edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ede:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009ee2:	68ba      	ldr	r2, [r7, #8]
 8009ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ee6:	699b      	ldr	r3, [r3, #24]
 8009ee8:	18d1      	adds	r1, r2, r3
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009eee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ef0:	f7ff ff5c 	bl	8009dac <prvInsertTimerInActiveList>
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d069      	beq.n	8009fce <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009efc:	6a1b      	ldr	r3, [r3, #32]
 8009efe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f00:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f08:	f003 0304 	and.w	r3, r3, #4
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d05e      	beq.n	8009fce <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009f10:	68ba      	ldr	r2, [r7, #8]
 8009f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f14:	699b      	ldr	r3, [r3, #24]
 8009f16:	441a      	add	r2, r3
 8009f18:	2300      	movs	r3, #0
 8009f1a:	9300      	str	r3, [sp, #0]
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	2100      	movs	r1, #0
 8009f20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f22:	f7ff fe05 	bl	8009b30 <xTimerGenericCommand>
 8009f26:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009f28:	6a3b      	ldr	r3, [r7, #32]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d14f      	bne.n	8009fce <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f32:	f383 8811 	msr	BASEPRI, r3
 8009f36:	f3bf 8f6f 	isb	sy
 8009f3a:	f3bf 8f4f 	dsb	sy
 8009f3e:	61bb      	str	r3, [r7, #24]
}
 8009f40:	bf00      	nop
 8009f42:	e7fe      	b.n	8009f42 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f4a:	f023 0301 	bic.w	r3, r3, #1
 8009f4e:	b2da      	uxtb	r2, r3
 8009f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009f56:	e03a      	b.n	8009fce <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f5e:	f043 0301 	orr.w	r3, r3, #1
 8009f62:	b2da      	uxtb	r2, r3
 8009f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009f6a:	68ba      	ldr	r2, [r7, #8]
 8009f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f6e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f72:	699b      	ldr	r3, [r3, #24]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d10a      	bne.n	8009f8e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f7c:	f383 8811 	msr	BASEPRI, r3
 8009f80:	f3bf 8f6f 	isb	sy
 8009f84:	f3bf 8f4f 	dsb	sy
 8009f88:	617b      	str	r3, [r7, #20]
}
 8009f8a:	bf00      	nop
 8009f8c:	e7fe      	b.n	8009f8c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f90:	699a      	ldr	r2, [r3, #24]
 8009f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f94:	18d1      	adds	r1, r2, r3
 8009f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f9c:	f7ff ff06 	bl	8009dac <prvInsertTimerInActiveList>
					break;
 8009fa0:	e015      	b.n	8009fce <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009fa8:	f003 0302 	and.w	r3, r3, #2
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d103      	bne.n	8009fb8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009fb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009fb2:	f000 fbdd 	bl	800a770 <vPortFree>
 8009fb6:	e00a      	b.n	8009fce <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009fbe:	f023 0301 	bic.w	r3, r3, #1
 8009fc2:	b2da      	uxtb	r2, r3
 8009fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009fca:	e000      	b.n	8009fce <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009fcc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009fce:	4b08      	ldr	r3, [pc, #32]	; (8009ff0 <prvProcessReceivedCommands+0x1c0>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	1d39      	adds	r1, r7, #4
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f7fe fb96 	bl	8008708 <xQueueReceive>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	f47f af2a 	bne.w	8009e38 <prvProcessReceivedCommands+0x8>
	}
}
 8009fe4:	bf00      	nop
 8009fe6:	bf00      	nop
 8009fe8:	3730      	adds	r7, #48	; 0x30
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}
 8009fee:	bf00      	nop
 8009ff0:	20002834 	.word	0x20002834

08009ff4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b088      	sub	sp, #32
 8009ff8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009ffa:	e048      	b.n	800a08e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009ffc:	4b2d      	ldr	r3, [pc, #180]	; (800a0b4 <prvSwitchTimerLists+0xc0>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	68db      	ldr	r3, [r3, #12]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a006:	4b2b      	ldr	r3, [pc, #172]	; (800a0b4 <prvSwitchTimerLists+0xc0>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	68db      	ldr	r3, [r3, #12]
 800a00c:	68db      	ldr	r3, [r3, #12]
 800a00e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	3304      	adds	r3, #4
 800a014:	4618      	mov	r0, r3
 800a016:	f7fe f875 	bl	8008104 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	6a1b      	ldr	r3, [r3, #32]
 800a01e:	68f8      	ldr	r0, [r7, #12]
 800a020:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a028:	f003 0304 	and.w	r3, r3, #4
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d02e      	beq.n	800a08e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	699b      	ldr	r3, [r3, #24]
 800a034:	693a      	ldr	r2, [r7, #16]
 800a036:	4413      	add	r3, r2
 800a038:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a03a:	68ba      	ldr	r2, [r7, #8]
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	429a      	cmp	r2, r3
 800a040:	d90e      	bls.n	800a060 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	68ba      	ldr	r2, [r7, #8]
 800a046:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	68fa      	ldr	r2, [r7, #12]
 800a04c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a04e:	4b19      	ldr	r3, [pc, #100]	; (800a0b4 <prvSwitchTimerLists+0xc0>)
 800a050:	681a      	ldr	r2, [r3, #0]
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	3304      	adds	r3, #4
 800a056:	4619      	mov	r1, r3
 800a058:	4610      	mov	r0, r2
 800a05a:	f7fe f81a 	bl	8008092 <vListInsert>
 800a05e:	e016      	b.n	800a08e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a060:	2300      	movs	r3, #0
 800a062:	9300      	str	r3, [sp, #0]
 800a064:	2300      	movs	r3, #0
 800a066:	693a      	ldr	r2, [r7, #16]
 800a068:	2100      	movs	r1, #0
 800a06a:	68f8      	ldr	r0, [r7, #12]
 800a06c:	f7ff fd60 	bl	8009b30 <xTimerGenericCommand>
 800a070:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d10a      	bne.n	800a08e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a07c:	f383 8811 	msr	BASEPRI, r3
 800a080:	f3bf 8f6f 	isb	sy
 800a084:	f3bf 8f4f 	dsb	sy
 800a088:	603b      	str	r3, [r7, #0]
}
 800a08a:	bf00      	nop
 800a08c:	e7fe      	b.n	800a08c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a08e:	4b09      	ldr	r3, [pc, #36]	; (800a0b4 <prvSwitchTimerLists+0xc0>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d1b1      	bne.n	8009ffc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a098:	4b06      	ldr	r3, [pc, #24]	; (800a0b4 <prvSwitchTimerLists+0xc0>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a09e:	4b06      	ldr	r3, [pc, #24]	; (800a0b8 <prvSwitchTimerLists+0xc4>)
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	4a04      	ldr	r2, [pc, #16]	; (800a0b4 <prvSwitchTimerLists+0xc0>)
 800a0a4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a0a6:	4a04      	ldr	r2, [pc, #16]	; (800a0b8 <prvSwitchTimerLists+0xc4>)
 800a0a8:	697b      	ldr	r3, [r7, #20]
 800a0aa:	6013      	str	r3, [r2, #0]
}
 800a0ac:	bf00      	nop
 800a0ae:	3718      	adds	r7, #24
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}
 800a0b4:	2000282c 	.word	0x2000282c
 800a0b8:	20002830 	.word	0x20002830

0800a0bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b082      	sub	sp, #8
 800a0c0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a0c2:	f000 f967 	bl	800a394 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a0c6:	4b15      	ldr	r3, [pc, #84]	; (800a11c <prvCheckForValidListAndQueue+0x60>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d120      	bne.n	800a110 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a0ce:	4814      	ldr	r0, [pc, #80]	; (800a120 <prvCheckForValidListAndQueue+0x64>)
 800a0d0:	f7fd ff8e 	bl	8007ff0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a0d4:	4813      	ldr	r0, [pc, #76]	; (800a124 <prvCheckForValidListAndQueue+0x68>)
 800a0d6:	f7fd ff8b 	bl	8007ff0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a0da:	4b13      	ldr	r3, [pc, #76]	; (800a128 <prvCheckForValidListAndQueue+0x6c>)
 800a0dc:	4a10      	ldr	r2, [pc, #64]	; (800a120 <prvCheckForValidListAndQueue+0x64>)
 800a0de:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a0e0:	4b12      	ldr	r3, [pc, #72]	; (800a12c <prvCheckForValidListAndQueue+0x70>)
 800a0e2:	4a10      	ldr	r2, [pc, #64]	; (800a124 <prvCheckForValidListAndQueue+0x68>)
 800a0e4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	9300      	str	r3, [sp, #0]
 800a0ea:	4b11      	ldr	r3, [pc, #68]	; (800a130 <prvCheckForValidListAndQueue+0x74>)
 800a0ec:	4a11      	ldr	r2, [pc, #68]	; (800a134 <prvCheckForValidListAndQueue+0x78>)
 800a0ee:	2110      	movs	r1, #16
 800a0f0:	200a      	movs	r0, #10
 800a0f2:	f7fe f899 	bl	8008228 <xQueueGenericCreateStatic>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	4a08      	ldr	r2, [pc, #32]	; (800a11c <prvCheckForValidListAndQueue+0x60>)
 800a0fa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a0fc:	4b07      	ldr	r3, [pc, #28]	; (800a11c <prvCheckForValidListAndQueue+0x60>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d005      	beq.n	800a110 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a104:	4b05      	ldr	r3, [pc, #20]	; (800a11c <prvCheckForValidListAndQueue+0x60>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	490b      	ldr	r1, [pc, #44]	; (800a138 <prvCheckForValidListAndQueue+0x7c>)
 800a10a:	4618      	mov	r0, r3
 800a10c:	f7fe fd6c 	bl	8008be8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a110:	f000 f970 	bl	800a3f4 <vPortExitCritical>
}
 800a114:	bf00      	nop
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}
 800a11a:	bf00      	nop
 800a11c:	20002834 	.word	0x20002834
 800a120:	20002804 	.word	0x20002804
 800a124:	20002818 	.word	0x20002818
 800a128:	2000282c 	.word	0x2000282c
 800a12c:	20002830 	.word	0x20002830
 800a130:	200028e0 	.word	0x200028e0
 800a134:	20002840 	.word	0x20002840
 800a138:	0800c6fc 	.word	0x0800c6fc

0800a13c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a13c:	b480      	push	{r7}
 800a13e:	b085      	sub	sp, #20
 800a140:	af00      	add	r7, sp, #0
 800a142:	60f8      	str	r0, [r7, #12]
 800a144:	60b9      	str	r1, [r7, #8]
 800a146:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	3b04      	subs	r3, #4
 800a14c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a154:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	3b04      	subs	r3, #4
 800a15a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	f023 0201 	bic.w	r2, r3, #1
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	3b04      	subs	r3, #4
 800a16a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a16c:	4a0c      	ldr	r2, [pc, #48]	; (800a1a0 <pxPortInitialiseStack+0x64>)
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	3b14      	subs	r3, #20
 800a176:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a178:	687a      	ldr	r2, [r7, #4]
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	3b04      	subs	r3, #4
 800a182:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	f06f 0202 	mvn.w	r2, #2
 800a18a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	3b20      	subs	r3, #32
 800a190:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a192:	68fb      	ldr	r3, [r7, #12]
}
 800a194:	4618      	mov	r0, r3
 800a196:	3714      	adds	r7, #20
 800a198:	46bd      	mov	sp, r7
 800a19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19e:	4770      	bx	lr
 800a1a0:	0800a1a5 	.word	0x0800a1a5

0800a1a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b085      	sub	sp, #20
 800a1a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a1ae:	4b12      	ldr	r3, [pc, #72]	; (800a1f8 <prvTaskExitError+0x54>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1b6:	d00a      	beq.n	800a1ce <prvTaskExitError+0x2a>
	__asm volatile
 800a1b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1bc:	f383 8811 	msr	BASEPRI, r3
 800a1c0:	f3bf 8f6f 	isb	sy
 800a1c4:	f3bf 8f4f 	dsb	sy
 800a1c8:	60fb      	str	r3, [r7, #12]
}
 800a1ca:	bf00      	nop
 800a1cc:	e7fe      	b.n	800a1cc <prvTaskExitError+0x28>
	__asm volatile
 800a1ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1d2:	f383 8811 	msr	BASEPRI, r3
 800a1d6:	f3bf 8f6f 	isb	sy
 800a1da:	f3bf 8f4f 	dsb	sy
 800a1de:	60bb      	str	r3, [r7, #8]
}
 800a1e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a1e2:	bf00      	nop
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d0fc      	beq.n	800a1e4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a1ea:	bf00      	nop
 800a1ec:	bf00      	nop
 800a1ee:	3714      	adds	r7, #20
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f6:	4770      	bx	lr
 800a1f8:	2000005c 	.word	0x2000005c
 800a1fc:	00000000 	.word	0x00000000

0800a200 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a200:	4b07      	ldr	r3, [pc, #28]	; (800a220 <pxCurrentTCBConst2>)
 800a202:	6819      	ldr	r1, [r3, #0]
 800a204:	6808      	ldr	r0, [r1, #0]
 800a206:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a20a:	f380 8809 	msr	PSP, r0
 800a20e:	f3bf 8f6f 	isb	sy
 800a212:	f04f 0000 	mov.w	r0, #0
 800a216:	f380 8811 	msr	BASEPRI, r0
 800a21a:	4770      	bx	lr
 800a21c:	f3af 8000 	nop.w

0800a220 <pxCurrentTCBConst2>:
 800a220:	20002304 	.word	0x20002304
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a224:	bf00      	nop
 800a226:	bf00      	nop

0800a228 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a228:	4808      	ldr	r0, [pc, #32]	; (800a24c <prvPortStartFirstTask+0x24>)
 800a22a:	6800      	ldr	r0, [r0, #0]
 800a22c:	6800      	ldr	r0, [r0, #0]
 800a22e:	f380 8808 	msr	MSP, r0
 800a232:	f04f 0000 	mov.w	r0, #0
 800a236:	f380 8814 	msr	CONTROL, r0
 800a23a:	b662      	cpsie	i
 800a23c:	b661      	cpsie	f
 800a23e:	f3bf 8f4f 	dsb	sy
 800a242:	f3bf 8f6f 	isb	sy
 800a246:	df00      	svc	0
 800a248:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a24a:	bf00      	nop
 800a24c:	e000ed08 	.word	0xe000ed08

0800a250 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b086      	sub	sp, #24
 800a254:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a256:	4b46      	ldr	r3, [pc, #280]	; (800a370 <xPortStartScheduler+0x120>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	4a46      	ldr	r2, [pc, #280]	; (800a374 <xPortStartScheduler+0x124>)
 800a25c:	4293      	cmp	r3, r2
 800a25e:	d10a      	bne.n	800a276 <xPortStartScheduler+0x26>
	__asm volatile
 800a260:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a264:	f383 8811 	msr	BASEPRI, r3
 800a268:	f3bf 8f6f 	isb	sy
 800a26c:	f3bf 8f4f 	dsb	sy
 800a270:	613b      	str	r3, [r7, #16]
}
 800a272:	bf00      	nop
 800a274:	e7fe      	b.n	800a274 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a276:	4b3e      	ldr	r3, [pc, #248]	; (800a370 <xPortStartScheduler+0x120>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	4a3f      	ldr	r2, [pc, #252]	; (800a378 <xPortStartScheduler+0x128>)
 800a27c:	4293      	cmp	r3, r2
 800a27e:	d10a      	bne.n	800a296 <xPortStartScheduler+0x46>
	__asm volatile
 800a280:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a284:	f383 8811 	msr	BASEPRI, r3
 800a288:	f3bf 8f6f 	isb	sy
 800a28c:	f3bf 8f4f 	dsb	sy
 800a290:	60fb      	str	r3, [r7, #12]
}
 800a292:	bf00      	nop
 800a294:	e7fe      	b.n	800a294 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a296:	4b39      	ldr	r3, [pc, #228]	; (800a37c <xPortStartScheduler+0x12c>)
 800a298:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a29a:	697b      	ldr	r3, [r7, #20]
 800a29c:	781b      	ldrb	r3, [r3, #0]
 800a29e:	b2db      	uxtb	r3, r3
 800a2a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	22ff      	movs	r2, #255	; 0xff
 800a2a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a2a8:	697b      	ldr	r3, [r7, #20]
 800a2aa:	781b      	ldrb	r3, [r3, #0]
 800a2ac:	b2db      	uxtb	r3, r3
 800a2ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a2b0:	78fb      	ldrb	r3, [r7, #3]
 800a2b2:	b2db      	uxtb	r3, r3
 800a2b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a2b8:	b2da      	uxtb	r2, r3
 800a2ba:	4b31      	ldr	r3, [pc, #196]	; (800a380 <xPortStartScheduler+0x130>)
 800a2bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a2be:	4b31      	ldr	r3, [pc, #196]	; (800a384 <xPortStartScheduler+0x134>)
 800a2c0:	2207      	movs	r2, #7
 800a2c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a2c4:	e009      	b.n	800a2da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a2c6:	4b2f      	ldr	r3, [pc, #188]	; (800a384 <xPortStartScheduler+0x134>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	3b01      	subs	r3, #1
 800a2cc:	4a2d      	ldr	r2, [pc, #180]	; (800a384 <xPortStartScheduler+0x134>)
 800a2ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a2d0:	78fb      	ldrb	r3, [r7, #3]
 800a2d2:	b2db      	uxtb	r3, r3
 800a2d4:	005b      	lsls	r3, r3, #1
 800a2d6:	b2db      	uxtb	r3, r3
 800a2d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a2da:	78fb      	ldrb	r3, [r7, #3]
 800a2dc:	b2db      	uxtb	r3, r3
 800a2de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2e2:	2b80      	cmp	r3, #128	; 0x80
 800a2e4:	d0ef      	beq.n	800a2c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a2e6:	4b27      	ldr	r3, [pc, #156]	; (800a384 <xPortStartScheduler+0x134>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	f1c3 0307 	rsb	r3, r3, #7
 800a2ee:	2b04      	cmp	r3, #4
 800a2f0:	d00a      	beq.n	800a308 <xPortStartScheduler+0xb8>
	__asm volatile
 800a2f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f6:	f383 8811 	msr	BASEPRI, r3
 800a2fa:	f3bf 8f6f 	isb	sy
 800a2fe:	f3bf 8f4f 	dsb	sy
 800a302:	60bb      	str	r3, [r7, #8]
}
 800a304:	bf00      	nop
 800a306:	e7fe      	b.n	800a306 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a308:	4b1e      	ldr	r3, [pc, #120]	; (800a384 <xPortStartScheduler+0x134>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	021b      	lsls	r3, r3, #8
 800a30e:	4a1d      	ldr	r2, [pc, #116]	; (800a384 <xPortStartScheduler+0x134>)
 800a310:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a312:	4b1c      	ldr	r3, [pc, #112]	; (800a384 <xPortStartScheduler+0x134>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a31a:	4a1a      	ldr	r2, [pc, #104]	; (800a384 <xPortStartScheduler+0x134>)
 800a31c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	b2da      	uxtb	r2, r3
 800a322:	697b      	ldr	r3, [r7, #20]
 800a324:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a326:	4b18      	ldr	r3, [pc, #96]	; (800a388 <xPortStartScheduler+0x138>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	4a17      	ldr	r2, [pc, #92]	; (800a388 <xPortStartScheduler+0x138>)
 800a32c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a330:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a332:	4b15      	ldr	r3, [pc, #84]	; (800a388 <xPortStartScheduler+0x138>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	4a14      	ldr	r2, [pc, #80]	; (800a388 <xPortStartScheduler+0x138>)
 800a338:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a33c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a33e:	f000 f8dd 	bl	800a4fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a342:	4b12      	ldr	r3, [pc, #72]	; (800a38c <xPortStartScheduler+0x13c>)
 800a344:	2200      	movs	r2, #0
 800a346:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a348:	f000 f8fc 	bl	800a544 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a34c:	4b10      	ldr	r3, [pc, #64]	; (800a390 <xPortStartScheduler+0x140>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	4a0f      	ldr	r2, [pc, #60]	; (800a390 <xPortStartScheduler+0x140>)
 800a352:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a356:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a358:	f7ff ff66 	bl	800a228 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a35c:	f7ff f854 	bl	8009408 <vTaskSwitchContext>
	prvTaskExitError();
 800a360:	f7ff ff20 	bl	800a1a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a364:	2300      	movs	r3, #0
}
 800a366:	4618      	mov	r0, r3
 800a368:	3718      	adds	r7, #24
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}
 800a36e:	bf00      	nop
 800a370:	e000ed00 	.word	0xe000ed00
 800a374:	410fc271 	.word	0x410fc271
 800a378:	410fc270 	.word	0x410fc270
 800a37c:	e000e400 	.word	0xe000e400
 800a380:	20002930 	.word	0x20002930
 800a384:	20002934 	.word	0x20002934
 800a388:	e000ed20 	.word	0xe000ed20
 800a38c:	2000005c 	.word	0x2000005c
 800a390:	e000ef34 	.word	0xe000ef34

0800a394 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a394:	b480      	push	{r7}
 800a396:	b083      	sub	sp, #12
 800a398:	af00      	add	r7, sp, #0
	__asm volatile
 800a39a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a39e:	f383 8811 	msr	BASEPRI, r3
 800a3a2:	f3bf 8f6f 	isb	sy
 800a3a6:	f3bf 8f4f 	dsb	sy
 800a3aa:	607b      	str	r3, [r7, #4]
}
 800a3ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a3ae:	4b0f      	ldr	r3, [pc, #60]	; (800a3ec <vPortEnterCritical+0x58>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	3301      	adds	r3, #1
 800a3b4:	4a0d      	ldr	r2, [pc, #52]	; (800a3ec <vPortEnterCritical+0x58>)
 800a3b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a3b8:	4b0c      	ldr	r3, [pc, #48]	; (800a3ec <vPortEnterCritical+0x58>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	2b01      	cmp	r3, #1
 800a3be:	d10f      	bne.n	800a3e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a3c0:	4b0b      	ldr	r3, [pc, #44]	; (800a3f0 <vPortEnterCritical+0x5c>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	b2db      	uxtb	r3, r3
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d00a      	beq.n	800a3e0 <vPortEnterCritical+0x4c>
	__asm volatile
 800a3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ce:	f383 8811 	msr	BASEPRI, r3
 800a3d2:	f3bf 8f6f 	isb	sy
 800a3d6:	f3bf 8f4f 	dsb	sy
 800a3da:	603b      	str	r3, [r7, #0]
}
 800a3dc:	bf00      	nop
 800a3de:	e7fe      	b.n	800a3de <vPortEnterCritical+0x4a>
	}
}
 800a3e0:	bf00      	nop
 800a3e2:	370c      	adds	r7, #12
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ea:	4770      	bx	lr
 800a3ec:	2000005c 	.word	0x2000005c
 800a3f0:	e000ed04 	.word	0xe000ed04

0800a3f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a3f4:	b480      	push	{r7}
 800a3f6:	b083      	sub	sp, #12
 800a3f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a3fa:	4b12      	ldr	r3, [pc, #72]	; (800a444 <vPortExitCritical+0x50>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d10a      	bne.n	800a418 <vPortExitCritical+0x24>
	__asm volatile
 800a402:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a406:	f383 8811 	msr	BASEPRI, r3
 800a40a:	f3bf 8f6f 	isb	sy
 800a40e:	f3bf 8f4f 	dsb	sy
 800a412:	607b      	str	r3, [r7, #4]
}
 800a414:	bf00      	nop
 800a416:	e7fe      	b.n	800a416 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a418:	4b0a      	ldr	r3, [pc, #40]	; (800a444 <vPortExitCritical+0x50>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	3b01      	subs	r3, #1
 800a41e:	4a09      	ldr	r2, [pc, #36]	; (800a444 <vPortExitCritical+0x50>)
 800a420:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a422:	4b08      	ldr	r3, [pc, #32]	; (800a444 <vPortExitCritical+0x50>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d105      	bne.n	800a436 <vPortExitCritical+0x42>
 800a42a:	2300      	movs	r3, #0
 800a42c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	f383 8811 	msr	BASEPRI, r3
}
 800a434:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a436:	bf00      	nop
 800a438:	370c      	adds	r7, #12
 800a43a:	46bd      	mov	sp, r7
 800a43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a440:	4770      	bx	lr
 800a442:	bf00      	nop
 800a444:	2000005c 	.word	0x2000005c
	...

0800a450 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a450:	f3ef 8009 	mrs	r0, PSP
 800a454:	f3bf 8f6f 	isb	sy
 800a458:	4b15      	ldr	r3, [pc, #84]	; (800a4b0 <pxCurrentTCBConst>)
 800a45a:	681a      	ldr	r2, [r3, #0]
 800a45c:	f01e 0f10 	tst.w	lr, #16
 800a460:	bf08      	it	eq
 800a462:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a466:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a46a:	6010      	str	r0, [r2, #0]
 800a46c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a470:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a474:	f380 8811 	msr	BASEPRI, r0
 800a478:	f3bf 8f4f 	dsb	sy
 800a47c:	f3bf 8f6f 	isb	sy
 800a480:	f7fe ffc2 	bl	8009408 <vTaskSwitchContext>
 800a484:	f04f 0000 	mov.w	r0, #0
 800a488:	f380 8811 	msr	BASEPRI, r0
 800a48c:	bc09      	pop	{r0, r3}
 800a48e:	6819      	ldr	r1, [r3, #0]
 800a490:	6808      	ldr	r0, [r1, #0]
 800a492:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a496:	f01e 0f10 	tst.w	lr, #16
 800a49a:	bf08      	it	eq
 800a49c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a4a0:	f380 8809 	msr	PSP, r0
 800a4a4:	f3bf 8f6f 	isb	sy
 800a4a8:	4770      	bx	lr
 800a4aa:	bf00      	nop
 800a4ac:	f3af 8000 	nop.w

0800a4b0 <pxCurrentTCBConst>:
 800a4b0:	20002304 	.word	0x20002304
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a4b4:	bf00      	nop
 800a4b6:	bf00      	nop

0800a4b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b082      	sub	sp, #8
 800a4bc:	af00      	add	r7, sp, #0
	__asm volatile
 800a4be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4c2:	f383 8811 	msr	BASEPRI, r3
 800a4c6:	f3bf 8f6f 	isb	sy
 800a4ca:	f3bf 8f4f 	dsb	sy
 800a4ce:	607b      	str	r3, [r7, #4]
}
 800a4d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a4d2:	f7fe fedf 	bl	8009294 <xTaskIncrementTick>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d003      	beq.n	800a4e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a4dc:	4b06      	ldr	r3, [pc, #24]	; (800a4f8 <xPortSysTickHandler+0x40>)
 800a4de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4e2:	601a      	str	r2, [r3, #0]
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	f383 8811 	msr	BASEPRI, r3
}
 800a4ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a4f0:	bf00      	nop
 800a4f2:	3708      	adds	r7, #8
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd80      	pop	{r7, pc}
 800a4f8:	e000ed04 	.word	0xe000ed04

0800a4fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a4fc:	b480      	push	{r7}
 800a4fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a500:	4b0b      	ldr	r3, [pc, #44]	; (800a530 <vPortSetupTimerInterrupt+0x34>)
 800a502:	2200      	movs	r2, #0
 800a504:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a506:	4b0b      	ldr	r3, [pc, #44]	; (800a534 <vPortSetupTimerInterrupt+0x38>)
 800a508:	2200      	movs	r2, #0
 800a50a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a50c:	4b0a      	ldr	r3, [pc, #40]	; (800a538 <vPortSetupTimerInterrupt+0x3c>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	4a0a      	ldr	r2, [pc, #40]	; (800a53c <vPortSetupTimerInterrupt+0x40>)
 800a512:	fba2 2303 	umull	r2, r3, r2, r3
 800a516:	099b      	lsrs	r3, r3, #6
 800a518:	4a09      	ldr	r2, [pc, #36]	; (800a540 <vPortSetupTimerInterrupt+0x44>)
 800a51a:	3b01      	subs	r3, #1
 800a51c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a51e:	4b04      	ldr	r3, [pc, #16]	; (800a530 <vPortSetupTimerInterrupt+0x34>)
 800a520:	2207      	movs	r2, #7
 800a522:	601a      	str	r2, [r3, #0]
}
 800a524:	bf00      	nop
 800a526:	46bd      	mov	sp, r7
 800a528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52c:	4770      	bx	lr
 800a52e:	bf00      	nop
 800a530:	e000e010 	.word	0xe000e010
 800a534:	e000e018 	.word	0xe000e018
 800a538:	20000050 	.word	0x20000050
 800a53c:	10624dd3 	.word	0x10624dd3
 800a540:	e000e014 	.word	0xe000e014

0800a544 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a544:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a554 <vPortEnableVFP+0x10>
 800a548:	6801      	ldr	r1, [r0, #0]
 800a54a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a54e:	6001      	str	r1, [r0, #0]
 800a550:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a552:	bf00      	nop
 800a554:	e000ed88 	.word	0xe000ed88

0800a558 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a558:	b480      	push	{r7}
 800a55a:	b085      	sub	sp, #20
 800a55c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a55e:	f3ef 8305 	mrs	r3, IPSR
 800a562:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	2b0f      	cmp	r3, #15
 800a568:	d914      	bls.n	800a594 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a56a:	4a17      	ldr	r2, [pc, #92]	; (800a5c8 <vPortValidateInterruptPriority+0x70>)
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	4413      	add	r3, r2
 800a570:	781b      	ldrb	r3, [r3, #0]
 800a572:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a574:	4b15      	ldr	r3, [pc, #84]	; (800a5cc <vPortValidateInterruptPriority+0x74>)
 800a576:	781b      	ldrb	r3, [r3, #0]
 800a578:	7afa      	ldrb	r2, [r7, #11]
 800a57a:	429a      	cmp	r2, r3
 800a57c:	d20a      	bcs.n	800a594 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a57e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a582:	f383 8811 	msr	BASEPRI, r3
 800a586:	f3bf 8f6f 	isb	sy
 800a58a:	f3bf 8f4f 	dsb	sy
 800a58e:	607b      	str	r3, [r7, #4]
}
 800a590:	bf00      	nop
 800a592:	e7fe      	b.n	800a592 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a594:	4b0e      	ldr	r3, [pc, #56]	; (800a5d0 <vPortValidateInterruptPriority+0x78>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a59c:	4b0d      	ldr	r3, [pc, #52]	; (800a5d4 <vPortValidateInterruptPriority+0x7c>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	429a      	cmp	r2, r3
 800a5a2:	d90a      	bls.n	800a5ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a5a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5a8:	f383 8811 	msr	BASEPRI, r3
 800a5ac:	f3bf 8f6f 	isb	sy
 800a5b0:	f3bf 8f4f 	dsb	sy
 800a5b4:	603b      	str	r3, [r7, #0]
}
 800a5b6:	bf00      	nop
 800a5b8:	e7fe      	b.n	800a5b8 <vPortValidateInterruptPriority+0x60>
	}
 800a5ba:	bf00      	nop
 800a5bc:	3714      	adds	r7, #20
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c4:	4770      	bx	lr
 800a5c6:	bf00      	nop
 800a5c8:	e000e3f0 	.word	0xe000e3f0
 800a5cc:	20002930 	.word	0x20002930
 800a5d0:	e000ed0c 	.word	0xe000ed0c
 800a5d4:	20002934 	.word	0x20002934

0800a5d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b08a      	sub	sp, #40	; 0x28
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a5e4:	f7fe fd9a 	bl	800911c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a5e8:	4b5b      	ldr	r3, [pc, #364]	; (800a758 <pvPortMalloc+0x180>)
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d101      	bne.n	800a5f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a5f0:	f000 f920 	bl	800a834 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a5f4:	4b59      	ldr	r3, [pc, #356]	; (800a75c <pvPortMalloc+0x184>)
 800a5f6:	681a      	ldr	r2, [r3, #0]
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	4013      	ands	r3, r2
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	f040 8093 	bne.w	800a728 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d01d      	beq.n	800a644 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a608:	2208      	movs	r2, #8
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	4413      	add	r3, r2
 800a60e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f003 0307 	and.w	r3, r3, #7
 800a616:	2b00      	cmp	r3, #0
 800a618:	d014      	beq.n	800a644 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	f023 0307 	bic.w	r3, r3, #7
 800a620:	3308      	adds	r3, #8
 800a622:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	f003 0307 	and.w	r3, r3, #7
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d00a      	beq.n	800a644 <pvPortMalloc+0x6c>
	__asm volatile
 800a62e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a632:	f383 8811 	msr	BASEPRI, r3
 800a636:	f3bf 8f6f 	isb	sy
 800a63a:	f3bf 8f4f 	dsb	sy
 800a63e:	617b      	str	r3, [r7, #20]
}
 800a640:	bf00      	nop
 800a642:	e7fe      	b.n	800a642 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d06e      	beq.n	800a728 <pvPortMalloc+0x150>
 800a64a:	4b45      	ldr	r3, [pc, #276]	; (800a760 <pvPortMalloc+0x188>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	687a      	ldr	r2, [r7, #4]
 800a650:	429a      	cmp	r2, r3
 800a652:	d869      	bhi.n	800a728 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a654:	4b43      	ldr	r3, [pc, #268]	; (800a764 <pvPortMalloc+0x18c>)
 800a656:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a658:	4b42      	ldr	r3, [pc, #264]	; (800a764 <pvPortMalloc+0x18c>)
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a65e:	e004      	b.n	800a66a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a662:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a66a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a66c:	685b      	ldr	r3, [r3, #4]
 800a66e:	687a      	ldr	r2, [r7, #4]
 800a670:	429a      	cmp	r2, r3
 800a672:	d903      	bls.n	800a67c <pvPortMalloc+0xa4>
 800a674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d1f1      	bne.n	800a660 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a67c:	4b36      	ldr	r3, [pc, #216]	; (800a758 <pvPortMalloc+0x180>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a682:	429a      	cmp	r2, r3
 800a684:	d050      	beq.n	800a728 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a686:	6a3b      	ldr	r3, [r7, #32]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	2208      	movs	r2, #8
 800a68c:	4413      	add	r3, r2
 800a68e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a692:	681a      	ldr	r2, [r3, #0]
 800a694:	6a3b      	ldr	r3, [r7, #32]
 800a696:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a69a:	685a      	ldr	r2, [r3, #4]
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	1ad2      	subs	r2, r2, r3
 800a6a0:	2308      	movs	r3, #8
 800a6a2:	005b      	lsls	r3, r3, #1
 800a6a4:	429a      	cmp	r2, r3
 800a6a6:	d91f      	bls.n	800a6e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a6a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	4413      	add	r3, r2
 800a6ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a6b0:	69bb      	ldr	r3, [r7, #24]
 800a6b2:	f003 0307 	and.w	r3, r3, #7
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d00a      	beq.n	800a6d0 <pvPortMalloc+0xf8>
	__asm volatile
 800a6ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6be:	f383 8811 	msr	BASEPRI, r3
 800a6c2:	f3bf 8f6f 	isb	sy
 800a6c6:	f3bf 8f4f 	dsb	sy
 800a6ca:	613b      	str	r3, [r7, #16]
}
 800a6cc:	bf00      	nop
 800a6ce:	e7fe      	b.n	800a6ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d2:	685a      	ldr	r2, [r3, #4]
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	1ad2      	subs	r2, r2, r3
 800a6d8:	69bb      	ldr	r3, [r7, #24]
 800a6da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a6dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6de:	687a      	ldr	r2, [r7, #4]
 800a6e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a6e2:	69b8      	ldr	r0, [r7, #24]
 800a6e4:	f000 f908 	bl	800a8f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a6e8:	4b1d      	ldr	r3, [pc, #116]	; (800a760 <pvPortMalloc+0x188>)
 800a6ea:	681a      	ldr	r2, [r3, #0]
 800a6ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ee:	685b      	ldr	r3, [r3, #4]
 800a6f0:	1ad3      	subs	r3, r2, r3
 800a6f2:	4a1b      	ldr	r2, [pc, #108]	; (800a760 <pvPortMalloc+0x188>)
 800a6f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a6f6:	4b1a      	ldr	r3, [pc, #104]	; (800a760 <pvPortMalloc+0x188>)
 800a6f8:	681a      	ldr	r2, [r3, #0]
 800a6fa:	4b1b      	ldr	r3, [pc, #108]	; (800a768 <pvPortMalloc+0x190>)
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	429a      	cmp	r2, r3
 800a700:	d203      	bcs.n	800a70a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a702:	4b17      	ldr	r3, [pc, #92]	; (800a760 <pvPortMalloc+0x188>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	4a18      	ldr	r2, [pc, #96]	; (800a768 <pvPortMalloc+0x190>)
 800a708:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a70c:	685a      	ldr	r2, [r3, #4]
 800a70e:	4b13      	ldr	r3, [pc, #76]	; (800a75c <pvPortMalloc+0x184>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	431a      	orrs	r2, r3
 800a714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a716:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a71a:	2200      	movs	r2, #0
 800a71c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a71e:	4b13      	ldr	r3, [pc, #76]	; (800a76c <pvPortMalloc+0x194>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	3301      	adds	r3, #1
 800a724:	4a11      	ldr	r2, [pc, #68]	; (800a76c <pvPortMalloc+0x194>)
 800a726:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a728:	f7fe fd06 	bl	8009138 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a72c:	69fb      	ldr	r3, [r7, #28]
 800a72e:	f003 0307 	and.w	r3, r3, #7
 800a732:	2b00      	cmp	r3, #0
 800a734:	d00a      	beq.n	800a74c <pvPortMalloc+0x174>
	__asm volatile
 800a736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a73a:	f383 8811 	msr	BASEPRI, r3
 800a73e:	f3bf 8f6f 	isb	sy
 800a742:	f3bf 8f4f 	dsb	sy
 800a746:	60fb      	str	r3, [r7, #12]
}
 800a748:	bf00      	nop
 800a74a:	e7fe      	b.n	800a74a <pvPortMalloc+0x172>
	return pvReturn;
 800a74c:	69fb      	ldr	r3, [r7, #28]
}
 800a74e:	4618      	mov	r0, r3
 800a750:	3728      	adds	r7, #40	; 0x28
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}
 800a756:	bf00      	nop
 800a758:	20006540 	.word	0x20006540
 800a75c:	20006554 	.word	0x20006554
 800a760:	20006544 	.word	0x20006544
 800a764:	20006538 	.word	0x20006538
 800a768:	20006548 	.word	0x20006548
 800a76c:	2000654c 	.word	0x2000654c

0800a770 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b086      	sub	sp, #24
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d04d      	beq.n	800a81e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a782:	2308      	movs	r3, #8
 800a784:	425b      	negs	r3, r3
 800a786:	697a      	ldr	r2, [r7, #20]
 800a788:	4413      	add	r3, r2
 800a78a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a78c:	697b      	ldr	r3, [r7, #20]
 800a78e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	685a      	ldr	r2, [r3, #4]
 800a794:	4b24      	ldr	r3, [pc, #144]	; (800a828 <vPortFree+0xb8>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	4013      	ands	r3, r2
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d10a      	bne.n	800a7b4 <vPortFree+0x44>
	__asm volatile
 800a79e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7a2:	f383 8811 	msr	BASEPRI, r3
 800a7a6:	f3bf 8f6f 	isb	sy
 800a7aa:	f3bf 8f4f 	dsb	sy
 800a7ae:	60fb      	str	r3, [r7, #12]
}
 800a7b0:	bf00      	nop
 800a7b2:	e7fe      	b.n	800a7b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d00a      	beq.n	800a7d2 <vPortFree+0x62>
	__asm volatile
 800a7bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7c0:	f383 8811 	msr	BASEPRI, r3
 800a7c4:	f3bf 8f6f 	isb	sy
 800a7c8:	f3bf 8f4f 	dsb	sy
 800a7cc:	60bb      	str	r3, [r7, #8]
}
 800a7ce:	bf00      	nop
 800a7d0:	e7fe      	b.n	800a7d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	685a      	ldr	r2, [r3, #4]
 800a7d6:	4b14      	ldr	r3, [pc, #80]	; (800a828 <vPortFree+0xb8>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	4013      	ands	r3, r2
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d01e      	beq.n	800a81e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a7e0:	693b      	ldr	r3, [r7, #16]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d11a      	bne.n	800a81e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	685a      	ldr	r2, [r3, #4]
 800a7ec:	4b0e      	ldr	r3, [pc, #56]	; (800a828 <vPortFree+0xb8>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	43db      	mvns	r3, r3
 800a7f2:	401a      	ands	r2, r3
 800a7f4:	693b      	ldr	r3, [r7, #16]
 800a7f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a7f8:	f7fe fc90 	bl	800911c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a7fc:	693b      	ldr	r3, [r7, #16]
 800a7fe:	685a      	ldr	r2, [r3, #4]
 800a800:	4b0a      	ldr	r3, [pc, #40]	; (800a82c <vPortFree+0xbc>)
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	4413      	add	r3, r2
 800a806:	4a09      	ldr	r2, [pc, #36]	; (800a82c <vPortFree+0xbc>)
 800a808:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a80a:	6938      	ldr	r0, [r7, #16]
 800a80c:	f000 f874 	bl	800a8f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a810:	4b07      	ldr	r3, [pc, #28]	; (800a830 <vPortFree+0xc0>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	3301      	adds	r3, #1
 800a816:	4a06      	ldr	r2, [pc, #24]	; (800a830 <vPortFree+0xc0>)
 800a818:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a81a:	f7fe fc8d 	bl	8009138 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a81e:	bf00      	nop
 800a820:	3718      	adds	r7, #24
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}
 800a826:	bf00      	nop
 800a828:	20006554 	.word	0x20006554
 800a82c:	20006544 	.word	0x20006544
 800a830:	20006550 	.word	0x20006550

0800a834 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a834:	b480      	push	{r7}
 800a836:	b085      	sub	sp, #20
 800a838:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a83a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a83e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a840:	4b27      	ldr	r3, [pc, #156]	; (800a8e0 <prvHeapInit+0xac>)
 800a842:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	f003 0307 	and.w	r3, r3, #7
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d00c      	beq.n	800a868 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	3307      	adds	r3, #7
 800a852:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	f023 0307 	bic.w	r3, r3, #7
 800a85a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a85c:	68ba      	ldr	r2, [r7, #8]
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	1ad3      	subs	r3, r2, r3
 800a862:	4a1f      	ldr	r2, [pc, #124]	; (800a8e0 <prvHeapInit+0xac>)
 800a864:	4413      	add	r3, r2
 800a866:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a86c:	4a1d      	ldr	r2, [pc, #116]	; (800a8e4 <prvHeapInit+0xb0>)
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a872:	4b1c      	ldr	r3, [pc, #112]	; (800a8e4 <prvHeapInit+0xb0>)
 800a874:	2200      	movs	r2, #0
 800a876:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	68ba      	ldr	r2, [r7, #8]
 800a87c:	4413      	add	r3, r2
 800a87e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a880:	2208      	movs	r2, #8
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	1a9b      	subs	r3, r3, r2
 800a886:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	f023 0307 	bic.w	r3, r3, #7
 800a88e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	4a15      	ldr	r2, [pc, #84]	; (800a8e8 <prvHeapInit+0xb4>)
 800a894:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a896:	4b14      	ldr	r3, [pc, #80]	; (800a8e8 <prvHeapInit+0xb4>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	2200      	movs	r2, #0
 800a89c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a89e:	4b12      	ldr	r3, [pc, #72]	; (800a8e8 <prvHeapInit+0xb4>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	68fa      	ldr	r2, [r7, #12]
 800a8ae:	1ad2      	subs	r2, r2, r3
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a8b4:	4b0c      	ldr	r3, [pc, #48]	; (800a8e8 <prvHeapInit+0xb4>)
 800a8b6:	681a      	ldr	r2, [r3, #0]
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	685b      	ldr	r3, [r3, #4]
 800a8c0:	4a0a      	ldr	r2, [pc, #40]	; (800a8ec <prvHeapInit+0xb8>)
 800a8c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	685b      	ldr	r3, [r3, #4]
 800a8c8:	4a09      	ldr	r2, [pc, #36]	; (800a8f0 <prvHeapInit+0xbc>)
 800a8ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a8cc:	4b09      	ldr	r3, [pc, #36]	; (800a8f4 <prvHeapInit+0xc0>)
 800a8ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a8d2:	601a      	str	r2, [r3, #0]
}
 800a8d4:	bf00      	nop
 800a8d6:	3714      	adds	r7, #20
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8de:	4770      	bx	lr
 800a8e0:	20002938 	.word	0x20002938
 800a8e4:	20006538 	.word	0x20006538
 800a8e8:	20006540 	.word	0x20006540
 800a8ec:	20006548 	.word	0x20006548
 800a8f0:	20006544 	.word	0x20006544
 800a8f4:	20006554 	.word	0x20006554

0800a8f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a8f8:	b480      	push	{r7}
 800a8fa:	b085      	sub	sp, #20
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a900:	4b28      	ldr	r3, [pc, #160]	; (800a9a4 <prvInsertBlockIntoFreeList+0xac>)
 800a902:	60fb      	str	r3, [r7, #12]
 800a904:	e002      	b.n	800a90c <prvInsertBlockIntoFreeList+0x14>
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	60fb      	str	r3, [r7, #12]
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	687a      	ldr	r2, [r7, #4]
 800a912:	429a      	cmp	r2, r3
 800a914:	d8f7      	bhi.n	800a906 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	685b      	ldr	r3, [r3, #4]
 800a91e:	68ba      	ldr	r2, [r7, #8]
 800a920:	4413      	add	r3, r2
 800a922:	687a      	ldr	r2, [r7, #4]
 800a924:	429a      	cmp	r2, r3
 800a926:	d108      	bne.n	800a93a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	685a      	ldr	r2, [r3, #4]
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	685b      	ldr	r3, [r3, #4]
 800a930:	441a      	add	r2, r3
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	685b      	ldr	r3, [r3, #4]
 800a942:	68ba      	ldr	r2, [r7, #8]
 800a944:	441a      	add	r2, r3
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	429a      	cmp	r2, r3
 800a94c:	d118      	bne.n	800a980 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	681a      	ldr	r2, [r3, #0]
 800a952:	4b15      	ldr	r3, [pc, #84]	; (800a9a8 <prvInsertBlockIntoFreeList+0xb0>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	429a      	cmp	r2, r3
 800a958:	d00d      	beq.n	800a976 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	685a      	ldr	r2, [r3, #4]
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	685b      	ldr	r3, [r3, #4]
 800a964:	441a      	add	r2, r3
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	681a      	ldr	r2, [r3, #0]
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	601a      	str	r2, [r3, #0]
 800a974:	e008      	b.n	800a988 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a976:	4b0c      	ldr	r3, [pc, #48]	; (800a9a8 <prvInsertBlockIntoFreeList+0xb0>)
 800a978:	681a      	ldr	r2, [r3, #0]
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	601a      	str	r2, [r3, #0]
 800a97e:	e003      	b.n	800a988 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	681a      	ldr	r2, [r3, #0]
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a988:	68fa      	ldr	r2, [r7, #12]
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	429a      	cmp	r2, r3
 800a98e:	d002      	beq.n	800a996 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	687a      	ldr	r2, [r7, #4]
 800a994:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a996:	bf00      	nop
 800a998:	3714      	adds	r7, #20
 800a99a:	46bd      	mov	sp, r7
 800a99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a0:	4770      	bx	lr
 800a9a2:	bf00      	nop
 800a9a4:	20006538 	.word	0x20006538
 800a9a8:	20006540 	.word	0x20006540

0800a9ac <__errno>:
 800a9ac:	4b01      	ldr	r3, [pc, #4]	; (800a9b4 <__errno+0x8>)
 800a9ae:	6818      	ldr	r0, [r3, #0]
 800a9b0:	4770      	bx	lr
 800a9b2:	bf00      	nop
 800a9b4:	20000060 	.word	0x20000060

0800a9b8 <__libc_init_array>:
 800a9b8:	b570      	push	{r4, r5, r6, lr}
 800a9ba:	4d0d      	ldr	r5, [pc, #52]	; (800a9f0 <__libc_init_array+0x38>)
 800a9bc:	4c0d      	ldr	r4, [pc, #52]	; (800a9f4 <__libc_init_array+0x3c>)
 800a9be:	1b64      	subs	r4, r4, r5
 800a9c0:	10a4      	asrs	r4, r4, #2
 800a9c2:	2600      	movs	r6, #0
 800a9c4:	42a6      	cmp	r6, r4
 800a9c6:	d109      	bne.n	800a9dc <__libc_init_array+0x24>
 800a9c8:	4d0b      	ldr	r5, [pc, #44]	; (800a9f8 <__libc_init_array+0x40>)
 800a9ca:	4c0c      	ldr	r4, [pc, #48]	; (800a9fc <__libc_init_array+0x44>)
 800a9cc:	f001 f952 	bl	800bc74 <_init>
 800a9d0:	1b64      	subs	r4, r4, r5
 800a9d2:	10a4      	asrs	r4, r4, #2
 800a9d4:	2600      	movs	r6, #0
 800a9d6:	42a6      	cmp	r6, r4
 800a9d8:	d105      	bne.n	800a9e6 <__libc_init_array+0x2e>
 800a9da:	bd70      	pop	{r4, r5, r6, pc}
 800a9dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9e0:	4798      	blx	r3
 800a9e2:	3601      	adds	r6, #1
 800a9e4:	e7ee      	b.n	800a9c4 <__libc_init_array+0xc>
 800a9e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9ea:	4798      	blx	r3
 800a9ec:	3601      	adds	r6, #1
 800a9ee:	e7f2      	b.n	800a9d6 <__libc_init_array+0x1e>
 800a9f0:	0800cd7c 	.word	0x0800cd7c
 800a9f4:	0800cd7c 	.word	0x0800cd7c
 800a9f8:	0800cd7c 	.word	0x0800cd7c
 800a9fc:	0800cd80 	.word	0x0800cd80

0800aa00 <isprint>:
 800aa00:	4b02      	ldr	r3, [pc, #8]	; (800aa0c <isprint+0xc>)
 800aa02:	4418      	add	r0, r3
 800aa04:	7840      	ldrb	r0, [r0, #1]
 800aa06:	f000 0097 	and.w	r0, r0, #151	; 0x97
 800aa0a:	4770      	bx	lr
 800aa0c:	0800cbc4 	.word	0x0800cbc4

0800aa10 <memcpy>:
 800aa10:	440a      	add	r2, r1
 800aa12:	4291      	cmp	r1, r2
 800aa14:	f100 33ff 	add.w	r3, r0, #4294967295
 800aa18:	d100      	bne.n	800aa1c <memcpy+0xc>
 800aa1a:	4770      	bx	lr
 800aa1c:	b510      	push	{r4, lr}
 800aa1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa22:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa26:	4291      	cmp	r1, r2
 800aa28:	d1f9      	bne.n	800aa1e <memcpy+0xe>
 800aa2a:	bd10      	pop	{r4, pc}

0800aa2c <memset>:
 800aa2c:	4402      	add	r2, r0
 800aa2e:	4603      	mov	r3, r0
 800aa30:	4293      	cmp	r3, r2
 800aa32:	d100      	bne.n	800aa36 <memset+0xa>
 800aa34:	4770      	bx	lr
 800aa36:	f803 1b01 	strb.w	r1, [r3], #1
 800aa3a:	e7f9      	b.n	800aa30 <memset+0x4>

0800aa3c <siscanf>:
 800aa3c:	b40e      	push	{r1, r2, r3}
 800aa3e:	b510      	push	{r4, lr}
 800aa40:	b09f      	sub	sp, #124	; 0x7c
 800aa42:	ac21      	add	r4, sp, #132	; 0x84
 800aa44:	f44f 7101 	mov.w	r1, #516	; 0x204
 800aa48:	f854 2b04 	ldr.w	r2, [r4], #4
 800aa4c:	9201      	str	r2, [sp, #4]
 800aa4e:	f8ad 101c 	strh.w	r1, [sp, #28]
 800aa52:	9004      	str	r0, [sp, #16]
 800aa54:	9008      	str	r0, [sp, #32]
 800aa56:	f7f5 fbcd 	bl	80001f4 <strlen>
 800aa5a:	4b0c      	ldr	r3, [pc, #48]	; (800aa8c <siscanf+0x50>)
 800aa5c:	9005      	str	r0, [sp, #20]
 800aa5e:	9009      	str	r0, [sp, #36]	; 0x24
 800aa60:	930d      	str	r3, [sp, #52]	; 0x34
 800aa62:	480b      	ldr	r0, [pc, #44]	; (800aa90 <siscanf+0x54>)
 800aa64:	9a01      	ldr	r2, [sp, #4]
 800aa66:	6800      	ldr	r0, [r0, #0]
 800aa68:	9403      	str	r4, [sp, #12]
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	9311      	str	r3, [sp, #68]	; 0x44
 800aa6e:	9316      	str	r3, [sp, #88]	; 0x58
 800aa70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aa74:	f8ad 301e 	strh.w	r3, [sp, #30]
 800aa78:	a904      	add	r1, sp, #16
 800aa7a:	4623      	mov	r3, r4
 800aa7c:	f000 f9e2 	bl	800ae44 <__ssvfiscanf_r>
 800aa80:	b01f      	add	sp, #124	; 0x7c
 800aa82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa86:	b003      	add	sp, #12
 800aa88:	4770      	bx	lr
 800aa8a:	bf00      	nop
 800aa8c:	0800aa95 	.word	0x0800aa95
 800aa90:	20000060 	.word	0x20000060

0800aa94 <__seofread>:
 800aa94:	2000      	movs	r0, #0
 800aa96:	4770      	bx	lr

0800aa98 <_vsiprintf_r>:
 800aa98:	b500      	push	{lr}
 800aa9a:	b09b      	sub	sp, #108	; 0x6c
 800aa9c:	9100      	str	r1, [sp, #0]
 800aa9e:	9104      	str	r1, [sp, #16]
 800aaa0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800aaa4:	9105      	str	r1, [sp, #20]
 800aaa6:	9102      	str	r1, [sp, #8]
 800aaa8:	4905      	ldr	r1, [pc, #20]	; (800aac0 <_vsiprintf_r+0x28>)
 800aaaa:	9103      	str	r1, [sp, #12]
 800aaac:	4669      	mov	r1, sp
 800aaae:	f000 f86f 	bl	800ab90 <_svfiprintf_r>
 800aab2:	9b00      	ldr	r3, [sp, #0]
 800aab4:	2200      	movs	r2, #0
 800aab6:	701a      	strb	r2, [r3, #0]
 800aab8:	b01b      	add	sp, #108	; 0x6c
 800aaba:	f85d fb04 	ldr.w	pc, [sp], #4
 800aabe:	bf00      	nop
 800aac0:	ffff0208 	.word	0xffff0208

0800aac4 <vsiprintf>:
 800aac4:	4613      	mov	r3, r2
 800aac6:	460a      	mov	r2, r1
 800aac8:	4601      	mov	r1, r0
 800aaca:	4802      	ldr	r0, [pc, #8]	; (800aad4 <vsiprintf+0x10>)
 800aacc:	6800      	ldr	r0, [r0, #0]
 800aace:	f7ff bfe3 	b.w	800aa98 <_vsiprintf_r>
 800aad2:	bf00      	nop
 800aad4:	20000060 	.word	0x20000060

0800aad8 <__ssputs_r>:
 800aad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aadc:	688e      	ldr	r6, [r1, #8]
 800aade:	429e      	cmp	r6, r3
 800aae0:	4682      	mov	sl, r0
 800aae2:	460c      	mov	r4, r1
 800aae4:	4690      	mov	r8, r2
 800aae6:	461f      	mov	r7, r3
 800aae8:	d838      	bhi.n	800ab5c <__ssputs_r+0x84>
 800aaea:	898a      	ldrh	r2, [r1, #12]
 800aaec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aaf0:	d032      	beq.n	800ab58 <__ssputs_r+0x80>
 800aaf2:	6825      	ldr	r5, [r4, #0]
 800aaf4:	6909      	ldr	r1, [r1, #16]
 800aaf6:	eba5 0901 	sub.w	r9, r5, r1
 800aafa:	6965      	ldr	r5, [r4, #20]
 800aafc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ab00:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ab04:	3301      	adds	r3, #1
 800ab06:	444b      	add	r3, r9
 800ab08:	106d      	asrs	r5, r5, #1
 800ab0a:	429d      	cmp	r5, r3
 800ab0c:	bf38      	it	cc
 800ab0e:	461d      	movcc	r5, r3
 800ab10:	0553      	lsls	r3, r2, #21
 800ab12:	d531      	bpl.n	800ab78 <__ssputs_r+0xa0>
 800ab14:	4629      	mov	r1, r5
 800ab16:	f000 ffe5 	bl	800bae4 <_malloc_r>
 800ab1a:	4606      	mov	r6, r0
 800ab1c:	b950      	cbnz	r0, 800ab34 <__ssputs_r+0x5c>
 800ab1e:	230c      	movs	r3, #12
 800ab20:	f8ca 3000 	str.w	r3, [sl]
 800ab24:	89a3      	ldrh	r3, [r4, #12]
 800ab26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab2a:	81a3      	strh	r3, [r4, #12]
 800ab2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ab30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab34:	6921      	ldr	r1, [r4, #16]
 800ab36:	464a      	mov	r2, r9
 800ab38:	f7ff ff6a 	bl	800aa10 <memcpy>
 800ab3c:	89a3      	ldrh	r3, [r4, #12]
 800ab3e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ab42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab46:	81a3      	strh	r3, [r4, #12]
 800ab48:	6126      	str	r6, [r4, #16]
 800ab4a:	6165      	str	r5, [r4, #20]
 800ab4c:	444e      	add	r6, r9
 800ab4e:	eba5 0509 	sub.w	r5, r5, r9
 800ab52:	6026      	str	r6, [r4, #0]
 800ab54:	60a5      	str	r5, [r4, #8]
 800ab56:	463e      	mov	r6, r7
 800ab58:	42be      	cmp	r6, r7
 800ab5a:	d900      	bls.n	800ab5e <__ssputs_r+0x86>
 800ab5c:	463e      	mov	r6, r7
 800ab5e:	6820      	ldr	r0, [r4, #0]
 800ab60:	4632      	mov	r2, r6
 800ab62:	4641      	mov	r1, r8
 800ab64:	f000 ff38 	bl	800b9d8 <memmove>
 800ab68:	68a3      	ldr	r3, [r4, #8]
 800ab6a:	1b9b      	subs	r3, r3, r6
 800ab6c:	60a3      	str	r3, [r4, #8]
 800ab6e:	6823      	ldr	r3, [r4, #0]
 800ab70:	4433      	add	r3, r6
 800ab72:	6023      	str	r3, [r4, #0]
 800ab74:	2000      	movs	r0, #0
 800ab76:	e7db      	b.n	800ab30 <__ssputs_r+0x58>
 800ab78:	462a      	mov	r2, r5
 800ab7a:	f001 f827 	bl	800bbcc <_realloc_r>
 800ab7e:	4606      	mov	r6, r0
 800ab80:	2800      	cmp	r0, #0
 800ab82:	d1e1      	bne.n	800ab48 <__ssputs_r+0x70>
 800ab84:	6921      	ldr	r1, [r4, #16]
 800ab86:	4650      	mov	r0, sl
 800ab88:	f000 ff40 	bl	800ba0c <_free_r>
 800ab8c:	e7c7      	b.n	800ab1e <__ssputs_r+0x46>
	...

0800ab90 <_svfiprintf_r>:
 800ab90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab94:	4698      	mov	r8, r3
 800ab96:	898b      	ldrh	r3, [r1, #12]
 800ab98:	061b      	lsls	r3, r3, #24
 800ab9a:	b09d      	sub	sp, #116	; 0x74
 800ab9c:	4607      	mov	r7, r0
 800ab9e:	460d      	mov	r5, r1
 800aba0:	4614      	mov	r4, r2
 800aba2:	d50e      	bpl.n	800abc2 <_svfiprintf_r+0x32>
 800aba4:	690b      	ldr	r3, [r1, #16]
 800aba6:	b963      	cbnz	r3, 800abc2 <_svfiprintf_r+0x32>
 800aba8:	2140      	movs	r1, #64	; 0x40
 800abaa:	f000 ff9b 	bl	800bae4 <_malloc_r>
 800abae:	6028      	str	r0, [r5, #0]
 800abb0:	6128      	str	r0, [r5, #16]
 800abb2:	b920      	cbnz	r0, 800abbe <_svfiprintf_r+0x2e>
 800abb4:	230c      	movs	r3, #12
 800abb6:	603b      	str	r3, [r7, #0]
 800abb8:	f04f 30ff 	mov.w	r0, #4294967295
 800abbc:	e0d1      	b.n	800ad62 <_svfiprintf_r+0x1d2>
 800abbe:	2340      	movs	r3, #64	; 0x40
 800abc0:	616b      	str	r3, [r5, #20]
 800abc2:	2300      	movs	r3, #0
 800abc4:	9309      	str	r3, [sp, #36]	; 0x24
 800abc6:	2320      	movs	r3, #32
 800abc8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800abcc:	f8cd 800c 	str.w	r8, [sp, #12]
 800abd0:	2330      	movs	r3, #48	; 0x30
 800abd2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ad7c <_svfiprintf_r+0x1ec>
 800abd6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800abda:	f04f 0901 	mov.w	r9, #1
 800abde:	4623      	mov	r3, r4
 800abe0:	469a      	mov	sl, r3
 800abe2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800abe6:	b10a      	cbz	r2, 800abec <_svfiprintf_r+0x5c>
 800abe8:	2a25      	cmp	r2, #37	; 0x25
 800abea:	d1f9      	bne.n	800abe0 <_svfiprintf_r+0x50>
 800abec:	ebba 0b04 	subs.w	fp, sl, r4
 800abf0:	d00b      	beq.n	800ac0a <_svfiprintf_r+0x7a>
 800abf2:	465b      	mov	r3, fp
 800abf4:	4622      	mov	r2, r4
 800abf6:	4629      	mov	r1, r5
 800abf8:	4638      	mov	r0, r7
 800abfa:	f7ff ff6d 	bl	800aad8 <__ssputs_r>
 800abfe:	3001      	adds	r0, #1
 800ac00:	f000 80aa 	beq.w	800ad58 <_svfiprintf_r+0x1c8>
 800ac04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac06:	445a      	add	r2, fp
 800ac08:	9209      	str	r2, [sp, #36]	; 0x24
 800ac0a:	f89a 3000 	ldrb.w	r3, [sl]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	f000 80a2 	beq.w	800ad58 <_svfiprintf_r+0x1c8>
 800ac14:	2300      	movs	r3, #0
 800ac16:	f04f 32ff 	mov.w	r2, #4294967295
 800ac1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac1e:	f10a 0a01 	add.w	sl, sl, #1
 800ac22:	9304      	str	r3, [sp, #16]
 800ac24:	9307      	str	r3, [sp, #28]
 800ac26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ac2a:	931a      	str	r3, [sp, #104]	; 0x68
 800ac2c:	4654      	mov	r4, sl
 800ac2e:	2205      	movs	r2, #5
 800ac30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac34:	4851      	ldr	r0, [pc, #324]	; (800ad7c <_svfiprintf_r+0x1ec>)
 800ac36:	f7f5 faeb 	bl	8000210 <memchr>
 800ac3a:	9a04      	ldr	r2, [sp, #16]
 800ac3c:	b9d8      	cbnz	r0, 800ac76 <_svfiprintf_r+0xe6>
 800ac3e:	06d0      	lsls	r0, r2, #27
 800ac40:	bf44      	itt	mi
 800ac42:	2320      	movmi	r3, #32
 800ac44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac48:	0711      	lsls	r1, r2, #28
 800ac4a:	bf44      	itt	mi
 800ac4c:	232b      	movmi	r3, #43	; 0x2b
 800ac4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac52:	f89a 3000 	ldrb.w	r3, [sl]
 800ac56:	2b2a      	cmp	r3, #42	; 0x2a
 800ac58:	d015      	beq.n	800ac86 <_svfiprintf_r+0xf6>
 800ac5a:	9a07      	ldr	r2, [sp, #28]
 800ac5c:	4654      	mov	r4, sl
 800ac5e:	2000      	movs	r0, #0
 800ac60:	f04f 0c0a 	mov.w	ip, #10
 800ac64:	4621      	mov	r1, r4
 800ac66:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac6a:	3b30      	subs	r3, #48	; 0x30
 800ac6c:	2b09      	cmp	r3, #9
 800ac6e:	d94e      	bls.n	800ad0e <_svfiprintf_r+0x17e>
 800ac70:	b1b0      	cbz	r0, 800aca0 <_svfiprintf_r+0x110>
 800ac72:	9207      	str	r2, [sp, #28]
 800ac74:	e014      	b.n	800aca0 <_svfiprintf_r+0x110>
 800ac76:	eba0 0308 	sub.w	r3, r0, r8
 800ac7a:	fa09 f303 	lsl.w	r3, r9, r3
 800ac7e:	4313      	orrs	r3, r2
 800ac80:	9304      	str	r3, [sp, #16]
 800ac82:	46a2      	mov	sl, r4
 800ac84:	e7d2      	b.n	800ac2c <_svfiprintf_r+0x9c>
 800ac86:	9b03      	ldr	r3, [sp, #12]
 800ac88:	1d19      	adds	r1, r3, #4
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	9103      	str	r1, [sp, #12]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	bfbb      	ittet	lt
 800ac92:	425b      	neglt	r3, r3
 800ac94:	f042 0202 	orrlt.w	r2, r2, #2
 800ac98:	9307      	strge	r3, [sp, #28]
 800ac9a:	9307      	strlt	r3, [sp, #28]
 800ac9c:	bfb8      	it	lt
 800ac9e:	9204      	strlt	r2, [sp, #16]
 800aca0:	7823      	ldrb	r3, [r4, #0]
 800aca2:	2b2e      	cmp	r3, #46	; 0x2e
 800aca4:	d10c      	bne.n	800acc0 <_svfiprintf_r+0x130>
 800aca6:	7863      	ldrb	r3, [r4, #1]
 800aca8:	2b2a      	cmp	r3, #42	; 0x2a
 800acaa:	d135      	bne.n	800ad18 <_svfiprintf_r+0x188>
 800acac:	9b03      	ldr	r3, [sp, #12]
 800acae:	1d1a      	adds	r2, r3, #4
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	9203      	str	r2, [sp, #12]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	bfb8      	it	lt
 800acb8:	f04f 33ff 	movlt.w	r3, #4294967295
 800acbc:	3402      	adds	r4, #2
 800acbe:	9305      	str	r3, [sp, #20]
 800acc0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ad8c <_svfiprintf_r+0x1fc>
 800acc4:	7821      	ldrb	r1, [r4, #0]
 800acc6:	2203      	movs	r2, #3
 800acc8:	4650      	mov	r0, sl
 800acca:	f7f5 faa1 	bl	8000210 <memchr>
 800acce:	b140      	cbz	r0, 800ace2 <_svfiprintf_r+0x152>
 800acd0:	2340      	movs	r3, #64	; 0x40
 800acd2:	eba0 000a 	sub.w	r0, r0, sl
 800acd6:	fa03 f000 	lsl.w	r0, r3, r0
 800acda:	9b04      	ldr	r3, [sp, #16]
 800acdc:	4303      	orrs	r3, r0
 800acde:	3401      	adds	r4, #1
 800ace0:	9304      	str	r3, [sp, #16]
 800ace2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ace6:	4826      	ldr	r0, [pc, #152]	; (800ad80 <_svfiprintf_r+0x1f0>)
 800ace8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800acec:	2206      	movs	r2, #6
 800acee:	f7f5 fa8f 	bl	8000210 <memchr>
 800acf2:	2800      	cmp	r0, #0
 800acf4:	d038      	beq.n	800ad68 <_svfiprintf_r+0x1d8>
 800acf6:	4b23      	ldr	r3, [pc, #140]	; (800ad84 <_svfiprintf_r+0x1f4>)
 800acf8:	bb1b      	cbnz	r3, 800ad42 <_svfiprintf_r+0x1b2>
 800acfa:	9b03      	ldr	r3, [sp, #12]
 800acfc:	3307      	adds	r3, #7
 800acfe:	f023 0307 	bic.w	r3, r3, #7
 800ad02:	3308      	adds	r3, #8
 800ad04:	9303      	str	r3, [sp, #12]
 800ad06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad08:	4433      	add	r3, r6
 800ad0a:	9309      	str	r3, [sp, #36]	; 0x24
 800ad0c:	e767      	b.n	800abde <_svfiprintf_r+0x4e>
 800ad0e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad12:	460c      	mov	r4, r1
 800ad14:	2001      	movs	r0, #1
 800ad16:	e7a5      	b.n	800ac64 <_svfiprintf_r+0xd4>
 800ad18:	2300      	movs	r3, #0
 800ad1a:	3401      	adds	r4, #1
 800ad1c:	9305      	str	r3, [sp, #20]
 800ad1e:	4619      	mov	r1, r3
 800ad20:	f04f 0c0a 	mov.w	ip, #10
 800ad24:	4620      	mov	r0, r4
 800ad26:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad2a:	3a30      	subs	r2, #48	; 0x30
 800ad2c:	2a09      	cmp	r2, #9
 800ad2e:	d903      	bls.n	800ad38 <_svfiprintf_r+0x1a8>
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d0c5      	beq.n	800acc0 <_svfiprintf_r+0x130>
 800ad34:	9105      	str	r1, [sp, #20]
 800ad36:	e7c3      	b.n	800acc0 <_svfiprintf_r+0x130>
 800ad38:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad3c:	4604      	mov	r4, r0
 800ad3e:	2301      	movs	r3, #1
 800ad40:	e7f0      	b.n	800ad24 <_svfiprintf_r+0x194>
 800ad42:	ab03      	add	r3, sp, #12
 800ad44:	9300      	str	r3, [sp, #0]
 800ad46:	462a      	mov	r2, r5
 800ad48:	4b0f      	ldr	r3, [pc, #60]	; (800ad88 <_svfiprintf_r+0x1f8>)
 800ad4a:	a904      	add	r1, sp, #16
 800ad4c:	4638      	mov	r0, r7
 800ad4e:	f3af 8000 	nop.w
 800ad52:	1c42      	adds	r2, r0, #1
 800ad54:	4606      	mov	r6, r0
 800ad56:	d1d6      	bne.n	800ad06 <_svfiprintf_r+0x176>
 800ad58:	89ab      	ldrh	r3, [r5, #12]
 800ad5a:	065b      	lsls	r3, r3, #25
 800ad5c:	f53f af2c 	bmi.w	800abb8 <_svfiprintf_r+0x28>
 800ad60:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad62:	b01d      	add	sp, #116	; 0x74
 800ad64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad68:	ab03      	add	r3, sp, #12
 800ad6a:	9300      	str	r3, [sp, #0]
 800ad6c:	462a      	mov	r2, r5
 800ad6e:	4b06      	ldr	r3, [pc, #24]	; (800ad88 <_svfiprintf_r+0x1f8>)
 800ad70:	a904      	add	r1, sp, #16
 800ad72:	4638      	mov	r0, r7
 800ad74:	f000 fa4c 	bl	800b210 <_printf_i>
 800ad78:	e7eb      	b.n	800ad52 <_svfiprintf_r+0x1c2>
 800ad7a:	bf00      	nop
 800ad7c:	0800ccc5 	.word	0x0800ccc5
 800ad80:	0800cccf 	.word	0x0800cccf
 800ad84:	00000000 	.word	0x00000000
 800ad88:	0800aad9 	.word	0x0800aad9
 800ad8c:	0800cccb 	.word	0x0800cccb

0800ad90 <_sungetc_r>:
 800ad90:	b538      	push	{r3, r4, r5, lr}
 800ad92:	1c4b      	adds	r3, r1, #1
 800ad94:	4614      	mov	r4, r2
 800ad96:	d103      	bne.n	800ada0 <_sungetc_r+0x10>
 800ad98:	f04f 35ff 	mov.w	r5, #4294967295
 800ad9c:	4628      	mov	r0, r5
 800ad9e:	bd38      	pop	{r3, r4, r5, pc}
 800ada0:	8993      	ldrh	r3, [r2, #12]
 800ada2:	f023 0320 	bic.w	r3, r3, #32
 800ada6:	8193      	strh	r3, [r2, #12]
 800ada8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800adaa:	6852      	ldr	r2, [r2, #4]
 800adac:	b2cd      	uxtb	r5, r1
 800adae:	b18b      	cbz	r3, 800add4 <_sungetc_r+0x44>
 800adb0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800adb2:	4293      	cmp	r3, r2
 800adb4:	dd08      	ble.n	800adc8 <_sungetc_r+0x38>
 800adb6:	6823      	ldr	r3, [r4, #0]
 800adb8:	1e5a      	subs	r2, r3, #1
 800adba:	6022      	str	r2, [r4, #0]
 800adbc:	f803 5c01 	strb.w	r5, [r3, #-1]
 800adc0:	6863      	ldr	r3, [r4, #4]
 800adc2:	3301      	adds	r3, #1
 800adc4:	6063      	str	r3, [r4, #4]
 800adc6:	e7e9      	b.n	800ad9c <_sungetc_r+0xc>
 800adc8:	4621      	mov	r1, r4
 800adca:	f000 fdc9 	bl	800b960 <__submore>
 800adce:	2800      	cmp	r0, #0
 800add0:	d0f1      	beq.n	800adb6 <_sungetc_r+0x26>
 800add2:	e7e1      	b.n	800ad98 <_sungetc_r+0x8>
 800add4:	6921      	ldr	r1, [r4, #16]
 800add6:	6823      	ldr	r3, [r4, #0]
 800add8:	b151      	cbz	r1, 800adf0 <_sungetc_r+0x60>
 800adda:	4299      	cmp	r1, r3
 800addc:	d208      	bcs.n	800adf0 <_sungetc_r+0x60>
 800adde:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800ade2:	42a9      	cmp	r1, r5
 800ade4:	d104      	bne.n	800adf0 <_sungetc_r+0x60>
 800ade6:	3b01      	subs	r3, #1
 800ade8:	3201      	adds	r2, #1
 800adea:	6023      	str	r3, [r4, #0]
 800adec:	6062      	str	r2, [r4, #4]
 800adee:	e7d5      	b.n	800ad9c <_sungetc_r+0xc>
 800adf0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800adf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800adf8:	6363      	str	r3, [r4, #52]	; 0x34
 800adfa:	2303      	movs	r3, #3
 800adfc:	63a3      	str	r3, [r4, #56]	; 0x38
 800adfe:	4623      	mov	r3, r4
 800ae00:	f803 5f46 	strb.w	r5, [r3, #70]!
 800ae04:	6023      	str	r3, [r4, #0]
 800ae06:	2301      	movs	r3, #1
 800ae08:	e7dc      	b.n	800adc4 <_sungetc_r+0x34>

0800ae0a <__ssrefill_r>:
 800ae0a:	b510      	push	{r4, lr}
 800ae0c:	460c      	mov	r4, r1
 800ae0e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ae10:	b169      	cbz	r1, 800ae2e <__ssrefill_r+0x24>
 800ae12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae16:	4299      	cmp	r1, r3
 800ae18:	d001      	beq.n	800ae1e <__ssrefill_r+0x14>
 800ae1a:	f000 fdf7 	bl	800ba0c <_free_r>
 800ae1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ae20:	6063      	str	r3, [r4, #4]
 800ae22:	2000      	movs	r0, #0
 800ae24:	6360      	str	r0, [r4, #52]	; 0x34
 800ae26:	b113      	cbz	r3, 800ae2e <__ssrefill_r+0x24>
 800ae28:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ae2a:	6023      	str	r3, [r4, #0]
 800ae2c:	bd10      	pop	{r4, pc}
 800ae2e:	6923      	ldr	r3, [r4, #16]
 800ae30:	6023      	str	r3, [r4, #0]
 800ae32:	2300      	movs	r3, #0
 800ae34:	6063      	str	r3, [r4, #4]
 800ae36:	89a3      	ldrh	r3, [r4, #12]
 800ae38:	f043 0320 	orr.w	r3, r3, #32
 800ae3c:	81a3      	strh	r3, [r4, #12]
 800ae3e:	f04f 30ff 	mov.w	r0, #4294967295
 800ae42:	e7f3      	b.n	800ae2c <__ssrefill_r+0x22>

0800ae44 <__ssvfiscanf_r>:
 800ae44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae48:	460c      	mov	r4, r1
 800ae4a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800ae4e:	2100      	movs	r1, #0
 800ae50:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800ae54:	49a6      	ldr	r1, [pc, #664]	; (800b0f0 <__ssvfiscanf_r+0x2ac>)
 800ae56:	91a0      	str	r1, [sp, #640]	; 0x280
 800ae58:	f10d 0804 	add.w	r8, sp, #4
 800ae5c:	49a5      	ldr	r1, [pc, #660]	; (800b0f4 <__ssvfiscanf_r+0x2b0>)
 800ae5e:	4fa6      	ldr	r7, [pc, #664]	; (800b0f8 <__ssvfiscanf_r+0x2b4>)
 800ae60:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800b0fc <__ssvfiscanf_r+0x2b8>
 800ae64:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800ae68:	4606      	mov	r6, r0
 800ae6a:	91a1      	str	r1, [sp, #644]	; 0x284
 800ae6c:	9300      	str	r3, [sp, #0]
 800ae6e:	7813      	ldrb	r3, [r2, #0]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	f000 815a 	beq.w	800b12a <__ssvfiscanf_r+0x2e6>
 800ae76:	5dd9      	ldrb	r1, [r3, r7]
 800ae78:	f011 0108 	ands.w	r1, r1, #8
 800ae7c:	f102 0501 	add.w	r5, r2, #1
 800ae80:	d019      	beq.n	800aeb6 <__ssvfiscanf_r+0x72>
 800ae82:	6863      	ldr	r3, [r4, #4]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	dd0f      	ble.n	800aea8 <__ssvfiscanf_r+0x64>
 800ae88:	6823      	ldr	r3, [r4, #0]
 800ae8a:	781a      	ldrb	r2, [r3, #0]
 800ae8c:	5cba      	ldrb	r2, [r7, r2]
 800ae8e:	0712      	lsls	r2, r2, #28
 800ae90:	d401      	bmi.n	800ae96 <__ssvfiscanf_r+0x52>
 800ae92:	462a      	mov	r2, r5
 800ae94:	e7eb      	b.n	800ae6e <__ssvfiscanf_r+0x2a>
 800ae96:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ae98:	3201      	adds	r2, #1
 800ae9a:	9245      	str	r2, [sp, #276]	; 0x114
 800ae9c:	6862      	ldr	r2, [r4, #4]
 800ae9e:	3301      	adds	r3, #1
 800aea0:	3a01      	subs	r2, #1
 800aea2:	6062      	str	r2, [r4, #4]
 800aea4:	6023      	str	r3, [r4, #0]
 800aea6:	e7ec      	b.n	800ae82 <__ssvfiscanf_r+0x3e>
 800aea8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800aeaa:	4621      	mov	r1, r4
 800aeac:	4630      	mov	r0, r6
 800aeae:	4798      	blx	r3
 800aeb0:	2800      	cmp	r0, #0
 800aeb2:	d0e9      	beq.n	800ae88 <__ssvfiscanf_r+0x44>
 800aeb4:	e7ed      	b.n	800ae92 <__ssvfiscanf_r+0x4e>
 800aeb6:	2b25      	cmp	r3, #37	; 0x25
 800aeb8:	d012      	beq.n	800aee0 <__ssvfiscanf_r+0x9c>
 800aeba:	469a      	mov	sl, r3
 800aebc:	6863      	ldr	r3, [r4, #4]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	f340 8091 	ble.w	800afe6 <__ssvfiscanf_r+0x1a2>
 800aec4:	6822      	ldr	r2, [r4, #0]
 800aec6:	7813      	ldrb	r3, [r2, #0]
 800aec8:	4553      	cmp	r3, sl
 800aeca:	f040 812e 	bne.w	800b12a <__ssvfiscanf_r+0x2e6>
 800aece:	6863      	ldr	r3, [r4, #4]
 800aed0:	3b01      	subs	r3, #1
 800aed2:	6063      	str	r3, [r4, #4]
 800aed4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800aed6:	3201      	adds	r2, #1
 800aed8:	3301      	adds	r3, #1
 800aeda:	6022      	str	r2, [r4, #0]
 800aedc:	9345      	str	r3, [sp, #276]	; 0x114
 800aede:	e7d8      	b.n	800ae92 <__ssvfiscanf_r+0x4e>
 800aee0:	9141      	str	r1, [sp, #260]	; 0x104
 800aee2:	9143      	str	r1, [sp, #268]	; 0x10c
 800aee4:	7853      	ldrb	r3, [r2, #1]
 800aee6:	2b2a      	cmp	r3, #42	; 0x2a
 800aee8:	bf02      	ittt	eq
 800aeea:	2310      	moveq	r3, #16
 800aeec:	1c95      	addeq	r5, r2, #2
 800aeee:	9341      	streq	r3, [sp, #260]	; 0x104
 800aef0:	220a      	movs	r2, #10
 800aef2:	46aa      	mov	sl, r5
 800aef4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800aef8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800aefc:	2b09      	cmp	r3, #9
 800aefe:	d91d      	bls.n	800af3c <__ssvfiscanf_r+0xf8>
 800af00:	487e      	ldr	r0, [pc, #504]	; (800b0fc <__ssvfiscanf_r+0x2b8>)
 800af02:	2203      	movs	r2, #3
 800af04:	f7f5 f984 	bl	8000210 <memchr>
 800af08:	b140      	cbz	r0, 800af1c <__ssvfiscanf_r+0xd8>
 800af0a:	2301      	movs	r3, #1
 800af0c:	eba0 0009 	sub.w	r0, r0, r9
 800af10:	fa03 f000 	lsl.w	r0, r3, r0
 800af14:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800af16:	4318      	orrs	r0, r3
 800af18:	9041      	str	r0, [sp, #260]	; 0x104
 800af1a:	4655      	mov	r5, sl
 800af1c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800af20:	2b78      	cmp	r3, #120	; 0x78
 800af22:	d806      	bhi.n	800af32 <__ssvfiscanf_r+0xee>
 800af24:	2b57      	cmp	r3, #87	; 0x57
 800af26:	d810      	bhi.n	800af4a <__ssvfiscanf_r+0x106>
 800af28:	2b25      	cmp	r3, #37	; 0x25
 800af2a:	d0c6      	beq.n	800aeba <__ssvfiscanf_r+0x76>
 800af2c:	d856      	bhi.n	800afdc <__ssvfiscanf_r+0x198>
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d064      	beq.n	800affc <__ssvfiscanf_r+0x1b8>
 800af32:	2303      	movs	r3, #3
 800af34:	9347      	str	r3, [sp, #284]	; 0x11c
 800af36:	230a      	movs	r3, #10
 800af38:	9342      	str	r3, [sp, #264]	; 0x108
 800af3a:	e071      	b.n	800b020 <__ssvfiscanf_r+0x1dc>
 800af3c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800af3e:	fb02 1103 	mla	r1, r2, r3, r1
 800af42:	3930      	subs	r1, #48	; 0x30
 800af44:	9143      	str	r1, [sp, #268]	; 0x10c
 800af46:	4655      	mov	r5, sl
 800af48:	e7d3      	b.n	800aef2 <__ssvfiscanf_r+0xae>
 800af4a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800af4e:	2a20      	cmp	r2, #32
 800af50:	d8ef      	bhi.n	800af32 <__ssvfiscanf_r+0xee>
 800af52:	a101      	add	r1, pc, #4	; (adr r1, 800af58 <__ssvfiscanf_r+0x114>)
 800af54:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800af58:	0800b00b 	.word	0x0800b00b
 800af5c:	0800af33 	.word	0x0800af33
 800af60:	0800af33 	.word	0x0800af33
 800af64:	0800b069 	.word	0x0800b069
 800af68:	0800af33 	.word	0x0800af33
 800af6c:	0800af33 	.word	0x0800af33
 800af70:	0800af33 	.word	0x0800af33
 800af74:	0800af33 	.word	0x0800af33
 800af78:	0800af33 	.word	0x0800af33
 800af7c:	0800af33 	.word	0x0800af33
 800af80:	0800af33 	.word	0x0800af33
 800af84:	0800b07f 	.word	0x0800b07f
 800af88:	0800b055 	.word	0x0800b055
 800af8c:	0800afe3 	.word	0x0800afe3
 800af90:	0800afe3 	.word	0x0800afe3
 800af94:	0800afe3 	.word	0x0800afe3
 800af98:	0800af33 	.word	0x0800af33
 800af9c:	0800b059 	.word	0x0800b059
 800afa0:	0800af33 	.word	0x0800af33
 800afa4:	0800af33 	.word	0x0800af33
 800afa8:	0800af33 	.word	0x0800af33
 800afac:	0800af33 	.word	0x0800af33
 800afb0:	0800b08f 	.word	0x0800b08f
 800afb4:	0800b061 	.word	0x0800b061
 800afb8:	0800b003 	.word	0x0800b003
 800afbc:	0800af33 	.word	0x0800af33
 800afc0:	0800af33 	.word	0x0800af33
 800afc4:	0800b08b 	.word	0x0800b08b
 800afc8:	0800af33 	.word	0x0800af33
 800afcc:	0800b055 	.word	0x0800b055
 800afd0:	0800af33 	.word	0x0800af33
 800afd4:	0800af33 	.word	0x0800af33
 800afd8:	0800b00b 	.word	0x0800b00b
 800afdc:	3b45      	subs	r3, #69	; 0x45
 800afde:	2b02      	cmp	r3, #2
 800afe0:	d8a7      	bhi.n	800af32 <__ssvfiscanf_r+0xee>
 800afe2:	2305      	movs	r3, #5
 800afe4:	e01b      	b.n	800b01e <__ssvfiscanf_r+0x1da>
 800afe6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800afe8:	4621      	mov	r1, r4
 800afea:	4630      	mov	r0, r6
 800afec:	4798      	blx	r3
 800afee:	2800      	cmp	r0, #0
 800aff0:	f43f af68 	beq.w	800aec4 <__ssvfiscanf_r+0x80>
 800aff4:	9844      	ldr	r0, [sp, #272]	; 0x110
 800aff6:	2800      	cmp	r0, #0
 800aff8:	f040 808d 	bne.w	800b116 <__ssvfiscanf_r+0x2d2>
 800affc:	f04f 30ff 	mov.w	r0, #4294967295
 800b000:	e08f      	b.n	800b122 <__ssvfiscanf_r+0x2de>
 800b002:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b004:	f042 0220 	orr.w	r2, r2, #32
 800b008:	9241      	str	r2, [sp, #260]	; 0x104
 800b00a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b00c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b010:	9241      	str	r2, [sp, #260]	; 0x104
 800b012:	2210      	movs	r2, #16
 800b014:	2b6f      	cmp	r3, #111	; 0x6f
 800b016:	9242      	str	r2, [sp, #264]	; 0x108
 800b018:	bf34      	ite	cc
 800b01a:	2303      	movcc	r3, #3
 800b01c:	2304      	movcs	r3, #4
 800b01e:	9347      	str	r3, [sp, #284]	; 0x11c
 800b020:	6863      	ldr	r3, [r4, #4]
 800b022:	2b00      	cmp	r3, #0
 800b024:	dd42      	ble.n	800b0ac <__ssvfiscanf_r+0x268>
 800b026:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b028:	0659      	lsls	r1, r3, #25
 800b02a:	d404      	bmi.n	800b036 <__ssvfiscanf_r+0x1f2>
 800b02c:	6823      	ldr	r3, [r4, #0]
 800b02e:	781a      	ldrb	r2, [r3, #0]
 800b030:	5cba      	ldrb	r2, [r7, r2]
 800b032:	0712      	lsls	r2, r2, #28
 800b034:	d441      	bmi.n	800b0ba <__ssvfiscanf_r+0x276>
 800b036:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800b038:	2b02      	cmp	r3, #2
 800b03a:	dc50      	bgt.n	800b0de <__ssvfiscanf_r+0x29a>
 800b03c:	466b      	mov	r3, sp
 800b03e:	4622      	mov	r2, r4
 800b040:	a941      	add	r1, sp, #260	; 0x104
 800b042:	4630      	mov	r0, r6
 800b044:	f000 fa0a 	bl	800b45c <_scanf_chars>
 800b048:	2801      	cmp	r0, #1
 800b04a:	d06e      	beq.n	800b12a <__ssvfiscanf_r+0x2e6>
 800b04c:	2802      	cmp	r0, #2
 800b04e:	f47f af20 	bne.w	800ae92 <__ssvfiscanf_r+0x4e>
 800b052:	e7cf      	b.n	800aff4 <__ssvfiscanf_r+0x1b0>
 800b054:	220a      	movs	r2, #10
 800b056:	e7dd      	b.n	800b014 <__ssvfiscanf_r+0x1d0>
 800b058:	2300      	movs	r3, #0
 800b05a:	9342      	str	r3, [sp, #264]	; 0x108
 800b05c:	2303      	movs	r3, #3
 800b05e:	e7de      	b.n	800b01e <__ssvfiscanf_r+0x1da>
 800b060:	2308      	movs	r3, #8
 800b062:	9342      	str	r3, [sp, #264]	; 0x108
 800b064:	2304      	movs	r3, #4
 800b066:	e7da      	b.n	800b01e <__ssvfiscanf_r+0x1da>
 800b068:	4629      	mov	r1, r5
 800b06a:	4640      	mov	r0, r8
 800b06c:	f000 fb48 	bl	800b700 <__sccl>
 800b070:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b072:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b076:	9341      	str	r3, [sp, #260]	; 0x104
 800b078:	4605      	mov	r5, r0
 800b07a:	2301      	movs	r3, #1
 800b07c:	e7cf      	b.n	800b01e <__ssvfiscanf_r+0x1da>
 800b07e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b080:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b084:	9341      	str	r3, [sp, #260]	; 0x104
 800b086:	2300      	movs	r3, #0
 800b088:	e7c9      	b.n	800b01e <__ssvfiscanf_r+0x1da>
 800b08a:	2302      	movs	r3, #2
 800b08c:	e7c7      	b.n	800b01e <__ssvfiscanf_r+0x1da>
 800b08e:	9841      	ldr	r0, [sp, #260]	; 0x104
 800b090:	06c3      	lsls	r3, r0, #27
 800b092:	f53f aefe 	bmi.w	800ae92 <__ssvfiscanf_r+0x4e>
 800b096:	9b00      	ldr	r3, [sp, #0]
 800b098:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b09a:	1d19      	adds	r1, r3, #4
 800b09c:	9100      	str	r1, [sp, #0]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	f010 0f01 	tst.w	r0, #1
 800b0a4:	bf14      	ite	ne
 800b0a6:	801a      	strhne	r2, [r3, #0]
 800b0a8:	601a      	streq	r2, [r3, #0]
 800b0aa:	e6f2      	b.n	800ae92 <__ssvfiscanf_r+0x4e>
 800b0ac:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b0ae:	4621      	mov	r1, r4
 800b0b0:	4630      	mov	r0, r6
 800b0b2:	4798      	blx	r3
 800b0b4:	2800      	cmp	r0, #0
 800b0b6:	d0b6      	beq.n	800b026 <__ssvfiscanf_r+0x1e2>
 800b0b8:	e79c      	b.n	800aff4 <__ssvfiscanf_r+0x1b0>
 800b0ba:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b0bc:	3201      	adds	r2, #1
 800b0be:	9245      	str	r2, [sp, #276]	; 0x114
 800b0c0:	6862      	ldr	r2, [r4, #4]
 800b0c2:	3a01      	subs	r2, #1
 800b0c4:	2a00      	cmp	r2, #0
 800b0c6:	6062      	str	r2, [r4, #4]
 800b0c8:	dd02      	ble.n	800b0d0 <__ssvfiscanf_r+0x28c>
 800b0ca:	3301      	adds	r3, #1
 800b0cc:	6023      	str	r3, [r4, #0]
 800b0ce:	e7ad      	b.n	800b02c <__ssvfiscanf_r+0x1e8>
 800b0d0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b0d2:	4621      	mov	r1, r4
 800b0d4:	4630      	mov	r0, r6
 800b0d6:	4798      	blx	r3
 800b0d8:	2800      	cmp	r0, #0
 800b0da:	d0a7      	beq.n	800b02c <__ssvfiscanf_r+0x1e8>
 800b0dc:	e78a      	b.n	800aff4 <__ssvfiscanf_r+0x1b0>
 800b0de:	2b04      	cmp	r3, #4
 800b0e0:	dc0e      	bgt.n	800b100 <__ssvfiscanf_r+0x2bc>
 800b0e2:	466b      	mov	r3, sp
 800b0e4:	4622      	mov	r2, r4
 800b0e6:	a941      	add	r1, sp, #260	; 0x104
 800b0e8:	4630      	mov	r0, r6
 800b0ea:	f000 fa11 	bl	800b510 <_scanf_i>
 800b0ee:	e7ab      	b.n	800b048 <__ssvfiscanf_r+0x204>
 800b0f0:	0800ad91 	.word	0x0800ad91
 800b0f4:	0800ae0b 	.word	0x0800ae0b
 800b0f8:	0800cbc5 	.word	0x0800cbc5
 800b0fc:	0800cccb 	.word	0x0800cccb
 800b100:	4b0b      	ldr	r3, [pc, #44]	; (800b130 <__ssvfiscanf_r+0x2ec>)
 800b102:	2b00      	cmp	r3, #0
 800b104:	f43f aec5 	beq.w	800ae92 <__ssvfiscanf_r+0x4e>
 800b108:	466b      	mov	r3, sp
 800b10a:	4622      	mov	r2, r4
 800b10c:	a941      	add	r1, sp, #260	; 0x104
 800b10e:	4630      	mov	r0, r6
 800b110:	f3af 8000 	nop.w
 800b114:	e798      	b.n	800b048 <__ssvfiscanf_r+0x204>
 800b116:	89a3      	ldrh	r3, [r4, #12]
 800b118:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b11c:	bf18      	it	ne
 800b11e:	f04f 30ff 	movne.w	r0, #4294967295
 800b122:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800b126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b12a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b12c:	e7f9      	b.n	800b122 <__ssvfiscanf_r+0x2de>
 800b12e:	bf00      	nop
 800b130:	00000000 	.word	0x00000000

0800b134 <_printf_common>:
 800b134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b138:	4616      	mov	r6, r2
 800b13a:	4699      	mov	r9, r3
 800b13c:	688a      	ldr	r2, [r1, #8]
 800b13e:	690b      	ldr	r3, [r1, #16]
 800b140:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b144:	4293      	cmp	r3, r2
 800b146:	bfb8      	it	lt
 800b148:	4613      	movlt	r3, r2
 800b14a:	6033      	str	r3, [r6, #0]
 800b14c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b150:	4607      	mov	r7, r0
 800b152:	460c      	mov	r4, r1
 800b154:	b10a      	cbz	r2, 800b15a <_printf_common+0x26>
 800b156:	3301      	adds	r3, #1
 800b158:	6033      	str	r3, [r6, #0]
 800b15a:	6823      	ldr	r3, [r4, #0]
 800b15c:	0699      	lsls	r1, r3, #26
 800b15e:	bf42      	ittt	mi
 800b160:	6833      	ldrmi	r3, [r6, #0]
 800b162:	3302      	addmi	r3, #2
 800b164:	6033      	strmi	r3, [r6, #0]
 800b166:	6825      	ldr	r5, [r4, #0]
 800b168:	f015 0506 	ands.w	r5, r5, #6
 800b16c:	d106      	bne.n	800b17c <_printf_common+0x48>
 800b16e:	f104 0a19 	add.w	sl, r4, #25
 800b172:	68e3      	ldr	r3, [r4, #12]
 800b174:	6832      	ldr	r2, [r6, #0]
 800b176:	1a9b      	subs	r3, r3, r2
 800b178:	42ab      	cmp	r3, r5
 800b17a:	dc26      	bgt.n	800b1ca <_printf_common+0x96>
 800b17c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b180:	1e13      	subs	r3, r2, #0
 800b182:	6822      	ldr	r2, [r4, #0]
 800b184:	bf18      	it	ne
 800b186:	2301      	movne	r3, #1
 800b188:	0692      	lsls	r2, r2, #26
 800b18a:	d42b      	bmi.n	800b1e4 <_printf_common+0xb0>
 800b18c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b190:	4649      	mov	r1, r9
 800b192:	4638      	mov	r0, r7
 800b194:	47c0      	blx	r8
 800b196:	3001      	adds	r0, #1
 800b198:	d01e      	beq.n	800b1d8 <_printf_common+0xa4>
 800b19a:	6823      	ldr	r3, [r4, #0]
 800b19c:	68e5      	ldr	r5, [r4, #12]
 800b19e:	6832      	ldr	r2, [r6, #0]
 800b1a0:	f003 0306 	and.w	r3, r3, #6
 800b1a4:	2b04      	cmp	r3, #4
 800b1a6:	bf08      	it	eq
 800b1a8:	1aad      	subeq	r5, r5, r2
 800b1aa:	68a3      	ldr	r3, [r4, #8]
 800b1ac:	6922      	ldr	r2, [r4, #16]
 800b1ae:	bf0c      	ite	eq
 800b1b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b1b4:	2500      	movne	r5, #0
 800b1b6:	4293      	cmp	r3, r2
 800b1b8:	bfc4      	itt	gt
 800b1ba:	1a9b      	subgt	r3, r3, r2
 800b1bc:	18ed      	addgt	r5, r5, r3
 800b1be:	2600      	movs	r6, #0
 800b1c0:	341a      	adds	r4, #26
 800b1c2:	42b5      	cmp	r5, r6
 800b1c4:	d11a      	bne.n	800b1fc <_printf_common+0xc8>
 800b1c6:	2000      	movs	r0, #0
 800b1c8:	e008      	b.n	800b1dc <_printf_common+0xa8>
 800b1ca:	2301      	movs	r3, #1
 800b1cc:	4652      	mov	r2, sl
 800b1ce:	4649      	mov	r1, r9
 800b1d0:	4638      	mov	r0, r7
 800b1d2:	47c0      	blx	r8
 800b1d4:	3001      	adds	r0, #1
 800b1d6:	d103      	bne.n	800b1e0 <_printf_common+0xac>
 800b1d8:	f04f 30ff 	mov.w	r0, #4294967295
 800b1dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1e0:	3501      	adds	r5, #1
 800b1e2:	e7c6      	b.n	800b172 <_printf_common+0x3e>
 800b1e4:	18e1      	adds	r1, r4, r3
 800b1e6:	1c5a      	adds	r2, r3, #1
 800b1e8:	2030      	movs	r0, #48	; 0x30
 800b1ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b1ee:	4422      	add	r2, r4
 800b1f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b1f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b1f8:	3302      	adds	r3, #2
 800b1fa:	e7c7      	b.n	800b18c <_printf_common+0x58>
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	4622      	mov	r2, r4
 800b200:	4649      	mov	r1, r9
 800b202:	4638      	mov	r0, r7
 800b204:	47c0      	blx	r8
 800b206:	3001      	adds	r0, #1
 800b208:	d0e6      	beq.n	800b1d8 <_printf_common+0xa4>
 800b20a:	3601      	adds	r6, #1
 800b20c:	e7d9      	b.n	800b1c2 <_printf_common+0x8e>
	...

0800b210 <_printf_i>:
 800b210:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b214:	7e0f      	ldrb	r7, [r1, #24]
 800b216:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b218:	2f78      	cmp	r7, #120	; 0x78
 800b21a:	4691      	mov	r9, r2
 800b21c:	4680      	mov	r8, r0
 800b21e:	460c      	mov	r4, r1
 800b220:	469a      	mov	sl, r3
 800b222:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b226:	d807      	bhi.n	800b238 <_printf_i+0x28>
 800b228:	2f62      	cmp	r7, #98	; 0x62
 800b22a:	d80a      	bhi.n	800b242 <_printf_i+0x32>
 800b22c:	2f00      	cmp	r7, #0
 800b22e:	f000 80d8 	beq.w	800b3e2 <_printf_i+0x1d2>
 800b232:	2f58      	cmp	r7, #88	; 0x58
 800b234:	f000 80a3 	beq.w	800b37e <_printf_i+0x16e>
 800b238:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b23c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b240:	e03a      	b.n	800b2b8 <_printf_i+0xa8>
 800b242:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b246:	2b15      	cmp	r3, #21
 800b248:	d8f6      	bhi.n	800b238 <_printf_i+0x28>
 800b24a:	a101      	add	r1, pc, #4	; (adr r1, 800b250 <_printf_i+0x40>)
 800b24c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b250:	0800b2a9 	.word	0x0800b2a9
 800b254:	0800b2bd 	.word	0x0800b2bd
 800b258:	0800b239 	.word	0x0800b239
 800b25c:	0800b239 	.word	0x0800b239
 800b260:	0800b239 	.word	0x0800b239
 800b264:	0800b239 	.word	0x0800b239
 800b268:	0800b2bd 	.word	0x0800b2bd
 800b26c:	0800b239 	.word	0x0800b239
 800b270:	0800b239 	.word	0x0800b239
 800b274:	0800b239 	.word	0x0800b239
 800b278:	0800b239 	.word	0x0800b239
 800b27c:	0800b3c9 	.word	0x0800b3c9
 800b280:	0800b2ed 	.word	0x0800b2ed
 800b284:	0800b3ab 	.word	0x0800b3ab
 800b288:	0800b239 	.word	0x0800b239
 800b28c:	0800b239 	.word	0x0800b239
 800b290:	0800b3eb 	.word	0x0800b3eb
 800b294:	0800b239 	.word	0x0800b239
 800b298:	0800b2ed 	.word	0x0800b2ed
 800b29c:	0800b239 	.word	0x0800b239
 800b2a0:	0800b239 	.word	0x0800b239
 800b2a4:	0800b3b3 	.word	0x0800b3b3
 800b2a8:	682b      	ldr	r3, [r5, #0]
 800b2aa:	1d1a      	adds	r2, r3, #4
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	602a      	str	r2, [r5, #0]
 800b2b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b2b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b2b8:	2301      	movs	r3, #1
 800b2ba:	e0a3      	b.n	800b404 <_printf_i+0x1f4>
 800b2bc:	6820      	ldr	r0, [r4, #0]
 800b2be:	6829      	ldr	r1, [r5, #0]
 800b2c0:	0606      	lsls	r6, r0, #24
 800b2c2:	f101 0304 	add.w	r3, r1, #4
 800b2c6:	d50a      	bpl.n	800b2de <_printf_i+0xce>
 800b2c8:	680e      	ldr	r6, [r1, #0]
 800b2ca:	602b      	str	r3, [r5, #0]
 800b2cc:	2e00      	cmp	r6, #0
 800b2ce:	da03      	bge.n	800b2d8 <_printf_i+0xc8>
 800b2d0:	232d      	movs	r3, #45	; 0x2d
 800b2d2:	4276      	negs	r6, r6
 800b2d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b2d8:	485e      	ldr	r0, [pc, #376]	; (800b454 <_printf_i+0x244>)
 800b2da:	230a      	movs	r3, #10
 800b2dc:	e019      	b.n	800b312 <_printf_i+0x102>
 800b2de:	680e      	ldr	r6, [r1, #0]
 800b2e0:	602b      	str	r3, [r5, #0]
 800b2e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b2e6:	bf18      	it	ne
 800b2e8:	b236      	sxthne	r6, r6
 800b2ea:	e7ef      	b.n	800b2cc <_printf_i+0xbc>
 800b2ec:	682b      	ldr	r3, [r5, #0]
 800b2ee:	6820      	ldr	r0, [r4, #0]
 800b2f0:	1d19      	adds	r1, r3, #4
 800b2f2:	6029      	str	r1, [r5, #0]
 800b2f4:	0601      	lsls	r1, r0, #24
 800b2f6:	d501      	bpl.n	800b2fc <_printf_i+0xec>
 800b2f8:	681e      	ldr	r6, [r3, #0]
 800b2fa:	e002      	b.n	800b302 <_printf_i+0xf2>
 800b2fc:	0646      	lsls	r6, r0, #25
 800b2fe:	d5fb      	bpl.n	800b2f8 <_printf_i+0xe8>
 800b300:	881e      	ldrh	r6, [r3, #0]
 800b302:	4854      	ldr	r0, [pc, #336]	; (800b454 <_printf_i+0x244>)
 800b304:	2f6f      	cmp	r7, #111	; 0x6f
 800b306:	bf0c      	ite	eq
 800b308:	2308      	moveq	r3, #8
 800b30a:	230a      	movne	r3, #10
 800b30c:	2100      	movs	r1, #0
 800b30e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b312:	6865      	ldr	r5, [r4, #4]
 800b314:	60a5      	str	r5, [r4, #8]
 800b316:	2d00      	cmp	r5, #0
 800b318:	bfa2      	ittt	ge
 800b31a:	6821      	ldrge	r1, [r4, #0]
 800b31c:	f021 0104 	bicge.w	r1, r1, #4
 800b320:	6021      	strge	r1, [r4, #0]
 800b322:	b90e      	cbnz	r6, 800b328 <_printf_i+0x118>
 800b324:	2d00      	cmp	r5, #0
 800b326:	d04d      	beq.n	800b3c4 <_printf_i+0x1b4>
 800b328:	4615      	mov	r5, r2
 800b32a:	fbb6 f1f3 	udiv	r1, r6, r3
 800b32e:	fb03 6711 	mls	r7, r3, r1, r6
 800b332:	5dc7      	ldrb	r7, [r0, r7]
 800b334:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b338:	4637      	mov	r7, r6
 800b33a:	42bb      	cmp	r3, r7
 800b33c:	460e      	mov	r6, r1
 800b33e:	d9f4      	bls.n	800b32a <_printf_i+0x11a>
 800b340:	2b08      	cmp	r3, #8
 800b342:	d10b      	bne.n	800b35c <_printf_i+0x14c>
 800b344:	6823      	ldr	r3, [r4, #0]
 800b346:	07de      	lsls	r6, r3, #31
 800b348:	d508      	bpl.n	800b35c <_printf_i+0x14c>
 800b34a:	6923      	ldr	r3, [r4, #16]
 800b34c:	6861      	ldr	r1, [r4, #4]
 800b34e:	4299      	cmp	r1, r3
 800b350:	bfde      	ittt	le
 800b352:	2330      	movle	r3, #48	; 0x30
 800b354:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b358:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b35c:	1b52      	subs	r2, r2, r5
 800b35e:	6122      	str	r2, [r4, #16]
 800b360:	f8cd a000 	str.w	sl, [sp]
 800b364:	464b      	mov	r3, r9
 800b366:	aa03      	add	r2, sp, #12
 800b368:	4621      	mov	r1, r4
 800b36a:	4640      	mov	r0, r8
 800b36c:	f7ff fee2 	bl	800b134 <_printf_common>
 800b370:	3001      	adds	r0, #1
 800b372:	d14c      	bne.n	800b40e <_printf_i+0x1fe>
 800b374:	f04f 30ff 	mov.w	r0, #4294967295
 800b378:	b004      	add	sp, #16
 800b37a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b37e:	4835      	ldr	r0, [pc, #212]	; (800b454 <_printf_i+0x244>)
 800b380:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b384:	6829      	ldr	r1, [r5, #0]
 800b386:	6823      	ldr	r3, [r4, #0]
 800b388:	f851 6b04 	ldr.w	r6, [r1], #4
 800b38c:	6029      	str	r1, [r5, #0]
 800b38e:	061d      	lsls	r5, r3, #24
 800b390:	d514      	bpl.n	800b3bc <_printf_i+0x1ac>
 800b392:	07df      	lsls	r7, r3, #31
 800b394:	bf44      	itt	mi
 800b396:	f043 0320 	orrmi.w	r3, r3, #32
 800b39a:	6023      	strmi	r3, [r4, #0]
 800b39c:	b91e      	cbnz	r6, 800b3a6 <_printf_i+0x196>
 800b39e:	6823      	ldr	r3, [r4, #0]
 800b3a0:	f023 0320 	bic.w	r3, r3, #32
 800b3a4:	6023      	str	r3, [r4, #0]
 800b3a6:	2310      	movs	r3, #16
 800b3a8:	e7b0      	b.n	800b30c <_printf_i+0xfc>
 800b3aa:	6823      	ldr	r3, [r4, #0]
 800b3ac:	f043 0320 	orr.w	r3, r3, #32
 800b3b0:	6023      	str	r3, [r4, #0]
 800b3b2:	2378      	movs	r3, #120	; 0x78
 800b3b4:	4828      	ldr	r0, [pc, #160]	; (800b458 <_printf_i+0x248>)
 800b3b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b3ba:	e7e3      	b.n	800b384 <_printf_i+0x174>
 800b3bc:	0659      	lsls	r1, r3, #25
 800b3be:	bf48      	it	mi
 800b3c0:	b2b6      	uxthmi	r6, r6
 800b3c2:	e7e6      	b.n	800b392 <_printf_i+0x182>
 800b3c4:	4615      	mov	r5, r2
 800b3c6:	e7bb      	b.n	800b340 <_printf_i+0x130>
 800b3c8:	682b      	ldr	r3, [r5, #0]
 800b3ca:	6826      	ldr	r6, [r4, #0]
 800b3cc:	6961      	ldr	r1, [r4, #20]
 800b3ce:	1d18      	adds	r0, r3, #4
 800b3d0:	6028      	str	r0, [r5, #0]
 800b3d2:	0635      	lsls	r5, r6, #24
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	d501      	bpl.n	800b3dc <_printf_i+0x1cc>
 800b3d8:	6019      	str	r1, [r3, #0]
 800b3da:	e002      	b.n	800b3e2 <_printf_i+0x1d2>
 800b3dc:	0670      	lsls	r0, r6, #25
 800b3de:	d5fb      	bpl.n	800b3d8 <_printf_i+0x1c8>
 800b3e0:	8019      	strh	r1, [r3, #0]
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	6123      	str	r3, [r4, #16]
 800b3e6:	4615      	mov	r5, r2
 800b3e8:	e7ba      	b.n	800b360 <_printf_i+0x150>
 800b3ea:	682b      	ldr	r3, [r5, #0]
 800b3ec:	1d1a      	adds	r2, r3, #4
 800b3ee:	602a      	str	r2, [r5, #0]
 800b3f0:	681d      	ldr	r5, [r3, #0]
 800b3f2:	6862      	ldr	r2, [r4, #4]
 800b3f4:	2100      	movs	r1, #0
 800b3f6:	4628      	mov	r0, r5
 800b3f8:	f7f4 ff0a 	bl	8000210 <memchr>
 800b3fc:	b108      	cbz	r0, 800b402 <_printf_i+0x1f2>
 800b3fe:	1b40      	subs	r0, r0, r5
 800b400:	6060      	str	r0, [r4, #4]
 800b402:	6863      	ldr	r3, [r4, #4]
 800b404:	6123      	str	r3, [r4, #16]
 800b406:	2300      	movs	r3, #0
 800b408:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b40c:	e7a8      	b.n	800b360 <_printf_i+0x150>
 800b40e:	6923      	ldr	r3, [r4, #16]
 800b410:	462a      	mov	r2, r5
 800b412:	4649      	mov	r1, r9
 800b414:	4640      	mov	r0, r8
 800b416:	47d0      	blx	sl
 800b418:	3001      	adds	r0, #1
 800b41a:	d0ab      	beq.n	800b374 <_printf_i+0x164>
 800b41c:	6823      	ldr	r3, [r4, #0]
 800b41e:	079b      	lsls	r3, r3, #30
 800b420:	d413      	bmi.n	800b44a <_printf_i+0x23a>
 800b422:	68e0      	ldr	r0, [r4, #12]
 800b424:	9b03      	ldr	r3, [sp, #12]
 800b426:	4298      	cmp	r0, r3
 800b428:	bfb8      	it	lt
 800b42a:	4618      	movlt	r0, r3
 800b42c:	e7a4      	b.n	800b378 <_printf_i+0x168>
 800b42e:	2301      	movs	r3, #1
 800b430:	4632      	mov	r2, r6
 800b432:	4649      	mov	r1, r9
 800b434:	4640      	mov	r0, r8
 800b436:	47d0      	blx	sl
 800b438:	3001      	adds	r0, #1
 800b43a:	d09b      	beq.n	800b374 <_printf_i+0x164>
 800b43c:	3501      	adds	r5, #1
 800b43e:	68e3      	ldr	r3, [r4, #12]
 800b440:	9903      	ldr	r1, [sp, #12]
 800b442:	1a5b      	subs	r3, r3, r1
 800b444:	42ab      	cmp	r3, r5
 800b446:	dcf2      	bgt.n	800b42e <_printf_i+0x21e>
 800b448:	e7eb      	b.n	800b422 <_printf_i+0x212>
 800b44a:	2500      	movs	r5, #0
 800b44c:	f104 0619 	add.w	r6, r4, #25
 800b450:	e7f5      	b.n	800b43e <_printf_i+0x22e>
 800b452:	bf00      	nop
 800b454:	0800ccd6 	.word	0x0800ccd6
 800b458:	0800cce7 	.word	0x0800cce7

0800b45c <_scanf_chars>:
 800b45c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b460:	4615      	mov	r5, r2
 800b462:	688a      	ldr	r2, [r1, #8]
 800b464:	4680      	mov	r8, r0
 800b466:	460c      	mov	r4, r1
 800b468:	b932      	cbnz	r2, 800b478 <_scanf_chars+0x1c>
 800b46a:	698a      	ldr	r2, [r1, #24]
 800b46c:	2a00      	cmp	r2, #0
 800b46e:	bf0c      	ite	eq
 800b470:	2201      	moveq	r2, #1
 800b472:	f04f 32ff 	movne.w	r2, #4294967295
 800b476:	608a      	str	r2, [r1, #8]
 800b478:	6822      	ldr	r2, [r4, #0]
 800b47a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800b50c <_scanf_chars+0xb0>
 800b47e:	06d1      	lsls	r1, r2, #27
 800b480:	bf5f      	itttt	pl
 800b482:	681a      	ldrpl	r2, [r3, #0]
 800b484:	1d11      	addpl	r1, r2, #4
 800b486:	6019      	strpl	r1, [r3, #0]
 800b488:	6816      	ldrpl	r6, [r2, #0]
 800b48a:	2700      	movs	r7, #0
 800b48c:	69a0      	ldr	r0, [r4, #24]
 800b48e:	b188      	cbz	r0, 800b4b4 <_scanf_chars+0x58>
 800b490:	2801      	cmp	r0, #1
 800b492:	d107      	bne.n	800b4a4 <_scanf_chars+0x48>
 800b494:	682a      	ldr	r2, [r5, #0]
 800b496:	7811      	ldrb	r1, [r2, #0]
 800b498:	6962      	ldr	r2, [r4, #20]
 800b49a:	5c52      	ldrb	r2, [r2, r1]
 800b49c:	b952      	cbnz	r2, 800b4b4 <_scanf_chars+0x58>
 800b49e:	2f00      	cmp	r7, #0
 800b4a0:	d031      	beq.n	800b506 <_scanf_chars+0xaa>
 800b4a2:	e022      	b.n	800b4ea <_scanf_chars+0x8e>
 800b4a4:	2802      	cmp	r0, #2
 800b4a6:	d120      	bne.n	800b4ea <_scanf_chars+0x8e>
 800b4a8:	682b      	ldr	r3, [r5, #0]
 800b4aa:	781b      	ldrb	r3, [r3, #0]
 800b4ac:	f813 3009 	ldrb.w	r3, [r3, r9]
 800b4b0:	071b      	lsls	r3, r3, #28
 800b4b2:	d41a      	bmi.n	800b4ea <_scanf_chars+0x8e>
 800b4b4:	6823      	ldr	r3, [r4, #0]
 800b4b6:	06da      	lsls	r2, r3, #27
 800b4b8:	bf5e      	ittt	pl
 800b4ba:	682b      	ldrpl	r3, [r5, #0]
 800b4bc:	781b      	ldrbpl	r3, [r3, #0]
 800b4be:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b4c2:	682a      	ldr	r2, [r5, #0]
 800b4c4:	686b      	ldr	r3, [r5, #4]
 800b4c6:	3201      	adds	r2, #1
 800b4c8:	602a      	str	r2, [r5, #0]
 800b4ca:	68a2      	ldr	r2, [r4, #8]
 800b4cc:	3b01      	subs	r3, #1
 800b4ce:	3a01      	subs	r2, #1
 800b4d0:	606b      	str	r3, [r5, #4]
 800b4d2:	3701      	adds	r7, #1
 800b4d4:	60a2      	str	r2, [r4, #8]
 800b4d6:	b142      	cbz	r2, 800b4ea <_scanf_chars+0x8e>
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	dcd7      	bgt.n	800b48c <_scanf_chars+0x30>
 800b4dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b4e0:	4629      	mov	r1, r5
 800b4e2:	4640      	mov	r0, r8
 800b4e4:	4798      	blx	r3
 800b4e6:	2800      	cmp	r0, #0
 800b4e8:	d0d0      	beq.n	800b48c <_scanf_chars+0x30>
 800b4ea:	6823      	ldr	r3, [r4, #0]
 800b4ec:	f013 0310 	ands.w	r3, r3, #16
 800b4f0:	d105      	bne.n	800b4fe <_scanf_chars+0xa2>
 800b4f2:	68e2      	ldr	r2, [r4, #12]
 800b4f4:	3201      	adds	r2, #1
 800b4f6:	60e2      	str	r2, [r4, #12]
 800b4f8:	69a2      	ldr	r2, [r4, #24]
 800b4fa:	b102      	cbz	r2, 800b4fe <_scanf_chars+0xa2>
 800b4fc:	7033      	strb	r3, [r6, #0]
 800b4fe:	6923      	ldr	r3, [r4, #16]
 800b500:	443b      	add	r3, r7
 800b502:	6123      	str	r3, [r4, #16]
 800b504:	2000      	movs	r0, #0
 800b506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b50a:	bf00      	nop
 800b50c:	0800cbc5 	.word	0x0800cbc5

0800b510 <_scanf_i>:
 800b510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b514:	4698      	mov	r8, r3
 800b516:	4b76      	ldr	r3, [pc, #472]	; (800b6f0 <_scanf_i+0x1e0>)
 800b518:	460c      	mov	r4, r1
 800b51a:	4682      	mov	sl, r0
 800b51c:	4616      	mov	r6, r2
 800b51e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b522:	b087      	sub	sp, #28
 800b524:	ab03      	add	r3, sp, #12
 800b526:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b52a:	4b72      	ldr	r3, [pc, #456]	; (800b6f4 <_scanf_i+0x1e4>)
 800b52c:	69a1      	ldr	r1, [r4, #24]
 800b52e:	4a72      	ldr	r2, [pc, #456]	; (800b6f8 <_scanf_i+0x1e8>)
 800b530:	2903      	cmp	r1, #3
 800b532:	bf18      	it	ne
 800b534:	461a      	movne	r2, r3
 800b536:	68a3      	ldr	r3, [r4, #8]
 800b538:	9201      	str	r2, [sp, #4]
 800b53a:	1e5a      	subs	r2, r3, #1
 800b53c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b540:	bf88      	it	hi
 800b542:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b546:	4627      	mov	r7, r4
 800b548:	bf82      	ittt	hi
 800b54a:	eb03 0905 	addhi.w	r9, r3, r5
 800b54e:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b552:	60a3      	strhi	r3, [r4, #8]
 800b554:	f857 3b1c 	ldr.w	r3, [r7], #28
 800b558:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800b55c:	bf98      	it	ls
 800b55e:	f04f 0900 	movls.w	r9, #0
 800b562:	6023      	str	r3, [r4, #0]
 800b564:	463d      	mov	r5, r7
 800b566:	f04f 0b00 	mov.w	fp, #0
 800b56a:	6831      	ldr	r1, [r6, #0]
 800b56c:	ab03      	add	r3, sp, #12
 800b56e:	7809      	ldrb	r1, [r1, #0]
 800b570:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800b574:	2202      	movs	r2, #2
 800b576:	f7f4 fe4b 	bl	8000210 <memchr>
 800b57a:	b328      	cbz	r0, 800b5c8 <_scanf_i+0xb8>
 800b57c:	f1bb 0f01 	cmp.w	fp, #1
 800b580:	d159      	bne.n	800b636 <_scanf_i+0x126>
 800b582:	6862      	ldr	r2, [r4, #4]
 800b584:	b92a      	cbnz	r2, 800b592 <_scanf_i+0x82>
 800b586:	6822      	ldr	r2, [r4, #0]
 800b588:	2308      	movs	r3, #8
 800b58a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b58e:	6063      	str	r3, [r4, #4]
 800b590:	6022      	str	r2, [r4, #0]
 800b592:	6822      	ldr	r2, [r4, #0]
 800b594:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800b598:	6022      	str	r2, [r4, #0]
 800b59a:	68a2      	ldr	r2, [r4, #8]
 800b59c:	1e51      	subs	r1, r2, #1
 800b59e:	60a1      	str	r1, [r4, #8]
 800b5a0:	b192      	cbz	r2, 800b5c8 <_scanf_i+0xb8>
 800b5a2:	6832      	ldr	r2, [r6, #0]
 800b5a4:	1c51      	adds	r1, r2, #1
 800b5a6:	6031      	str	r1, [r6, #0]
 800b5a8:	7812      	ldrb	r2, [r2, #0]
 800b5aa:	f805 2b01 	strb.w	r2, [r5], #1
 800b5ae:	6872      	ldr	r2, [r6, #4]
 800b5b0:	3a01      	subs	r2, #1
 800b5b2:	2a00      	cmp	r2, #0
 800b5b4:	6072      	str	r2, [r6, #4]
 800b5b6:	dc07      	bgt.n	800b5c8 <_scanf_i+0xb8>
 800b5b8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800b5bc:	4631      	mov	r1, r6
 800b5be:	4650      	mov	r0, sl
 800b5c0:	4790      	blx	r2
 800b5c2:	2800      	cmp	r0, #0
 800b5c4:	f040 8085 	bne.w	800b6d2 <_scanf_i+0x1c2>
 800b5c8:	f10b 0b01 	add.w	fp, fp, #1
 800b5cc:	f1bb 0f03 	cmp.w	fp, #3
 800b5d0:	d1cb      	bne.n	800b56a <_scanf_i+0x5a>
 800b5d2:	6863      	ldr	r3, [r4, #4]
 800b5d4:	b90b      	cbnz	r3, 800b5da <_scanf_i+0xca>
 800b5d6:	230a      	movs	r3, #10
 800b5d8:	6063      	str	r3, [r4, #4]
 800b5da:	6863      	ldr	r3, [r4, #4]
 800b5dc:	4947      	ldr	r1, [pc, #284]	; (800b6fc <_scanf_i+0x1ec>)
 800b5de:	6960      	ldr	r0, [r4, #20]
 800b5e0:	1ac9      	subs	r1, r1, r3
 800b5e2:	f000 f88d 	bl	800b700 <__sccl>
 800b5e6:	f04f 0b00 	mov.w	fp, #0
 800b5ea:	68a3      	ldr	r3, [r4, #8]
 800b5ec:	6822      	ldr	r2, [r4, #0]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d03d      	beq.n	800b66e <_scanf_i+0x15e>
 800b5f2:	6831      	ldr	r1, [r6, #0]
 800b5f4:	6960      	ldr	r0, [r4, #20]
 800b5f6:	f891 c000 	ldrb.w	ip, [r1]
 800b5fa:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b5fe:	2800      	cmp	r0, #0
 800b600:	d035      	beq.n	800b66e <_scanf_i+0x15e>
 800b602:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800b606:	d124      	bne.n	800b652 <_scanf_i+0x142>
 800b608:	0510      	lsls	r0, r2, #20
 800b60a:	d522      	bpl.n	800b652 <_scanf_i+0x142>
 800b60c:	f10b 0b01 	add.w	fp, fp, #1
 800b610:	f1b9 0f00 	cmp.w	r9, #0
 800b614:	d003      	beq.n	800b61e <_scanf_i+0x10e>
 800b616:	3301      	adds	r3, #1
 800b618:	f109 39ff 	add.w	r9, r9, #4294967295
 800b61c:	60a3      	str	r3, [r4, #8]
 800b61e:	6873      	ldr	r3, [r6, #4]
 800b620:	3b01      	subs	r3, #1
 800b622:	2b00      	cmp	r3, #0
 800b624:	6073      	str	r3, [r6, #4]
 800b626:	dd1b      	ble.n	800b660 <_scanf_i+0x150>
 800b628:	6833      	ldr	r3, [r6, #0]
 800b62a:	3301      	adds	r3, #1
 800b62c:	6033      	str	r3, [r6, #0]
 800b62e:	68a3      	ldr	r3, [r4, #8]
 800b630:	3b01      	subs	r3, #1
 800b632:	60a3      	str	r3, [r4, #8]
 800b634:	e7d9      	b.n	800b5ea <_scanf_i+0xda>
 800b636:	f1bb 0f02 	cmp.w	fp, #2
 800b63a:	d1ae      	bne.n	800b59a <_scanf_i+0x8a>
 800b63c:	6822      	ldr	r2, [r4, #0]
 800b63e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800b642:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b646:	d1bf      	bne.n	800b5c8 <_scanf_i+0xb8>
 800b648:	2310      	movs	r3, #16
 800b64a:	6063      	str	r3, [r4, #4]
 800b64c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b650:	e7a2      	b.n	800b598 <_scanf_i+0x88>
 800b652:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800b656:	6022      	str	r2, [r4, #0]
 800b658:	780b      	ldrb	r3, [r1, #0]
 800b65a:	f805 3b01 	strb.w	r3, [r5], #1
 800b65e:	e7de      	b.n	800b61e <_scanf_i+0x10e>
 800b660:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b664:	4631      	mov	r1, r6
 800b666:	4650      	mov	r0, sl
 800b668:	4798      	blx	r3
 800b66a:	2800      	cmp	r0, #0
 800b66c:	d0df      	beq.n	800b62e <_scanf_i+0x11e>
 800b66e:	6823      	ldr	r3, [r4, #0]
 800b670:	05db      	lsls	r3, r3, #23
 800b672:	d50d      	bpl.n	800b690 <_scanf_i+0x180>
 800b674:	42bd      	cmp	r5, r7
 800b676:	d909      	bls.n	800b68c <_scanf_i+0x17c>
 800b678:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b67c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b680:	4632      	mov	r2, r6
 800b682:	4650      	mov	r0, sl
 800b684:	4798      	blx	r3
 800b686:	f105 39ff 	add.w	r9, r5, #4294967295
 800b68a:	464d      	mov	r5, r9
 800b68c:	42bd      	cmp	r5, r7
 800b68e:	d02d      	beq.n	800b6ec <_scanf_i+0x1dc>
 800b690:	6822      	ldr	r2, [r4, #0]
 800b692:	f012 0210 	ands.w	r2, r2, #16
 800b696:	d113      	bne.n	800b6c0 <_scanf_i+0x1b0>
 800b698:	702a      	strb	r2, [r5, #0]
 800b69a:	6863      	ldr	r3, [r4, #4]
 800b69c:	9e01      	ldr	r6, [sp, #4]
 800b69e:	4639      	mov	r1, r7
 800b6a0:	4650      	mov	r0, sl
 800b6a2:	47b0      	blx	r6
 800b6a4:	6821      	ldr	r1, [r4, #0]
 800b6a6:	f8d8 3000 	ldr.w	r3, [r8]
 800b6aa:	f011 0f20 	tst.w	r1, #32
 800b6ae:	d013      	beq.n	800b6d8 <_scanf_i+0x1c8>
 800b6b0:	1d1a      	adds	r2, r3, #4
 800b6b2:	f8c8 2000 	str.w	r2, [r8]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	6018      	str	r0, [r3, #0]
 800b6ba:	68e3      	ldr	r3, [r4, #12]
 800b6bc:	3301      	adds	r3, #1
 800b6be:	60e3      	str	r3, [r4, #12]
 800b6c0:	1bed      	subs	r5, r5, r7
 800b6c2:	44ab      	add	fp, r5
 800b6c4:	6925      	ldr	r5, [r4, #16]
 800b6c6:	445d      	add	r5, fp
 800b6c8:	6125      	str	r5, [r4, #16]
 800b6ca:	2000      	movs	r0, #0
 800b6cc:	b007      	add	sp, #28
 800b6ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6d2:	f04f 0b00 	mov.w	fp, #0
 800b6d6:	e7ca      	b.n	800b66e <_scanf_i+0x15e>
 800b6d8:	1d1a      	adds	r2, r3, #4
 800b6da:	f8c8 2000 	str.w	r2, [r8]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	f011 0f01 	tst.w	r1, #1
 800b6e4:	bf14      	ite	ne
 800b6e6:	8018      	strhne	r0, [r3, #0]
 800b6e8:	6018      	streq	r0, [r3, #0]
 800b6ea:	e7e6      	b.n	800b6ba <_scanf_i+0x1aa>
 800b6ec:	2001      	movs	r0, #1
 800b6ee:	e7ed      	b.n	800b6cc <_scanf_i+0x1bc>
 800b6f0:	0800c704 	.word	0x0800c704
 800b6f4:	0800b95d 	.word	0x0800b95d
 800b6f8:	0800b875 	.word	0x0800b875
 800b6fc:	0800cd11 	.word	0x0800cd11

0800b700 <__sccl>:
 800b700:	b570      	push	{r4, r5, r6, lr}
 800b702:	780b      	ldrb	r3, [r1, #0]
 800b704:	4604      	mov	r4, r0
 800b706:	2b5e      	cmp	r3, #94	; 0x5e
 800b708:	bf0b      	itete	eq
 800b70a:	784b      	ldrbeq	r3, [r1, #1]
 800b70c:	1c48      	addne	r0, r1, #1
 800b70e:	1c88      	addeq	r0, r1, #2
 800b710:	2200      	movne	r2, #0
 800b712:	bf08      	it	eq
 800b714:	2201      	moveq	r2, #1
 800b716:	1e61      	subs	r1, r4, #1
 800b718:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800b71c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800b720:	42a9      	cmp	r1, r5
 800b722:	d1fb      	bne.n	800b71c <__sccl+0x1c>
 800b724:	b90b      	cbnz	r3, 800b72a <__sccl+0x2a>
 800b726:	3801      	subs	r0, #1
 800b728:	bd70      	pop	{r4, r5, r6, pc}
 800b72a:	f082 0201 	eor.w	r2, r2, #1
 800b72e:	54e2      	strb	r2, [r4, r3]
 800b730:	4605      	mov	r5, r0
 800b732:	4628      	mov	r0, r5
 800b734:	f810 1b01 	ldrb.w	r1, [r0], #1
 800b738:	292d      	cmp	r1, #45	; 0x2d
 800b73a:	d006      	beq.n	800b74a <__sccl+0x4a>
 800b73c:	295d      	cmp	r1, #93	; 0x5d
 800b73e:	d0f3      	beq.n	800b728 <__sccl+0x28>
 800b740:	b909      	cbnz	r1, 800b746 <__sccl+0x46>
 800b742:	4628      	mov	r0, r5
 800b744:	e7f0      	b.n	800b728 <__sccl+0x28>
 800b746:	460b      	mov	r3, r1
 800b748:	e7f1      	b.n	800b72e <__sccl+0x2e>
 800b74a:	786e      	ldrb	r6, [r5, #1]
 800b74c:	2e5d      	cmp	r6, #93	; 0x5d
 800b74e:	d0fa      	beq.n	800b746 <__sccl+0x46>
 800b750:	42b3      	cmp	r3, r6
 800b752:	dcf8      	bgt.n	800b746 <__sccl+0x46>
 800b754:	3502      	adds	r5, #2
 800b756:	4619      	mov	r1, r3
 800b758:	3101      	adds	r1, #1
 800b75a:	428e      	cmp	r6, r1
 800b75c:	5462      	strb	r2, [r4, r1]
 800b75e:	dcfb      	bgt.n	800b758 <__sccl+0x58>
 800b760:	1af1      	subs	r1, r6, r3
 800b762:	3901      	subs	r1, #1
 800b764:	1c58      	adds	r0, r3, #1
 800b766:	42b3      	cmp	r3, r6
 800b768:	bfa8      	it	ge
 800b76a:	2100      	movge	r1, #0
 800b76c:	1843      	adds	r3, r0, r1
 800b76e:	e7e0      	b.n	800b732 <__sccl+0x32>

0800b770 <_strtol_l.constprop.0>:
 800b770:	2b01      	cmp	r3, #1
 800b772:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b776:	d001      	beq.n	800b77c <_strtol_l.constprop.0+0xc>
 800b778:	2b24      	cmp	r3, #36	; 0x24
 800b77a:	d906      	bls.n	800b78a <_strtol_l.constprop.0+0x1a>
 800b77c:	f7ff f916 	bl	800a9ac <__errno>
 800b780:	2316      	movs	r3, #22
 800b782:	6003      	str	r3, [r0, #0]
 800b784:	2000      	movs	r0, #0
 800b786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b78a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b870 <_strtol_l.constprop.0+0x100>
 800b78e:	460d      	mov	r5, r1
 800b790:	462e      	mov	r6, r5
 800b792:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b796:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b79a:	f017 0708 	ands.w	r7, r7, #8
 800b79e:	d1f7      	bne.n	800b790 <_strtol_l.constprop.0+0x20>
 800b7a0:	2c2d      	cmp	r4, #45	; 0x2d
 800b7a2:	d132      	bne.n	800b80a <_strtol_l.constprop.0+0x9a>
 800b7a4:	782c      	ldrb	r4, [r5, #0]
 800b7a6:	2701      	movs	r7, #1
 800b7a8:	1cb5      	adds	r5, r6, #2
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d05b      	beq.n	800b866 <_strtol_l.constprop.0+0xf6>
 800b7ae:	2b10      	cmp	r3, #16
 800b7b0:	d109      	bne.n	800b7c6 <_strtol_l.constprop.0+0x56>
 800b7b2:	2c30      	cmp	r4, #48	; 0x30
 800b7b4:	d107      	bne.n	800b7c6 <_strtol_l.constprop.0+0x56>
 800b7b6:	782c      	ldrb	r4, [r5, #0]
 800b7b8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b7bc:	2c58      	cmp	r4, #88	; 0x58
 800b7be:	d14d      	bne.n	800b85c <_strtol_l.constprop.0+0xec>
 800b7c0:	786c      	ldrb	r4, [r5, #1]
 800b7c2:	2310      	movs	r3, #16
 800b7c4:	3502      	adds	r5, #2
 800b7c6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b7ca:	f108 38ff 	add.w	r8, r8, #4294967295
 800b7ce:	f04f 0c00 	mov.w	ip, #0
 800b7d2:	fbb8 f9f3 	udiv	r9, r8, r3
 800b7d6:	4666      	mov	r6, ip
 800b7d8:	fb03 8a19 	mls	sl, r3, r9, r8
 800b7dc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b7e0:	f1be 0f09 	cmp.w	lr, #9
 800b7e4:	d816      	bhi.n	800b814 <_strtol_l.constprop.0+0xa4>
 800b7e6:	4674      	mov	r4, lr
 800b7e8:	42a3      	cmp	r3, r4
 800b7ea:	dd24      	ble.n	800b836 <_strtol_l.constprop.0+0xc6>
 800b7ec:	f1bc 0f00 	cmp.w	ip, #0
 800b7f0:	db1e      	blt.n	800b830 <_strtol_l.constprop.0+0xc0>
 800b7f2:	45b1      	cmp	r9, r6
 800b7f4:	d31c      	bcc.n	800b830 <_strtol_l.constprop.0+0xc0>
 800b7f6:	d101      	bne.n	800b7fc <_strtol_l.constprop.0+0x8c>
 800b7f8:	45a2      	cmp	sl, r4
 800b7fa:	db19      	blt.n	800b830 <_strtol_l.constprop.0+0xc0>
 800b7fc:	fb06 4603 	mla	r6, r6, r3, r4
 800b800:	f04f 0c01 	mov.w	ip, #1
 800b804:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b808:	e7e8      	b.n	800b7dc <_strtol_l.constprop.0+0x6c>
 800b80a:	2c2b      	cmp	r4, #43	; 0x2b
 800b80c:	bf04      	itt	eq
 800b80e:	782c      	ldrbeq	r4, [r5, #0]
 800b810:	1cb5      	addeq	r5, r6, #2
 800b812:	e7ca      	b.n	800b7aa <_strtol_l.constprop.0+0x3a>
 800b814:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b818:	f1be 0f19 	cmp.w	lr, #25
 800b81c:	d801      	bhi.n	800b822 <_strtol_l.constprop.0+0xb2>
 800b81e:	3c37      	subs	r4, #55	; 0x37
 800b820:	e7e2      	b.n	800b7e8 <_strtol_l.constprop.0+0x78>
 800b822:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b826:	f1be 0f19 	cmp.w	lr, #25
 800b82a:	d804      	bhi.n	800b836 <_strtol_l.constprop.0+0xc6>
 800b82c:	3c57      	subs	r4, #87	; 0x57
 800b82e:	e7db      	b.n	800b7e8 <_strtol_l.constprop.0+0x78>
 800b830:	f04f 3cff 	mov.w	ip, #4294967295
 800b834:	e7e6      	b.n	800b804 <_strtol_l.constprop.0+0x94>
 800b836:	f1bc 0f00 	cmp.w	ip, #0
 800b83a:	da05      	bge.n	800b848 <_strtol_l.constprop.0+0xd8>
 800b83c:	2322      	movs	r3, #34	; 0x22
 800b83e:	6003      	str	r3, [r0, #0]
 800b840:	4646      	mov	r6, r8
 800b842:	b942      	cbnz	r2, 800b856 <_strtol_l.constprop.0+0xe6>
 800b844:	4630      	mov	r0, r6
 800b846:	e79e      	b.n	800b786 <_strtol_l.constprop.0+0x16>
 800b848:	b107      	cbz	r7, 800b84c <_strtol_l.constprop.0+0xdc>
 800b84a:	4276      	negs	r6, r6
 800b84c:	2a00      	cmp	r2, #0
 800b84e:	d0f9      	beq.n	800b844 <_strtol_l.constprop.0+0xd4>
 800b850:	f1bc 0f00 	cmp.w	ip, #0
 800b854:	d000      	beq.n	800b858 <_strtol_l.constprop.0+0xe8>
 800b856:	1e69      	subs	r1, r5, #1
 800b858:	6011      	str	r1, [r2, #0]
 800b85a:	e7f3      	b.n	800b844 <_strtol_l.constprop.0+0xd4>
 800b85c:	2430      	movs	r4, #48	; 0x30
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d1b1      	bne.n	800b7c6 <_strtol_l.constprop.0+0x56>
 800b862:	2308      	movs	r3, #8
 800b864:	e7af      	b.n	800b7c6 <_strtol_l.constprop.0+0x56>
 800b866:	2c30      	cmp	r4, #48	; 0x30
 800b868:	d0a5      	beq.n	800b7b6 <_strtol_l.constprop.0+0x46>
 800b86a:	230a      	movs	r3, #10
 800b86c:	e7ab      	b.n	800b7c6 <_strtol_l.constprop.0+0x56>
 800b86e:	bf00      	nop
 800b870:	0800cbc5 	.word	0x0800cbc5

0800b874 <_strtol_r>:
 800b874:	f7ff bf7c 	b.w	800b770 <_strtol_l.constprop.0>

0800b878 <_strtoul_l.constprop.0>:
 800b878:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b87c:	4f36      	ldr	r7, [pc, #216]	; (800b958 <_strtoul_l.constprop.0+0xe0>)
 800b87e:	4686      	mov	lr, r0
 800b880:	460d      	mov	r5, r1
 800b882:	4628      	mov	r0, r5
 800b884:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b888:	5de6      	ldrb	r6, [r4, r7]
 800b88a:	f016 0608 	ands.w	r6, r6, #8
 800b88e:	d1f8      	bne.n	800b882 <_strtoul_l.constprop.0+0xa>
 800b890:	2c2d      	cmp	r4, #45	; 0x2d
 800b892:	d12f      	bne.n	800b8f4 <_strtoul_l.constprop.0+0x7c>
 800b894:	782c      	ldrb	r4, [r5, #0]
 800b896:	2601      	movs	r6, #1
 800b898:	1c85      	adds	r5, r0, #2
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d057      	beq.n	800b94e <_strtoul_l.constprop.0+0xd6>
 800b89e:	2b10      	cmp	r3, #16
 800b8a0:	d109      	bne.n	800b8b6 <_strtoul_l.constprop.0+0x3e>
 800b8a2:	2c30      	cmp	r4, #48	; 0x30
 800b8a4:	d107      	bne.n	800b8b6 <_strtoul_l.constprop.0+0x3e>
 800b8a6:	7828      	ldrb	r0, [r5, #0]
 800b8a8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800b8ac:	2858      	cmp	r0, #88	; 0x58
 800b8ae:	d149      	bne.n	800b944 <_strtoul_l.constprop.0+0xcc>
 800b8b0:	786c      	ldrb	r4, [r5, #1]
 800b8b2:	2310      	movs	r3, #16
 800b8b4:	3502      	adds	r5, #2
 800b8b6:	f04f 38ff 	mov.w	r8, #4294967295
 800b8ba:	2700      	movs	r7, #0
 800b8bc:	fbb8 f8f3 	udiv	r8, r8, r3
 800b8c0:	fb03 f908 	mul.w	r9, r3, r8
 800b8c4:	ea6f 0909 	mvn.w	r9, r9
 800b8c8:	4638      	mov	r0, r7
 800b8ca:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b8ce:	f1bc 0f09 	cmp.w	ip, #9
 800b8d2:	d814      	bhi.n	800b8fe <_strtoul_l.constprop.0+0x86>
 800b8d4:	4664      	mov	r4, ip
 800b8d6:	42a3      	cmp	r3, r4
 800b8d8:	dd22      	ble.n	800b920 <_strtoul_l.constprop.0+0xa8>
 800b8da:	2f00      	cmp	r7, #0
 800b8dc:	db1d      	blt.n	800b91a <_strtoul_l.constprop.0+0xa2>
 800b8de:	4580      	cmp	r8, r0
 800b8e0:	d31b      	bcc.n	800b91a <_strtoul_l.constprop.0+0xa2>
 800b8e2:	d101      	bne.n	800b8e8 <_strtoul_l.constprop.0+0x70>
 800b8e4:	45a1      	cmp	r9, r4
 800b8e6:	db18      	blt.n	800b91a <_strtoul_l.constprop.0+0xa2>
 800b8e8:	fb00 4003 	mla	r0, r0, r3, r4
 800b8ec:	2701      	movs	r7, #1
 800b8ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b8f2:	e7ea      	b.n	800b8ca <_strtoul_l.constprop.0+0x52>
 800b8f4:	2c2b      	cmp	r4, #43	; 0x2b
 800b8f6:	bf04      	itt	eq
 800b8f8:	782c      	ldrbeq	r4, [r5, #0]
 800b8fa:	1c85      	addeq	r5, r0, #2
 800b8fc:	e7cd      	b.n	800b89a <_strtoul_l.constprop.0+0x22>
 800b8fe:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b902:	f1bc 0f19 	cmp.w	ip, #25
 800b906:	d801      	bhi.n	800b90c <_strtoul_l.constprop.0+0x94>
 800b908:	3c37      	subs	r4, #55	; 0x37
 800b90a:	e7e4      	b.n	800b8d6 <_strtoul_l.constprop.0+0x5e>
 800b90c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b910:	f1bc 0f19 	cmp.w	ip, #25
 800b914:	d804      	bhi.n	800b920 <_strtoul_l.constprop.0+0xa8>
 800b916:	3c57      	subs	r4, #87	; 0x57
 800b918:	e7dd      	b.n	800b8d6 <_strtoul_l.constprop.0+0x5e>
 800b91a:	f04f 37ff 	mov.w	r7, #4294967295
 800b91e:	e7e6      	b.n	800b8ee <_strtoul_l.constprop.0+0x76>
 800b920:	2f00      	cmp	r7, #0
 800b922:	da07      	bge.n	800b934 <_strtoul_l.constprop.0+0xbc>
 800b924:	2322      	movs	r3, #34	; 0x22
 800b926:	f8ce 3000 	str.w	r3, [lr]
 800b92a:	f04f 30ff 	mov.w	r0, #4294967295
 800b92e:	b932      	cbnz	r2, 800b93e <_strtoul_l.constprop.0+0xc6>
 800b930:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b934:	b106      	cbz	r6, 800b938 <_strtoul_l.constprop.0+0xc0>
 800b936:	4240      	negs	r0, r0
 800b938:	2a00      	cmp	r2, #0
 800b93a:	d0f9      	beq.n	800b930 <_strtoul_l.constprop.0+0xb8>
 800b93c:	b107      	cbz	r7, 800b940 <_strtoul_l.constprop.0+0xc8>
 800b93e:	1e69      	subs	r1, r5, #1
 800b940:	6011      	str	r1, [r2, #0]
 800b942:	e7f5      	b.n	800b930 <_strtoul_l.constprop.0+0xb8>
 800b944:	2430      	movs	r4, #48	; 0x30
 800b946:	2b00      	cmp	r3, #0
 800b948:	d1b5      	bne.n	800b8b6 <_strtoul_l.constprop.0+0x3e>
 800b94a:	2308      	movs	r3, #8
 800b94c:	e7b3      	b.n	800b8b6 <_strtoul_l.constprop.0+0x3e>
 800b94e:	2c30      	cmp	r4, #48	; 0x30
 800b950:	d0a9      	beq.n	800b8a6 <_strtoul_l.constprop.0+0x2e>
 800b952:	230a      	movs	r3, #10
 800b954:	e7af      	b.n	800b8b6 <_strtoul_l.constprop.0+0x3e>
 800b956:	bf00      	nop
 800b958:	0800cbc5 	.word	0x0800cbc5

0800b95c <_strtoul_r>:
 800b95c:	f7ff bf8c 	b.w	800b878 <_strtoul_l.constprop.0>

0800b960 <__submore>:
 800b960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b964:	460c      	mov	r4, r1
 800b966:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b968:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b96c:	4299      	cmp	r1, r3
 800b96e:	d11d      	bne.n	800b9ac <__submore+0x4c>
 800b970:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b974:	f000 f8b6 	bl	800bae4 <_malloc_r>
 800b978:	b918      	cbnz	r0, 800b982 <__submore+0x22>
 800b97a:	f04f 30ff 	mov.w	r0, #4294967295
 800b97e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b982:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b986:	63a3      	str	r3, [r4, #56]	; 0x38
 800b988:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800b98c:	6360      	str	r0, [r4, #52]	; 0x34
 800b98e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800b992:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b996:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800b99a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b99e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800b9a2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800b9a6:	6020      	str	r0, [r4, #0]
 800b9a8:	2000      	movs	r0, #0
 800b9aa:	e7e8      	b.n	800b97e <__submore+0x1e>
 800b9ac:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800b9ae:	0077      	lsls	r7, r6, #1
 800b9b0:	463a      	mov	r2, r7
 800b9b2:	f000 f90b 	bl	800bbcc <_realloc_r>
 800b9b6:	4605      	mov	r5, r0
 800b9b8:	2800      	cmp	r0, #0
 800b9ba:	d0de      	beq.n	800b97a <__submore+0x1a>
 800b9bc:	eb00 0806 	add.w	r8, r0, r6
 800b9c0:	4601      	mov	r1, r0
 800b9c2:	4632      	mov	r2, r6
 800b9c4:	4640      	mov	r0, r8
 800b9c6:	f7ff f823 	bl	800aa10 <memcpy>
 800b9ca:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800b9ce:	f8c4 8000 	str.w	r8, [r4]
 800b9d2:	e7e9      	b.n	800b9a8 <__submore+0x48>

0800b9d4 <__retarget_lock_acquire_recursive>:
 800b9d4:	4770      	bx	lr

0800b9d6 <__retarget_lock_release_recursive>:
 800b9d6:	4770      	bx	lr

0800b9d8 <memmove>:
 800b9d8:	4288      	cmp	r0, r1
 800b9da:	b510      	push	{r4, lr}
 800b9dc:	eb01 0402 	add.w	r4, r1, r2
 800b9e0:	d902      	bls.n	800b9e8 <memmove+0x10>
 800b9e2:	4284      	cmp	r4, r0
 800b9e4:	4623      	mov	r3, r4
 800b9e6:	d807      	bhi.n	800b9f8 <memmove+0x20>
 800b9e8:	1e43      	subs	r3, r0, #1
 800b9ea:	42a1      	cmp	r1, r4
 800b9ec:	d008      	beq.n	800ba00 <memmove+0x28>
 800b9ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b9f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b9f6:	e7f8      	b.n	800b9ea <memmove+0x12>
 800b9f8:	4402      	add	r2, r0
 800b9fa:	4601      	mov	r1, r0
 800b9fc:	428a      	cmp	r2, r1
 800b9fe:	d100      	bne.n	800ba02 <memmove+0x2a>
 800ba00:	bd10      	pop	{r4, pc}
 800ba02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ba06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ba0a:	e7f7      	b.n	800b9fc <memmove+0x24>

0800ba0c <_free_r>:
 800ba0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ba0e:	2900      	cmp	r1, #0
 800ba10:	d044      	beq.n	800ba9c <_free_r+0x90>
 800ba12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba16:	9001      	str	r0, [sp, #4]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	f1a1 0404 	sub.w	r4, r1, #4
 800ba1e:	bfb8      	it	lt
 800ba20:	18e4      	addlt	r4, r4, r3
 800ba22:	f000 f913 	bl	800bc4c <__malloc_lock>
 800ba26:	4a1e      	ldr	r2, [pc, #120]	; (800baa0 <_free_r+0x94>)
 800ba28:	9801      	ldr	r0, [sp, #4]
 800ba2a:	6813      	ldr	r3, [r2, #0]
 800ba2c:	b933      	cbnz	r3, 800ba3c <_free_r+0x30>
 800ba2e:	6063      	str	r3, [r4, #4]
 800ba30:	6014      	str	r4, [r2, #0]
 800ba32:	b003      	add	sp, #12
 800ba34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ba38:	f000 b90e 	b.w	800bc58 <__malloc_unlock>
 800ba3c:	42a3      	cmp	r3, r4
 800ba3e:	d908      	bls.n	800ba52 <_free_r+0x46>
 800ba40:	6825      	ldr	r5, [r4, #0]
 800ba42:	1961      	adds	r1, r4, r5
 800ba44:	428b      	cmp	r3, r1
 800ba46:	bf01      	itttt	eq
 800ba48:	6819      	ldreq	r1, [r3, #0]
 800ba4a:	685b      	ldreq	r3, [r3, #4]
 800ba4c:	1949      	addeq	r1, r1, r5
 800ba4e:	6021      	streq	r1, [r4, #0]
 800ba50:	e7ed      	b.n	800ba2e <_free_r+0x22>
 800ba52:	461a      	mov	r2, r3
 800ba54:	685b      	ldr	r3, [r3, #4]
 800ba56:	b10b      	cbz	r3, 800ba5c <_free_r+0x50>
 800ba58:	42a3      	cmp	r3, r4
 800ba5a:	d9fa      	bls.n	800ba52 <_free_r+0x46>
 800ba5c:	6811      	ldr	r1, [r2, #0]
 800ba5e:	1855      	adds	r5, r2, r1
 800ba60:	42a5      	cmp	r5, r4
 800ba62:	d10b      	bne.n	800ba7c <_free_r+0x70>
 800ba64:	6824      	ldr	r4, [r4, #0]
 800ba66:	4421      	add	r1, r4
 800ba68:	1854      	adds	r4, r2, r1
 800ba6a:	42a3      	cmp	r3, r4
 800ba6c:	6011      	str	r1, [r2, #0]
 800ba6e:	d1e0      	bne.n	800ba32 <_free_r+0x26>
 800ba70:	681c      	ldr	r4, [r3, #0]
 800ba72:	685b      	ldr	r3, [r3, #4]
 800ba74:	6053      	str	r3, [r2, #4]
 800ba76:	4421      	add	r1, r4
 800ba78:	6011      	str	r1, [r2, #0]
 800ba7a:	e7da      	b.n	800ba32 <_free_r+0x26>
 800ba7c:	d902      	bls.n	800ba84 <_free_r+0x78>
 800ba7e:	230c      	movs	r3, #12
 800ba80:	6003      	str	r3, [r0, #0]
 800ba82:	e7d6      	b.n	800ba32 <_free_r+0x26>
 800ba84:	6825      	ldr	r5, [r4, #0]
 800ba86:	1961      	adds	r1, r4, r5
 800ba88:	428b      	cmp	r3, r1
 800ba8a:	bf04      	itt	eq
 800ba8c:	6819      	ldreq	r1, [r3, #0]
 800ba8e:	685b      	ldreq	r3, [r3, #4]
 800ba90:	6063      	str	r3, [r4, #4]
 800ba92:	bf04      	itt	eq
 800ba94:	1949      	addeq	r1, r1, r5
 800ba96:	6021      	streq	r1, [r4, #0]
 800ba98:	6054      	str	r4, [r2, #4]
 800ba9a:	e7ca      	b.n	800ba32 <_free_r+0x26>
 800ba9c:	b003      	add	sp, #12
 800ba9e:	bd30      	pop	{r4, r5, pc}
 800baa0:	20006560 	.word	0x20006560

0800baa4 <sbrk_aligned>:
 800baa4:	b570      	push	{r4, r5, r6, lr}
 800baa6:	4e0e      	ldr	r6, [pc, #56]	; (800bae0 <sbrk_aligned+0x3c>)
 800baa8:	460c      	mov	r4, r1
 800baaa:	6831      	ldr	r1, [r6, #0]
 800baac:	4605      	mov	r5, r0
 800baae:	b911      	cbnz	r1, 800bab6 <sbrk_aligned+0x12>
 800bab0:	f000 f8bc 	bl	800bc2c <_sbrk_r>
 800bab4:	6030      	str	r0, [r6, #0]
 800bab6:	4621      	mov	r1, r4
 800bab8:	4628      	mov	r0, r5
 800baba:	f000 f8b7 	bl	800bc2c <_sbrk_r>
 800babe:	1c43      	adds	r3, r0, #1
 800bac0:	d00a      	beq.n	800bad8 <sbrk_aligned+0x34>
 800bac2:	1cc4      	adds	r4, r0, #3
 800bac4:	f024 0403 	bic.w	r4, r4, #3
 800bac8:	42a0      	cmp	r0, r4
 800baca:	d007      	beq.n	800badc <sbrk_aligned+0x38>
 800bacc:	1a21      	subs	r1, r4, r0
 800bace:	4628      	mov	r0, r5
 800bad0:	f000 f8ac 	bl	800bc2c <_sbrk_r>
 800bad4:	3001      	adds	r0, #1
 800bad6:	d101      	bne.n	800badc <sbrk_aligned+0x38>
 800bad8:	f04f 34ff 	mov.w	r4, #4294967295
 800badc:	4620      	mov	r0, r4
 800bade:	bd70      	pop	{r4, r5, r6, pc}
 800bae0:	20006564 	.word	0x20006564

0800bae4 <_malloc_r>:
 800bae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bae8:	1ccd      	adds	r5, r1, #3
 800baea:	f025 0503 	bic.w	r5, r5, #3
 800baee:	3508      	adds	r5, #8
 800baf0:	2d0c      	cmp	r5, #12
 800baf2:	bf38      	it	cc
 800baf4:	250c      	movcc	r5, #12
 800baf6:	2d00      	cmp	r5, #0
 800baf8:	4607      	mov	r7, r0
 800bafa:	db01      	blt.n	800bb00 <_malloc_r+0x1c>
 800bafc:	42a9      	cmp	r1, r5
 800bafe:	d905      	bls.n	800bb0c <_malloc_r+0x28>
 800bb00:	230c      	movs	r3, #12
 800bb02:	603b      	str	r3, [r7, #0]
 800bb04:	2600      	movs	r6, #0
 800bb06:	4630      	mov	r0, r6
 800bb08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb0c:	4e2e      	ldr	r6, [pc, #184]	; (800bbc8 <_malloc_r+0xe4>)
 800bb0e:	f000 f89d 	bl	800bc4c <__malloc_lock>
 800bb12:	6833      	ldr	r3, [r6, #0]
 800bb14:	461c      	mov	r4, r3
 800bb16:	bb34      	cbnz	r4, 800bb66 <_malloc_r+0x82>
 800bb18:	4629      	mov	r1, r5
 800bb1a:	4638      	mov	r0, r7
 800bb1c:	f7ff ffc2 	bl	800baa4 <sbrk_aligned>
 800bb20:	1c43      	adds	r3, r0, #1
 800bb22:	4604      	mov	r4, r0
 800bb24:	d14d      	bne.n	800bbc2 <_malloc_r+0xde>
 800bb26:	6834      	ldr	r4, [r6, #0]
 800bb28:	4626      	mov	r6, r4
 800bb2a:	2e00      	cmp	r6, #0
 800bb2c:	d140      	bne.n	800bbb0 <_malloc_r+0xcc>
 800bb2e:	6823      	ldr	r3, [r4, #0]
 800bb30:	4631      	mov	r1, r6
 800bb32:	4638      	mov	r0, r7
 800bb34:	eb04 0803 	add.w	r8, r4, r3
 800bb38:	f000 f878 	bl	800bc2c <_sbrk_r>
 800bb3c:	4580      	cmp	r8, r0
 800bb3e:	d13a      	bne.n	800bbb6 <_malloc_r+0xd2>
 800bb40:	6821      	ldr	r1, [r4, #0]
 800bb42:	3503      	adds	r5, #3
 800bb44:	1a6d      	subs	r5, r5, r1
 800bb46:	f025 0503 	bic.w	r5, r5, #3
 800bb4a:	3508      	adds	r5, #8
 800bb4c:	2d0c      	cmp	r5, #12
 800bb4e:	bf38      	it	cc
 800bb50:	250c      	movcc	r5, #12
 800bb52:	4629      	mov	r1, r5
 800bb54:	4638      	mov	r0, r7
 800bb56:	f7ff ffa5 	bl	800baa4 <sbrk_aligned>
 800bb5a:	3001      	adds	r0, #1
 800bb5c:	d02b      	beq.n	800bbb6 <_malloc_r+0xd2>
 800bb5e:	6823      	ldr	r3, [r4, #0]
 800bb60:	442b      	add	r3, r5
 800bb62:	6023      	str	r3, [r4, #0]
 800bb64:	e00e      	b.n	800bb84 <_malloc_r+0xa0>
 800bb66:	6822      	ldr	r2, [r4, #0]
 800bb68:	1b52      	subs	r2, r2, r5
 800bb6a:	d41e      	bmi.n	800bbaa <_malloc_r+0xc6>
 800bb6c:	2a0b      	cmp	r2, #11
 800bb6e:	d916      	bls.n	800bb9e <_malloc_r+0xba>
 800bb70:	1961      	adds	r1, r4, r5
 800bb72:	42a3      	cmp	r3, r4
 800bb74:	6025      	str	r5, [r4, #0]
 800bb76:	bf18      	it	ne
 800bb78:	6059      	strne	r1, [r3, #4]
 800bb7a:	6863      	ldr	r3, [r4, #4]
 800bb7c:	bf08      	it	eq
 800bb7e:	6031      	streq	r1, [r6, #0]
 800bb80:	5162      	str	r2, [r4, r5]
 800bb82:	604b      	str	r3, [r1, #4]
 800bb84:	4638      	mov	r0, r7
 800bb86:	f104 060b 	add.w	r6, r4, #11
 800bb8a:	f000 f865 	bl	800bc58 <__malloc_unlock>
 800bb8e:	f026 0607 	bic.w	r6, r6, #7
 800bb92:	1d23      	adds	r3, r4, #4
 800bb94:	1af2      	subs	r2, r6, r3
 800bb96:	d0b6      	beq.n	800bb06 <_malloc_r+0x22>
 800bb98:	1b9b      	subs	r3, r3, r6
 800bb9a:	50a3      	str	r3, [r4, r2]
 800bb9c:	e7b3      	b.n	800bb06 <_malloc_r+0x22>
 800bb9e:	6862      	ldr	r2, [r4, #4]
 800bba0:	42a3      	cmp	r3, r4
 800bba2:	bf0c      	ite	eq
 800bba4:	6032      	streq	r2, [r6, #0]
 800bba6:	605a      	strne	r2, [r3, #4]
 800bba8:	e7ec      	b.n	800bb84 <_malloc_r+0xa0>
 800bbaa:	4623      	mov	r3, r4
 800bbac:	6864      	ldr	r4, [r4, #4]
 800bbae:	e7b2      	b.n	800bb16 <_malloc_r+0x32>
 800bbb0:	4634      	mov	r4, r6
 800bbb2:	6876      	ldr	r6, [r6, #4]
 800bbb4:	e7b9      	b.n	800bb2a <_malloc_r+0x46>
 800bbb6:	230c      	movs	r3, #12
 800bbb8:	603b      	str	r3, [r7, #0]
 800bbba:	4638      	mov	r0, r7
 800bbbc:	f000 f84c 	bl	800bc58 <__malloc_unlock>
 800bbc0:	e7a1      	b.n	800bb06 <_malloc_r+0x22>
 800bbc2:	6025      	str	r5, [r4, #0]
 800bbc4:	e7de      	b.n	800bb84 <_malloc_r+0xa0>
 800bbc6:	bf00      	nop
 800bbc8:	20006560 	.word	0x20006560

0800bbcc <_realloc_r>:
 800bbcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbd0:	4680      	mov	r8, r0
 800bbd2:	4614      	mov	r4, r2
 800bbd4:	460e      	mov	r6, r1
 800bbd6:	b921      	cbnz	r1, 800bbe2 <_realloc_r+0x16>
 800bbd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bbdc:	4611      	mov	r1, r2
 800bbde:	f7ff bf81 	b.w	800bae4 <_malloc_r>
 800bbe2:	b92a      	cbnz	r2, 800bbf0 <_realloc_r+0x24>
 800bbe4:	f7ff ff12 	bl	800ba0c <_free_r>
 800bbe8:	4625      	mov	r5, r4
 800bbea:	4628      	mov	r0, r5
 800bbec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbf0:	f000 f838 	bl	800bc64 <_malloc_usable_size_r>
 800bbf4:	4284      	cmp	r4, r0
 800bbf6:	4607      	mov	r7, r0
 800bbf8:	d802      	bhi.n	800bc00 <_realloc_r+0x34>
 800bbfa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bbfe:	d812      	bhi.n	800bc26 <_realloc_r+0x5a>
 800bc00:	4621      	mov	r1, r4
 800bc02:	4640      	mov	r0, r8
 800bc04:	f7ff ff6e 	bl	800bae4 <_malloc_r>
 800bc08:	4605      	mov	r5, r0
 800bc0a:	2800      	cmp	r0, #0
 800bc0c:	d0ed      	beq.n	800bbea <_realloc_r+0x1e>
 800bc0e:	42bc      	cmp	r4, r7
 800bc10:	4622      	mov	r2, r4
 800bc12:	4631      	mov	r1, r6
 800bc14:	bf28      	it	cs
 800bc16:	463a      	movcs	r2, r7
 800bc18:	f7fe fefa 	bl	800aa10 <memcpy>
 800bc1c:	4631      	mov	r1, r6
 800bc1e:	4640      	mov	r0, r8
 800bc20:	f7ff fef4 	bl	800ba0c <_free_r>
 800bc24:	e7e1      	b.n	800bbea <_realloc_r+0x1e>
 800bc26:	4635      	mov	r5, r6
 800bc28:	e7df      	b.n	800bbea <_realloc_r+0x1e>
	...

0800bc2c <_sbrk_r>:
 800bc2c:	b538      	push	{r3, r4, r5, lr}
 800bc2e:	4d06      	ldr	r5, [pc, #24]	; (800bc48 <_sbrk_r+0x1c>)
 800bc30:	2300      	movs	r3, #0
 800bc32:	4604      	mov	r4, r0
 800bc34:	4608      	mov	r0, r1
 800bc36:	602b      	str	r3, [r5, #0]
 800bc38:	f7f8 fcea 	bl	8004610 <_sbrk>
 800bc3c:	1c43      	adds	r3, r0, #1
 800bc3e:	d102      	bne.n	800bc46 <_sbrk_r+0x1a>
 800bc40:	682b      	ldr	r3, [r5, #0]
 800bc42:	b103      	cbz	r3, 800bc46 <_sbrk_r+0x1a>
 800bc44:	6023      	str	r3, [r4, #0]
 800bc46:	bd38      	pop	{r3, r4, r5, pc}
 800bc48:	20006558 	.word	0x20006558

0800bc4c <__malloc_lock>:
 800bc4c:	4801      	ldr	r0, [pc, #4]	; (800bc54 <__malloc_lock+0x8>)
 800bc4e:	f7ff bec1 	b.w	800b9d4 <__retarget_lock_acquire_recursive>
 800bc52:	bf00      	nop
 800bc54:	2000655c 	.word	0x2000655c

0800bc58 <__malloc_unlock>:
 800bc58:	4801      	ldr	r0, [pc, #4]	; (800bc60 <__malloc_unlock+0x8>)
 800bc5a:	f7ff bebc 	b.w	800b9d6 <__retarget_lock_release_recursive>
 800bc5e:	bf00      	nop
 800bc60:	2000655c 	.word	0x2000655c

0800bc64 <_malloc_usable_size_r>:
 800bc64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc68:	1f18      	subs	r0, r3, #4
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	bfbc      	itt	lt
 800bc6e:	580b      	ldrlt	r3, [r1, r0]
 800bc70:	18c0      	addlt	r0, r0, r3
 800bc72:	4770      	bx	lr

0800bc74 <_init>:
 800bc74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc76:	bf00      	nop
 800bc78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc7a:	bc08      	pop	{r3}
 800bc7c:	469e      	mov	lr, r3
 800bc7e:	4770      	bx	lr

0800bc80 <_fini>:
 800bc80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc82:	bf00      	nop
 800bc84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc86:	bc08      	pop	{r3}
 800bc88:	469e      	mov	lr, r3
 800bc8a:	4770      	bx	lr
