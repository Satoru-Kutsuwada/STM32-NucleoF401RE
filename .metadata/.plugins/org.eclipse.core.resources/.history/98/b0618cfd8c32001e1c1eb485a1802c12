/*
 * usr_uart.c
 *
 *  Created on: Jul 28, 2023
 *      Author: nosak
 */

/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "cmsis_os.h"
#include "croutine.h"

//#include "stm32f4xx_hal_uart.h"
#include "usr_system.h"
#include <stdarg.h>

/* Public includes -----------------------------------------------------------*/

/* Public typedef ------------------------------------------------------------*/

/* Public define -------------------------------------------------------------*/
#define CHARA_MAX 256

/* Public macro --------------------------------------------------------------*/

/* Public variables ----------------------------------------------------------*/
extern UART_HandleTypeDef huart1;
extern UART_HandleTypeDef huart2;
extern UART_BUF	uart[];
/* Public function prototypes ------------------------------------------------*/

/* Private includes ----------------------------------------------------------*/

/* Private variables ---------------------------------------------------------*/


int 	Sem_Printf = 0;
char 	uart1_rcvbuf[2];
char 	uart2_rcvbuf[2];
int		uart1_rcvflg = 0;
int		uart2_rcvflg = 0;

/* Private typedef -----------------------------------------------------------*/
typedef struct{
	SK_UART	kind;
	char 	name[10];
	UART_HandleTypeDef *huart;
	char	*rcvbuf;
	uint8_t	*RcvFlg;
} UART_MENBER;

const UART_MENBER UartList[]={
	{	SK_UART1_RS485,
		"UART1\0",
		&huart1,
		uart1_rcvbuf,
		&uart1_rcvflg 	},

	{	SK_UART2_DEBUG,
		"UART2\0",
		&huart2,
		uart2_rcvbuf,
		&uart2_rcvflg 	}

};

/* Private define ------------------------------------------------------------*/


/* Private macro -------------------------------------------------------------*/

/* Private variables ---------------------------------------------------------*/


/* Private function prototypes -----------------------------------------------*/

//==============================================================================
//
//==============================================================================

UART_HandleTypeDef * Get_huart(SK_UART sel)
{
	return UartList[sel].huart;
}

//==============================================================================
//
//==============================================================================

SK_UART	Get_uart_port(UART_HandleTypeDef *huart)
{
	SK_UART	rtn;

	if( UartList[0].huart == huart){
		rtn = SK_UART1_RS485 ;
	}
	else if( UartList[1].huart == huart){
		rtn = SK_UART2_DEBUG;
	}

	return rtn;
}
//==============================================================================
//
//==============================================================================
RETURN_STATUS Send_rs485(uint8_t *pData, uint16_t Size)
{
	RETURN_STATUS status = RET_TRUE;
	HAL_StatusTypeDef s;

	//SKprintf("Send_rs485() size=%d\r\n",Size);
	s= HAL_UART_Transmit(UartList[SK_UART1_RS485].huart, pData, Size, HAL_MAX_DELAY);

	switch(s){
	case HAL_OK:
		break;
	case HAL_ERROR:
	case HAL_BUSY:
	case HAL_TIMEOUT:
		status = RET_FALSE;
		SKprintf("ERROR %s RS485 TRANSMIT = %d\r\n",UartList[SK_UART1_RS485].name, s);
		break;
	}

	return status;

}



//==============================================================================
//
//==============================================================================
uint8_t	Get_rs485_rcvflg(void)
{
	return *UartList[SK_UART1_RS485].RcvFlg;
}
//==============================================================================
//
//==============================================================================
void Set_rs485_rcvflg(uint8_t dt)
{
	*UartList[SK_UART1_RS485].RcvFlg = dt;
}




//==============================================================================
//	huart1： RS485用のUART
//	huart2: デバックモニター用のUART
//		PA09：TX
//		PA10:RX
//==============================================================================
void uart_Rcv_init(SK_UART sel)
{
	HAL_StatusTypeDef s;
	s= HAL_UART_Receive_IT(Get_huart(sel), &uart[sel].rcv_dt[0], 1);

	switch(s){
	case HAL_OK:
		break;
	case HAL_ERROR:
	case HAL_BUSY:
	case HAL_TIMEOUT:
		SKprintf("ERROR %s RECIVE = %d\r\n",UartList[sel].name, s);
		break;
	}
}

//==============================================================================
//	huart1： RS485用のUART
//		PA09：TX
//		PA10:RX
//==============================================================================
int	SKprintf_uart1 (const char *string, ...)
{
	va_list ap;
	int i;
	char *buffer;

	while( Sem_Printf != 0 );

	buffer = (char *)pvPortMalloc(CHARA_MAX);

	if( buffer != NULL ){

		Sem_Printf = 1;

		// 可変個引数の利用準備
		// -- １… va_list 構造体 ap
		// -- 2 … 可変個引数の直前にある引数

		va_start(ap, string);
		vsprintf(buffer, string, ap);
		va_end(ap);

		for(i=0; i<CHARA_MAX; i++){
			if(buffer[i] == '\0'){
				break;
			}
		}
		HAL_UART_Transmit(UartList[SK_UART1_RS485].huart, buffer, i, HAL_MAX_DELAY);

	}

	vPortFree(buffer);

	Sem_Printf = 0;

}

//==============================================================================
//
// 総和を求める関数（値は int 型を想定）
// n は、渡す引数の数、それ以降は計算する値です。
//==============================================================================

int	SKprintf (const char *string, ...)
{
	va_list ap;
	int i;
	char *buffer;

	while( Sem_Printf != 0 );

	buffer = (char *)pvPortMalloc(CHARA_MAX);

	if( buffer != NULL ){

		Sem_Printf = 1;

		// 可変個引数の利用準備
		// -- １… va_list 構造体 ap
		// -- 2 … 可変個引数の直前にある引数

		va_start(ap, string);
		vsprintf(buffer, string, ap);
		va_end(ap);

		for(i=0; i<CHARA_MAX; i++){
			if(buffer[i] == '\0'){
				break;
			}
		}
		HAL_UART_Transmit(UartList[SK_UART2_DEBUG].huart, buffer, i, HAL_MAX_DELAY);

	}

	vPortFree(buffer);

	Sem_Printf = 0;

}

//==============================================================================
//
//
//==============================================================================
int getch(SK_UART id)
{
	int rtn = 0;

	if( *UartList[id].RcvFlg == 1 ){
		rtn = (int) UartList[id].rcvbuf[0];
		*UartList[id].RcvFlg = 0;
		uart_Rcv_init(id);
	}

	return rtn;
}


