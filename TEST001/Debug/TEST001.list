
TEST001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005128  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  080052c8  080052c8  000152c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800570c  0800570c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800570c  0800570c  0001570c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005714  08005714  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005714  08005714  00015714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005718  08005718  00015718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800571c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a98  20000070  0800578c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b08  0800578c  00021b08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011820  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000279b  00000000  00000000  000318c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee8  00000000  00000000  00034060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000df8  00000000  00000000  00034f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b1a  00000000  00000000  00035d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012035  00000000  00000000  0004d85a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093d49  00000000  00000000  0005f88f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f35d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004658  00000000  00000000  000f3628  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080052b0 	.word	0x080052b0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080052b0 	.word	0x080052b0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <debu_main>:

//=============================================================================
//
//=============================================================================
void debu_main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	char ch;

	if(read_line_streem() == INPUT_DATA_FIX){
 80005b8:	f000 fa44 	bl	8000a44 <read_line_streem>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b02      	cmp	r3, #2
 80005c0:	d11c      	bne.n	80005fc <debu_main+0x48>

		input_char_step = INPUT_INIT;
 80005c2:	4b0f      	ldr	r3, [pc, #60]	; (8000600 <debu_main+0x4c>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	701a      	strb	r2, [r3, #0]

		switch(dev_menue_type){
 80005c8:	4b0e      	ldr	r3, [pc, #56]	; (8000604 <debu_main+0x50>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	2b02      	cmp	r3, #2
 80005ce:	d00c      	beq.n	80005ea <debu_main+0x36>
 80005d0:	2b02      	cmp	r3, #2
 80005d2:	dc0d      	bgt.n	80005f0 <debu_main+0x3c>
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d002      	beq.n	80005de <debu_main+0x2a>
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d003      	beq.n	80005e4 <debu_main+0x30>
			break;
		case DEB_RS485_MENUE:
			DBmanue_rs485();
			break;
		default:
			break;
 80005dc:	e008      	b.n	80005f0 <debu_main+0x3c>
			DBmanue_prompt();
 80005de:	f000 f847 	bl	8000670 <DBmanue_prompt>
			break;
 80005e2:	e006      	b.n	80005f2 <debu_main+0x3e>
			DBmanue_log();
 80005e4:	f000 f862 	bl	80006ac <DBmanue_log>
			break;
 80005e8:	e003      	b.n	80005f2 <debu_main+0x3e>
			DBmanue_rs485();
 80005ea:	f000 f8c5 	bl	8000778 <DBmanue_rs485>
			break;
 80005ee:	e000      	b.n	80005f2 <debu_main+0x3e>
			break;
 80005f0:	bf00      	nop
		}

        // メニュを表示する
        DispMenue(dev_menue_type);
 80005f2:	4b04      	ldr	r3, [pc, #16]	; (8000604 <debu_main+0x50>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	4618      	mov	r0, r3
 80005f8:	f000 f806 	bl	8000608 <DispMenue>
	}
}
 80005fc:	bf00      	nop
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20000090 	.word	0x20000090
 8000604:	20000114 	.word	0x20000114

08000608 <DispMenue>:
//==============================================================================
//
//==============================================================================
void DispMenue(uint8_t type)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]
    uint8_t i;
    if( type==DEB_PROMPT_MODE ){
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d103      	bne.n	8000620 <DispMenue+0x18>
        SKprintf("ST> ");
 8000618:	4812      	ldr	r0, [pc, #72]	; (8000664 <DispMenue+0x5c>)
 800061a:	f000 fb7b 	bl	8000d14 <SKprintf>
    else{
        for( i=0; i<MenueList[type-1].clumn; i++){
            SKprintf("%s\r\n", &MenueList[type-1].pt[i].name[0]);
        }
    }
}
 800061e:	e01d      	b.n	800065c <DispMenue+0x54>
        for( i=0; i<MenueList[type-1].clumn; i++){
 8000620:	2300      	movs	r3, #0
 8000622:	73fb      	strb	r3, [r7, #15]
 8000624:	e011      	b.n	800064a <DispMenue+0x42>
            SKprintf("%s\r\n", &MenueList[type-1].pt[i].name[0]);
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	3b01      	subs	r3, #1
 800062a:	4a0f      	ldr	r2, [pc, #60]	; (8000668 <DispMenue+0x60>)
 800062c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8000630:	7bfa      	ldrb	r2, [r7, #15]
 8000632:	4613      	mov	r3, r2
 8000634:	011b      	lsls	r3, r3, #4
 8000636:	1a9b      	subs	r3, r3, r2
 8000638:	005b      	lsls	r3, r3, #1
 800063a:	440b      	add	r3, r1
 800063c:	4619      	mov	r1, r3
 800063e:	480b      	ldr	r0, [pc, #44]	; (800066c <DispMenue+0x64>)
 8000640:	f000 fb68 	bl	8000d14 <SKprintf>
        for( i=0; i<MenueList[type-1].clumn; i++){
 8000644:	7bfb      	ldrb	r3, [r7, #15]
 8000646:	3301      	adds	r3, #1
 8000648:	73fb      	strb	r3, [r7, #15]
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	3b01      	subs	r3, #1
 800064e:	4a06      	ldr	r2, [pc, #24]	; (8000668 <DispMenue+0x60>)
 8000650:	00db      	lsls	r3, r3, #3
 8000652:	4413      	add	r3, r2
 8000654:	791b      	ldrb	r3, [r3, #4]
 8000656:	7bfa      	ldrb	r2, [r7, #15]
 8000658:	429a      	cmp	r2, r3
 800065a:	d3e4      	bcc.n	8000626 <DispMenue+0x1e>
}
 800065c:	bf00      	nop
 800065e:	3710      	adds	r7, #16
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	080052c8 	.word	0x080052c8
 8000668:	08005534 	.word	0x08005534
 800066c:	080052d0 	.word	0x080052d0

08000670 <DBmanue_prompt>:
//=============================================================================
//
//=============================================================================
void DBmanue_prompt(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
    switch( input2menu() ){
 8000674:	f000 f8e2 	bl	800083c <input2menu>
 8000678:	4603      	mov	r3, r0
 800067a:	2b02      	cmp	r3, #2
 800067c:	d00d      	beq.n	800069a <DBmanue_prompt+0x2a>
 800067e:	2b02      	cmp	r3, #2
 8000680:	dc0f      	bgt.n	80006a2 <DBmanue_prompt+0x32>
 8000682:	2b00      	cmp	r3, #0
 8000684:	d002      	beq.n	800068c <DBmanue_prompt+0x1c>
 8000686:	2b01      	cmp	r3, #1
 8000688:	d003      	beq.n	8000692 <DBmanue_prompt+0x22>
        break;
    case CMD_RS485:
        dev_menue_type = DEB_RS485_MENUE;
        break;
    default:
        break;
 800068a:	e00a      	b.n	80006a2 <DBmanue_prompt+0x32>
    	rtc_display();
 800068c:	f000 fbae 	bl	8000dec <rtc_display>
        break;
 8000690:	e008      	b.n	80006a4 <DBmanue_prompt+0x34>
        dev_menue_type = DEB_LOG_MENUE;
 8000692:	4b05      	ldr	r3, [pc, #20]	; (80006a8 <DBmanue_prompt+0x38>)
 8000694:	2201      	movs	r2, #1
 8000696:	701a      	strb	r2, [r3, #0]
        break;
 8000698:	e004      	b.n	80006a4 <DBmanue_prompt+0x34>
        dev_menue_type = DEB_RS485_MENUE;
 800069a:	4b03      	ldr	r3, [pc, #12]	; (80006a8 <DBmanue_prompt+0x38>)
 800069c:	2202      	movs	r2, #2
 800069e:	701a      	strb	r2, [r3, #0]
        break;
 80006a0:	e000      	b.n	80006a4 <DBmanue_prompt+0x34>
        break;
 80006a2:	bf00      	nop
    }
}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20000114 	.word	0x20000114

080006ac <DBmanue_log>:

//=============================================================================
//
//=============================================================================
void DBmanue_log(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
	switch( input_string.main[0] ){
 80006b0:	4b2f      	ldr	r3, [pc, #188]	; (8000770 <DBmanue_log+0xc4>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b52      	cmp	r3, #82	; 0x52
 80006b6:	dc4b      	bgt.n	8000750 <DBmanue_log+0xa4>
 80006b8:	2b31      	cmp	r3, #49	; 0x31
 80006ba:	db55      	blt.n	8000768 <DBmanue_log+0xbc>
 80006bc:	3b31      	subs	r3, #49	; 0x31
 80006be:	2b21      	cmp	r3, #33	; 0x21
 80006c0:	d852      	bhi.n	8000768 <DBmanue_log+0xbc>
 80006c2:	a201      	add	r2, pc, #4	; (adr r2, 80006c8 <DBmanue_log+0x1c>)
 80006c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006c8:	08000757 	.word	0x08000757
 80006cc:	0800075d 	.word	0x0800075d
 80006d0:	08000769 	.word	0x08000769
 80006d4:	08000769 	.word	0x08000769
 80006d8:	08000769 	.word	0x08000769
 80006dc:	08000769 	.word	0x08000769
 80006e0:	08000769 	.word	0x08000769
 80006e4:	08000769 	.word	0x08000769
 80006e8:	08000769 	.word	0x08000769
 80006ec:	08000769 	.word	0x08000769
 80006f0:	08000769 	.word	0x08000769
 80006f4:	08000769 	.word	0x08000769
 80006f8:	08000769 	.word	0x08000769
 80006fc:	08000769 	.word	0x08000769
 8000700:	08000769 	.word	0x08000769
 8000704:	08000769 	.word	0x08000769
 8000708:	08000769 	.word	0x08000769
 800070c:	08000769 	.word	0x08000769
 8000710:	08000769 	.word	0x08000769
 8000714:	08000769 	.word	0x08000769
 8000718:	08000769 	.word	0x08000769
 800071c:	08000769 	.word	0x08000769
 8000720:	08000769 	.word	0x08000769
 8000724:	08000769 	.word	0x08000769
 8000728:	08000769 	.word	0x08000769
 800072c:	08000769 	.word	0x08000769
 8000730:	08000769 	.word	0x08000769
 8000734:	08000769 	.word	0x08000769
 8000738:	08000769 	.word	0x08000769
 800073c:	08000769 	.word	0x08000769
 8000740:	08000769 	.word	0x08000769
 8000744:	08000769 	.word	0x08000769
 8000748:	08000769 	.word	0x08000769
 800074c:	08000763 	.word	0x08000763
 8000750:	2b72      	cmp	r3, #114	; 0x72
 8000752:	d006      	beq.n	8000762 <DBmanue_log+0xb6>
		break;
	case 'r':
	case 'R':
		dev_menue_type = DEB_PROMPT_MODE;
	default:
		break;
 8000754:	e008      	b.n	8000768 <DBmanue_log+0xbc>
		LogInfo_display();
 8000756:	f000 fa51 	bl	8000bfc <LogInfo_display>
		break;
 800075a:	e006      	b.n	800076a <DBmanue_log+0xbe>
		LogInfo_clear();
 800075c:	f000 fac8 	bl	8000cf0 <LogInfo_clear>
		break;
 8000760:	e003      	b.n	800076a <DBmanue_log+0xbe>
		dev_menue_type = DEB_PROMPT_MODE;
 8000762:	4b04      	ldr	r3, [pc, #16]	; (8000774 <DBmanue_log+0xc8>)
 8000764:	2200      	movs	r2, #0
 8000766:	701a      	strb	r2, [r3, #0]
		break;
 8000768:	bf00      	nop
	}
}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20000094 	.word	0x20000094
 8000774:	20000114 	.word	0x20000114

08000778 <DBmanue_rs485>:

//=============================================================================
//
//=============================================================================
void DBmanue_rs485(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
	switch( input_string.main[0] ){
 800077c:	4b2d      	ldr	r3, [pc, #180]	; (8000834 <DBmanue_rs485+0xbc>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	2b52      	cmp	r3, #82	; 0x52
 8000782:	dc4b      	bgt.n	800081c <DBmanue_rs485+0xa4>
 8000784:	2b31      	cmp	r3, #49	; 0x31
 8000786:	db4f      	blt.n	8000828 <DBmanue_rs485+0xb0>
 8000788:	3b31      	subs	r3, #49	; 0x31
 800078a:	2b21      	cmp	r3, #33	; 0x21
 800078c:	d84c      	bhi.n	8000828 <DBmanue_rs485+0xb0>
 800078e:	a201      	add	r2, pc, #4	; (adr r2, 8000794 <DBmanue_rs485+0x1c>)
 8000790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000794:	08000829 	.word	0x08000829
 8000798:	08000829 	.word	0x08000829
 800079c:	08000829 	.word	0x08000829
 80007a0:	08000829 	.word	0x08000829
 80007a4:	08000829 	.word	0x08000829
 80007a8:	08000829 	.word	0x08000829
 80007ac:	08000829 	.word	0x08000829
 80007b0:	08000829 	.word	0x08000829
 80007b4:	08000829 	.word	0x08000829
 80007b8:	08000829 	.word	0x08000829
 80007bc:	08000829 	.word	0x08000829
 80007c0:	08000829 	.word	0x08000829
 80007c4:	08000829 	.word	0x08000829
 80007c8:	08000829 	.word	0x08000829
 80007cc:	08000829 	.word	0x08000829
 80007d0:	08000829 	.word	0x08000829
 80007d4:	08000829 	.word	0x08000829
 80007d8:	08000829 	.word	0x08000829
 80007dc:	08000829 	.word	0x08000829
 80007e0:	08000829 	.word	0x08000829
 80007e4:	08000829 	.word	0x08000829
 80007e8:	08000829 	.word	0x08000829
 80007ec:	08000829 	.word	0x08000829
 80007f0:	08000829 	.word	0x08000829
 80007f4:	08000829 	.word	0x08000829
 80007f8:	08000829 	.word	0x08000829
 80007fc:	08000829 	.word	0x08000829
 8000800:	08000829 	.word	0x08000829
 8000804:	08000829 	.word	0x08000829
 8000808:	08000829 	.word	0x08000829
 800080c:	08000829 	.word	0x08000829
 8000810:	08000829 	.word	0x08000829
 8000814:	08000829 	.word	0x08000829
 8000818:	08000823 	.word	0x08000823
 800081c:	2b72      	cmp	r3, #114	; 0x72
 800081e:	d000      	beq.n	8000822 <DBmanue_rs485+0xaa>
		break;
	case 'r':
	case 'R':
		dev_menue_type = DEB_PROMPT_MODE;
	default:
		break;
 8000820:	e002      	b.n	8000828 <DBmanue_rs485+0xb0>
		dev_menue_type = DEB_PROMPT_MODE;
 8000822:	4b05      	ldr	r3, [pc, #20]	; (8000838 <DBmanue_rs485+0xc0>)
 8000824:	2200      	movs	r2, #0
 8000826:	701a      	strb	r2, [r3, #0]
		break;
 8000828:	bf00      	nop
	}
}
 800082a:	bf00      	nop
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr
 8000834:	20000094 	.word	0x20000094
 8000838:	20000114 	.word	0x20000114

0800083c <input2menu>:
//==============================================================================
//
//==============================================================================

COMMAND_MENUE input2menu(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
     uint16_t i = 0;
 8000842:	2300      	movs	r3, #0
 8000844:	80fb      	strh	r3, [r7, #6]
    COMMAND_MENUE rtn = CMD_MAX;
 8000846:	2303      	movs	r3, #3
 8000848:	717b      	strb	r3, [r7, #5]

        while( com_list[i].pt != CMD_MAX ){
 800084a:	e01d      	b.n	8000888 <input2menu+0x4c>
            if (strcmp(&input_string.main[0], &com_list[i].command[0]) == 0){
 800084c:	88fa      	ldrh	r2, [r7, #6]
 800084e:	4613      	mov	r3, r2
 8000850:	009b      	lsls	r3, r3, #2
 8000852:	4413      	add	r3, r2
 8000854:	005b      	lsls	r3, r3, #1
 8000856:	4413      	add	r3, r2
 8000858:	4a13      	ldr	r2, [pc, #76]	; (80008a8 <input2menu+0x6c>)
 800085a:	4413      	add	r3, r2
 800085c:	3301      	adds	r3, #1
 800085e:	4619      	mov	r1, r3
 8000860:	4812      	ldr	r0, [pc, #72]	; (80008ac <input2menu+0x70>)
 8000862:	f7ff fcbd 	bl	80001e0 <strcmp>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d10a      	bne.n	8000882 <input2menu+0x46>
                rtn = com_list[i].pt;
 800086c:	88fa      	ldrh	r2, [r7, #6]
 800086e:	490e      	ldr	r1, [pc, #56]	; (80008a8 <input2menu+0x6c>)
 8000870:	4613      	mov	r3, r2
 8000872:	009b      	lsls	r3, r3, #2
 8000874:	4413      	add	r3, r2
 8000876:	005b      	lsls	r3, r3, #1
 8000878:	4413      	add	r3, r2
 800087a:	440b      	add	r3, r1
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	717b      	strb	r3, [r7, #5]
                break;
 8000880:	e00d      	b.n	800089e <input2menu+0x62>
            }
            i++;
 8000882:	88fb      	ldrh	r3, [r7, #6]
 8000884:	3301      	adds	r3, #1
 8000886:	80fb      	strh	r3, [r7, #6]
        while( com_list[i].pt != CMD_MAX ){
 8000888:	88fa      	ldrh	r2, [r7, #6]
 800088a:	4907      	ldr	r1, [pc, #28]	; (80008a8 <input2menu+0x6c>)
 800088c:	4613      	mov	r3, r2
 800088e:	009b      	lsls	r3, r3, #2
 8000890:	4413      	add	r3, r2
 8000892:	005b      	lsls	r3, r3, #1
 8000894:	4413      	add	r3, r2
 8000896:	440b      	add	r3, r1
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	2b03      	cmp	r3, #3
 800089c:	d1d6      	bne.n	800084c <input2menu+0x10>
        }

    return rtn;
 800089e:	797b      	ldrb	r3, [r7, #5]
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	080053bc 	.word	0x080053bc
 80008ac:	20000094 	.word	0x20000094

080008b0 <command_split>:
//==============================================================================
//
//==============================================================================
void command_split(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
	int		i;
	int		j;
	char	moji = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	71fb      	strb	r3, [r7, #7]
	char 	*ptr;

	for( j = 0; j<INPUT_BUF_SIZE/2; j++ ){
 80008ba:	2300      	movs	r3, #0
 80008bc:	60bb      	str	r3, [r7, #8]
 80008be:	e008      	b.n	80008d2 <command_split+0x22>
		input_string.sub_ptr[j] = 0;
 80008c0:	4a5d      	ldr	r2, [pc, #372]	; (8000a38 <command_split+0x188>)
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	3308      	adds	r3, #8
 80008c6:	2100      	movs	r1, #0
 80008c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for( j = 0; j<INPUT_BUF_SIZE/2; j++ ){
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	3301      	adds	r3, #1
 80008d0:	60bb      	str	r3, [r7, #8]
 80008d2:	68bb      	ldr	r3, [r7, #8]
 80008d4:	2b0e      	cmp	r3, #14
 80008d6:	ddf3      	ble.n	80008c0 <command_split+0x10>
	}

	for( i= 0; i<INPUT_BUF_SIZE; i++ ){
 80008d8:	2300      	movs	r3, #0
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	e027      	b.n	800092e <command_split+0x7e>
		switch(input_string.main[i]){
 80008de:	4a56      	ldr	r2, [pc, #344]	; (8000a38 <command_split+0x188>)
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	4413      	add	r3, r2
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	2b2c      	cmp	r3, #44	; 0x2c
 80008e8:	d005      	beq.n	80008f6 <command_split+0x46>
 80008ea:	2b2c      	cmp	r3, #44	; 0x2c
 80008ec:	dc0b      	bgt.n	8000906 <command_split+0x56>
 80008ee:	2b09      	cmp	r3, #9
 80008f0:	d001      	beq.n	80008f6 <command_split+0x46>
 80008f2:	2b20      	cmp	r3, #32
 80008f4:	d107      	bne.n	8000906 <command_split+0x56>
		case ' ':		// スペース
		case ',':		//　カンマ
		case '	':		//　タブ
			input_string.main[i] = '\0';
 80008f6:	4a50      	ldr	r2, [pc, #320]	; (8000a38 <command_split+0x188>)
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	4413      	add	r3, r2
 80008fc:	2200      	movs	r2, #0
 80008fe:	701a      	strb	r2, [r3, #0]
			moji = 0;
 8000900:	2300      	movs	r3, #0
 8000902:	71fb      	strb	r3, [r7, #7]
			break;
 8000904:	e010      	b.n	8000928 <command_split+0x78>
		default:
			if( moji == 0 ){
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d10c      	bne.n	8000926 <command_split+0x76>
				if( j < INPUT_BUF_SIZE/2){
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	2b0e      	cmp	r3, #14
 8000910:	dc07      	bgt.n	8000922 <command_split+0x72>
					input_string.sub_ptr[j] = &input_string.main[i];
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	4a48      	ldr	r2, [pc, #288]	; (8000a38 <command_split+0x188>)
 8000916:	441a      	add	r2, r3
 8000918:	4947      	ldr	r1, [pc, #284]	; (8000a38 <command_split+0x188>)
 800091a:	68bb      	ldr	r3, [r7, #8]
 800091c:	3308      	adds	r3, #8
 800091e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				}
				moji = 1;
 8000922:	2301      	movs	r3, #1
 8000924:	71fb      	strb	r3, [r7, #7]
			}
			break;
 8000926:	bf00      	nop
	for( i= 0; i<INPUT_BUF_SIZE; i++ ){
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	3301      	adds	r3, #1
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	2b1d      	cmp	r3, #29
 8000932:	ddd4      	ble.n	80008de <command_split+0x2e>
		}
	}

	for( j = 1; j<INPUT_BUF_SIZE/2; j++ ){
 8000934:	2301      	movs	r3, #1
 8000936:	60bb      	str	r3, [r7, #8]
 8000938:	e074      	b.n	8000a24 <command_split+0x174>
		ptr = input_string.sub_ptr[j];
 800093a:	4a3f      	ldr	r2, [pc, #252]	; (8000a38 <command_split+0x188>)
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	3308      	adds	r3, #8
 8000940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000944:	603b      	str	r3, [r7, #0]
		moji = 1;
 8000946:	2301      	movs	r3, #1
 8000948:	71fb      	strb	r3, [r7, #7]
		if( ptr != 0 ){
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d06d      	beq.n	8000a2c <command_split+0x17c>
			if ( ptr[0] == '0' && ptr[1] == 'x'){
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	2b30      	cmp	r3, #48	; 0x30
 8000956:	d14c      	bne.n	80009f2 <command_split+0x142>
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	3301      	adds	r3, #1
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	2b78      	cmp	r3, #120	; 0x78
 8000960:	d147      	bne.n	80009f2 <command_split+0x142>
				ptr ++;
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	3301      	adds	r3, #1
 8000966:	603b      	str	r3, [r7, #0]
				ptr ++;
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	3301      	adds	r3, #1
 800096c:	603b      	str	r3, [r7, #0]
				while( *ptr != '\0' ){
 800096e:	e01c      	b.n	80009aa <command_split+0xfa>
					if( ('0'<=*ptr && *ptr<='9') || ('A'<=*ptr && *ptr<='F') || ('a'<=*ptr && *ptr<='f')){
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	2b2f      	cmp	r3, #47	; 0x2f
 8000976:	d903      	bls.n	8000980 <command_split+0xd0>
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	2b39      	cmp	r3, #57	; 0x39
 800097e:	d911      	bls.n	80009a4 <command_split+0xf4>
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	2b40      	cmp	r3, #64	; 0x40
 8000986:	d903      	bls.n	8000990 <command_split+0xe0>
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	2b46      	cmp	r3, #70	; 0x46
 800098e:	d909      	bls.n	80009a4 <command_split+0xf4>
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	2b60      	cmp	r3, #96	; 0x60
 8000996:	d903      	bls.n	80009a0 <command_split+0xf0>
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	2b66      	cmp	r3, #102	; 0x66
 800099e:	d901      	bls.n	80009a4 <command_split+0xf4>

					}
					else{
						moji = 0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	71fb      	strb	r3, [r7, #7]
					}
					ptr ++;
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	3301      	adds	r3, #1
 80009a8:	603b      	str	r3, [r7, #0]
				while( *ptr != '\0' ){
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d1de      	bne.n	8000970 <command_split+0xc0>
				}

				if( moji == 1 ){
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d132      	bne.n	8000a1e <command_split+0x16e>
					sscanf(input_string.sub_ptr[j], "%x", &input_string.data[j]);
 80009b8:	4a1f      	ldr	r2, [pc, #124]	; (8000a38 <command_split+0x188>)
 80009ba:	68bb      	ldr	r3, [r7, #8]
 80009bc:	3308      	adds	r3, #8
 80009be:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80009c2:	68bb      	ldr	r3, [r7, #8]
 80009c4:	332c      	adds	r3, #44	; 0x2c
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	4a1b      	ldr	r2, [pc, #108]	; (8000a38 <command_split+0x188>)
 80009ca:	4413      	add	r3, r2
 80009cc:	3304      	adds	r3, #4
 80009ce:	461a      	mov	r2, r3
 80009d0:	491a      	ldr	r1, [pc, #104]	; (8000a3c <command_split+0x18c>)
 80009d2:	f003 fb43 	bl	800405c <siscanf>
				if( moji == 1 ){
 80009d6:	e022      	b.n	8000a1e <command_split+0x16e>
				}
			}
			else{
				while( *ptr != '\0' ){
					if( '0'<=*ptr && *ptr<='9'){
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	2b2f      	cmp	r3, #47	; 0x2f
 80009de:	d903      	bls.n	80009e8 <command_split+0x138>
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	2b39      	cmp	r3, #57	; 0x39
 80009e6:	d901      	bls.n	80009ec <command_split+0x13c>
					}
					else{
						moji = 0;
 80009e8:	2300      	movs	r3, #0
 80009ea:	71fb      	strb	r3, [r7, #7]
					}
					ptr ++;
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	3301      	adds	r3, #1
 80009f0:	603b      	str	r3, [r7, #0]
				while( *ptr != '\0' ){
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d1ee      	bne.n	80009d8 <command_split+0x128>
				}

				if( moji == 1 ){
 80009fa:	79fb      	ldrb	r3, [r7, #7]
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d10e      	bne.n	8000a1e <command_split+0x16e>
					sscanf(input_string.sub_ptr[j], "%d", &input_string.data[j]);
 8000a00:	4a0d      	ldr	r2, [pc, #52]	; (8000a38 <command_split+0x188>)
 8000a02:	68bb      	ldr	r3, [r7, #8]
 8000a04:	3308      	adds	r3, #8
 8000a06:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000a0a:	68bb      	ldr	r3, [r7, #8]
 8000a0c:	332c      	adds	r3, #44	; 0x2c
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	4a09      	ldr	r2, [pc, #36]	; (8000a38 <command_split+0x188>)
 8000a12:	4413      	add	r3, r2
 8000a14:	3304      	adds	r3, #4
 8000a16:	461a      	mov	r2, r3
 8000a18:	4909      	ldr	r1, [pc, #36]	; (8000a40 <command_split+0x190>)
 8000a1a:	f003 fb1f 	bl	800405c <siscanf>
	for( j = 1; j<INPUT_BUF_SIZE/2; j++ ){
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	3301      	adds	r3, #1
 8000a22:	60bb      	str	r3, [r7, #8]
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	2b0e      	cmp	r3, #14
 8000a28:	dd87      	ble.n	800093a <command_split+0x8a>
		else{
			break;
		}
	}

}
 8000a2a:	e000      	b.n	8000a2e <command_split+0x17e>
			break;
 8000a2c:	bf00      	nop
}
 8000a2e:	bf00      	nop
 8000a30:	3710      	adds	r7, #16
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000094 	.word	0x20000094
 8000a3c:	080052d8 	.word	0x080052d8
 8000a40:	080052dc 	.word	0x080052dc

08000a44 <read_line_streem>:

//==============================================================================
//
//==============================================================================
 INPUT_CHAR_STEP read_line_streem(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
    uint16_t keta;
    uint8_t num;
    uint8_t sub_cnt;
    char	string[2];

    string[0] = '\0';
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	713b      	strb	r3, [r7, #4]
    string[1] = '\0';
 8000a4e:	2300      	movs	r3, #0
 8000a50:	717b      	strb	r3, [r7, #5]


    c = (char)getch();
 8000a52:	f000 fa0b 	bl	8000e6c <getch>
 8000a56:	4603      	mov	r3, r0
 8000a58:	71fb      	strb	r3, [r7, #7]

    if( c != 0 ){
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d04b      	beq.n	8000af8 <read_line_streem+0xb4>

        switch(input_char_step){
 8000a60:	4b2a      	ldr	r3, [pc, #168]	; (8000b0c <read_line_streem+0xc8>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d002      	beq.n	8000a6e <read_line_streem+0x2a>
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d006      	beq.n	8000a7a <read_line_streem+0x36>
                    input_char_step = INPUT_DATA_FIX;

                    command_split();
                }
            default:
                break;
 8000a6c:	e046      	b.n	8000afc <read_line_streem+0xb8>
                input_pos = 0;
 8000a6e:	4b28      	ldr	r3, [pc, #160]	; (8000b10 <read_line_streem+0xcc>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
                input_char_step = INPUT_SAVING;
 8000a74:	4b25      	ldr	r3, [pc, #148]	; (8000b0c <read_line_streem+0xc8>)
 8000a76:	2201      	movs	r2, #1
 8000a78:	701a      	strb	r2, [r3, #0]
                if( isprint(c) && (input_pos <= INPUT_BUF_SIZE - 2)){
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f003 fadd 	bl	800403c <isprint>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d015      	beq.n	8000ab4 <read_line_streem+0x70>
 8000a88:	4b21      	ldr	r3, [pc, #132]	; (8000b10 <read_line_streem+0xcc>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2b1c      	cmp	r3, #28
 8000a8e:	dc11      	bgt.n	8000ab4 <read_line_streem+0x70>
                    input_string.main[input_pos] = c;
 8000a90:	4b1f      	ldr	r3, [pc, #124]	; (8000b10 <read_line_streem+0xcc>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	491f      	ldr	r1, [pc, #124]	; (8000b14 <read_line_streem+0xd0>)
 8000a96:	79fa      	ldrb	r2, [r7, #7]
 8000a98:	54ca      	strb	r2, [r1, r3]
                    input_pos ++;
 8000a9a:	4b1d      	ldr	r3, [pc, #116]	; (8000b10 <read_line_streem+0xcc>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	4a1b      	ldr	r2, [pc, #108]	; (8000b10 <read_line_streem+0xcc>)
 8000aa2:	6013      	str	r3, [r2, #0]
                    string[0] = c;
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	713b      	strb	r3, [r7, #4]
                    SKprintf("%s",string);
 8000aa8:	1d3b      	adds	r3, r7, #4
 8000aaa:	4619      	mov	r1, r3
 8000aac:	481a      	ldr	r0, [pc, #104]	; (8000b18 <read_line_streem+0xd4>)
 8000aae:	f000 f931 	bl	8000d14 <SKprintf>
                if( isprint(c) && (input_pos <= INPUT_BUF_SIZE - 2)){
 8000ab2:	e020      	b.n	8000af6 <read_line_streem+0xb2>
                else if (c == 0x08 && input_pos > 0) {      // Back Space
 8000ab4:	79fb      	ldrb	r3, [r7, #7]
 8000ab6:	2b08      	cmp	r3, #8
 8000ab8:	d10c      	bne.n	8000ad4 <read_line_streem+0x90>
 8000aba:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <read_line_streem+0xcc>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	dd08      	ble.n	8000ad4 <read_line_streem+0x90>
                    input_pos --;
 8000ac2:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <read_line_streem+0xcc>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	3b01      	subs	r3, #1
 8000ac8:	4a11      	ldr	r2, [pc, #68]	; (8000b10 <read_line_streem+0xcc>)
 8000aca:	6013      	str	r3, [r2, #0]
                    SKprintf("\x08 \x08");
 8000acc:	4813      	ldr	r0, [pc, #76]	; (8000b1c <read_line_streem+0xd8>)
 8000ace:	f000 f921 	bl	8000d14 <SKprintf>
                else if (c == 0x08 && input_pos > 0) {      // Back Space
 8000ad2:	e010      	b.n	8000af6 <read_line_streem+0xb2>
                else if (c == '\r') {
 8000ad4:	79fb      	ldrb	r3, [r7, #7]
 8000ad6:	2b0d      	cmp	r3, #13
 8000ad8:	d110      	bne.n	8000afc <read_line_streem+0xb8>
                    input_string.main[input_pos] = '\0';
 8000ada:	4b0d      	ldr	r3, [pc, #52]	; (8000b10 <read_line_streem+0xcc>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4a0d      	ldr	r2, [pc, #52]	; (8000b14 <read_line_streem+0xd0>)
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	54d1      	strb	r1, [r2, r3]
                    SKprintf("\r\n");
 8000ae4:	480e      	ldr	r0, [pc, #56]	; (8000b20 <read_line_streem+0xdc>)
 8000ae6:	f000 f915 	bl	8000d14 <SKprintf>
                    input_char_step = INPUT_DATA_FIX;
 8000aea:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <read_line_streem+0xc8>)
 8000aec:	2202      	movs	r2, #2
 8000aee:	701a      	strb	r2, [r3, #0]
                    command_split();
 8000af0:	f7ff fede 	bl	80008b0 <command_split>
                break;
 8000af4:	e002      	b.n	8000afc <read_line_streem+0xb8>
 8000af6:	e001      	b.n	8000afc <read_line_streem+0xb8>
        }
    }
 8000af8:	bf00      	nop
 8000afa:	e000      	b.n	8000afe <read_line_streem+0xba>
                break;
 8000afc:	bf00      	nop
    return(input_char_step);
 8000afe:	4b03      	ldr	r3, [pc, #12]	; (8000b0c <read_line_streem+0xc8>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 }
 8000b02:	4618      	mov	r0, r3
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000090 	.word	0x20000090
 8000b10:	2000008c 	.word	0x2000008c
 8000b14:	20000094 	.word	0x20000094
 8000b18:	080052e0 	.word	0x080052e0
 8000b1c:	080052e4 	.word	0x080052e4
 8000b20:	080052e8 	.word	0x080052e8

08000b24 <HAL_RTCEx_WakeUpTimerEventCallback>:
//==============================================================================
//
//==============================================================================

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]

	uint8_t	i;

	if( timer.start > TIMER_AV_NUM){
 8000b2c:	4b2a      	ldr	r3, [pc, #168]	; (8000bd8 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000b2e:	7e5b      	ldrb	r3, [r3, #25]
 8000b30:	2b03      	cmp	r3, #3
 8000b32:	d941      	bls.n	8000bb8 <HAL_RTCEx_WakeUpTimerEventCallback+0x94>

		timer.dt_buf[timer.av_wcnt] = timer.dt;
 8000b34:	4b28      	ldr	r3, [pc, #160]	; (8000bd8 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000b36:	7e1b      	ldrb	r3, [r3, #24]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	4b27      	ldr	r3, [pc, #156]	; (8000bd8 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	4926      	ldr	r1, [pc, #152]	; (8000bd8 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000b40:	0083      	lsls	r3, r0, #2
 8000b42:	440b      	add	r3, r1
 8000b44:	605a      	str	r2, [r3, #4]
		timer.av_wcnt ++;
 8000b46:	4b24      	ldr	r3, [pc, #144]	; (8000bd8 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000b48:	7e1b      	ldrb	r3, [r3, #24]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	b2da      	uxtb	r2, r3
 8000b4e:	4b22      	ldr	r3, [pc, #136]	; (8000bd8 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000b50:	761a      	strb	r2, [r3, #24]

		if(timer.av_wcnt > TIMER_AV_NUM){
 8000b52:	4b21      	ldr	r3, [pc, #132]	; (8000bd8 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000b54:	7e1b      	ldrb	r3, [r3, #24]
 8000b56:	2b03      	cmp	r3, #3
 8000b58:	d920      	bls.n	8000b9c <HAL_RTCEx_WakeUpTimerEventCallback+0x78>
			timer.av_wcnt = 0;
 8000b5a:	4b1f      	ldr	r3, [pc, #124]	; (8000bd8 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	761a      	strb	r2, [r3, #24]
			timer.dt_av = 0;
 8000b60:	4b1d      	ldr	r3, [pc, #116]	; (8000bd8 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	615a      	str	r2, [r3, #20]
			for(i=0; i<TIMER_AV_NUM; i++){
 8000b66:	2300      	movs	r3, #0
 8000b68:	73fb      	strb	r3, [r7, #15]
 8000b6a:	e00c      	b.n	8000b86 <HAL_RTCEx_WakeUpTimerEventCallback+0x62>
				timer.dt_av +=  timer.dt_buf[i];
 8000b6c:	4b1a      	ldr	r3, [pc, #104]	; (8000bd8 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000b6e:	695a      	ldr	r2, [r3, #20]
 8000b70:	7bfb      	ldrb	r3, [r7, #15]
 8000b72:	4919      	ldr	r1, [pc, #100]	; (8000bd8 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	440b      	add	r3, r1
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	4a16      	ldr	r2, [pc, #88]	; (8000bd8 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000b7e:	6153      	str	r3, [r2, #20]
			for(i=0; i<TIMER_AV_NUM; i++){
 8000b80:	7bfb      	ldrb	r3, [r7, #15]
 8000b82:	3301      	adds	r3, #1
 8000b84:	73fb      	strb	r3, [r7, #15]
 8000b86:	7bfb      	ldrb	r3, [r7, #15]
 8000b88:	2b02      	cmp	r3, #2
 8000b8a:	d9ef      	bls.n	8000b6c <HAL_RTCEx_WakeUpTimerEventCallback+0x48>
			}
			timer.dt_av /= TIMER_AV_NUM;
 8000b8c:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000b8e:	695b      	ldr	r3, [r3, #20]
 8000b90:	4a12      	ldr	r2, [pc, #72]	; (8000bdc <HAL_RTCEx_WakeUpTimerEventCallback+0xb8>)
 8000b92:	fba2 2303 	umull	r2, r3, r2, r3
 8000b96:	085b      	lsrs	r3, r3, #1
 8000b98:	4a0f      	ldr	r2, [pc, #60]	; (8000bd8 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000b9a:	6153      	str	r3, [r2, #20]
		}

		if( timer.dt_max < timer.dt ){
 8000b9c:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000b9e:	691a      	ldr	r2, [r3, #16]
 8000ba0:	4b0d      	ldr	r3, [pc, #52]	; (8000bd8 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d203      	bcs.n	8000bb0 <HAL_RTCEx_WakeUpTimerEventCallback+0x8c>
			timer.dt_max = timer.dt;
 8000ba8:	4b0b      	ldr	r3, [pc, #44]	; (8000bd8 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a0a      	ldr	r2, [pc, #40]	; (8000bd8 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000bae:	6113      	str	r3, [r2, #16]
		}

		timer.dt = 0;
 8000bb0:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
	}
	else{
		timer.start ++;
		timer.dt = 0;
	}
}
 8000bb6:	e008      	b.n	8000bca <HAL_RTCEx_WakeUpTimerEventCallback+0xa6>
		timer.start ++;
 8000bb8:	4b07      	ldr	r3, [pc, #28]	; (8000bd8 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000bba:	7e5b      	ldrb	r3, [r3, #25]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	b2da      	uxtb	r2, r3
 8000bc0:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000bc2:	765a      	strb	r2, [r3, #25]
		timer.dt = 0;
 8000bc4:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <HAL_RTCEx_WakeUpTimerEventCallback+0xb4>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
}
 8000bca:	bf00      	nop
 8000bcc:	3714      	adds	r7, #20
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	20000118 	.word	0x20000118
 8000bdc:	aaaaaaab 	.word	0xaaaaaaab

08000be0 <usr_isr_tim1_up>:
//==============================================================================
//
//==============================================================================
void usr_isr_tim1_up(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);

	timer.dt += 10;
 8000be4:	4b04      	ldr	r3, [pc, #16]	; (8000bf8 <usr_isr_tim1_up+0x18>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	330a      	adds	r3, #10
 8000bea:	4a03      	ldr	r2, [pc, #12]	; (8000bf8 <usr_isr_tim1_up+0x18>)
 8000bec:	6013      	str	r3, [r2, #0]
}
 8000bee:	bf00      	nop
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	20000118 	.word	0x20000118

08000bfc <LogInfo_display>:
//=============================================================================
//
//
//=============================================================================
void LogInfo_display(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
	uint16_t	i;
	uint16_t	msec;
	uint16_t	usec;
	uint32_t	dt;
	uint16_t	rptr = log.rptr;
 8000c02:	4b35      	ldr	r3, [pc, #212]	; (8000cd8 <LogInfo_display+0xdc>)
 8000c04:	885b      	ldrh	r3, [r3, #2]
 8000c06:	81bb      	strh	r3, [r7, #12]


	for(i=0; i<LOG_RECODE_MAX; i++){
 8000c08:	2300      	movs	r3, #0
 8000c0a:	81fb      	strh	r3, [r7, #14]
 8000c0c:	e05b      	b.n	8000cc6 <LogInfo_display+0xca>
		SKprintf("%02d:%02d:%02d.", log.rec[rptr].Hours, log.rec[rptr].Minutes, log.rec[rptr].Seconds);
 8000c0e:	89bb      	ldrh	r3, [r7, #12]
 8000c10:	4a31      	ldr	r2, [pc, #196]	; (8000cd8 <LogInfo_display+0xdc>)
 8000c12:	019b      	lsls	r3, r3, #6
 8000c14:	4413      	add	r3, r2
 8000c16:	3308      	adds	r3, #8
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	89bb      	ldrh	r3, [r7, #12]
 8000c1e:	4a2e      	ldr	r2, [pc, #184]	; (8000cd8 <LogInfo_display+0xdc>)
 8000c20:	019b      	lsls	r3, r3, #6
 8000c22:	4413      	add	r3, r2
 8000c24:	3309      	adds	r3, #9
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	4618      	mov	r0, r3
 8000c2a:	89bb      	ldrh	r3, [r7, #12]
 8000c2c:	4a2a      	ldr	r2, [pc, #168]	; (8000cd8 <LogInfo_display+0xdc>)
 8000c2e:	019b      	lsls	r3, r3, #6
 8000c30:	4413      	add	r3, r2
 8000c32:	330a      	adds	r3, #10
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	4602      	mov	r2, r0
 8000c38:	4828      	ldr	r0, [pc, #160]	; (8000cdc <LogInfo_display+0xe0>)
 8000c3a:	f000 f86b 	bl	8000d14 <SKprintf>

		dt = 1000000 * log.rec[rptr].dt / log.rec[rptr].dt_av;
 8000c3e:	89bb      	ldrh	r3, [r7, #12]
 8000c40:	4a25      	ldr	r2, [pc, #148]	; (8000cd8 <LogInfo_display+0xdc>)
 8000c42:	019b      	lsls	r3, r3, #6
 8000c44:	4413      	add	r3, r2
 8000c46:	330c      	adds	r3, #12
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a25      	ldr	r2, [pc, #148]	; (8000ce0 <LogInfo_display+0xe4>)
 8000c4c:	fb03 f202 	mul.w	r2, r3, r2
 8000c50:	89bb      	ldrh	r3, [r7, #12]
 8000c52:	4921      	ldr	r1, [pc, #132]	; (8000cd8 <LogInfo_display+0xdc>)
 8000c54:	019b      	lsls	r3, r3, #6
 8000c56:	440b      	add	r3, r1
 8000c58:	3310      	adds	r3, #16
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c60:	60bb      	str	r3, [r7, #8]
		msec = (uint16_t)( dt / 1000 );
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	4a1f      	ldr	r2, [pc, #124]	; (8000ce4 <LogInfo_display+0xe8>)
 8000c66:	fba2 2303 	umull	r2, r3, r2, r3
 8000c6a:	099b      	lsrs	r3, r3, #6
 8000c6c:	80fb      	strh	r3, [r7, #6]
		usec = (uint16_t)( dt % 1000 );
 8000c6e:	68ba      	ldr	r2, [r7, #8]
 8000c70:	4b1c      	ldr	r3, [pc, #112]	; (8000ce4 <LogInfo_display+0xe8>)
 8000c72:	fba3 1302 	umull	r1, r3, r3, r2
 8000c76:	099b      	lsrs	r3, r3, #6
 8000c78:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c7c:	fb01 f303 	mul.w	r3, r1, r3
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	80bb      	strh	r3, [r7, #4]
		SKprintf("%03d %03d ", msec,usec);
 8000c84:	88fb      	ldrh	r3, [r7, #6]
 8000c86:	88ba      	ldrh	r2, [r7, #4]
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4817      	ldr	r0, [pc, #92]	; (8000ce8 <LogInfo_display+0xec>)
 8000c8c:	f000 f842 	bl	8000d14 <SKprintf>

		SKprintf("%s\r\n", &log.rec[log.wptr].string[0]);
 8000c90:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <LogInfo_display+0xdc>)
 8000c92:	881b      	ldrh	r3, [r3, #0]
 8000c94:	019b      	lsls	r3, r3, #6
 8000c96:	3310      	adds	r3, #16
 8000c98:	4a0f      	ldr	r2, [pc, #60]	; (8000cd8 <LogInfo_display+0xdc>)
 8000c9a:	4413      	add	r3, r2
 8000c9c:	3304      	adds	r3, #4
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4812      	ldr	r0, [pc, #72]	; (8000cec <LogInfo_display+0xf0>)
 8000ca2:	f000 f837 	bl	8000d14 <SKprintf>

		rptr ++;
 8000ca6:	89bb      	ldrh	r3, [r7, #12]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	81bb      	strh	r3, [r7, #12]
		if( rptr > LOG_RECODE_MAX ){
 8000cac:	89bb      	ldrh	r3, [r7, #12]
 8000cae:	2b64      	cmp	r3, #100	; 0x64
 8000cb0:	d901      	bls.n	8000cb6 <LogInfo_display+0xba>
			rptr = 0;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	81bb      	strh	r3, [r7, #12]
		}
		if( log.wptr == rptr ){
 8000cb6:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <LogInfo_display+0xdc>)
 8000cb8:	881b      	ldrh	r3, [r3, #0]
 8000cba:	89ba      	ldrh	r2, [r7, #12]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d006      	beq.n	8000cce <LogInfo_display+0xd2>
	for(i=0; i<LOG_RECODE_MAX; i++){
 8000cc0:	89fb      	ldrh	r3, [r7, #14]
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	81fb      	strh	r3, [r7, #14]
 8000cc6:	89fb      	ldrh	r3, [r7, #14]
 8000cc8:	2b63      	cmp	r3, #99	; 0x63
 8000cca:	d9a0      	bls.n	8000c0e <LogInfo_display+0x12>
			break;
		}
	}
}
 8000ccc:	e000      	b.n	8000cd0 <LogInfo_display+0xd4>
			break;
 8000cce:	bf00      	nop
}
 8000cd0:	bf00      	nop
 8000cd2:	3710      	adds	r7, #16
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	2000013c 	.word	0x2000013c
 8000cdc:	080052ec 	.word	0x080052ec
 8000ce0:	000f4240 	.word	0x000f4240
 8000ce4:	10624dd3 	.word	0x10624dd3
 8000ce8:	080052fc 	.word	0x080052fc
 8000cec:	08005308 	.word	0x08005308

08000cf0 <LogInfo_clear>:
//=============================================================================
//
//
//=============================================================================
void LogInfo_clear(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0

	log.rptr = 0;
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <LogInfo_clear+0x20>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	805a      	strh	r2, [r3, #2]
	log.wptr = 0;
 8000cfa:	4b05      	ldr	r3, [pc, #20]	; (8000d10 <LogInfo_clear+0x20>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	801a      	strh	r2, [r3, #0]
	log.num = 0;
 8000d00:	4b03      	ldr	r3, [pc, #12]	; (8000d10 <LogInfo_clear+0x20>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	809a      	strh	r2, [r3, #4]

}
 8000d06:	bf00      	nop
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	2000013c 	.word	0x2000013c

08000d14 <SKprintf>:
// 総和を求める関数（値は int 型を想定）
// n は、渡す引数の数、それ以降は計算する値です。
//==============================================================================

int	SKprintf (const char *string, ...)
{
 8000d14:	b40f      	push	{r0, r1, r2, r3}
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b090      	sub	sp, #64	; 0x40
 8000d1a:	af00      	add	r7, sp, #0

	// 可変個引数の利用準備
	// -- １… va_list 構造体 ap
	// -- 2 … 可変個引数の直前にある引数

	va_start(ap, string);
 8000d1c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d20:	63bb      	str	r3, [r7, #56]	; 0x38
	vsprintf(buffer, string, ap);
 8000d22:	1d3b      	adds	r3, r7, #4
 8000d24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000d26:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f003 f9db 	bl	80040e4 <vsiprintf>
	va_end(ap);

	for(i=0; i<PRiNTF_BUFFMAX; i++){
 8000d2e:	2300      	movs	r3, #0
 8000d30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000d32:	e008      	b.n	8000d46 <SKprintf+0x32>
		if(buffer[i] == '\0'){
 8000d34:	1d3a      	adds	r2, r7, #4
 8000d36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d38:	4413      	add	r3, r2
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d006      	beq.n	8000d4e <SKprintf+0x3a>
	for(i=0; i<PRiNTF_BUFFMAX; i++){
 8000d40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d42:	3301      	adds	r3, #1
 8000d44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000d46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d48:	2b31      	cmp	r3, #49	; 0x31
 8000d4a:	ddf3      	ble.n	8000d34 <SKprintf+0x20>
 8000d4c:	e000      	b.n	8000d50 <SKprintf+0x3c>
			break;
 8000d4e:	bf00      	nop
		}
	}
	HAL_UART_Transmit(&huart2, buffer, i, HAL_MAX_DELAY);
 8000d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d52:	b29a      	uxth	r2, r3
 8000d54:	1d39      	adds	r1, r7, #4
 8000d56:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5a:	4805      	ldr	r0, [pc, #20]	; (8000d70 <SKprintf+0x5c>)
 8000d5c:	f002 fd2d 	bl	80037ba <HAL_UART_Transmit>
}
 8000d60:	bf00      	nop
 8000d62:	4618      	mov	r0, r3
 8000d64:	3740      	adds	r7, #64	; 0x40
 8000d66:	46bd      	mov	sp, r7
 8000d68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d6c:	b004      	add	sp, #16
 8000d6e:	4770      	bx	lr
 8000d70:	20001aac 	.word	0x20001aac

08000d74 <user_init>:
  * @brief
  * @param  None
  * @retval None
  *******************************************************************************/
void user_init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
	//LED_Flush(0);
	SKprintf("Initialize all configured peripherals\r\n");
 8000d78:	4815      	ldr	r0, [pc, #84]	; (8000dd0 <user_init+0x5c>)
 8000d7a:	f7ff ffcb 	bl	8000d14 <SKprintf>
	SKprintf("******************\r\n");
 8000d7e:	4815      	ldr	r0, [pc, #84]	; (8000dd4 <user_init+0x60>)
 8000d80:	f7ff ffc8 	bl	8000d14 <SKprintf>
	SKprintf("*** UART START ***\r\n");
 8000d84:	4814      	ldr	r0, [pc, #80]	; (8000dd8 <user_init+0x64>)
 8000d86:	f7ff ffc5 	bl	8000d14 <SKprintf>
	SKprintf("******************\r\n");
 8000d8a:	4812      	ldr	r0, [pc, #72]	; (8000dd4 <user_init+0x60>)
 8000d8c:	f7ff ffc2 	bl	8000d14 <SKprintf>


	//-----------------------------------------------
	// Log Timer Counter
	//-----------------------------------------------
	timer.usec = 0;
 8000d90:	4b12      	ldr	r3, [pc, #72]	; (8000ddc <user_init+0x68>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	835a      	strh	r2, [r3, #26]
	timer.msec = 0;
 8000d96:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <user_init+0x68>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	839a      	strh	r2, [r3, #28]
	timer.usec_max = 0;
 8000d9c:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <user_init+0x68>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	83da      	strh	r2, [r3, #30]
	timer.msec_max = 0;
 8000da2:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <user_init+0x68>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	841a      	strh	r2, [r3, #32]
	timer.dt = 0;
 8000da8:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <user_init+0x68>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
	timer.dt_max = 0;
 8000dae:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <user_init+0x68>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	611a      	str	r2, [r3, #16]
	timer.dt_av = 0;
 8000db4:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <user_init+0x68>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	615a      	str	r2, [r3, #20]
	timer.start = 0;
 8000dba:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <user_init+0x68>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	765a      	strb	r2, [r3, #25]
	timer.av_wcnt = 0;
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <user_init+0x68>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	761a      	strb	r2, [r3, #24]

	//-----------------------------------------------
	// Log Info Init
	//-----------------------------------------------
	LogInfo_clear();
 8000dc6:	f7ff ff93 	bl	8000cf0 <LogInfo_clear>


}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	08005310 	.word	0x08005310
 8000dd4:	08005338 	.word	0x08005338
 8000dd8:	08005350 	.word	0x08005350
 8000ddc:	20000118 	.word	0x20000118

08000de0 <user_main_loop>:
  * @brief
  * @param  None
  * @retval None
  *******************************************************************************/
void user_main_loop(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
	debu_main();
 8000de4:	f7ff fbe6 	bl	80005b4 <debu_main>
}
 8000de8:	bf00      	nop
 8000dea:	bd80      	pop	{r7, pc}

08000dec <rtc_display>:

//==============================================================================
//
//==============================================================================
void rtc_display(void)
{
 8000dec:	b5b0      	push	{r4, r5, r7, lr}
 8000dee:	b08a      	sub	sp, #40	; 0x28
 8000df0:	af04      	add	r7, sp, #16
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;

	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000df2:	1d3b      	adds	r3, r7, #4
 8000df4:	2200      	movs	r2, #0
 8000df6:	4619      	mov	r1, r3
 8000df8:	4817      	ldr	r0, [pc, #92]	; (8000e58 <rtc_display+0x6c>)
 8000dfa:	f001 fd6f 	bl	80028dc <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000dfe:	463b      	mov	r3, r7
 8000e00:	2200      	movs	r2, #0
 8000e02:	4619      	mov	r1, r3
 8000e04:	4814      	ldr	r0, [pc, #80]	; (8000e58 <rtc_display+0x6c>)
 8000e06:	f001 fe4b 	bl	8002aa0 <HAL_RTC_GetDate>
	SKprintf("20%02d.%02d.%02d %02d:%02d:%02d\r\n", sDate.Year, sDate.Month, sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000e0a:	78fb      	ldrb	r3, [r7, #3]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	787b      	ldrb	r3, [r7, #1]
 8000e10:	461c      	mov	r4, r3
 8000e12:	78bb      	ldrb	r3, [r7, #2]
 8000e14:	461d      	mov	r5, r3
 8000e16:	793b      	ldrb	r3, [r7, #4]
 8000e18:	797a      	ldrb	r2, [r7, #5]
 8000e1a:	79b9      	ldrb	r1, [r7, #6]
 8000e1c:	9102      	str	r1, [sp, #8]
 8000e1e:	9201      	str	r2, [sp, #4]
 8000e20:	9300      	str	r3, [sp, #0]
 8000e22:	462b      	mov	r3, r5
 8000e24:	4622      	mov	r2, r4
 8000e26:	4601      	mov	r1, r0
 8000e28:	480c      	ldr	r0, [pc, #48]	; (8000e5c <rtc_display+0x70>)
 8000e2a:	f7ff ff73 	bl	8000d14 <SKprintf>
	SKprintf("av=%d max=%d\r\n",timer.dt_av,timer.dt_max);
 8000e2e:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <rtc_display+0x74>)
 8000e30:	695b      	ldr	r3, [r3, #20]
 8000e32:	4a0b      	ldr	r2, [pc, #44]	; (8000e60 <rtc_display+0x74>)
 8000e34:	6912      	ldr	r2, [r2, #16]
 8000e36:	4619      	mov	r1, r3
 8000e38:	480a      	ldr	r0, [pc, #40]	; (8000e64 <rtc_display+0x78>)
 8000e3a:	f7ff ff6b 	bl	8000d14 <SKprintf>
	SKprintf("dt_buf=%d, %d, %d\r\n", timer.dt_buf[0],timer.dt_buf[1],timer.dt_buf[2]);
 8000e3e:	4b08      	ldr	r3, [pc, #32]	; (8000e60 <rtc_display+0x74>)
 8000e40:	6859      	ldr	r1, [r3, #4]
 8000e42:	4b07      	ldr	r3, [pc, #28]	; (8000e60 <rtc_display+0x74>)
 8000e44:	689a      	ldr	r2, [r3, #8]
 8000e46:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <rtc_display+0x74>)
 8000e48:	68db      	ldr	r3, [r3, #12]
 8000e4a:	4807      	ldr	r0, [pc, #28]	; (8000e68 <rtc_display+0x7c>)
 8000e4c:	f7ff ff62 	bl	8000d14 <SKprintf>
}
 8000e50:	bf00      	nop
 8000e52:	3718      	adds	r7, #24
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bdb0      	pop	{r4, r5, r7, pc}
 8000e58:	20001a44 	.word	0x20001a44
 8000e5c:	08005368 	.word	0x08005368
 8000e60:	20000118 	.word	0x20000118
 8000e64:	0800538c 	.word	0x0800538c
 8000e68:	0800539c 	.word	0x0800539c

08000e6c <getch>:
  * @brief
  * @param  None
  * @retval None
  *******************************************************************************/
int getch(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b0c2      	sub	sp, #264	; 0x108
 8000e70:	af00      	add	r7, sp, #0
	uint8_t buffer[256];
	HAL_StatusTypeDef s;
	int rtn = 0;
 8000e72:	2300      	movs	r3, #0
 8000e74:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

	s = HAL_UART_Receive(&huart2, buffer, 1, HAL_MAX_DELAY);
 8000e78:	4639      	mov	r1, r7
 8000e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e7e:	2201      	movs	r2, #1
 8000e80:	480f      	ldr	r0, [pc, #60]	; (8000ec0 <getch+0x54>)
 8000e82:	f002 fd2c 	bl	80038de <HAL_UART_Receive>
 8000e86:	4603      	mov	r3, r0
 8000e88:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103

	switch(s){
 8000e8c:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d005      	beq.n	8000ea0 <getch+0x34>
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	db0b      	blt.n	8000eb0 <getch+0x44>
 8000e98:	3b01      	subs	r3, #1
 8000e9a:	2b02      	cmp	r3, #2
 8000e9c:	d808      	bhi.n	8000eb0 <getch+0x44>
		break;
	case HAL_ERROR:
	case HAL_BUSY:
	case HAL_TIMEOUT:

		break;
 8000e9e:	e007      	b.n	8000eb0 <getch+0x44>
		rtn = (int) buffer[0];
 8000ea0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000ea4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
		break;
 8000eae:	bf00      	nop
	}

	return rtn;
 8000eb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20001aac 	.word	0x20001aac

08000ec4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ec8:	f000 fb50 	bl	800156c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ecc:	f000 f80e 	bl	8000eec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ed0:	f000 f95a 	bl	8001188 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ed4:	f000 f92e 	bl	8001134 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000ed8:	f000 f876 	bl	8000fc8 <MX_RTC_Init>
  MX_TIM1_Init();
 8000edc:	f000 f8d8 	bl	8001090 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  user_init();		// 追加コード
 8000ee0:	f7ff ff48 	bl	8000d74 <user_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 user_main_loop();		// 追加コード
 8000ee4:	f7ff ff7c 	bl	8000de0 <user_main_loop>
 8000ee8:	e7fc      	b.n	8000ee4 <main+0x20>
	...

08000eec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b094      	sub	sp, #80	; 0x50
 8000ef0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ef2:	f107 0320 	add.w	r3, r7, #32
 8000ef6:	2230      	movs	r2, #48	; 0x30
 8000ef8:	2100      	movs	r1, #0
 8000efa:	4618      	mov	r0, r3
 8000efc:	f003 f8a6 	bl	800404c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f00:	f107 030c 	add.w	r3, r7, #12
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f10:	2300      	movs	r3, #0
 8000f12:	60bb      	str	r3, [r7, #8]
 8000f14:	4b2a      	ldr	r3, [pc, #168]	; (8000fc0 <SystemClock_Config+0xd4>)
 8000f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f18:	4a29      	ldr	r2, [pc, #164]	; (8000fc0 <SystemClock_Config+0xd4>)
 8000f1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f20:	4b27      	ldr	r3, [pc, #156]	; (8000fc0 <SystemClock_Config+0xd4>)
 8000f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f28:	60bb      	str	r3, [r7, #8]
 8000f2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	607b      	str	r3, [r7, #4]
 8000f30:	4b24      	ldr	r3, [pc, #144]	; (8000fc4 <SystemClock_Config+0xd8>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f38:	4a22      	ldr	r2, [pc, #136]	; (8000fc4 <SystemClock_Config+0xd8>)
 8000f3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f3e:	6013      	str	r3, [r2, #0]
 8000f40:	4b20      	ldr	r3, [pc, #128]	; (8000fc4 <SystemClock_Config+0xd8>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f48:	607b      	str	r3, [r7, #4]
 8000f4a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000f4c:	2306      	movs	r3, #6
 8000f4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000f50:	2301      	movs	r3, #1
 8000f52:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f54:	2301      	movs	r3, #1
 8000f56:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f58:	2310      	movs	r3, #16
 8000f5a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f60:	2300      	movs	r3, #0
 8000f62:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000f64:	2310      	movs	r3, #16
 8000f66:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f68:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000f6c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f6e:	2304      	movs	r3, #4
 8000f70:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f72:	2307      	movs	r3, #7
 8000f74:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f76:	f107 0320 	add.w	r3, r7, #32
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f000 fe18 	bl	8001bb0 <HAL_RCC_OscConfig>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000f86:	f000 f96d 	bl	8001264 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f8a:	230f      	movs	r3, #15
 8000f8c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f92:	2300      	movs	r3, #0
 8000f94:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f9a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fa0:	f107 030c 	add.w	r3, r7, #12
 8000fa4:	2102      	movs	r1, #2
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f001 f87a 	bl	80020a0 <HAL_RCC_ClockConfig>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000fb2:	f000 f957 	bl	8001264 <Error_Handler>
  }
}
 8000fb6:	bf00      	nop
 8000fb8:	3750      	adds	r7, #80	; 0x50
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40023800 	.word	0x40023800
 8000fc4:	40007000 	.word	0x40007000

08000fc8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000fce:	1d3b      	adds	r3, r7, #4
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000fdc:	2300      	movs	r3, #0
 8000fde:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000fe0:	4b29      	ldr	r3, [pc, #164]	; (8001088 <MX_RTC_Init+0xc0>)
 8000fe2:	4a2a      	ldr	r2, [pc, #168]	; (800108c <MX_RTC_Init+0xc4>)
 8000fe4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000fe6:	4b28      	ldr	r3, [pc, #160]	; (8001088 <MX_RTC_Init+0xc0>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000fec:	4b26      	ldr	r3, [pc, #152]	; (8001088 <MX_RTC_Init+0xc0>)
 8000fee:	227f      	movs	r2, #127	; 0x7f
 8000ff0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000ff2:	4b25      	ldr	r3, [pc, #148]	; (8001088 <MX_RTC_Init+0xc0>)
 8000ff4:	22ff      	movs	r2, #255	; 0xff
 8000ff6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000ff8:	4b23      	ldr	r3, [pc, #140]	; (8001088 <MX_RTC_Init+0xc0>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000ffe:	4b22      	ldr	r3, [pc, #136]	; (8001088 <MX_RTC_Init+0xc0>)
 8001000:	2200      	movs	r2, #0
 8001002:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001004:	4b20      	ldr	r3, [pc, #128]	; (8001088 <MX_RTC_Init+0xc0>)
 8001006:	2200      	movs	r2, #0
 8001008:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800100a:	481f      	ldr	r0, [pc, #124]	; (8001088 <MX_RTC_Init+0xc0>)
 800100c:	f001 fb56 	bl	80026bc <HAL_RTC_Init>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001016:	f000 f925 	bl	8001264 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800101a:	2300      	movs	r3, #0
 800101c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800101e:	2300      	movs	r3, #0
 8001020:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001022:	2300      	movs	r3, #0
 8001024:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001026:	2300      	movs	r3, #0
 8001028:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800102a:	2300      	movs	r3, #0
 800102c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800102e:	1d3b      	adds	r3, r7, #4
 8001030:	2201      	movs	r2, #1
 8001032:	4619      	mov	r1, r3
 8001034:	4814      	ldr	r0, [pc, #80]	; (8001088 <MX_RTC_Init+0xc0>)
 8001036:	f001 fbb7 	bl	80027a8 <HAL_RTC_SetTime>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001040:	f000 f910 	bl	8001264 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001044:	2301      	movs	r3, #1
 8001046:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001048:	2301      	movs	r3, #1
 800104a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 800104c:	2301      	movs	r3, #1
 800104e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001050:	2300      	movs	r3, #0
 8001052:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001054:	463b      	mov	r3, r7
 8001056:	2201      	movs	r2, #1
 8001058:	4619      	mov	r1, r3
 800105a:	480b      	ldr	r0, [pc, #44]	; (8001088 <MX_RTC_Init+0xc0>)
 800105c:	f001 fc9c 	bl	8002998 <HAL_RTC_SetDate>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001066:	f000 f8fd 	bl	8001264 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800106a:	2200      	movs	r2, #0
 800106c:	2100      	movs	r1, #0
 800106e:	4806      	ldr	r0, [pc, #24]	; (8001088 <MX_RTC_Init+0xc0>)
 8001070:	f001 fe22 	bl	8002cb8 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_RTC_Init+0xb6>
  {
    Error_Handler();
 800107a:	f000 f8f3 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800107e:	bf00      	nop
 8001080:	3718      	adds	r7, #24
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20001a44 	.word	0x20001a44
 800108c:	40002800 	.word	0x40002800

08001090 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001096:	f107 0308 	add.w	r3, r7, #8
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010a4:	463b      	mov	r3, r7
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010ac:	4b1f      	ldr	r3, [pc, #124]	; (800112c <MX_TIM1_Init+0x9c>)
 80010ae:	4a20      	ldr	r2, [pc, #128]	; (8001130 <MX_TIM1_Init+0xa0>)
 80010b0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3;
 80010b2:	4b1e      	ldr	r3, [pc, #120]	; (800112c <MX_TIM1_Init+0x9c>)
 80010b4:	2203      	movs	r2, #3
 80010b6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010b8:	4b1c      	ldr	r3, [pc, #112]	; (800112c <MX_TIM1_Init+0x9c>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 209;
 80010be:	4b1b      	ldr	r3, [pc, #108]	; (800112c <MX_TIM1_Init+0x9c>)
 80010c0:	22d1      	movs	r2, #209	; 0xd1
 80010c2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c4:	4b19      	ldr	r3, [pc, #100]	; (800112c <MX_TIM1_Init+0x9c>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010ca:	4b18      	ldr	r3, [pc, #96]	; (800112c <MX_TIM1_Init+0x9c>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010d0:	4b16      	ldr	r3, [pc, #88]	; (800112c <MX_TIM1_Init+0x9c>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010d6:	4815      	ldr	r0, [pc, #84]	; (800112c <MX_TIM1_Init+0x9c>)
 80010d8:	f001 fed2 	bl	8002e80 <HAL_TIM_Base_Init>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 80010e2:	f000 f8bf 	bl	8001264 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010ec:	f107 0308 	add.w	r3, r7, #8
 80010f0:	4619      	mov	r1, r3
 80010f2:	480e      	ldr	r0, [pc, #56]	; (800112c <MX_TIM1_Init+0x9c>)
 80010f4:	f002 f87e 	bl	80031f4 <HAL_TIM_ConfigClockSource>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 80010fe:	f000 f8b1 	bl	8001264 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001102:	2300      	movs	r3, #0
 8001104:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001106:	2300      	movs	r3, #0
 8001108:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800110a:	463b      	mov	r3, r7
 800110c:	4619      	mov	r1, r3
 800110e:	4807      	ldr	r0, [pc, #28]	; (800112c <MX_TIM1_Init+0x9c>)
 8001110:	f002 fa84 	bl	800361c <HAL_TIMEx_MasterConfigSynchronization>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 800111a:	f000 f8a3 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_Base_Start_IT(&htim1);    // 追加コード：タイマー１の動作開始
 800111e:	4803      	ldr	r0, [pc, #12]	; (800112c <MX_TIM1_Init+0x9c>)
 8001120:	f001 fefe 	bl	8002f20 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM1_Init 2 */

}
 8001124:	bf00      	nop
 8001126:	3718      	adds	r7, #24
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20001a64 	.word	0x20001a64
 8001130:	40010000 	.word	0x40010000

08001134 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001138:	4b11      	ldr	r3, [pc, #68]	; (8001180 <MX_USART2_UART_Init+0x4c>)
 800113a:	4a12      	ldr	r2, [pc, #72]	; (8001184 <MX_USART2_UART_Init+0x50>)
 800113c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800113e:	4b10      	ldr	r3, [pc, #64]	; (8001180 <MX_USART2_UART_Init+0x4c>)
 8001140:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001144:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001146:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <MX_USART2_UART_Init+0x4c>)
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800114c:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <MX_USART2_UART_Init+0x4c>)
 800114e:	2200      	movs	r2, #0
 8001150:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001152:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <MX_USART2_UART_Init+0x4c>)
 8001154:	2200      	movs	r2, #0
 8001156:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001158:	4b09      	ldr	r3, [pc, #36]	; (8001180 <MX_USART2_UART_Init+0x4c>)
 800115a:	220c      	movs	r2, #12
 800115c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800115e:	4b08      	ldr	r3, [pc, #32]	; (8001180 <MX_USART2_UART_Init+0x4c>)
 8001160:	2200      	movs	r2, #0
 8001162:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001164:	4b06      	ldr	r3, [pc, #24]	; (8001180 <MX_USART2_UART_Init+0x4c>)
 8001166:	2200      	movs	r2, #0
 8001168:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800116a:	4805      	ldr	r0, [pc, #20]	; (8001180 <MX_USART2_UART_Init+0x4c>)
 800116c:	f002 fad8 	bl	8003720 <HAL_UART_Init>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001176:	f000 f875 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20001aac 	.word	0x20001aac
 8001184:	40004400 	.word	0x40004400

08001188 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08a      	sub	sp, #40	; 0x28
 800118c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118e:	f107 0314 	add.w	r3, r7, #20
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
 800119a:	60da      	str	r2, [r3, #12]
 800119c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	613b      	str	r3, [r7, #16]
 80011a2:	4b2d      	ldr	r3, [pc, #180]	; (8001258 <MX_GPIO_Init+0xd0>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	4a2c      	ldr	r2, [pc, #176]	; (8001258 <MX_GPIO_Init+0xd0>)
 80011a8:	f043 0304 	orr.w	r3, r3, #4
 80011ac:	6313      	str	r3, [r2, #48]	; 0x30
 80011ae:	4b2a      	ldr	r3, [pc, #168]	; (8001258 <MX_GPIO_Init+0xd0>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	f003 0304 	and.w	r3, r3, #4
 80011b6:	613b      	str	r3, [r7, #16]
 80011b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	60fb      	str	r3, [r7, #12]
 80011be:	4b26      	ldr	r3, [pc, #152]	; (8001258 <MX_GPIO_Init+0xd0>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	4a25      	ldr	r2, [pc, #148]	; (8001258 <MX_GPIO_Init+0xd0>)
 80011c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011c8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ca:	4b23      	ldr	r3, [pc, #140]	; (8001258 <MX_GPIO_Init+0xd0>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	60bb      	str	r3, [r7, #8]
 80011da:	4b1f      	ldr	r3, [pc, #124]	; (8001258 <MX_GPIO_Init+0xd0>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	4a1e      	ldr	r2, [pc, #120]	; (8001258 <MX_GPIO_Init+0xd0>)
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	6313      	str	r3, [r2, #48]	; 0x30
 80011e6:	4b1c      	ldr	r3, [pc, #112]	; (8001258 <MX_GPIO_Init+0xd0>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	60bb      	str	r3, [r7, #8]
 80011f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	607b      	str	r3, [r7, #4]
 80011f6:	4b18      	ldr	r3, [pc, #96]	; (8001258 <MX_GPIO_Init+0xd0>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	4a17      	ldr	r2, [pc, #92]	; (8001258 <MX_GPIO_Init+0xd0>)
 80011fc:	f043 0302 	orr.w	r3, r3, #2
 8001200:	6313      	str	r3, [r2, #48]	; 0x30
 8001202:	4b15      	ldr	r3, [pc, #84]	; (8001258 <MX_GPIO_Init+0xd0>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	607b      	str	r3, [r7, #4]
 800120c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800120e:	2200      	movs	r2, #0
 8001210:	2120      	movs	r1, #32
 8001212:	4812      	ldr	r0, [pc, #72]	; (800125c <MX_GPIO_Init+0xd4>)
 8001214:	f000 fcb2 	bl	8001b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001218:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800121c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800121e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001222:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	4619      	mov	r1, r3
 800122e:	480c      	ldr	r0, [pc, #48]	; (8001260 <MX_GPIO_Init+0xd8>)
 8001230:	f000 fb20 	bl	8001874 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001234:	2320      	movs	r3, #32
 8001236:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001238:	2301      	movs	r3, #1
 800123a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001240:	2300      	movs	r3, #0
 8001242:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001244:	f107 0314 	add.w	r3, r7, #20
 8001248:	4619      	mov	r1, r3
 800124a:	4804      	ldr	r0, [pc, #16]	; (800125c <MX_GPIO_Init+0xd4>)
 800124c:	f000 fb12 	bl	8001874 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001250:	bf00      	nop
 8001252:	3728      	adds	r7, #40	; 0x28
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40023800 	.word	0x40023800
 800125c:	40020000 	.word	0x40020000
 8001260:	40020800 	.word	0x40020800

08001264 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001268:	b672      	cpsid	i
}
 800126a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800126c:	e7fe      	b.n	800126c <Error_Handler+0x8>
	...

08001270 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	607b      	str	r3, [r7, #4]
 800127a:	4b10      	ldr	r3, [pc, #64]	; (80012bc <HAL_MspInit+0x4c>)
 800127c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127e:	4a0f      	ldr	r2, [pc, #60]	; (80012bc <HAL_MspInit+0x4c>)
 8001280:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001284:	6453      	str	r3, [r2, #68]	; 0x44
 8001286:	4b0d      	ldr	r3, [pc, #52]	; (80012bc <HAL_MspInit+0x4c>)
 8001288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800128e:	607b      	str	r3, [r7, #4]
 8001290:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	603b      	str	r3, [r7, #0]
 8001296:	4b09      	ldr	r3, [pc, #36]	; (80012bc <HAL_MspInit+0x4c>)
 8001298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129a:	4a08      	ldr	r2, [pc, #32]	; (80012bc <HAL_MspInit+0x4c>)
 800129c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012a0:	6413      	str	r3, [r2, #64]	; 0x40
 80012a2:	4b06      	ldr	r3, [pc, #24]	; (80012bc <HAL_MspInit+0x4c>)
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012aa:	603b      	str	r3, [r7, #0]
 80012ac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012ae:	2007      	movs	r0, #7
 80012b0:	f000 fa9e 	bl	80017f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012b4:	bf00      	nop
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40023800 	.word	0x40023800

080012c0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b088      	sub	sp, #32
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012c8:	f107 030c 	add.w	r3, r7, #12
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a10      	ldr	r2, [pc, #64]	; (8001320 <HAL_RTC_MspInit+0x60>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d119      	bne.n	8001316 <HAL_RTC_MspInit+0x56>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80012e2:	2302      	movs	r3, #2
 80012e4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80012e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012ea:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ec:	f107 030c 	add.w	r3, r7, #12
 80012f0:	4618      	mov	r0, r3
 80012f2:	f001 f8f5 	bl	80024e0 <HAL_RCCEx_PeriphCLKConfig>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80012fc:	f7ff ffb2 	bl	8001264 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001300:	4b08      	ldr	r3, [pc, #32]	; (8001324 <HAL_RTC_MspInit+0x64>)
 8001302:	2201      	movs	r2, #1
 8001304:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001306:	2200      	movs	r2, #0
 8001308:	2100      	movs	r1, #0
 800130a:	2003      	movs	r0, #3
 800130c:	f000 fa7b 	bl	8001806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001310:	2003      	movs	r0, #3
 8001312:	f000 fa94 	bl	800183e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001316:	bf00      	nop
 8001318:	3720      	adds	r7, #32
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40002800 	.word	0x40002800
 8001324:	42470e3c 	.word	0x42470e3c

08001328 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a0e      	ldr	r2, [pc, #56]	; (8001370 <HAL_TIM_Base_MspInit+0x48>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d115      	bne.n	8001366 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	60fb      	str	r3, [r7, #12]
 800133e:	4b0d      	ldr	r3, [pc, #52]	; (8001374 <HAL_TIM_Base_MspInit+0x4c>)
 8001340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001342:	4a0c      	ldr	r2, [pc, #48]	; (8001374 <HAL_TIM_Base_MspInit+0x4c>)
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	6453      	str	r3, [r2, #68]	; 0x44
 800134a:	4b0a      	ldr	r3, [pc, #40]	; (8001374 <HAL_TIM_Base_MspInit+0x4c>)
 800134c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001356:	2200      	movs	r2, #0
 8001358:	2100      	movs	r1, #0
 800135a:	2019      	movs	r0, #25
 800135c:	f000 fa53 	bl	8001806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001360:	2019      	movs	r0, #25
 8001362:	f000 fa6c 	bl	800183e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001366:	bf00      	nop
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40010000 	.word	0x40010000
 8001374:	40023800 	.word	0x40023800

08001378 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08a      	sub	sp, #40	; 0x28
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001380:	f107 0314 	add.w	r3, r7, #20
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
 800138e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a19      	ldr	r2, [pc, #100]	; (80013fc <HAL_UART_MspInit+0x84>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d12b      	bne.n	80013f2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	613b      	str	r3, [r7, #16]
 800139e:	4b18      	ldr	r3, [pc, #96]	; (8001400 <HAL_UART_MspInit+0x88>)
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	4a17      	ldr	r2, [pc, #92]	; (8001400 <HAL_UART_MspInit+0x88>)
 80013a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013a8:	6413      	str	r3, [r2, #64]	; 0x40
 80013aa:	4b15      	ldr	r3, [pc, #84]	; (8001400 <HAL_UART_MspInit+0x88>)
 80013ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b2:	613b      	str	r3, [r7, #16]
 80013b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	4b11      	ldr	r3, [pc, #68]	; (8001400 <HAL_UART_MspInit+0x88>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	4a10      	ldr	r2, [pc, #64]	; (8001400 <HAL_UART_MspInit+0x88>)
 80013c0:	f043 0301 	orr.w	r3, r3, #1
 80013c4:	6313      	str	r3, [r2, #48]	; 0x30
 80013c6:	4b0e      	ldr	r3, [pc, #56]	; (8001400 <HAL_UART_MspInit+0x88>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013d2:	230c      	movs	r3, #12
 80013d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d6:	2302      	movs	r3, #2
 80013d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013de:	2300      	movs	r3, #0
 80013e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013e2:	2307      	movs	r3, #7
 80013e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e6:	f107 0314 	add.w	r3, r7, #20
 80013ea:	4619      	mov	r1, r3
 80013ec:	4805      	ldr	r0, [pc, #20]	; (8001404 <HAL_UART_MspInit+0x8c>)
 80013ee:	f000 fa41 	bl	8001874 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013f2:	bf00      	nop
 80013f4:	3728      	adds	r7, #40	; 0x28
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40004400 	.word	0x40004400
 8001400:	40023800 	.word	0x40023800
 8001404:	40020000 	.word	0x40020000

08001408 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800140c:	e7fe      	b.n	800140c <NMI_Handler+0x4>

0800140e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001412:	e7fe      	b.n	8001412 <HardFault_Handler+0x4>

08001414 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001418:	e7fe      	b.n	8001418 <MemManage_Handler+0x4>

0800141a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800141a:	b480      	push	{r7}
 800141c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800141e:	e7fe      	b.n	800141e <BusFault_Handler+0x4>

08001420 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001424:	e7fe      	b.n	8001424 <UsageFault_Handler+0x4>

08001426 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001426:	b480      	push	{r7}
 8001428:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr

08001442 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001442:	b480      	push	{r7}
 8001444:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001454:	f000 f8dc 	bl	8001610 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001458:	bf00      	nop
 800145a:	bd80      	pop	{r7, pc}

0800145c <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 22.
  */
void RTC_WKUP_IRQHandler(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001460:	4802      	ldr	r0, [pc, #8]	; (800146c <RTC_WKUP_IRQHandler+0x10>)
 8001462:	f001 fce9 	bl	8002e38 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20001a44 	.word	0x20001a44

08001470 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001474:	4803      	ldr	r0, [pc, #12]	; (8001484 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8001476:	f001 fdb5 	bl	8002fe4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  usr_isr_tim1_up();	// 追加コード
 800147a:	f7ff fbb1 	bl	8000be0 <usr_isr_tim1_up>
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20001a64 	.word	0x20001a64

08001488 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001490:	4a14      	ldr	r2, [pc, #80]	; (80014e4 <_sbrk+0x5c>)
 8001492:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <_sbrk+0x60>)
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800149c:	4b13      	ldr	r3, [pc, #76]	; (80014ec <_sbrk+0x64>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d102      	bne.n	80014aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014a4:	4b11      	ldr	r3, [pc, #68]	; (80014ec <_sbrk+0x64>)
 80014a6:	4a12      	ldr	r2, [pc, #72]	; (80014f0 <_sbrk+0x68>)
 80014a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014aa:	4b10      	ldr	r3, [pc, #64]	; (80014ec <_sbrk+0x64>)
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4413      	add	r3, r2
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d207      	bcs.n	80014c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014b8:	f002 fd96 	bl	8003fe8 <__errno>
 80014bc:	4603      	mov	r3, r0
 80014be:	220c      	movs	r2, #12
 80014c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014c2:	f04f 33ff 	mov.w	r3, #4294967295
 80014c6:	e009      	b.n	80014dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014c8:	4b08      	ldr	r3, [pc, #32]	; (80014ec <_sbrk+0x64>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ce:	4b07      	ldr	r3, [pc, #28]	; (80014ec <_sbrk+0x64>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4413      	add	r3, r2
 80014d6:	4a05      	ldr	r2, [pc, #20]	; (80014ec <_sbrk+0x64>)
 80014d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014da:	68fb      	ldr	r3, [r7, #12]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3718      	adds	r7, #24
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20018000 	.word	0x20018000
 80014e8:	00000400 	.word	0x00000400
 80014ec:	20001af0 	.word	0x20001af0
 80014f0:	20001b08 	.word	0x20001b08

080014f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014f8:	4b06      	ldr	r3, [pc, #24]	; (8001514 <SystemInit+0x20>)
 80014fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014fe:	4a05      	ldr	r2, [pc, #20]	; (8001514 <SystemInit+0x20>)
 8001500:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001504:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001518:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001550 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800151c:	480d      	ldr	r0, [pc, #52]	; (8001554 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800151e:	490e      	ldr	r1, [pc, #56]	; (8001558 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001520:	4a0e      	ldr	r2, [pc, #56]	; (800155c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001522:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001524:	e002      	b.n	800152c <LoopCopyDataInit>

08001526 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001526:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001528:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800152a:	3304      	adds	r3, #4

0800152c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800152c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800152e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001530:	d3f9      	bcc.n	8001526 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001532:	4a0b      	ldr	r2, [pc, #44]	; (8001560 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001534:	4c0b      	ldr	r4, [pc, #44]	; (8001564 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001536:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001538:	e001      	b.n	800153e <LoopFillZerobss>

0800153a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800153a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800153c:	3204      	adds	r2, #4

0800153e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800153e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001540:	d3fb      	bcc.n	800153a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001542:	f7ff ffd7 	bl	80014f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001546:	f002 fd55 	bl	8003ff4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800154a:	f7ff fcbb 	bl	8000ec4 <main>
  bx  lr    
 800154e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001550:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001554:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001558:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800155c:	0800571c 	.word	0x0800571c
  ldr r2, =_sbss
 8001560:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001564:	20001b08 	.word	0x20001b08

08001568 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001568:	e7fe      	b.n	8001568 <ADC_IRQHandler>
	...

0800156c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001570:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <HAL_Init+0x40>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a0d      	ldr	r2, [pc, #52]	; (80015ac <HAL_Init+0x40>)
 8001576:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800157a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800157c:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <HAL_Init+0x40>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a0a      	ldr	r2, [pc, #40]	; (80015ac <HAL_Init+0x40>)
 8001582:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001586:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001588:	4b08      	ldr	r3, [pc, #32]	; (80015ac <HAL_Init+0x40>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a07      	ldr	r2, [pc, #28]	; (80015ac <HAL_Init+0x40>)
 800158e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001592:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001594:	2003      	movs	r0, #3
 8001596:	f000 f92b 	bl	80017f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800159a:	2000      	movs	r0, #0
 800159c:	f000 f808 	bl	80015b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015a0:	f7ff fe66 	bl	8001270 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40023c00 	.word	0x40023c00

080015b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015b8:	4b12      	ldr	r3, [pc, #72]	; (8001604 <HAL_InitTick+0x54>)
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	4b12      	ldr	r3, [pc, #72]	; (8001608 <HAL_InitTick+0x58>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	4619      	mov	r1, r3
 80015c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ce:	4618      	mov	r0, r3
 80015d0:	f000 f943 	bl	800185a <HAL_SYSTICK_Config>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e00e      	b.n	80015fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2b0f      	cmp	r3, #15
 80015e2:	d80a      	bhi.n	80015fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015e4:	2200      	movs	r2, #0
 80015e6:	6879      	ldr	r1, [r7, #4]
 80015e8:	f04f 30ff 	mov.w	r0, #4294967295
 80015ec:	f000 f90b 	bl	8001806 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015f0:	4a06      	ldr	r2, [pc, #24]	; (800160c <HAL_InitTick+0x5c>)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015f6:	2300      	movs	r3, #0
 80015f8:	e000      	b.n	80015fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	20000000 	.word	0x20000000
 8001608:	20000008 	.word	0x20000008
 800160c:	20000004 	.word	0x20000004

08001610 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001614:	4b06      	ldr	r3, [pc, #24]	; (8001630 <HAL_IncTick+0x20>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	461a      	mov	r2, r3
 800161a:	4b06      	ldr	r3, [pc, #24]	; (8001634 <HAL_IncTick+0x24>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4413      	add	r3, r2
 8001620:	4a04      	ldr	r2, [pc, #16]	; (8001634 <HAL_IncTick+0x24>)
 8001622:	6013      	str	r3, [r2, #0]
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	20000008 	.word	0x20000008
 8001634:	20001af4 	.word	0x20001af4

08001638 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  return uwTick;
 800163c:	4b03      	ldr	r3, [pc, #12]	; (800164c <HAL_GetTick+0x14>)
 800163e:	681b      	ldr	r3, [r3, #0]
}
 8001640:	4618      	mov	r0, r3
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	20001af4 	.word	0x20001af4

08001650 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f003 0307 	and.w	r3, r3, #7
 800165e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001660:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <__NVIC_SetPriorityGrouping+0x44>)
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001666:	68ba      	ldr	r2, [r7, #8]
 8001668:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800166c:	4013      	ands	r3, r2
 800166e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001678:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800167c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001680:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001682:	4a04      	ldr	r2, [pc, #16]	; (8001694 <__NVIC_SetPriorityGrouping+0x44>)
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	60d3      	str	r3, [r2, #12]
}
 8001688:	bf00      	nop
 800168a:	3714      	adds	r7, #20
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800169c:	4b04      	ldr	r3, [pc, #16]	; (80016b0 <__NVIC_GetPriorityGrouping+0x18>)
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	0a1b      	lsrs	r3, r3, #8
 80016a2:	f003 0307 	and.w	r3, r3, #7
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	e000ed00 	.word	0xe000ed00

080016b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	db0b      	blt.n	80016de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016c6:	79fb      	ldrb	r3, [r7, #7]
 80016c8:	f003 021f 	and.w	r2, r3, #31
 80016cc:	4907      	ldr	r1, [pc, #28]	; (80016ec <__NVIC_EnableIRQ+0x38>)
 80016ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d2:	095b      	lsrs	r3, r3, #5
 80016d4:	2001      	movs	r0, #1
 80016d6:	fa00 f202 	lsl.w	r2, r0, r2
 80016da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016de:	bf00      	nop
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	e000e100 	.word	0xe000e100

080016f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	6039      	str	r1, [r7, #0]
 80016fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001700:	2b00      	cmp	r3, #0
 8001702:	db0a      	blt.n	800171a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	b2da      	uxtb	r2, r3
 8001708:	490c      	ldr	r1, [pc, #48]	; (800173c <__NVIC_SetPriority+0x4c>)
 800170a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170e:	0112      	lsls	r2, r2, #4
 8001710:	b2d2      	uxtb	r2, r2
 8001712:	440b      	add	r3, r1
 8001714:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001718:	e00a      	b.n	8001730 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	b2da      	uxtb	r2, r3
 800171e:	4908      	ldr	r1, [pc, #32]	; (8001740 <__NVIC_SetPriority+0x50>)
 8001720:	79fb      	ldrb	r3, [r7, #7]
 8001722:	f003 030f 	and.w	r3, r3, #15
 8001726:	3b04      	subs	r3, #4
 8001728:	0112      	lsls	r2, r2, #4
 800172a:	b2d2      	uxtb	r2, r2
 800172c:	440b      	add	r3, r1
 800172e:	761a      	strb	r2, [r3, #24]
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	e000e100 	.word	0xe000e100
 8001740:	e000ed00 	.word	0xe000ed00

08001744 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001744:	b480      	push	{r7}
 8001746:	b089      	sub	sp, #36	; 0x24
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	f1c3 0307 	rsb	r3, r3, #7
 800175e:	2b04      	cmp	r3, #4
 8001760:	bf28      	it	cs
 8001762:	2304      	movcs	r3, #4
 8001764:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	3304      	adds	r3, #4
 800176a:	2b06      	cmp	r3, #6
 800176c:	d902      	bls.n	8001774 <NVIC_EncodePriority+0x30>
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	3b03      	subs	r3, #3
 8001772:	e000      	b.n	8001776 <NVIC_EncodePriority+0x32>
 8001774:	2300      	movs	r3, #0
 8001776:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001778:	f04f 32ff 	mov.w	r2, #4294967295
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	43da      	mvns	r2, r3
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	401a      	ands	r2, r3
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800178c:	f04f 31ff 	mov.w	r1, #4294967295
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	fa01 f303 	lsl.w	r3, r1, r3
 8001796:	43d9      	mvns	r1, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800179c:	4313      	orrs	r3, r2
         );
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3724      	adds	r7, #36	; 0x24
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
	...

080017ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	3b01      	subs	r3, #1
 80017b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017bc:	d301      	bcc.n	80017c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017be:	2301      	movs	r3, #1
 80017c0:	e00f      	b.n	80017e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017c2:	4a0a      	ldr	r2, [pc, #40]	; (80017ec <SysTick_Config+0x40>)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	3b01      	subs	r3, #1
 80017c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ca:	210f      	movs	r1, #15
 80017cc:	f04f 30ff 	mov.w	r0, #4294967295
 80017d0:	f7ff ff8e 	bl	80016f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017d4:	4b05      	ldr	r3, [pc, #20]	; (80017ec <SysTick_Config+0x40>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017da:	4b04      	ldr	r3, [pc, #16]	; (80017ec <SysTick_Config+0x40>)
 80017dc:	2207      	movs	r2, #7
 80017de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	e000e010 	.word	0xe000e010

080017f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f7ff ff29 	bl	8001650 <__NVIC_SetPriorityGrouping>
}
 80017fe:	bf00      	nop
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001806:	b580      	push	{r7, lr}
 8001808:	b086      	sub	sp, #24
 800180a:	af00      	add	r7, sp, #0
 800180c:	4603      	mov	r3, r0
 800180e:	60b9      	str	r1, [r7, #8]
 8001810:	607a      	str	r2, [r7, #4]
 8001812:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001814:	2300      	movs	r3, #0
 8001816:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001818:	f7ff ff3e 	bl	8001698 <__NVIC_GetPriorityGrouping>
 800181c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	68b9      	ldr	r1, [r7, #8]
 8001822:	6978      	ldr	r0, [r7, #20]
 8001824:	f7ff ff8e 	bl	8001744 <NVIC_EncodePriority>
 8001828:	4602      	mov	r2, r0
 800182a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800182e:	4611      	mov	r1, r2
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff ff5d 	bl	80016f0 <__NVIC_SetPriority>
}
 8001836:	bf00      	nop
 8001838:	3718      	adds	r7, #24
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b082      	sub	sp, #8
 8001842:	af00      	add	r7, sp, #0
 8001844:	4603      	mov	r3, r0
 8001846:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff ff31 	bl	80016b4 <__NVIC_EnableIRQ>
}
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b082      	sub	sp, #8
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f7ff ffa2 	bl	80017ac <SysTick_Config>
 8001868:	4603      	mov	r3, r0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
	...

08001874 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001874:	b480      	push	{r7}
 8001876:	b089      	sub	sp, #36	; 0x24
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800187e:	2300      	movs	r3, #0
 8001880:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001882:	2300      	movs	r3, #0
 8001884:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001886:	2300      	movs	r3, #0
 8001888:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800188a:	2300      	movs	r3, #0
 800188c:	61fb      	str	r3, [r7, #28]
 800188e:	e159      	b.n	8001b44 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001890:	2201      	movs	r2, #1
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	697a      	ldr	r2, [r7, #20]
 80018a0:	4013      	ands	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018a4:	693a      	ldr	r2, [r7, #16]
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	f040 8148 	bne.w	8001b3e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f003 0303 	and.w	r3, r3, #3
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d005      	beq.n	80018c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d130      	bne.n	8001928 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	2203      	movs	r2, #3
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	43db      	mvns	r3, r3
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	4013      	ands	r3, r2
 80018dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	68da      	ldr	r2, [r3, #12]
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018fc:	2201      	movs	r2, #1
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	43db      	mvns	r3, r3
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	4013      	ands	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	091b      	lsrs	r3, r3, #4
 8001912:	f003 0201 	and.w	r2, r3, #1
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	4313      	orrs	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f003 0303 	and.w	r3, r3, #3
 8001930:	2b03      	cmp	r3, #3
 8001932:	d017      	beq.n	8001964 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	2203      	movs	r2, #3
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	43db      	mvns	r3, r3
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	4013      	ands	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	689a      	ldr	r2, [r3, #8]
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	4313      	orrs	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f003 0303 	and.w	r3, r3, #3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d123      	bne.n	80019b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	08da      	lsrs	r2, r3, #3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	3208      	adds	r2, #8
 8001978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800197c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	f003 0307 	and.w	r3, r3, #7
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	220f      	movs	r2, #15
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	43db      	mvns	r3, r3
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	4013      	ands	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	691a      	ldr	r2, [r3, #16]
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	08da      	lsrs	r2, r3, #3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	3208      	adds	r2, #8
 80019b2:	69b9      	ldr	r1, [r7, #24]
 80019b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	2203      	movs	r2, #3
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	43db      	mvns	r3, r3
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	4013      	ands	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f003 0203 	and.w	r2, r3, #3
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f000 80a2 	beq.w	8001b3e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	4b57      	ldr	r3, [pc, #348]	; (8001b5c <HAL_GPIO_Init+0x2e8>)
 8001a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a02:	4a56      	ldr	r2, [pc, #344]	; (8001b5c <HAL_GPIO_Init+0x2e8>)
 8001a04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a08:	6453      	str	r3, [r2, #68]	; 0x44
 8001a0a:	4b54      	ldr	r3, [pc, #336]	; (8001b5c <HAL_GPIO_Init+0x2e8>)
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a16:	4a52      	ldr	r2, [pc, #328]	; (8001b60 <HAL_GPIO_Init+0x2ec>)
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	089b      	lsrs	r3, r3, #2
 8001a1c:	3302      	adds	r3, #2
 8001a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	f003 0303 	and.w	r3, r3, #3
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	220f      	movs	r2, #15
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	43db      	mvns	r3, r3
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4013      	ands	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a49      	ldr	r2, [pc, #292]	; (8001b64 <HAL_GPIO_Init+0x2f0>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d019      	beq.n	8001a76 <HAL_GPIO_Init+0x202>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a48      	ldr	r2, [pc, #288]	; (8001b68 <HAL_GPIO_Init+0x2f4>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d013      	beq.n	8001a72 <HAL_GPIO_Init+0x1fe>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a47      	ldr	r2, [pc, #284]	; (8001b6c <HAL_GPIO_Init+0x2f8>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d00d      	beq.n	8001a6e <HAL_GPIO_Init+0x1fa>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a46      	ldr	r2, [pc, #280]	; (8001b70 <HAL_GPIO_Init+0x2fc>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d007      	beq.n	8001a6a <HAL_GPIO_Init+0x1f6>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a45      	ldr	r2, [pc, #276]	; (8001b74 <HAL_GPIO_Init+0x300>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d101      	bne.n	8001a66 <HAL_GPIO_Init+0x1f2>
 8001a62:	2304      	movs	r3, #4
 8001a64:	e008      	b.n	8001a78 <HAL_GPIO_Init+0x204>
 8001a66:	2307      	movs	r3, #7
 8001a68:	e006      	b.n	8001a78 <HAL_GPIO_Init+0x204>
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e004      	b.n	8001a78 <HAL_GPIO_Init+0x204>
 8001a6e:	2302      	movs	r3, #2
 8001a70:	e002      	b.n	8001a78 <HAL_GPIO_Init+0x204>
 8001a72:	2301      	movs	r3, #1
 8001a74:	e000      	b.n	8001a78 <HAL_GPIO_Init+0x204>
 8001a76:	2300      	movs	r3, #0
 8001a78:	69fa      	ldr	r2, [r7, #28]
 8001a7a:	f002 0203 	and.w	r2, r2, #3
 8001a7e:	0092      	lsls	r2, r2, #2
 8001a80:	4093      	lsls	r3, r2
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a88:	4935      	ldr	r1, [pc, #212]	; (8001b60 <HAL_GPIO_Init+0x2ec>)
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	089b      	lsrs	r3, r3, #2
 8001a8e:	3302      	adds	r3, #2
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a96:	4b38      	ldr	r3, [pc, #224]	; (8001b78 <HAL_GPIO_Init+0x304>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	43db      	mvns	r3, r3
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d003      	beq.n	8001aba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001aba:	4a2f      	ldr	r2, [pc, #188]	; (8001b78 <HAL_GPIO_Init+0x304>)
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ac0:	4b2d      	ldr	r3, [pc, #180]	; (8001b78 <HAL_GPIO_Init+0x304>)
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	4013      	ands	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d003      	beq.n	8001ae4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ae4:	4a24      	ldr	r2, [pc, #144]	; (8001b78 <HAL_GPIO_Init+0x304>)
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001aea:	4b23      	ldr	r3, [pc, #140]	; (8001b78 <HAL_GPIO_Init+0x304>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	43db      	mvns	r3, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4013      	ands	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d003      	beq.n	8001b0e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b0e:	4a1a      	ldr	r2, [pc, #104]	; (8001b78 <HAL_GPIO_Init+0x304>)
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b14:	4b18      	ldr	r3, [pc, #96]	; (8001b78 <HAL_GPIO_Init+0x304>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	4013      	ands	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d003      	beq.n	8001b38 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b38:	4a0f      	ldr	r2, [pc, #60]	; (8001b78 <HAL_GPIO_Init+0x304>)
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	3301      	adds	r3, #1
 8001b42:	61fb      	str	r3, [r7, #28]
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	2b0f      	cmp	r3, #15
 8001b48:	f67f aea2 	bls.w	8001890 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b4c:	bf00      	nop
 8001b4e:	bf00      	nop
 8001b50:	3724      	adds	r7, #36	; 0x24
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	40013800 	.word	0x40013800
 8001b64:	40020000 	.word	0x40020000
 8001b68:	40020400 	.word	0x40020400
 8001b6c:	40020800 	.word	0x40020800
 8001b70:	40020c00 	.word	0x40020c00
 8001b74:	40021000 	.word	0x40021000
 8001b78:	40013c00 	.word	0x40013c00

08001b7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	460b      	mov	r3, r1
 8001b86:	807b      	strh	r3, [r7, #2]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b8c:	787b      	ldrb	r3, [r7, #1]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d003      	beq.n	8001b9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b92:	887a      	ldrh	r2, [r7, #2]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b98:	e003      	b.n	8001ba2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b9a:	887b      	ldrh	r3, [r7, #2]
 8001b9c:	041a      	lsls	r2, r3, #16
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	619a      	str	r2, [r3, #24]
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
	...

08001bb0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d101      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e267      	b.n	8002092 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d075      	beq.n	8001cba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bce:	4b88      	ldr	r3, [pc, #544]	; (8001df0 <HAL_RCC_OscConfig+0x240>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f003 030c 	and.w	r3, r3, #12
 8001bd6:	2b04      	cmp	r3, #4
 8001bd8:	d00c      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bda:	4b85      	ldr	r3, [pc, #532]	; (8001df0 <HAL_RCC_OscConfig+0x240>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001be2:	2b08      	cmp	r3, #8
 8001be4:	d112      	bne.n	8001c0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001be6:	4b82      	ldr	r3, [pc, #520]	; (8001df0 <HAL_RCC_OscConfig+0x240>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bf2:	d10b      	bne.n	8001c0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf4:	4b7e      	ldr	r3, [pc, #504]	; (8001df0 <HAL_RCC_OscConfig+0x240>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d05b      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x108>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d157      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e242      	b.n	8002092 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c14:	d106      	bne.n	8001c24 <HAL_RCC_OscConfig+0x74>
 8001c16:	4b76      	ldr	r3, [pc, #472]	; (8001df0 <HAL_RCC_OscConfig+0x240>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a75      	ldr	r2, [pc, #468]	; (8001df0 <HAL_RCC_OscConfig+0x240>)
 8001c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c20:	6013      	str	r3, [r2, #0]
 8001c22:	e01d      	b.n	8001c60 <HAL_RCC_OscConfig+0xb0>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c2c:	d10c      	bne.n	8001c48 <HAL_RCC_OscConfig+0x98>
 8001c2e:	4b70      	ldr	r3, [pc, #448]	; (8001df0 <HAL_RCC_OscConfig+0x240>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a6f      	ldr	r2, [pc, #444]	; (8001df0 <HAL_RCC_OscConfig+0x240>)
 8001c34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c38:	6013      	str	r3, [r2, #0]
 8001c3a:	4b6d      	ldr	r3, [pc, #436]	; (8001df0 <HAL_RCC_OscConfig+0x240>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a6c      	ldr	r2, [pc, #432]	; (8001df0 <HAL_RCC_OscConfig+0x240>)
 8001c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c44:	6013      	str	r3, [r2, #0]
 8001c46:	e00b      	b.n	8001c60 <HAL_RCC_OscConfig+0xb0>
 8001c48:	4b69      	ldr	r3, [pc, #420]	; (8001df0 <HAL_RCC_OscConfig+0x240>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a68      	ldr	r2, [pc, #416]	; (8001df0 <HAL_RCC_OscConfig+0x240>)
 8001c4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c52:	6013      	str	r3, [r2, #0]
 8001c54:	4b66      	ldr	r3, [pc, #408]	; (8001df0 <HAL_RCC_OscConfig+0x240>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a65      	ldr	r2, [pc, #404]	; (8001df0 <HAL_RCC_OscConfig+0x240>)
 8001c5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d013      	beq.n	8001c90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c68:	f7ff fce6 	bl	8001638 <HAL_GetTick>
 8001c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c70:	f7ff fce2 	bl	8001638 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b64      	cmp	r3, #100	; 0x64
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e207      	b.n	8002092 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c82:	4b5b      	ldr	r3, [pc, #364]	; (8001df0 <HAL_RCC_OscConfig+0x240>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d0f0      	beq.n	8001c70 <HAL_RCC_OscConfig+0xc0>
 8001c8e:	e014      	b.n	8001cba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c90:	f7ff fcd2 	bl	8001638 <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c98:	f7ff fcce 	bl	8001638 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b64      	cmp	r3, #100	; 0x64
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e1f3      	b.n	8002092 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001caa:	4b51      	ldr	r3, [pc, #324]	; (8001df0 <HAL_RCC_OscConfig+0x240>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1f0      	bne.n	8001c98 <HAL_RCC_OscConfig+0xe8>
 8001cb6:	e000      	b.n	8001cba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d063      	beq.n	8001d8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cc6:	4b4a      	ldr	r3, [pc, #296]	; (8001df0 <HAL_RCC_OscConfig+0x240>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f003 030c 	and.w	r3, r3, #12
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d00b      	beq.n	8001cea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cd2:	4b47      	ldr	r3, [pc, #284]	; (8001df0 <HAL_RCC_OscConfig+0x240>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cda:	2b08      	cmp	r3, #8
 8001cdc:	d11c      	bne.n	8001d18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cde:	4b44      	ldr	r3, [pc, #272]	; (8001df0 <HAL_RCC_OscConfig+0x240>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d116      	bne.n	8001d18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cea:	4b41      	ldr	r3, [pc, #260]	; (8001df0 <HAL_RCC_OscConfig+0x240>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d005      	beq.n	8001d02 <HAL_RCC_OscConfig+0x152>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d001      	beq.n	8001d02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e1c7      	b.n	8002092 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d02:	4b3b      	ldr	r3, [pc, #236]	; (8001df0 <HAL_RCC_OscConfig+0x240>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	4937      	ldr	r1, [pc, #220]	; (8001df0 <HAL_RCC_OscConfig+0x240>)
 8001d12:	4313      	orrs	r3, r2
 8001d14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d16:	e03a      	b.n	8001d8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d020      	beq.n	8001d62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d20:	4b34      	ldr	r3, [pc, #208]	; (8001df4 <HAL_RCC_OscConfig+0x244>)
 8001d22:	2201      	movs	r2, #1
 8001d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d26:	f7ff fc87 	bl	8001638 <HAL_GetTick>
 8001d2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d2c:	e008      	b.n	8001d40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d2e:	f7ff fc83 	bl	8001638 <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e1a8      	b.n	8002092 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d40:	4b2b      	ldr	r3, [pc, #172]	; (8001df0 <HAL_RCC_OscConfig+0x240>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0302 	and.w	r3, r3, #2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d0f0      	beq.n	8001d2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d4c:	4b28      	ldr	r3, [pc, #160]	; (8001df0 <HAL_RCC_OscConfig+0x240>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	691b      	ldr	r3, [r3, #16]
 8001d58:	00db      	lsls	r3, r3, #3
 8001d5a:	4925      	ldr	r1, [pc, #148]	; (8001df0 <HAL_RCC_OscConfig+0x240>)
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	600b      	str	r3, [r1, #0]
 8001d60:	e015      	b.n	8001d8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d62:	4b24      	ldr	r3, [pc, #144]	; (8001df4 <HAL_RCC_OscConfig+0x244>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d68:	f7ff fc66 	bl	8001638 <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d70:	f7ff fc62 	bl	8001638 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e187      	b.n	8002092 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d82:	4b1b      	ldr	r3, [pc, #108]	; (8001df0 <HAL_RCC_OscConfig+0x240>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1f0      	bne.n	8001d70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0308 	and.w	r3, r3, #8
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d036      	beq.n	8001e08 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d016      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001da2:	4b15      	ldr	r3, [pc, #84]	; (8001df8 <HAL_RCC_OscConfig+0x248>)
 8001da4:	2201      	movs	r2, #1
 8001da6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001da8:	f7ff fc46 	bl	8001638 <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001db0:	f7ff fc42 	bl	8001638 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e167      	b.n	8002092 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dc2:	4b0b      	ldr	r3, [pc, #44]	; (8001df0 <HAL_RCC_OscConfig+0x240>)
 8001dc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d0f0      	beq.n	8001db0 <HAL_RCC_OscConfig+0x200>
 8001dce:	e01b      	b.n	8001e08 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dd0:	4b09      	ldr	r3, [pc, #36]	; (8001df8 <HAL_RCC_OscConfig+0x248>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dd6:	f7ff fc2f 	bl	8001638 <HAL_GetTick>
 8001dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ddc:	e00e      	b.n	8001dfc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dde:	f7ff fc2b 	bl	8001638 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d907      	bls.n	8001dfc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e150      	b.n	8002092 <HAL_RCC_OscConfig+0x4e2>
 8001df0:	40023800 	.word	0x40023800
 8001df4:	42470000 	.word	0x42470000
 8001df8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dfc:	4b88      	ldr	r3, [pc, #544]	; (8002020 <HAL_RCC_OscConfig+0x470>)
 8001dfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e00:	f003 0302 	and.w	r3, r3, #2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d1ea      	bne.n	8001dde <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0304 	and.w	r3, r3, #4
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	f000 8097 	beq.w	8001f44 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e16:	2300      	movs	r3, #0
 8001e18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e1a:	4b81      	ldr	r3, [pc, #516]	; (8002020 <HAL_RCC_OscConfig+0x470>)
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d10f      	bne.n	8001e46 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e26:	2300      	movs	r3, #0
 8001e28:	60bb      	str	r3, [r7, #8]
 8001e2a:	4b7d      	ldr	r3, [pc, #500]	; (8002020 <HAL_RCC_OscConfig+0x470>)
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2e:	4a7c      	ldr	r2, [pc, #496]	; (8002020 <HAL_RCC_OscConfig+0x470>)
 8001e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e34:	6413      	str	r3, [r2, #64]	; 0x40
 8001e36:	4b7a      	ldr	r3, [pc, #488]	; (8002020 <HAL_RCC_OscConfig+0x470>)
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e3e:	60bb      	str	r3, [r7, #8]
 8001e40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e42:	2301      	movs	r3, #1
 8001e44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e46:	4b77      	ldr	r3, [pc, #476]	; (8002024 <HAL_RCC_OscConfig+0x474>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d118      	bne.n	8001e84 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e52:	4b74      	ldr	r3, [pc, #464]	; (8002024 <HAL_RCC_OscConfig+0x474>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a73      	ldr	r2, [pc, #460]	; (8002024 <HAL_RCC_OscConfig+0x474>)
 8001e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e5e:	f7ff fbeb 	bl	8001638 <HAL_GetTick>
 8001e62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e64:	e008      	b.n	8001e78 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e66:	f7ff fbe7 	bl	8001638 <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d901      	bls.n	8001e78 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e10c      	b.n	8002092 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e78:	4b6a      	ldr	r3, [pc, #424]	; (8002024 <HAL_RCC_OscConfig+0x474>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d0f0      	beq.n	8001e66 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d106      	bne.n	8001e9a <HAL_RCC_OscConfig+0x2ea>
 8001e8c:	4b64      	ldr	r3, [pc, #400]	; (8002020 <HAL_RCC_OscConfig+0x470>)
 8001e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e90:	4a63      	ldr	r2, [pc, #396]	; (8002020 <HAL_RCC_OscConfig+0x470>)
 8001e92:	f043 0301 	orr.w	r3, r3, #1
 8001e96:	6713      	str	r3, [r2, #112]	; 0x70
 8001e98:	e01c      	b.n	8001ed4 <HAL_RCC_OscConfig+0x324>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	2b05      	cmp	r3, #5
 8001ea0:	d10c      	bne.n	8001ebc <HAL_RCC_OscConfig+0x30c>
 8001ea2:	4b5f      	ldr	r3, [pc, #380]	; (8002020 <HAL_RCC_OscConfig+0x470>)
 8001ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ea6:	4a5e      	ldr	r2, [pc, #376]	; (8002020 <HAL_RCC_OscConfig+0x470>)
 8001ea8:	f043 0304 	orr.w	r3, r3, #4
 8001eac:	6713      	str	r3, [r2, #112]	; 0x70
 8001eae:	4b5c      	ldr	r3, [pc, #368]	; (8002020 <HAL_RCC_OscConfig+0x470>)
 8001eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eb2:	4a5b      	ldr	r2, [pc, #364]	; (8002020 <HAL_RCC_OscConfig+0x470>)
 8001eb4:	f043 0301 	orr.w	r3, r3, #1
 8001eb8:	6713      	str	r3, [r2, #112]	; 0x70
 8001eba:	e00b      	b.n	8001ed4 <HAL_RCC_OscConfig+0x324>
 8001ebc:	4b58      	ldr	r3, [pc, #352]	; (8002020 <HAL_RCC_OscConfig+0x470>)
 8001ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec0:	4a57      	ldr	r2, [pc, #348]	; (8002020 <HAL_RCC_OscConfig+0x470>)
 8001ec2:	f023 0301 	bic.w	r3, r3, #1
 8001ec6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ec8:	4b55      	ldr	r3, [pc, #340]	; (8002020 <HAL_RCC_OscConfig+0x470>)
 8001eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ecc:	4a54      	ldr	r2, [pc, #336]	; (8002020 <HAL_RCC_OscConfig+0x470>)
 8001ece:	f023 0304 	bic.w	r3, r3, #4
 8001ed2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d015      	beq.n	8001f08 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001edc:	f7ff fbac 	bl	8001638 <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ee2:	e00a      	b.n	8001efa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ee4:	f7ff fba8 	bl	8001638 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e0cb      	b.n	8002092 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001efa:	4b49      	ldr	r3, [pc, #292]	; (8002020 <HAL_RCC_OscConfig+0x470>)
 8001efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d0ee      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x334>
 8001f06:	e014      	b.n	8001f32 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f08:	f7ff fb96 	bl	8001638 <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f0e:	e00a      	b.n	8001f26 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f10:	f7ff fb92 	bl	8001638 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e0b5      	b.n	8002092 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f26:	4b3e      	ldr	r3, [pc, #248]	; (8002020 <HAL_RCC_OscConfig+0x470>)
 8001f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d1ee      	bne.n	8001f10 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f32:	7dfb      	ldrb	r3, [r7, #23]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d105      	bne.n	8001f44 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f38:	4b39      	ldr	r3, [pc, #228]	; (8002020 <HAL_RCC_OscConfig+0x470>)
 8001f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3c:	4a38      	ldr	r2, [pc, #224]	; (8002020 <HAL_RCC_OscConfig+0x470>)
 8001f3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f42:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f000 80a1 	beq.w	8002090 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f4e:	4b34      	ldr	r3, [pc, #208]	; (8002020 <HAL_RCC_OscConfig+0x470>)
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f003 030c 	and.w	r3, r3, #12
 8001f56:	2b08      	cmp	r3, #8
 8001f58:	d05c      	beq.n	8002014 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d141      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f62:	4b31      	ldr	r3, [pc, #196]	; (8002028 <HAL_RCC_OscConfig+0x478>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f68:	f7ff fb66 	bl	8001638 <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f70:	f7ff fb62 	bl	8001638 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e087      	b.n	8002092 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f82:	4b27      	ldr	r3, [pc, #156]	; (8002020 <HAL_RCC_OscConfig+0x470>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1f0      	bne.n	8001f70 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	69da      	ldr	r2, [r3, #28]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6a1b      	ldr	r3, [r3, #32]
 8001f96:	431a      	orrs	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9c:	019b      	lsls	r3, r3, #6
 8001f9e:	431a      	orrs	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa4:	085b      	lsrs	r3, r3, #1
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	041b      	lsls	r3, r3, #16
 8001faa:	431a      	orrs	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb0:	061b      	lsls	r3, r3, #24
 8001fb2:	491b      	ldr	r1, [pc, #108]	; (8002020 <HAL_RCC_OscConfig+0x470>)
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fb8:	4b1b      	ldr	r3, [pc, #108]	; (8002028 <HAL_RCC_OscConfig+0x478>)
 8001fba:	2201      	movs	r2, #1
 8001fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fbe:	f7ff fb3b 	bl	8001638 <HAL_GetTick>
 8001fc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fc4:	e008      	b.n	8001fd8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fc6:	f7ff fb37 	bl	8001638 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e05c      	b.n	8002092 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fd8:	4b11      	ldr	r3, [pc, #68]	; (8002020 <HAL_RCC_OscConfig+0x470>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d0f0      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x416>
 8001fe4:	e054      	b.n	8002090 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fe6:	4b10      	ldr	r3, [pc, #64]	; (8002028 <HAL_RCC_OscConfig+0x478>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fec:	f7ff fb24 	bl	8001638 <HAL_GetTick>
 8001ff0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ff4:	f7ff fb20 	bl	8001638 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e045      	b.n	8002092 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002006:	4b06      	ldr	r3, [pc, #24]	; (8002020 <HAL_RCC_OscConfig+0x470>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1f0      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x444>
 8002012:	e03d      	b.n	8002090 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d107      	bne.n	800202c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e038      	b.n	8002092 <HAL_RCC_OscConfig+0x4e2>
 8002020:	40023800 	.word	0x40023800
 8002024:	40007000 	.word	0x40007000
 8002028:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800202c:	4b1b      	ldr	r3, [pc, #108]	; (800209c <HAL_RCC_OscConfig+0x4ec>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d028      	beq.n	800208c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002044:	429a      	cmp	r2, r3
 8002046:	d121      	bne.n	800208c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002052:	429a      	cmp	r2, r3
 8002054:	d11a      	bne.n	800208c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800205c:	4013      	ands	r3, r2
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002062:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002064:	4293      	cmp	r3, r2
 8002066:	d111      	bne.n	800208c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002072:	085b      	lsrs	r3, r3, #1
 8002074:	3b01      	subs	r3, #1
 8002076:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002078:	429a      	cmp	r2, r3
 800207a:	d107      	bne.n	800208c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002086:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002088:	429a      	cmp	r2, r3
 800208a:	d001      	beq.n	8002090 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e000      	b.n	8002092 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3718      	adds	r7, #24
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	40023800 	.word	0x40023800

080020a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d101      	bne.n	80020b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e0cc      	b.n	800224e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020b4:	4b68      	ldr	r3, [pc, #416]	; (8002258 <HAL_RCC_ClockConfig+0x1b8>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0307 	and.w	r3, r3, #7
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d90c      	bls.n	80020dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020c2:	4b65      	ldr	r3, [pc, #404]	; (8002258 <HAL_RCC_ClockConfig+0x1b8>)
 80020c4:	683a      	ldr	r2, [r7, #0]
 80020c6:	b2d2      	uxtb	r2, r2
 80020c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ca:	4b63      	ldr	r3, [pc, #396]	; (8002258 <HAL_RCC_ClockConfig+0x1b8>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0307 	and.w	r3, r3, #7
 80020d2:	683a      	ldr	r2, [r7, #0]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d001      	beq.n	80020dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e0b8      	b.n	800224e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d020      	beq.n	800212a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0304 	and.w	r3, r3, #4
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d005      	beq.n	8002100 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020f4:	4b59      	ldr	r3, [pc, #356]	; (800225c <HAL_RCC_ClockConfig+0x1bc>)
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	4a58      	ldr	r2, [pc, #352]	; (800225c <HAL_RCC_ClockConfig+0x1bc>)
 80020fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80020fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0308 	and.w	r3, r3, #8
 8002108:	2b00      	cmp	r3, #0
 800210a:	d005      	beq.n	8002118 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800210c:	4b53      	ldr	r3, [pc, #332]	; (800225c <HAL_RCC_ClockConfig+0x1bc>)
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	4a52      	ldr	r2, [pc, #328]	; (800225c <HAL_RCC_ClockConfig+0x1bc>)
 8002112:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002116:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002118:	4b50      	ldr	r3, [pc, #320]	; (800225c <HAL_RCC_ClockConfig+0x1bc>)
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	494d      	ldr	r1, [pc, #308]	; (800225c <HAL_RCC_ClockConfig+0x1bc>)
 8002126:	4313      	orrs	r3, r2
 8002128:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	2b00      	cmp	r3, #0
 8002134:	d044      	beq.n	80021c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d107      	bne.n	800214e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800213e:	4b47      	ldr	r3, [pc, #284]	; (800225c <HAL_RCC_ClockConfig+0x1bc>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d119      	bne.n	800217e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e07f      	b.n	800224e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	2b02      	cmp	r3, #2
 8002154:	d003      	beq.n	800215e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800215a:	2b03      	cmp	r3, #3
 800215c:	d107      	bne.n	800216e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800215e:	4b3f      	ldr	r3, [pc, #252]	; (800225c <HAL_RCC_ClockConfig+0x1bc>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d109      	bne.n	800217e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e06f      	b.n	800224e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800216e:	4b3b      	ldr	r3, [pc, #236]	; (800225c <HAL_RCC_ClockConfig+0x1bc>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e067      	b.n	800224e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800217e:	4b37      	ldr	r3, [pc, #220]	; (800225c <HAL_RCC_ClockConfig+0x1bc>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f023 0203 	bic.w	r2, r3, #3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	4934      	ldr	r1, [pc, #208]	; (800225c <HAL_RCC_ClockConfig+0x1bc>)
 800218c:	4313      	orrs	r3, r2
 800218e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002190:	f7ff fa52 	bl	8001638 <HAL_GetTick>
 8002194:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002196:	e00a      	b.n	80021ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002198:	f7ff fa4e 	bl	8001638 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e04f      	b.n	800224e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ae:	4b2b      	ldr	r3, [pc, #172]	; (800225c <HAL_RCC_ClockConfig+0x1bc>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f003 020c 	and.w	r2, r3, #12
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	429a      	cmp	r2, r3
 80021be:	d1eb      	bne.n	8002198 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021c0:	4b25      	ldr	r3, [pc, #148]	; (8002258 <HAL_RCC_ClockConfig+0x1b8>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0307 	and.w	r3, r3, #7
 80021c8:	683a      	ldr	r2, [r7, #0]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d20c      	bcs.n	80021e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ce:	4b22      	ldr	r3, [pc, #136]	; (8002258 <HAL_RCC_ClockConfig+0x1b8>)
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	b2d2      	uxtb	r2, r2
 80021d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021d6:	4b20      	ldr	r3, [pc, #128]	; (8002258 <HAL_RCC_ClockConfig+0x1b8>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0307 	and.w	r3, r3, #7
 80021de:	683a      	ldr	r2, [r7, #0]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d001      	beq.n	80021e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e032      	b.n	800224e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0304 	and.w	r3, r3, #4
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d008      	beq.n	8002206 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021f4:	4b19      	ldr	r3, [pc, #100]	; (800225c <HAL_RCC_ClockConfig+0x1bc>)
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	4916      	ldr	r1, [pc, #88]	; (800225c <HAL_RCC_ClockConfig+0x1bc>)
 8002202:	4313      	orrs	r3, r2
 8002204:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0308 	and.w	r3, r3, #8
 800220e:	2b00      	cmp	r3, #0
 8002210:	d009      	beq.n	8002226 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002212:	4b12      	ldr	r3, [pc, #72]	; (800225c <HAL_RCC_ClockConfig+0x1bc>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	490e      	ldr	r1, [pc, #56]	; (800225c <HAL_RCC_ClockConfig+0x1bc>)
 8002222:	4313      	orrs	r3, r2
 8002224:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002226:	f000 f821 	bl	800226c <HAL_RCC_GetSysClockFreq>
 800222a:	4602      	mov	r2, r0
 800222c:	4b0b      	ldr	r3, [pc, #44]	; (800225c <HAL_RCC_ClockConfig+0x1bc>)
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	091b      	lsrs	r3, r3, #4
 8002232:	f003 030f 	and.w	r3, r3, #15
 8002236:	490a      	ldr	r1, [pc, #40]	; (8002260 <HAL_RCC_ClockConfig+0x1c0>)
 8002238:	5ccb      	ldrb	r3, [r1, r3]
 800223a:	fa22 f303 	lsr.w	r3, r2, r3
 800223e:	4a09      	ldr	r2, [pc, #36]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 8002240:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002242:	4b09      	ldr	r3, [pc, #36]	; (8002268 <HAL_RCC_ClockConfig+0x1c8>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4618      	mov	r0, r3
 8002248:	f7ff f9b2 	bl	80015b0 <HAL_InitTick>

  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	40023c00 	.word	0x40023c00
 800225c:	40023800 	.word	0x40023800
 8002260:	08005544 	.word	0x08005544
 8002264:	20000000 	.word	0x20000000
 8002268:	20000004 	.word	0x20000004

0800226c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800226c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002270:	b094      	sub	sp, #80	; 0x50
 8002272:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002274:	2300      	movs	r3, #0
 8002276:	647b      	str	r3, [r7, #68]	; 0x44
 8002278:	2300      	movs	r3, #0
 800227a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800227c:	2300      	movs	r3, #0
 800227e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002280:	2300      	movs	r3, #0
 8002282:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002284:	4b79      	ldr	r3, [pc, #484]	; (800246c <HAL_RCC_GetSysClockFreq+0x200>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f003 030c 	and.w	r3, r3, #12
 800228c:	2b08      	cmp	r3, #8
 800228e:	d00d      	beq.n	80022ac <HAL_RCC_GetSysClockFreq+0x40>
 8002290:	2b08      	cmp	r3, #8
 8002292:	f200 80e1 	bhi.w	8002458 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002296:	2b00      	cmp	r3, #0
 8002298:	d002      	beq.n	80022a0 <HAL_RCC_GetSysClockFreq+0x34>
 800229a:	2b04      	cmp	r3, #4
 800229c:	d003      	beq.n	80022a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800229e:	e0db      	b.n	8002458 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022a0:	4b73      	ldr	r3, [pc, #460]	; (8002470 <HAL_RCC_GetSysClockFreq+0x204>)
 80022a2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80022a4:	e0db      	b.n	800245e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022a6:	4b73      	ldr	r3, [pc, #460]	; (8002474 <HAL_RCC_GetSysClockFreq+0x208>)
 80022a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80022aa:	e0d8      	b.n	800245e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022ac:	4b6f      	ldr	r3, [pc, #444]	; (800246c <HAL_RCC_GetSysClockFreq+0x200>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022b4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022b6:	4b6d      	ldr	r3, [pc, #436]	; (800246c <HAL_RCC_GetSysClockFreq+0x200>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d063      	beq.n	800238a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022c2:	4b6a      	ldr	r3, [pc, #424]	; (800246c <HAL_RCC_GetSysClockFreq+0x200>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	099b      	lsrs	r3, r3, #6
 80022c8:	2200      	movs	r2, #0
 80022ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80022cc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80022ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022d4:	633b      	str	r3, [r7, #48]	; 0x30
 80022d6:	2300      	movs	r3, #0
 80022d8:	637b      	str	r3, [r7, #52]	; 0x34
 80022da:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80022de:	4622      	mov	r2, r4
 80022e0:	462b      	mov	r3, r5
 80022e2:	f04f 0000 	mov.w	r0, #0
 80022e6:	f04f 0100 	mov.w	r1, #0
 80022ea:	0159      	lsls	r1, r3, #5
 80022ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022f0:	0150      	lsls	r0, r2, #5
 80022f2:	4602      	mov	r2, r0
 80022f4:	460b      	mov	r3, r1
 80022f6:	4621      	mov	r1, r4
 80022f8:	1a51      	subs	r1, r2, r1
 80022fa:	6139      	str	r1, [r7, #16]
 80022fc:	4629      	mov	r1, r5
 80022fe:	eb63 0301 	sbc.w	r3, r3, r1
 8002302:	617b      	str	r3, [r7, #20]
 8002304:	f04f 0200 	mov.w	r2, #0
 8002308:	f04f 0300 	mov.w	r3, #0
 800230c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002310:	4659      	mov	r1, fp
 8002312:	018b      	lsls	r3, r1, #6
 8002314:	4651      	mov	r1, sl
 8002316:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800231a:	4651      	mov	r1, sl
 800231c:	018a      	lsls	r2, r1, #6
 800231e:	4651      	mov	r1, sl
 8002320:	ebb2 0801 	subs.w	r8, r2, r1
 8002324:	4659      	mov	r1, fp
 8002326:	eb63 0901 	sbc.w	r9, r3, r1
 800232a:	f04f 0200 	mov.w	r2, #0
 800232e:	f04f 0300 	mov.w	r3, #0
 8002332:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002336:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800233a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800233e:	4690      	mov	r8, r2
 8002340:	4699      	mov	r9, r3
 8002342:	4623      	mov	r3, r4
 8002344:	eb18 0303 	adds.w	r3, r8, r3
 8002348:	60bb      	str	r3, [r7, #8]
 800234a:	462b      	mov	r3, r5
 800234c:	eb49 0303 	adc.w	r3, r9, r3
 8002350:	60fb      	str	r3, [r7, #12]
 8002352:	f04f 0200 	mov.w	r2, #0
 8002356:	f04f 0300 	mov.w	r3, #0
 800235a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800235e:	4629      	mov	r1, r5
 8002360:	024b      	lsls	r3, r1, #9
 8002362:	4621      	mov	r1, r4
 8002364:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002368:	4621      	mov	r1, r4
 800236a:	024a      	lsls	r2, r1, #9
 800236c:	4610      	mov	r0, r2
 800236e:	4619      	mov	r1, r3
 8002370:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002372:	2200      	movs	r2, #0
 8002374:	62bb      	str	r3, [r7, #40]	; 0x28
 8002376:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002378:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800237c:	f7fd ff98 	bl	80002b0 <__aeabi_uldivmod>
 8002380:	4602      	mov	r2, r0
 8002382:	460b      	mov	r3, r1
 8002384:	4613      	mov	r3, r2
 8002386:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002388:	e058      	b.n	800243c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800238a:	4b38      	ldr	r3, [pc, #224]	; (800246c <HAL_RCC_GetSysClockFreq+0x200>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	099b      	lsrs	r3, r3, #6
 8002390:	2200      	movs	r2, #0
 8002392:	4618      	mov	r0, r3
 8002394:	4611      	mov	r1, r2
 8002396:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800239a:	623b      	str	r3, [r7, #32]
 800239c:	2300      	movs	r3, #0
 800239e:	627b      	str	r3, [r7, #36]	; 0x24
 80023a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80023a4:	4642      	mov	r2, r8
 80023a6:	464b      	mov	r3, r9
 80023a8:	f04f 0000 	mov.w	r0, #0
 80023ac:	f04f 0100 	mov.w	r1, #0
 80023b0:	0159      	lsls	r1, r3, #5
 80023b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023b6:	0150      	lsls	r0, r2, #5
 80023b8:	4602      	mov	r2, r0
 80023ba:	460b      	mov	r3, r1
 80023bc:	4641      	mov	r1, r8
 80023be:	ebb2 0a01 	subs.w	sl, r2, r1
 80023c2:	4649      	mov	r1, r9
 80023c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80023c8:	f04f 0200 	mov.w	r2, #0
 80023cc:	f04f 0300 	mov.w	r3, #0
 80023d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80023d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80023d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80023dc:	ebb2 040a 	subs.w	r4, r2, sl
 80023e0:	eb63 050b 	sbc.w	r5, r3, fp
 80023e4:	f04f 0200 	mov.w	r2, #0
 80023e8:	f04f 0300 	mov.w	r3, #0
 80023ec:	00eb      	lsls	r3, r5, #3
 80023ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023f2:	00e2      	lsls	r2, r4, #3
 80023f4:	4614      	mov	r4, r2
 80023f6:	461d      	mov	r5, r3
 80023f8:	4643      	mov	r3, r8
 80023fa:	18e3      	adds	r3, r4, r3
 80023fc:	603b      	str	r3, [r7, #0]
 80023fe:	464b      	mov	r3, r9
 8002400:	eb45 0303 	adc.w	r3, r5, r3
 8002404:	607b      	str	r3, [r7, #4]
 8002406:	f04f 0200 	mov.w	r2, #0
 800240a:	f04f 0300 	mov.w	r3, #0
 800240e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002412:	4629      	mov	r1, r5
 8002414:	028b      	lsls	r3, r1, #10
 8002416:	4621      	mov	r1, r4
 8002418:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800241c:	4621      	mov	r1, r4
 800241e:	028a      	lsls	r2, r1, #10
 8002420:	4610      	mov	r0, r2
 8002422:	4619      	mov	r1, r3
 8002424:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002426:	2200      	movs	r2, #0
 8002428:	61bb      	str	r3, [r7, #24]
 800242a:	61fa      	str	r2, [r7, #28]
 800242c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002430:	f7fd ff3e 	bl	80002b0 <__aeabi_uldivmod>
 8002434:	4602      	mov	r2, r0
 8002436:	460b      	mov	r3, r1
 8002438:	4613      	mov	r3, r2
 800243a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800243c:	4b0b      	ldr	r3, [pc, #44]	; (800246c <HAL_RCC_GetSysClockFreq+0x200>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	0c1b      	lsrs	r3, r3, #16
 8002442:	f003 0303 	and.w	r3, r3, #3
 8002446:	3301      	adds	r3, #1
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800244c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800244e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002450:	fbb2 f3f3 	udiv	r3, r2, r3
 8002454:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002456:	e002      	b.n	800245e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002458:	4b05      	ldr	r3, [pc, #20]	; (8002470 <HAL_RCC_GetSysClockFreq+0x204>)
 800245a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800245c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800245e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002460:	4618      	mov	r0, r3
 8002462:	3750      	adds	r7, #80	; 0x50
 8002464:	46bd      	mov	sp, r7
 8002466:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800246a:	bf00      	nop
 800246c:	40023800 	.word	0x40023800
 8002470:	00f42400 	.word	0x00f42400
 8002474:	007a1200 	.word	0x007a1200

08002478 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800247c:	4b03      	ldr	r3, [pc, #12]	; (800248c <HAL_RCC_GetHCLKFreq+0x14>)
 800247e:	681b      	ldr	r3, [r3, #0]
}
 8002480:	4618      	mov	r0, r3
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	20000000 	.word	0x20000000

08002490 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002494:	f7ff fff0 	bl	8002478 <HAL_RCC_GetHCLKFreq>
 8002498:	4602      	mov	r2, r0
 800249a:	4b05      	ldr	r3, [pc, #20]	; (80024b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	0a9b      	lsrs	r3, r3, #10
 80024a0:	f003 0307 	and.w	r3, r3, #7
 80024a4:	4903      	ldr	r1, [pc, #12]	; (80024b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024a6:	5ccb      	ldrb	r3, [r1, r3]
 80024a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	40023800 	.word	0x40023800
 80024b4:	08005554 	.word	0x08005554

080024b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80024bc:	f7ff ffdc 	bl	8002478 <HAL_RCC_GetHCLKFreq>
 80024c0:	4602      	mov	r2, r0
 80024c2:	4b05      	ldr	r3, [pc, #20]	; (80024d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	0b5b      	lsrs	r3, r3, #13
 80024c8:	f003 0307 	and.w	r3, r3, #7
 80024cc:	4903      	ldr	r1, [pc, #12]	; (80024dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80024ce:	5ccb      	ldrb	r3, [r1, r3]
 80024d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	40023800 	.word	0x40023800
 80024dc:	08005554 	.word	0x08005554

080024e0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b086      	sub	sp, #24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024e8:	2300      	movs	r3, #0
 80024ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80024ec:	2300      	movs	r3, #0
 80024ee:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d105      	bne.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002504:	2b00      	cmp	r3, #0
 8002506:	d035      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002508:	4b67      	ldr	r3, [pc, #412]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800250a:	2200      	movs	r2, #0
 800250c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800250e:	f7ff f893 	bl	8001638 <HAL_GetTick>
 8002512:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002514:	e008      	b.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002516:	f7ff f88f 	bl	8001638 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d901      	bls.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e0ba      	b.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002528:	4b60      	ldr	r3, [pc, #384]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d1f0      	bne.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	019a      	lsls	r2, r3, #6
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	071b      	lsls	r3, r3, #28
 8002540:	495a      	ldr	r1, [pc, #360]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002542:	4313      	orrs	r3, r2
 8002544:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002548:	4b57      	ldr	r3, [pc, #348]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800254a:	2201      	movs	r2, #1
 800254c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800254e:	f7ff f873 	bl	8001638 <HAL_GetTick>
 8002552:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002554:	e008      	b.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002556:	f7ff f86f 	bl	8001638 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b02      	cmp	r3, #2
 8002562:	d901      	bls.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e09a      	b.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002568:	4b50      	ldr	r3, [pc, #320]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d0f0      	beq.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b00      	cmp	r3, #0
 800257e:	f000 8083 	beq.w	8002688 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002582:	2300      	movs	r3, #0
 8002584:	60fb      	str	r3, [r7, #12]
 8002586:	4b49      	ldr	r3, [pc, #292]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258a:	4a48      	ldr	r2, [pc, #288]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800258c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002590:	6413      	str	r3, [r2, #64]	; 0x40
 8002592:	4b46      	ldr	r3, [pc, #280]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800259a:	60fb      	str	r3, [r7, #12]
 800259c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800259e:	4b44      	ldr	r3, [pc, #272]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a43      	ldr	r2, [pc, #268]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025a8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80025aa:	f7ff f845 	bl	8001638 <HAL_GetTick>
 80025ae:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80025b0:	e008      	b.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80025b2:	f7ff f841 	bl	8001638 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d901      	bls.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e06c      	b.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80025c4:	4b3a      	ldr	r3, [pc, #232]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0f0      	beq.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80025d0:	4b36      	ldr	r3, [pc, #216]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80025d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025d8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d02f      	beq.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025e8:	693a      	ldr	r2, [r7, #16]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d028      	beq.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025ee:	4b2f      	ldr	r3, [pc, #188]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80025f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025f6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025f8:	4b2e      	ldr	r3, [pc, #184]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80025fa:	2201      	movs	r2, #1
 80025fc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025fe:	4b2d      	ldr	r3, [pc, #180]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002604:	4a29      	ldr	r2, [pc, #164]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800260a:	4b28      	ldr	r3, [pc, #160]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800260c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b01      	cmp	r3, #1
 8002614:	d114      	bne.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002616:	f7ff f80f 	bl	8001638 <HAL_GetTick>
 800261a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800261c:	e00a      	b.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800261e:	f7ff f80b 	bl	8001638 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	f241 3288 	movw	r2, #5000	; 0x1388
 800262c:	4293      	cmp	r3, r2
 800262e:	d901      	bls.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e034      	b.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002634:	4b1d      	ldr	r3, [pc, #116]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d0ee      	beq.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002648:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800264c:	d10d      	bne.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800264e:	4b17      	ldr	r3, [pc, #92]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800265e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002662:	4912      	ldr	r1, [pc, #72]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002664:	4313      	orrs	r3, r2
 8002666:	608b      	str	r3, [r1, #8]
 8002668:	e005      	b.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800266a:	4b10      	ldr	r3, [pc, #64]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	4a0f      	ldr	r2, [pc, #60]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002670:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002674:	6093      	str	r3, [r2, #8]
 8002676:	4b0d      	ldr	r3, [pc, #52]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002678:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002682:	490a      	ldr	r1, [pc, #40]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002684:	4313      	orrs	r3, r2
 8002686:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0308 	and.w	r3, r3, #8
 8002690:	2b00      	cmp	r3, #0
 8002692:	d003      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	7c1a      	ldrb	r2, [r3, #16]
 8002698:	4b07      	ldr	r3, [pc, #28]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800269a:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3718      	adds	r7, #24
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	42470068 	.word	0x42470068
 80026ac:	40023800 	.word	0x40023800
 80026b0:	40007000 	.word	0x40007000
 80026b4:	42470e40 	.word	0x42470e40
 80026b8:	424711e0 	.word	0x424711e0

080026bc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d101      	bne.n	80026d2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e066      	b.n	80027a0 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	7f5b      	ldrb	r3, [r3, #29]
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d105      	bne.n	80026e8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f7fe fdec 	bl	80012c0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2202      	movs	r2, #2
 80026ec:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	22ca      	movs	r2, #202	; 0xca
 80026f4:	625a      	str	r2, [r3, #36]	; 0x24
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2253      	movs	r2, #83	; 0x53
 80026fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 fa45 	bl	8002b8e <RTC_EnterInitMode>
 8002704:	4603      	mov	r3, r0
 8002706:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002708:	7bfb      	ldrb	r3, [r7, #15]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d12c      	bne.n	8002768 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	6812      	ldr	r2, [r2, #0]
 8002718:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800271c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002720:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	6899      	ldr	r1, [r3, #8]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685a      	ldr	r2, [r3, #4]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	691b      	ldr	r3, [r3, #16]
 8002730:	431a      	orrs	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	431a      	orrs	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	430a      	orrs	r2, r1
 800273e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	68d2      	ldr	r2, [r2, #12]
 8002748:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	6919      	ldr	r1, [r3, #16]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	041a      	lsls	r2, r3, #16
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	430a      	orrs	r2, r1
 800275c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 fa4c 	bl	8002bfc <RTC_ExitInitMode>
 8002764:	4603      	mov	r3, r0
 8002766:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002768:	7bfb      	ldrb	r3, [r7, #15]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d113      	bne.n	8002796 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800277c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	699a      	ldr	r2, [r3, #24]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	430a      	orrs	r2, r1
 800278e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	22ff      	movs	r2, #255	; 0xff
 800279c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800279e:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3710      	adds	r7, #16
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80027a8:	b590      	push	{r4, r7, lr}
 80027aa:	b087      	sub	sp, #28
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80027b4:	2300      	movs	r3, #0
 80027b6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	7f1b      	ldrb	r3, [r3, #28]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d101      	bne.n	80027c4 <HAL_RTC_SetTime+0x1c>
 80027c0:	2302      	movs	r3, #2
 80027c2:	e087      	b.n	80028d4 <HAL_RTC_SetTime+0x12c>
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2201      	movs	r2, #1
 80027c8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2202      	movs	r2, #2
 80027ce:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d126      	bne.n	8002824 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d102      	bne.n	80027ea <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	2200      	movs	r2, #0
 80027e8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f000 fa29 	bl	8002c46 <RTC_ByteToBcd2>
 80027f4:	4603      	mov	r3, r0
 80027f6:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	785b      	ldrb	r3, [r3, #1]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f000 fa22 	bl	8002c46 <RTC_ByteToBcd2>
 8002802:	4603      	mov	r3, r0
 8002804:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002806:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	789b      	ldrb	r3, [r3, #2]
 800280c:	4618      	mov	r0, r3
 800280e:	f000 fa1a 	bl	8002c46 <RTC_ByteToBcd2>
 8002812:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002814:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	78db      	ldrb	r3, [r3, #3]
 800281c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800281e:	4313      	orrs	r3, r2
 8002820:	617b      	str	r3, [r7, #20]
 8002822:	e018      	b.n	8002856 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800282e:	2b00      	cmp	r3, #0
 8002830:	d102      	bne.n	8002838 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	2200      	movs	r2, #0
 8002836:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	785b      	ldrb	r3, [r3, #1]
 8002842:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002844:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8002846:	68ba      	ldr	r2, [r7, #8]
 8002848:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800284a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	78db      	ldrb	r3, [r3, #3]
 8002850:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002852:	4313      	orrs	r3, r2
 8002854:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	22ca      	movs	r2, #202	; 0xca
 800285c:	625a      	str	r2, [r3, #36]	; 0x24
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2253      	movs	r2, #83	; 0x53
 8002864:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002866:	68f8      	ldr	r0, [r7, #12]
 8002868:	f000 f991 	bl	8002b8e <RTC_EnterInitMode>
 800286c:	4603      	mov	r3, r0
 800286e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002870:	7cfb      	ldrb	r3, [r7, #19]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d120      	bne.n	80028b8 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002880:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002884:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	689a      	ldr	r2, [r3, #8]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002894:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	6899      	ldr	r1, [r3, #8]
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	68da      	ldr	r2, [r3, #12]
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	431a      	orrs	r2, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	430a      	orrs	r2, r1
 80028ac:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80028ae:	68f8      	ldr	r0, [r7, #12]
 80028b0:	f000 f9a4 	bl	8002bfc <RTC_ExitInitMode>
 80028b4:	4603      	mov	r3, r0
 80028b6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80028b8:	7cfb      	ldrb	r3, [r7, #19]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d102      	bne.n	80028c4 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2201      	movs	r2, #1
 80028c2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	22ff      	movs	r2, #255	; 0xff
 80028ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	771a      	strb	r2, [r3, #28]

  return status;
 80028d2:	7cfb      	ldrb	r3, [r7, #19]
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	371c      	adds	r7, #28
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd90      	pop	{r4, r7, pc}

080028dc <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80028e8:	2300      	movs	r3, #0
 80028ea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800290e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002912:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	0c1b      	lsrs	r3, r3, #16
 8002918:	b2db      	uxtb	r3, r3
 800291a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800291e:	b2da      	uxtb	r2, r3
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	0a1b      	lsrs	r3, r3, #8
 8002928:	b2db      	uxtb	r3, r3
 800292a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800292e:	b2da      	uxtb	r2, r3
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	b2db      	uxtb	r3, r3
 8002938:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800293c:	b2da      	uxtb	r2, r3
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	0d9b      	lsrs	r3, r3, #22
 8002946:	b2db      	uxtb	r3, r3
 8002948:	f003 0301 	and.w	r3, r3, #1
 800294c:	b2da      	uxtb	r2, r3
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d11a      	bne.n	800298e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	4618      	mov	r0, r3
 800295e:	f000 f98f 	bl	8002c80 <RTC_Bcd2ToByte>
 8002962:	4603      	mov	r3, r0
 8002964:	461a      	mov	r2, r3
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	785b      	ldrb	r3, [r3, #1]
 800296e:	4618      	mov	r0, r3
 8002970:	f000 f986 	bl	8002c80 <RTC_Bcd2ToByte>
 8002974:	4603      	mov	r3, r0
 8002976:	461a      	mov	r2, r3
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	789b      	ldrb	r3, [r3, #2]
 8002980:	4618      	mov	r0, r3
 8002982:	f000 f97d 	bl	8002c80 <RTC_Bcd2ToByte>
 8002986:	4603      	mov	r3, r0
 8002988:	461a      	mov	r2, r3
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	3718      	adds	r7, #24
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002998:	b590      	push	{r4, r7, lr}
 800299a:	b087      	sub	sp, #28
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80029a4:	2300      	movs	r3, #0
 80029a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	7f1b      	ldrb	r3, [r3, #28]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d101      	bne.n	80029b4 <HAL_RTC_SetDate+0x1c>
 80029b0:	2302      	movs	r3, #2
 80029b2:	e071      	b.n	8002a98 <HAL_RTC_SetDate+0x100>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2201      	movs	r2, #1
 80029b8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2202      	movs	r2, #2
 80029be:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d10e      	bne.n	80029e4 <HAL_RTC_SetDate+0x4c>
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	785b      	ldrb	r3, [r3, #1]
 80029ca:	f003 0310 	and.w	r3, r3, #16
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d008      	beq.n	80029e4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	785b      	ldrb	r3, [r3, #1]
 80029d6:	f023 0310 	bic.w	r3, r3, #16
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	330a      	adds	r3, #10
 80029de:	b2da      	uxtb	r2, r3
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d11c      	bne.n	8002a24 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	78db      	ldrb	r3, [r3, #3]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f000 f929 	bl	8002c46 <RTC_ByteToBcd2>
 80029f4:	4603      	mov	r3, r0
 80029f6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	785b      	ldrb	r3, [r3, #1]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f000 f922 	bl	8002c46 <RTC_ByteToBcd2>
 8002a02:	4603      	mov	r3, r0
 8002a04:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002a06:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	789b      	ldrb	r3, [r3, #2]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f000 f91a 	bl	8002c46 <RTC_ByteToBcd2>
 8002a12:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002a14:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	617b      	str	r3, [r7, #20]
 8002a22:	e00e      	b.n	8002a42 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	78db      	ldrb	r3, [r3, #3]
 8002a28:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	785b      	ldrb	r3, [r3, #1]
 8002a2e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002a30:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8002a32:	68ba      	ldr	r2, [r7, #8]
 8002a34:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002a36:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	22ca      	movs	r2, #202	; 0xca
 8002a48:	625a      	str	r2, [r3, #36]	; 0x24
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2253      	movs	r2, #83	; 0x53
 8002a50:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002a52:	68f8      	ldr	r0, [r7, #12]
 8002a54:	f000 f89b 	bl	8002b8e <RTC_EnterInitMode>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002a5c:	7cfb      	ldrb	r3, [r7, #19]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d10c      	bne.n	8002a7c <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002a6c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002a70:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002a72:	68f8      	ldr	r0, [r7, #12]
 8002a74:	f000 f8c2 	bl	8002bfc <RTC_ExitInitMode>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002a7c:	7cfb      	ldrb	r3, [r7, #19]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d102      	bne.n	8002a88 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2201      	movs	r2, #1
 8002a86:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	22ff      	movs	r2, #255	; 0xff
 8002a8e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2200      	movs	r2, #0
 8002a94:	771a      	strb	r2, [r3, #28]

  return status;
 8002a96:	7cfb      	ldrb	r3, [r7, #19]
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	371c      	adds	r7, #28
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd90      	pop	{r4, r7, pc}

08002aa0 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002aac:	2300      	movs	r3, #0
 8002aae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002aba:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002abe:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	0c1b      	lsrs	r3, r3, #16
 8002ac4:	b2da      	uxtb	r2, r3
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	0a1b      	lsrs	r3, r3, #8
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	f003 031f 	and.w	r3, r3, #31
 8002ad4:	b2da      	uxtb	r2, r3
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ae2:	b2da      	uxtb	r2, r3
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	0b5b      	lsrs	r3, r3, #13
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	f003 0307 	and.w	r3, r3, #7
 8002af2:	b2da      	uxtb	r2, r3
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d11a      	bne.n	8002b34 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	78db      	ldrb	r3, [r3, #3]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f000 f8bc 	bl	8002c80 <RTC_Bcd2ToByte>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	785b      	ldrb	r3, [r3, #1]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f000 f8b3 	bl	8002c80 <RTC_Bcd2ToByte>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	789b      	ldrb	r3, [r3, #2]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f000 f8aa 	bl	8002c80 <RTC_Bcd2ToByte>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	461a      	mov	r2, r3
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3718      	adds	r7, #24
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b084      	sub	sp, #16
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b46:	2300      	movs	r3, #0
 8002b48:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68da      	ldr	r2, [r3, #12]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002b58:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b5a:	f7fe fd6d 	bl	8001638 <HAL_GetTick>
 8002b5e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002b60:	e009      	b.n	8002b76 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002b62:	f7fe fd69 	bl	8001638 <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b70:	d901      	bls.n	8002b76 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e007      	b.n	8002b86 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	f003 0320 	and.w	r3, r3, #32
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d0ee      	beq.n	8002b62 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3710      	adds	r7, #16
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b084      	sub	sp, #16
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b96:	2300      	movs	r3, #0
 8002b98:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d122      	bne.n	8002bf2 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68da      	ldr	r2, [r3, #12]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002bba:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002bbc:	f7fe fd3c 	bl	8001638 <HAL_GetTick>
 8002bc0:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002bc2:	e00c      	b.n	8002bde <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002bc4:	f7fe fd38 	bl	8001638 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bd2:	d904      	bls.n	8002bde <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2204      	movs	r2, #4
 8002bd8:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d102      	bne.n	8002bf2 <RTC_EnterInitMode+0x64>
 8002bec:	7bfb      	ldrb	r3, [r7, #15]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d1e8      	bne.n	8002bc4 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3710      	adds	r7, #16
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c04:	2300      	movs	r3, #0
 8002c06:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68da      	ldr	r2, [r3, #12]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c16:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f003 0320 	and.w	r3, r3, #32
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d10a      	bne.n	8002c3c <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f7ff ff89 	bl	8002b3e <HAL_RTC_WaitForSynchro>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d004      	beq.n	8002c3c <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2204      	movs	r2, #4
 8002c36:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8002c46:	b480      	push	{r7}
 8002c48:	b085      	sub	sp, #20
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8002c50:	2300      	movs	r3, #0
 8002c52:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8002c54:	e005      	b.n	8002c62 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002c56:	7bfb      	ldrb	r3, [r7, #15]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8002c5c:	79fb      	ldrb	r3, [r7, #7]
 8002c5e:	3b0a      	subs	r3, #10
 8002c60:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8002c62:	79fb      	ldrb	r3, [r7, #7]
 8002c64:	2b09      	cmp	r3, #9
 8002c66:	d8f6      	bhi.n	8002c56 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8002c68:	7bfb      	ldrb	r3, [r7, #15]
 8002c6a:	011b      	lsls	r3, r3, #4
 8002c6c:	b2da      	uxtb	r2, r3
 8002c6e:	79fb      	ldrb	r3, [r7, #7]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	b2db      	uxtb	r3, r3
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3714      	adds	r7, #20
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b085      	sub	sp, #20
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	4603      	mov	r3, r0
 8002c88:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8002c8e:	79fb      	ldrb	r3, [r7, #7]
 8002c90:	091b      	lsrs	r3, r3, #4
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	461a      	mov	r2, r3
 8002c96:	0092      	lsls	r2, r2, #2
 8002c98:	4413      	add	r3, r2
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8002c9e:	79fb      	ldrb	r3, [r7, #7]
 8002ca0:	f003 030f 	and.w	r3, r3, #15
 8002ca4:	b2da      	uxtb	r2, r3
 8002ca6:	7bfb      	ldrb	r3, [r7, #15]
 8002ca8:	4413      	add	r3, r2
 8002caa:	b2db      	uxtb	r3, r3
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3714      	adds	r7, #20
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b087      	sub	sp, #28
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002cc4:	4b59      	ldr	r3, [pc, #356]	; (8002e2c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a59      	ldr	r2, [pc, #356]	; (8002e30 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 8002cca:	fba2 2303 	umull	r2, r3, r2, r3
 8002cce:	0adb      	lsrs	r3, r3, #11
 8002cd0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002cd4:	fb02 f303 	mul.w	r3, r2, r3
 8002cd8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	7f1b      	ldrb	r3, [r3, #28]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d101      	bne.n	8002ce6 <HAL_RTCEx_SetWakeUpTimer_IT+0x2e>
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	e09b      	b.n	8002e1e <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2202      	movs	r2, #2
 8002cf0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	22ca      	movs	r2, #202	; 0xca
 8002cf8:	625a      	str	r2, [r3, #36]	; 0x24
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2253      	movs	r2, #83	; 0x53
 8002d00:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d017      	beq.n	8002d40 <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	1e5a      	subs	r2, r3, #1
 8002d14:	617a      	str	r2, [r7, #20]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d10b      	bne.n	8002d32 <HAL_RTCEx_SetWakeUpTimer_IT+0x7a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	22ff      	movs	r2, #255	; 0xff
 8002d20:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2203      	movs	r2, #3
 8002d26:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e075      	b.n	8002e1e <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	f003 0304 	and.w	r3, r3, #4
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d1e7      	bne.n	8002d10 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	689a      	ldr	r2, [r3, #8]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d4e:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	b2da      	uxtb	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002d60:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002d62:	4b32      	ldr	r3, [pc, #200]	; (8002e2c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a32      	ldr	r2, [pc, #200]	; (8002e30 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 8002d68:	fba2 2303 	umull	r2, r3, r2, r3
 8002d6c:	0adb      	lsrs	r3, r3, #11
 8002d6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002d72:	fb02 f303 	mul.w	r3, r2, r3
 8002d76:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    if (count-- == 0U)
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	1e5a      	subs	r2, r3, #1
 8002d7c:	617a      	str	r2, [r7, #20]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d10b      	bne.n	8002d9a <HAL_RTCEx_SetWakeUpTimer_IT+0xe2>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	22ff      	movs	r2, #255	; 0xff
 8002d88:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2203      	movs	r2, #3
 8002d8e:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e041      	b.n	8002e1e <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	f003 0304 	and.w	r3, r3, #4
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d0e7      	beq.n	8002d78 <HAL_RTCEx_SetWakeUpTimer_IT+0xc0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	689a      	ldr	r2, [r3, #8]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f022 0207 	bic.w	r2, r2, #7
 8002db6:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	6899      	ldr	r1, [r3, #8]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	68ba      	ldr	r2, [r7, #8]
 8002dce:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8002dd0:	4b18      	ldr	r3, [pc, #96]	; (8002e34 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a17      	ldr	r2, [pc, #92]	; (8002e34 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8002dd6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002dda:	6013      	str	r3, [r2, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8002ddc:	4b15      	ldr	r3, [pc, #84]	; (8002e34 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	4a14      	ldr	r2, [pc, #80]	; (8002e34 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8002de2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002de6:	6093      	str	r3, [r2, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	689a      	ldr	r2, [r3, #8]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002df6:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689a      	ldr	r2, [r3, #8]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e06:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	22ff      	movs	r2, #255	; 0xff
 8002e0e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2201      	movs	r2, #1
 8002e14:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	371c      	adds	r7, #28
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	20000000 	.word	0x20000000
 8002e30:	10624dd3 	.word	0x10624dd3
 8002e34:	40013c00 	.word	0x40013c00

08002e38 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the Wakeup timer Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00b      	beq.n	8002e66 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f7fd fe68 	bl	8000b24 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the Wakeup timer interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	b2da      	uxtb	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002e64:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8002e66:	4b05      	ldr	r3, [pc, #20]	; (8002e7c <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 8002e68:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002e6c:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2201      	movs	r2, #1
 8002e72:	775a      	strb	r2, [r3, #29]
}
 8002e74:	bf00      	nop
 8002e76:	3708      	adds	r7, #8
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	40013c00 	.word	0x40013c00

08002e80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d101      	bne.n	8002e92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e041      	b.n	8002f16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d106      	bne.n	8002eac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f7fe fa3e 	bl	8001328 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2202      	movs	r2, #2
 8002eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	3304      	adds	r3, #4
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	4610      	mov	r0, r2
 8002ec0:	f000 fa92 	bl	80033e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3708      	adds	r7, #8
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
	...

08002f20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d001      	beq.n	8002f38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e044      	b.n	8002fc2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2202      	movs	r2, #2
 8002f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68da      	ldr	r2, [r3, #12]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f042 0201 	orr.w	r2, r2, #1
 8002f4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a1e      	ldr	r2, [pc, #120]	; (8002fd0 <HAL_TIM_Base_Start_IT+0xb0>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d018      	beq.n	8002f8c <HAL_TIM_Base_Start_IT+0x6c>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f62:	d013      	beq.n	8002f8c <HAL_TIM_Base_Start_IT+0x6c>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a1a      	ldr	r2, [pc, #104]	; (8002fd4 <HAL_TIM_Base_Start_IT+0xb4>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d00e      	beq.n	8002f8c <HAL_TIM_Base_Start_IT+0x6c>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a19      	ldr	r2, [pc, #100]	; (8002fd8 <HAL_TIM_Base_Start_IT+0xb8>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d009      	beq.n	8002f8c <HAL_TIM_Base_Start_IT+0x6c>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a17      	ldr	r2, [pc, #92]	; (8002fdc <HAL_TIM_Base_Start_IT+0xbc>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d004      	beq.n	8002f8c <HAL_TIM_Base_Start_IT+0x6c>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a16      	ldr	r2, [pc, #88]	; (8002fe0 <HAL_TIM_Base_Start_IT+0xc0>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d111      	bne.n	8002fb0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f003 0307 	and.w	r3, r3, #7
 8002f96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2b06      	cmp	r3, #6
 8002f9c:	d010      	beq.n	8002fc0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f042 0201 	orr.w	r2, r2, #1
 8002fac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fae:	e007      	b.n	8002fc0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f042 0201 	orr.w	r2, r2, #1
 8002fbe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3714      	adds	r7, #20
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	40010000 	.word	0x40010000
 8002fd4:	40000400 	.word	0x40000400
 8002fd8:	40000800 	.word	0x40000800
 8002fdc:	40000c00 	.word	0x40000c00
 8002fe0:	40014000 	.word	0x40014000

08002fe4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d122      	bne.n	8003040 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	f003 0302 	and.w	r3, r3, #2
 8003004:	2b02      	cmp	r3, #2
 8003006:	d11b      	bne.n	8003040 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f06f 0202 	mvn.w	r2, #2
 8003010:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2201      	movs	r2, #1
 8003016:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	f003 0303 	and.w	r3, r3, #3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d003      	beq.n	800302e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 f9bf 	bl	80033aa <HAL_TIM_IC_CaptureCallback>
 800302c:	e005      	b.n	800303a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 f9b1 	bl	8003396 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f000 f9c2 	bl	80033be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	f003 0304 	and.w	r3, r3, #4
 800304a:	2b04      	cmp	r3, #4
 800304c:	d122      	bne.n	8003094 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	f003 0304 	and.w	r3, r3, #4
 8003058:	2b04      	cmp	r3, #4
 800305a:	d11b      	bne.n	8003094 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f06f 0204 	mvn.w	r2, #4
 8003064:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2202      	movs	r2, #2
 800306a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003076:	2b00      	cmp	r3, #0
 8003078:	d003      	beq.n	8003082 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 f995 	bl	80033aa <HAL_TIM_IC_CaptureCallback>
 8003080:	e005      	b.n	800308e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 f987 	bl	8003396 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f000 f998 	bl	80033be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	f003 0308 	and.w	r3, r3, #8
 800309e:	2b08      	cmp	r3, #8
 80030a0:	d122      	bne.n	80030e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	f003 0308 	and.w	r3, r3, #8
 80030ac:	2b08      	cmp	r3, #8
 80030ae:	d11b      	bne.n	80030e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f06f 0208 	mvn.w	r2, #8
 80030b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2204      	movs	r2, #4
 80030be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	69db      	ldr	r3, [r3, #28]
 80030c6:	f003 0303 	and.w	r3, r3, #3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d003      	beq.n	80030d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 f96b 	bl	80033aa <HAL_TIM_IC_CaptureCallback>
 80030d4:	e005      	b.n	80030e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 f95d 	bl	8003396 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f000 f96e 	bl	80033be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	f003 0310 	and.w	r3, r3, #16
 80030f2:	2b10      	cmp	r3, #16
 80030f4:	d122      	bne.n	800313c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	f003 0310 	and.w	r3, r3, #16
 8003100:	2b10      	cmp	r3, #16
 8003102:	d11b      	bne.n	800313c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f06f 0210 	mvn.w	r2, #16
 800310c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2208      	movs	r2, #8
 8003112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	69db      	ldr	r3, [r3, #28]
 800311a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800311e:	2b00      	cmp	r3, #0
 8003120:	d003      	beq.n	800312a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 f941 	bl	80033aa <HAL_TIM_IC_CaptureCallback>
 8003128:	e005      	b.n	8003136 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 f933 	bl	8003396 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f000 f944 	bl	80033be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	2b01      	cmp	r3, #1
 8003148:	d10e      	bne.n	8003168 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	2b01      	cmp	r3, #1
 8003156:	d107      	bne.n	8003168 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f06f 0201 	mvn.w	r2, #1
 8003160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f90d 	bl	8003382 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003172:	2b80      	cmp	r3, #128	; 0x80
 8003174:	d10e      	bne.n	8003194 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003180:	2b80      	cmp	r3, #128	; 0x80
 8003182:	d107      	bne.n	8003194 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800318c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 fabc 	bl	800370c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800319e:	2b40      	cmp	r3, #64	; 0x40
 80031a0:	d10e      	bne.n	80031c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ac:	2b40      	cmp	r3, #64	; 0x40
 80031ae:	d107      	bne.n	80031c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 f909 	bl	80033d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	f003 0320 	and.w	r3, r3, #32
 80031ca:	2b20      	cmp	r3, #32
 80031cc:	d10e      	bne.n	80031ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	f003 0320 	and.w	r3, r3, #32
 80031d8:	2b20      	cmp	r3, #32
 80031da:	d107      	bne.n	80031ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f06f 0220 	mvn.w	r2, #32
 80031e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 fa86 	bl	80036f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031ec:	bf00      	nop
 80031ee:	3708      	adds	r7, #8
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031fe:	2300      	movs	r3, #0
 8003200:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003208:	2b01      	cmp	r3, #1
 800320a:	d101      	bne.n	8003210 <HAL_TIM_ConfigClockSource+0x1c>
 800320c:	2302      	movs	r3, #2
 800320e:	e0b4      	b.n	800337a <HAL_TIM_ConfigClockSource+0x186>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2202      	movs	r2, #2
 800321c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800322e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003236:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68ba      	ldr	r2, [r7, #8]
 800323e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003248:	d03e      	beq.n	80032c8 <HAL_TIM_ConfigClockSource+0xd4>
 800324a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800324e:	f200 8087 	bhi.w	8003360 <HAL_TIM_ConfigClockSource+0x16c>
 8003252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003256:	f000 8086 	beq.w	8003366 <HAL_TIM_ConfigClockSource+0x172>
 800325a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800325e:	d87f      	bhi.n	8003360 <HAL_TIM_ConfigClockSource+0x16c>
 8003260:	2b70      	cmp	r3, #112	; 0x70
 8003262:	d01a      	beq.n	800329a <HAL_TIM_ConfigClockSource+0xa6>
 8003264:	2b70      	cmp	r3, #112	; 0x70
 8003266:	d87b      	bhi.n	8003360 <HAL_TIM_ConfigClockSource+0x16c>
 8003268:	2b60      	cmp	r3, #96	; 0x60
 800326a:	d050      	beq.n	800330e <HAL_TIM_ConfigClockSource+0x11a>
 800326c:	2b60      	cmp	r3, #96	; 0x60
 800326e:	d877      	bhi.n	8003360 <HAL_TIM_ConfigClockSource+0x16c>
 8003270:	2b50      	cmp	r3, #80	; 0x50
 8003272:	d03c      	beq.n	80032ee <HAL_TIM_ConfigClockSource+0xfa>
 8003274:	2b50      	cmp	r3, #80	; 0x50
 8003276:	d873      	bhi.n	8003360 <HAL_TIM_ConfigClockSource+0x16c>
 8003278:	2b40      	cmp	r3, #64	; 0x40
 800327a:	d058      	beq.n	800332e <HAL_TIM_ConfigClockSource+0x13a>
 800327c:	2b40      	cmp	r3, #64	; 0x40
 800327e:	d86f      	bhi.n	8003360 <HAL_TIM_ConfigClockSource+0x16c>
 8003280:	2b30      	cmp	r3, #48	; 0x30
 8003282:	d064      	beq.n	800334e <HAL_TIM_ConfigClockSource+0x15a>
 8003284:	2b30      	cmp	r3, #48	; 0x30
 8003286:	d86b      	bhi.n	8003360 <HAL_TIM_ConfigClockSource+0x16c>
 8003288:	2b20      	cmp	r3, #32
 800328a:	d060      	beq.n	800334e <HAL_TIM_ConfigClockSource+0x15a>
 800328c:	2b20      	cmp	r3, #32
 800328e:	d867      	bhi.n	8003360 <HAL_TIM_ConfigClockSource+0x16c>
 8003290:	2b00      	cmp	r3, #0
 8003292:	d05c      	beq.n	800334e <HAL_TIM_ConfigClockSource+0x15a>
 8003294:	2b10      	cmp	r3, #16
 8003296:	d05a      	beq.n	800334e <HAL_TIM_ConfigClockSource+0x15a>
 8003298:	e062      	b.n	8003360 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6818      	ldr	r0, [r3, #0]
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	6899      	ldr	r1, [r3, #8]
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685a      	ldr	r2, [r3, #4]
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	f000 f997 	bl	80035dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80032bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68ba      	ldr	r2, [r7, #8]
 80032c4:	609a      	str	r2, [r3, #8]
      break;
 80032c6:	e04f      	b.n	8003368 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6818      	ldr	r0, [r3, #0]
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	6899      	ldr	r1, [r3, #8]
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685a      	ldr	r2, [r3, #4]
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	f000 f980 	bl	80035dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	689a      	ldr	r2, [r3, #8]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032ea:	609a      	str	r2, [r3, #8]
      break;
 80032ec:	e03c      	b.n	8003368 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6818      	ldr	r0, [r3, #0]
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	6859      	ldr	r1, [r3, #4]
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	461a      	mov	r2, r3
 80032fc:	f000 f8f4 	bl	80034e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2150      	movs	r1, #80	; 0x50
 8003306:	4618      	mov	r0, r3
 8003308:	f000 f94d 	bl	80035a6 <TIM_ITRx_SetConfig>
      break;
 800330c:	e02c      	b.n	8003368 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6818      	ldr	r0, [r3, #0]
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	6859      	ldr	r1, [r3, #4]
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	461a      	mov	r2, r3
 800331c:	f000 f913 	bl	8003546 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2160      	movs	r1, #96	; 0x60
 8003326:	4618      	mov	r0, r3
 8003328:	f000 f93d 	bl	80035a6 <TIM_ITRx_SetConfig>
      break;
 800332c:	e01c      	b.n	8003368 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6818      	ldr	r0, [r3, #0]
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	6859      	ldr	r1, [r3, #4]
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	461a      	mov	r2, r3
 800333c:	f000 f8d4 	bl	80034e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2140      	movs	r1, #64	; 0x40
 8003346:	4618      	mov	r0, r3
 8003348:	f000 f92d 	bl	80035a6 <TIM_ITRx_SetConfig>
      break;
 800334c:	e00c      	b.n	8003368 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4619      	mov	r1, r3
 8003358:	4610      	mov	r0, r2
 800335a:	f000 f924 	bl	80035a6 <TIM_ITRx_SetConfig>
      break;
 800335e:	e003      	b.n	8003368 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	73fb      	strb	r3, [r7, #15]
      break;
 8003364:	e000      	b.n	8003368 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003366:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003378:	7bfb      	ldrb	r3, [r7, #15]
}
 800337a:	4618      	mov	r0, r3
 800337c:	3710      	adds	r7, #16
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003382:	b480      	push	{r7}
 8003384:	b083      	sub	sp, #12
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800338a:	bf00      	nop
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr

08003396 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003396:	b480      	push	{r7}
 8003398:	b083      	sub	sp, #12
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800339e:	bf00      	nop
 80033a0:	370c      	adds	r7, #12
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr

080033aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80033aa:	b480      	push	{r7}
 80033ac:	b083      	sub	sp, #12
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033b2:	bf00      	nop
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr

080033be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033be:	b480      	push	{r7}
 80033c0:	b083      	sub	sp, #12
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033c6:	bf00      	nop
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr

080033d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033d2:	b480      	push	{r7}
 80033d4:	b083      	sub	sp, #12
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033da:	bf00      	nop
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
	...

080033e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b085      	sub	sp, #20
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a34      	ldr	r2, [pc, #208]	; (80034cc <TIM_Base_SetConfig+0xe4>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d00f      	beq.n	8003420 <TIM_Base_SetConfig+0x38>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003406:	d00b      	beq.n	8003420 <TIM_Base_SetConfig+0x38>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a31      	ldr	r2, [pc, #196]	; (80034d0 <TIM_Base_SetConfig+0xe8>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d007      	beq.n	8003420 <TIM_Base_SetConfig+0x38>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a30      	ldr	r2, [pc, #192]	; (80034d4 <TIM_Base_SetConfig+0xec>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d003      	beq.n	8003420 <TIM_Base_SetConfig+0x38>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a2f      	ldr	r2, [pc, #188]	; (80034d8 <TIM_Base_SetConfig+0xf0>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d108      	bne.n	8003432 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003426:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	4313      	orrs	r3, r2
 8003430:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a25      	ldr	r2, [pc, #148]	; (80034cc <TIM_Base_SetConfig+0xe4>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d01b      	beq.n	8003472 <TIM_Base_SetConfig+0x8a>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003440:	d017      	beq.n	8003472 <TIM_Base_SetConfig+0x8a>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a22      	ldr	r2, [pc, #136]	; (80034d0 <TIM_Base_SetConfig+0xe8>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d013      	beq.n	8003472 <TIM_Base_SetConfig+0x8a>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a21      	ldr	r2, [pc, #132]	; (80034d4 <TIM_Base_SetConfig+0xec>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d00f      	beq.n	8003472 <TIM_Base_SetConfig+0x8a>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a20      	ldr	r2, [pc, #128]	; (80034d8 <TIM_Base_SetConfig+0xf0>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d00b      	beq.n	8003472 <TIM_Base_SetConfig+0x8a>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a1f      	ldr	r2, [pc, #124]	; (80034dc <TIM_Base_SetConfig+0xf4>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d007      	beq.n	8003472 <TIM_Base_SetConfig+0x8a>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a1e      	ldr	r2, [pc, #120]	; (80034e0 <TIM_Base_SetConfig+0xf8>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d003      	beq.n	8003472 <TIM_Base_SetConfig+0x8a>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a1d      	ldr	r2, [pc, #116]	; (80034e4 <TIM_Base_SetConfig+0xfc>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d108      	bne.n	8003484 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003478:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	68fa      	ldr	r2, [r7, #12]
 8003480:	4313      	orrs	r3, r2
 8003482:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	4313      	orrs	r3, r2
 8003490:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	689a      	ldr	r2, [r3, #8]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a08      	ldr	r2, [pc, #32]	; (80034cc <TIM_Base_SetConfig+0xe4>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d103      	bne.n	80034b8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	691a      	ldr	r2, [r3, #16]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	615a      	str	r2, [r3, #20]
}
 80034be:	bf00      	nop
 80034c0:	3714      	adds	r7, #20
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	40010000 	.word	0x40010000
 80034d0:	40000400 	.word	0x40000400
 80034d4:	40000800 	.word	0x40000800
 80034d8:	40000c00 	.word	0x40000c00
 80034dc:	40014000 	.word	0x40014000
 80034e0:	40014400 	.word	0x40014400
 80034e4:	40014800 	.word	0x40014800

080034e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b087      	sub	sp, #28
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6a1b      	ldr	r3, [r3, #32]
 80034fe:	f023 0201 	bic.w	r2, r3, #1
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003512:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	011b      	lsls	r3, r3, #4
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	4313      	orrs	r3, r2
 800351c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	f023 030a 	bic.w	r3, r3, #10
 8003524:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	4313      	orrs	r3, r2
 800352c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	621a      	str	r2, [r3, #32]
}
 800353a:	bf00      	nop
 800353c:	371c      	adds	r7, #28
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr

08003546 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003546:	b480      	push	{r7}
 8003548:	b087      	sub	sp, #28
 800354a:	af00      	add	r7, sp, #0
 800354c:	60f8      	str	r0, [r7, #12]
 800354e:	60b9      	str	r1, [r7, #8]
 8003550:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6a1b      	ldr	r3, [r3, #32]
 8003556:	f023 0210 	bic.w	r2, r3, #16
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6a1b      	ldr	r3, [r3, #32]
 8003568:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003570:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	031b      	lsls	r3, r3, #12
 8003576:	697a      	ldr	r2, [r7, #20]
 8003578:	4313      	orrs	r3, r2
 800357a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003582:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	011b      	lsls	r3, r3, #4
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	4313      	orrs	r3, r2
 800358c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	697a      	ldr	r2, [r7, #20]
 8003592:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	693a      	ldr	r2, [r7, #16]
 8003598:	621a      	str	r2, [r3, #32]
}
 800359a:	bf00      	nop
 800359c:	371c      	adds	r7, #28
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr

080035a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035a6:	b480      	push	{r7}
 80035a8:	b085      	sub	sp, #20
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
 80035ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035be:	683a      	ldr	r2, [r7, #0]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	f043 0307 	orr.w	r3, r3, #7
 80035c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	609a      	str	r2, [r3, #8]
}
 80035d0:	bf00      	nop
 80035d2:	3714      	adds	r7, #20
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035dc:	b480      	push	{r7}
 80035de:	b087      	sub	sp, #28
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
 80035e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	021a      	lsls	r2, r3, #8
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	431a      	orrs	r2, r3
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	4313      	orrs	r3, r2
 8003604:	697a      	ldr	r2, [r7, #20]
 8003606:	4313      	orrs	r3, r2
 8003608:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	697a      	ldr	r2, [r7, #20]
 800360e:	609a      	str	r2, [r3, #8]
}
 8003610:	bf00      	nop
 8003612:	371c      	adds	r7, #28
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800362c:	2b01      	cmp	r3, #1
 800362e:	d101      	bne.n	8003634 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003630:	2302      	movs	r3, #2
 8003632:	e050      	b.n	80036d6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2202      	movs	r2, #2
 8003640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800365a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	4313      	orrs	r3, r2
 8003664:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a1c      	ldr	r2, [pc, #112]	; (80036e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d018      	beq.n	80036aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003680:	d013      	beq.n	80036aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a18      	ldr	r2, [pc, #96]	; (80036e8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d00e      	beq.n	80036aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a16      	ldr	r2, [pc, #88]	; (80036ec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d009      	beq.n	80036aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a15      	ldr	r2, [pc, #84]	; (80036f0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d004      	beq.n	80036aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a13      	ldr	r2, [pc, #76]	; (80036f4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d10c      	bne.n	80036c4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	68ba      	ldr	r2, [r7, #8]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68ba      	ldr	r2, [r7, #8]
 80036c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3714      	adds	r7, #20
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	40010000 	.word	0x40010000
 80036e8:	40000400 	.word	0x40000400
 80036ec:	40000800 	.word	0x40000800
 80036f0:	40000c00 	.word	0x40000c00
 80036f4:	40014000 	.word	0x40014000

080036f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e03f      	b.n	80037b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003738:	b2db      	uxtb	r3, r3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d106      	bne.n	800374c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f7fd fe16 	bl	8001378 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2224      	movs	r2, #36	; 0x24
 8003750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68da      	ldr	r2, [r3, #12]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003762:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f000 f9cb 	bl	8003b00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	691a      	ldr	r2, [r3, #16]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003778:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	695a      	ldr	r2, [r3, #20]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003788:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68da      	ldr	r2, [r3, #12]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003798:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2220      	movs	r2, #32
 80037a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2220      	movs	r2, #32
 80037ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3708      	adds	r7, #8
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b08a      	sub	sp, #40	; 0x28
 80037be:	af02      	add	r7, sp, #8
 80037c0:	60f8      	str	r0, [r7, #12]
 80037c2:	60b9      	str	r1, [r7, #8]
 80037c4:	603b      	str	r3, [r7, #0]
 80037c6:	4613      	mov	r3, r2
 80037c8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80037ca:	2300      	movs	r3, #0
 80037cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b20      	cmp	r3, #32
 80037d8:	d17c      	bne.n	80038d4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d002      	beq.n	80037e6 <HAL_UART_Transmit+0x2c>
 80037e0:	88fb      	ldrh	r3, [r7, #6]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d101      	bne.n	80037ea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e075      	b.n	80038d6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d101      	bne.n	80037f8 <HAL_UART_Transmit+0x3e>
 80037f4:	2302      	movs	r3, #2
 80037f6:	e06e      	b.n	80038d6 <HAL_UART_Transmit+0x11c>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2221      	movs	r2, #33	; 0x21
 800380a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800380e:	f7fd ff13 	bl	8001638 <HAL_GetTick>
 8003812:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	88fa      	ldrh	r2, [r7, #6]
 8003818:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	88fa      	ldrh	r2, [r7, #6]
 800381e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003828:	d108      	bne.n	800383c <HAL_UART_Transmit+0x82>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d104      	bne.n	800383c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003832:	2300      	movs	r3, #0
 8003834:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	61bb      	str	r3, [r7, #24]
 800383a:	e003      	b.n	8003844 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003840:	2300      	movs	r3, #0
 8003842:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800384c:	e02a      	b.n	80038a4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	9300      	str	r3, [sp, #0]
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	2200      	movs	r2, #0
 8003856:	2180      	movs	r1, #128	; 0x80
 8003858:	68f8      	ldr	r0, [r7, #12]
 800385a:	f000 f8e2 	bl	8003a22 <UART_WaitOnFlagUntilTimeout>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d001      	beq.n	8003868 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	e036      	b.n	80038d6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d10b      	bne.n	8003886 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	881b      	ldrh	r3, [r3, #0]
 8003872:	461a      	mov	r2, r3
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800387c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	3302      	adds	r3, #2
 8003882:	61bb      	str	r3, [r7, #24]
 8003884:	e007      	b.n	8003896 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	781a      	ldrb	r2, [r3, #0]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	3301      	adds	r3, #1
 8003894:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800389a:	b29b      	uxth	r3, r3
 800389c:	3b01      	subs	r3, #1
 800389e:	b29a      	uxth	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1cf      	bne.n	800384e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	9300      	str	r3, [sp, #0]
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	2200      	movs	r2, #0
 80038b6:	2140      	movs	r1, #64	; 0x40
 80038b8:	68f8      	ldr	r0, [r7, #12]
 80038ba:	f000 f8b2 	bl	8003a22 <UART_WaitOnFlagUntilTimeout>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d001      	beq.n	80038c8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e006      	b.n	80038d6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2220      	movs	r2, #32
 80038cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80038d0:	2300      	movs	r3, #0
 80038d2:	e000      	b.n	80038d6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80038d4:	2302      	movs	r3, #2
  }
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3720      	adds	r7, #32
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	b08a      	sub	sp, #40	; 0x28
 80038e2:	af02      	add	r7, sp, #8
 80038e4:	60f8      	str	r0, [r7, #12]
 80038e6:	60b9      	str	r1, [r7, #8]
 80038e8:	603b      	str	r3, [r7, #0]
 80038ea:	4613      	mov	r3, r2
 80038ec:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80038ee:	2300      	movs	r3, #0
 80038f0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	2b20      	cmp	r3, #32
 80038fc:	f040 808c 	bne.w	8003a18 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d002      	beq.n	800390c <HAL_UART_Receive+0x2e>
 8003906:	88fb      	ldrh	r3, [r7, #6]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d101      	bne.n	8003910 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e084      	b.n	8003a1a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003916:	2b01      	cmp	r3, #1
 8003918:	d101      	bne.n	800391e <HAL_UART_Receive+0x40>
 800391a:	2302      	movs	r3, #2
 800391c:	e07d      	b.n	8003a1a <HAL_UART_Receive+0x13c>
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2201      	movs	r2, #1
 8003922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2222      	movs	r2, #34	; 0x22
 8003930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800393a:	f7fd fe7d 	bl	8001638 <HAL_GetTick>
 800393e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	88fa      	ldrh	r2, [r7, #6]
 8003944:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	88fa      	ldrh	r2, [r7, #6]
 800394a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003954:	d108      	bne.n	8003968 <HAL_UART_Receive+0x8a>
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d104      	bne.n	8003968 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800395e:	2300      	movs	r3, #0
 8003960:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	61bb      	str	r3, [r7, #24]
 8003966:	e003      	b.n	8003970 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800396c:	2300      	movs	r3, #0
 800396e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003978:	e043      	b.n	8003a02 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	9300      	str	r3, [sp, #0]
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	2200      	movs	r2, #0
 8003982:	2120      	movs	r1, #32
 8003984:	68f8      	ldr	r0, [r7, #12]
 8003986:	f000 f84c 	bl	8003a22 <UART_WaitOnFlagUntilTimeout>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d001      	beq.n	8003994 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e042      	b.n	8003a1a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10c      	bne.n	80039b4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	3302      	adds	r3, #2
 80039b0:	61bb      	str	r3, [r7, #24]
 80039b2:	e01f      	b.n	80039f4 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039bc:	d007      	beq.n	80039ce <HAL_UART_Receive+0xf0>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d10a      	bne.n	80039dc <HAL_UART_Receive+0xfe>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d106      	bne.n	80039dc <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	b2da      	uxtb	r2, r3
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	701a      	strb	r2, [r3, #0]
 80039da:	e008      	b.n	80039ee <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039e8:	b2da      	uxtb	r2, r3
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	3301      	adds	r3, #1
 80039f2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	3b01      	subs	r3, #1
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d1b6      	bne.n	800397a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2220      	movs	r2, #32
 8003a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003a14:	2300      	movs	r3, #0
 8003a16:	e000      	b.n	8003a1a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003a18:	2302      	movs	r3, #2
  }
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3720      	adds	r7, #32
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b090      	sub	sp, #64	; 0x40
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	60f8      	str	r0, [r7, #12]
 8003a2a:	60b9      	str	r1, [r7, #8]
 8003a2c:	603b      	str	r3, [r7, #0]
 8003a2e:	4613      	mov	r3, r2
 8003a30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a32:	e050      	b.n	8003ad6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a3a:	d04c      	beq.n	8003ad6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003a3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d007      	beq.n	8003a52 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a42:	f7fd fdf9 	bl	8001638 <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d241      	bcs.n	8003ad6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	330c      	adds	r3, #12
 8003a58:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a5c:	e853 3f00 	ldrex	r3, [r3]
 8003a60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	330c      	adds	r3, #12
 8003a70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a72:	637a      	str	r2, [r7, #52]	; 0x34
 8003a74:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a76:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a7a:	e841 2300 	strex	r3, r2, [r1]
 8003a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1e5      	bne.n	8003a52 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	3314      	adds	r3, #20
 8003a8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	e853 3f00 	ldrex	r3, [r3]
 8003a94:	613b      	str	r3, [r7, #16]
   return(result);
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	f023 0301 	bic.w	r3, r3, #1
 8003a9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	3314      	adds	r3, #20
 8003aa4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003aa6:	623a      	str	r2, [r7, #32]
 8003aa8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aaa:	69f9      	ldr	r1, [r7, #28]
 8003aac:	6a3a      	ldr	r2, [r7, #32]
 8003aae:	e841 2300 	strex	r3, r2, [r1]
 8003ab2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1e5      	bne.n	8003a86 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2220      	movs	r2, #32
 8003abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2220      	movs	r2, #32
 8003ac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e00f      	b.n	8003af6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	4013      	ands	r3, r2
 8003ae0:	68ba      	ldr	r2, [r7, #8]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	bf0c      	ite	eq
 8003ae6:	2301      	moveq	r3, #1
 8003ae8:	2300      	movne	r3, #0
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	461a      	mov	r2, r3
 8003aee:	79fb      	ldrb	r3, [r7, #7]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d09f      	beq.n	8003a34 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3740      	adds	r7, #64	; 0x40
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
	...

08003b00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b04:	b0c0      	sub	sp, #256	; 0x100
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b1c:	68d9      	ldr	r1, [r3, #12]
 8003b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	ea40 0301 	orr.w	r3, r0, r1
 8003b28:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b2e:	689a      	ldr	r2, [r3, #8]
 8003b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	431a      	orrs	r2, r3
 8003b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	431a      	orrs	r2, r3
 8003b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b44:	69db      	ldr	r3, [r3, #28]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003b58:	f021 010c 	bic.w	r1, r1, #12
 8003b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003b66:	430b      	orrs	r3, r1
 8003b68:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b7a:	6999      	ldr	r1, [r3, #24]
 8003b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	ea40 0301 	orr.w	r3, r0, r1
 8003b86:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	4b8f      	ldr	r3, [pc, #572]	; (8003dcc <UART_SetConfig+0x2cc>)
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d005      	beq.n	8003ba0 <UART_SetConfig+0xa0>
 8003b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	4b8d      	ldr	r3, [pc, #564]	; (8003dd0 <UART_SetConfig+0x2d0>)
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d104      	bne.n	8003baa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ba0:	f7fe fc8a 	bl	80024b8 <HAL_RCC_GetPCLK2Freq>
 8003ba4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003ba8:	e003      	b.n	8003bb2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003baa:	f7fe fc71 	bl	8002490 <HAL_RCC_GetPCLK1Freq>
 8003bae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bb6:	69db      	ldr	r3, [r3, #28]
 8003bb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bbc:	f040 810c 	bne.w	8003dd8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003bc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003bca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003bce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003bd2:	4622      	mov	r2, r4
 8003bd4:	462b      	mov	r3, r5
 8003bd6:	1891      	adds	r1, r2, r2
 8003bd8:	65b9      	str	r1, [r7, #88]	; 0x58
 8003bda:	415b      	adcs	r3, r3
 8003bdc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bde:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003be2:	4621      	mov	r1, r4
 8003be4:	eb12 0801 	adds.w	r8, r2, r1
 8003be8:	4629      	mov	r1, r5
 8003bea:	eb43 0901 	adc.w	r9, r3, r1
 8003bee:	f04f 0200 	mov.w	r2, #0
 8003bf2:	f04f 0300 	mov.w	r3, #0
 8003bf6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bfa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bfe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c02:	4690      	mov	r8, r2
 8003c04:	4699      	mov	r9, r3
 8003c06:	4623      	mov	r3, r4
 8003c08:	eb18 0303 	adds.w	r3, r8, r3
 8003c0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003c10:	462b      	mov	r3, r5
 8003c12:	eb49 0303 	adc.w	r3, r9, r3
 8003c16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003c26:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003c2a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003c2e:	460b      	mov	r3, r1
 8003c30:	18db      	adds	r3, r3, r3
 8003c32:	653b      	str	r3, [r7, #80]	; 0x50
 8003c34:	4613      	mov	r3, r2
 8003c36:	eb42 0303 	adc.w	r3, r2, r3
 8003c3a:	657b      	str	r3, [r7, #84]	; 0x54
 8003c3c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003c40:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003c44:	f7fc fb34 	bl	80002b0 <__aeabi_uldivmod>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	460b      	mov	r3, r1
 8003c4c:	4b61      	ldr	r3, [pc, #388]	; (8003dd4 <UART_SetConfig+0x2d4>)
 8003c4e:	fba3 2302 	umull	r2, r3, r3, r2
 8003c52:	095b      	lsrs	r3, r3, #5
 8003c54:	011c      	lsls	r4, r3, #4
 8003c56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c60:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003c64:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003c68:	4642      	mov	r2, r8
 8003c6a:	464b      	mov	r3, r9
 8003c6c:	1891      	adds	r1, r2, r2
 8003c6e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003c70:	415b      	adcs	r3, r3
 8003c72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c74:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003c78:	4641      	mov	r1, r8
 8003c7a:	eb12 0a01 	adds.w	sl, r2, r1
 8003c7e:	4649      	mov	r1, r9
 8003c80:	eb43 0b01 	adc.w	fp, r3, r1
 8003c84:	f04f 0200 	mov.w	r2, #0
 8003c88:	f04f 0300 	mov.w	r3, #0
 8003c8c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c90:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c98:	4692      	mov	sl, r2
 8003c9a:	469b      	mov	fp, r3
 8003c9c:	4643      	mov	r3, r8
 8003c9e:	eb1a 0303 	adds.w	r3, sl, r3
 8003ca2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ca6:	464b      	mov	r3, r9
 8003ca8:	eb4b 0303 	adc.w	r3, fp, r3
 8003cac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003cbc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003cc0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	18db      	adds	r3, r3, r3
 8003cc8:	643b      	str	r3, [r7, #64]	; 0x40
 8003cca:	4613      	mov	r3, r2
 8003ccc:	eb42 0303 	adc.w	r3, r2, r3
 8003cd0:	647b      	str	r3, [r7, #68]	; 0x44
 8003cd2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003cd6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003cda:	f7fc fae9 	bl	80002b0 <__aeabi_uldivmod>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	4611      	mov	r1, r2
 8003ce4:	4b3b      	ldr	r3, [pc, #236]	; (8003dd4 <UART_SetConfig+0x2d4>)
 8003ce6:	fba3 2301 	umull	r2, r3, r3, r1
 8003cea:	095b      	lsrs	r3, r3, #5
 8003cec:	2264      	movs	r2, #100	; 0x64
 8003cee:	fb02 f303 	mul.w	r3, r2, r3
 8003cf2:	1acb      	subs	r3, r1, r3
 8003cf4:	00db      	lsls	r3, r3, #3
 8003cf6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003cfa:	4b36      	ldr	r3, [pc, #216]	; (8003dd4 <UART_SetConfig+0x2d4>)
 8003cfc:	fba3 2302 	umull	r2, r3, r3, r2
 8003d00:	095b      	lsrs	r3, r3, #5
 8003d02:	005b      	lsls	r3, r3, #1
 8003d04:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d08:	441c      	add	r4, r3
 8003d0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d14:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003d18:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003d1c:	4642      	mov	r2, r8
 8003d1e:	464b      	mov	r3, r9
 8003d20:	1891      	adds	r1, r2, r2
 8003d22:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d24:	415b      	adcs	r3, r3
 8003d26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d28:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003d2c:	4641      	mov	r1, r8
 8003d2e:	1851      	adds	r1, r2, r1
 8003d30:	6339      	str	r1, [r7, #48]	; 0x30
 8003d32:	4649      	mov	r1, r9
 8003d34:	414b      	adcs	r3, r1
 8003d36:	637b      	str	r3, [r7, #52]	; 0x34
 8003d38:	f04f 0200 	mov.w	r2, #0
 8003d3c:	f04f 0300 	mov.w	r3, #0
 8003d40:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003d44:	4659      	mov	r1, fp
 8003d46:	00cb      	lsls	r3, r1, #3
 8003d48:	4651      	mov	r1, sl
 8003d4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d4e:	4651      	mov	r1, sl
 8003d50:	00ca      	lsls	r2, r1, #3
 8003d52:	4610      	mov	r0, r2
 8003d54:	4619      	mov	r1, r3
 8003d56:	4603      	mov	r3, r0
 8003d58:	4642      	mov	r2, r8
 8003d5a:	189b      	adds	r3, r3, r2
 8003d5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d60:	464b      	mov	r3, r9
 8003d62:	460a      	mov	r2, r1
 8003d64:	eb42 0303 	adc.w	r3, r2, r3
 8003d68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003d78:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003d7c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003d80:	460b      	mov	r3, r1
 8003d82:	18db      	adds	r3, r3, r3
 8003d84:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d86:	4613      	mov	r3, r2
 8003d88:	eb42 0303 	adc.w	r3, r2, r3
 8003d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d92:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003d96:	f7fc fa8b 	bl	80002b0 <__aeabi_uldivmod>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	4b0d      	ldr	r3, [pc, #52]	; (8003dd4 <UART_SetConfig+0x2d4>)
 8003da0:	fba3 1302 	umull	r1, r3, r3, r2
 8003da4:	095b      	lsrs	r3, r3, #5
 8003da6:	2164      	movs	r1, #100	; 0x64
 8003da8:	fb01 f303 	mul.w	r3, r1, r3
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	00db      	lsls	r3, r3, #3
 8003db0:	3332      	adds	r3, #50	; 0x32
 8003db2:	4a08      	ldr	r2, [pc, #32]	; (8003dd4 <UART_SetConfig+0x2d4>)
 8003db4:	fba2 2303 	umull	r2, r3, r2, r3
 8003db8:	095b      	lsrs	r3, r3, #5
 8003dba:	f003 0207 	and.w	r2, r3, #7
 8003dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4422      	add	r2, r4
 8003dc6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003dc8:	e105      	b.n	8003fd6 <UART_SetConfig+0x4d6>
 8003dca:	bf00      	nop
 8003dcc:	40011000 	.word	0x40011000
 8003dd0:	40011400 	.word	0x40011400
 8003dd4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003dd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003de2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003de6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003dea:	4642      	mov	r2, r8
 8003dec:	464b      	mov	r3, r9
 8003dee:	1891      	adds	r1, r2, r2
 8003df0:	6239      	str	r1, [r7, #32]
 8003df2:	415b      	adcs	r3, r3
 8003df4:	627b      	str	r3, [r7, #36]	; 0x24
 8003df6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003dfa:	4641      	mov	r1, r8
 8003dfc:	1854      	adds	r4, r2, r1
 8003dfe:	4649      	mov	r1, r9
 8003e00:	eb43 0501 	adc.w	r5, r3, r1
 8003e04:	f04f 0200 	mov.w	r2, #0
 8003e08:	f04f 0300 	mov.w	r3, #0
 8003e0c:	00eb      	lsls	r3, r5, #3
 8003e0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e12:	00e2      	lsls	r2, r4, #3
 8003e14:	4614      	mov	r4, r2
 8003e16:	461d      	mov	r5, r3
 8003e18:	4643      	mov	r3, r8
 8003e1a:	18e3      	adds	r3, r4, r3
 8003e1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003e20:	464b      	mov	r3, r9
 8003e22:	eb45 0303 	adc.w	r3, r5, r3
 8003e26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003e36:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e3a:	f04f 0200 	mov.w	r2, #0
 8003e3e:	f04f 0300 	mov.w	r3, #0
 8003e42:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003e46:	4629      	mov	r1, r5
 8003e48:	008b      	lsls	r3, r1, #2
 8003e4a:	4621      	mov	r1, r4
 8003e4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e50:	4621      	mov	r1, r4
 8003e52:	008a      	lsls	r2, r1, #2
 8003e54:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003e58:	f7fc fa2a 	bl	80002b0 <__aeabi_uldivmod>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	460b      	mov	r3, r1
 8003e60:	4b60      	ldr	r3, [pc, #384]	; (8003fe4 <UART_SetConfig+0x4e4>)
 8003e62:	fba3 2302 	umull	r2, r3, r3, r2
 8003e66:	095b      	lsrs	r3, r3, #5
 8003e68:	011c      	lsls	r4, r3, #4
 8003e6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003e74:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003e78:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003e7c:	4642      	mov	r2, r8
 8003e7e:	464b      	mov	r3, r9
 8003e80:	1891      	adds	r1, r2, r2
 8003e82:	61b9      	str	r1, [r7, #24]
 8003e84:	415b      	adcs	r3, r3
 8003e86:	61fb      	str	r3, [r7, #28]
 8003e88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e8c:	4641      	mov	r1, r8
 8003e8e:	1851      	adds	r1, r2, r1
 8003e90:	6139      	str	r1, [r7, #16]
 8003e92:	4649      	mov	r1, r9
 8003e94:	414b      	adcs	r3, r1
 8003e96:	617b      	str	r3, [r7, #20]
 8003e98:	f04f 0200 	mov.w	r2, #0
 8003e9c:	f04f 0300 	mov.w	r3, #0
 8003ea0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ea4:	4659      	mov	r1, fp
 8003ea6:	00cb      	lsls	r3, r1, #3
 8003ea8:	4651      	mov	r1, sl
 8003eaa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003eae:	4651      	mov	r1, sl
 8003eb0:	00ca      	lsls	r2, r1, #3
 8003eb2:	4610      	mov	r0, r2
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	4642      	mov	r2, r8
 8003eba:	189b      	adds	r3, r3, r2
 8003ebc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ec0:	464b      	mov	r3, r9
 8003ec2:	460a      	mov	r2, r1
 8003ec4:	eb42 0303 	adc.w	r3, r2, r3
 8003ec8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ed6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003ed8:	f04f 0200 	mov.w	r2, #0
 8003edc:	f04f 0300 	mov.w	r3, #0
 8003ee0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003ee4:	4649      	mov	r1, r9
 8003ee6:	008b      	lsls	r3, r1, #2
 8003ee8:	4641      	mov	r1, r8
 8003eea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003eee:	4641      	mov	r1, r8
 8003ef0:	008a      	lsls	r2, r1, #2
 8003ef2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003ef6:	f7fc f9db 	bl	80002b0 <__aeabi_uldivmod>
 8003efa:	4602      	mov	r2, r0
 8003efc:	460b      	mov	r3, r1
 8003efe:	4b39      	ldr	r3, [pc, #228]	; (8003fe4 <UART_SetConfig+0x4e4>)
 8003f00:	fba3 1302 	umull	r1, r3, r3, r2
 8003f04:	095b      	lsrs	r3, r3, #5
 8003f06:	2164      	movs	r1, #100	; 0x64
 8003f08:	fb01 f303 	mul.w	r3, r1, r3
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	011b      	lsls	r3, r3, #4
 8003f10:	3332      	adds	r3, #50	; 0x32
 8003f12:	4a34      	ldr	r2, [pc, #208]	; (8003fe4 <UART_SetConfig+0x4e4>)
 8003f14:	fba2 2303 	umull	r2, r3, r2, r3
 8003f18:	095b      	lsrs	r3, r3, #5
 8003f1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f1e:	441c      	add	r4, r3
 8003f20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f24:	2200      	movs	r2, #0
 8003f26:	673b      	str	r3, [r7, #112]	; 0x70
 8003f28:	677a      	str	r2, [r7, #116]	; 0x74
 8003f2a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003f2e:	4642      	mov	r2, r8
 8003f30:	464b      	mov	r3, r9
 8003f32:	1891      	adds	r1, r2, r2
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	415b      	adcs	r3, r3
 8003f38:	60fb      	str	r3, [r7, #12]
 8003f3a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f3e:	4641      	mov	r1, r8
 8003f40:	1851      	adds	r1, r2, r1
 8003f42:	6039      	str	r1, [r7, #0]
 8003f44:	4649      	mov	r1, r9
 8003f46:	414b      	adcs	r3, r1
 8003f48:	607b      	str	r3, [r7, #4]
 8003f4a:	f04f 0200 	mov.w	r2, #0
 8003f4e:	f04f 0300 	mov.w	r3, #0
 8003f52:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f56:	4659      	mov	r1, fp
 8003f58:	00cb      	lsls	r3, r1, #3
 8003f5a:	4651      	mov	r1, sl
 8003f5c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f60:	4651      	mov	r1, sl
 8003f62:	00ca      	lsls	r2, r1, #3
 8003f64:	4610      	mov	r0, r2
 8003f66:	4619      	mov	r1, r3
 8003f68:	4603      	mov	r3, r0
 8003f6a:	4642      	mov	r2, r8
 8003f6c:	189b      	adds	r3, r3, r2
 8003f6e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f70:	464b      	mov	r3, r9
 8003f72:	460a      	mov	r2, r1
 8003f74:	eb42 0303 	adc.w	r3, r2, r3
 8003f78:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	663b      	str	r3, [r7, #96]	; 0x60
 8003f84:	667a      	str	r2, [r7, #100]	; 0x64
 8003f86:	f04f 0200 	mov.w	r2, #0
 8003f8a:	f04f 0300 	mov.w	r3, #0
 8003f8e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003f92:	4649      	mov	r1, r9
 8003f94:	008b      	lsls	r3, r1, #2
 8003f96:	4641      	mov	r1, r8
 8003f98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f9c:	4641      	mov	r1, r8
 8003f9e:	008a      	lsls	r2, r1, #2
 8003fa0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003fa4:	f7fc f984 	bl	80002b0 <__aeabi_uldivmod>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	460b      	mov	r3, r1
 8003fac:	4b0d      	ldr	r3, [pc, #52]	; (8003fe4 <UART_SetConfig+0x4e4>)
 8003fae:	fba3 1302 	umull	r1, r3, r3, r2
 8003fb2:	095b      	lsrs	r3, r3, #5
 8003fb4:	2164      	movs	r1, #100	; 0x64
 8003fb6:	fb01 f303 	mul.w	r3, r1, r3
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	011b      	lsls	r3, r3, #4
 8003fbe:	3332      	adds	r3, #50	; 0x32
 8003fc0:	4a08      	ldr	r2, [pc, #32]	; (8003fe4 <UART_SetConfig+0x4e4>)
 8003fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc6:	095b      	lsrs	r3, r3, #5
 8003fc8:	f003 020f 	and.w	r2, r3, #15
 8003fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4422      	add	r2, r4
 8003fd4:	609a      	str	r2, [r3, #8]
}
 8003fd6:	bf00      	nop
 8003fd8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fe2:	bf00      	nop
 8003fe4:	51eb851f 	.word	0x51eb851f

08003fe8 <__errno>:
 8003fe8:	4b01      	ldr	r3, [pc, #4]	; (8003ff0 <__errno+0x8>)
 8003fea:	6818      	ldr	r0, [r3, #0]
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	2000000c 	.word	0x2000000c

08003ff4 <__libc_init_array>:
 8003ff4:	b570      	push	{r4, r5, r6, lr}
 8003ff6:	4d0d      	ldr	r5, [pc, #52]	; (800402c <__libc_init_array+0x38>)
 8003ff8:	4c0d      	ldr	r4, [pc, #52]	; (8004030 <__libc_init_array+0x3c>)
 8003ffa:	1b64      	subs	r4, r4, r5
 8003ffc:	10a4      	asrs	r4, r4, #2
 8003ffe:	2600      	movs	r6, #0
 8004000:	42a6      	cmp	r6, r4
 8004002:	d109      	bne.n	8004018 <__libc_init_array+0x24>
 8004004:	4d0b      	ldr	r5, [pc, #44]	; (8004034 <__libc_init_array+0x40>)
 8004006:	4c0c      	ldr	r4, [pc, #48]	; (8004038 <__libc_init_array+0x44>)
 8004008:	f001 f952 	bl	80052b0 <_init>
 800400c:	1b64      	subs	r4, r4, r5
 800400e:	10a4      	asrs	r4, r4, #2
 8004010:	2600      	movs	r6, #0
 8004012:	42a6      	cmp	r6, r4
 8004014:	d105      	bne.n	8004022 <__libc_init_array+0x2e>
 8004016:	bd70      	pop	{r4, r5, r6, pc}
 8004018:	f855 3b04 	ldr.w	r3, [r5], #4
 800401c:	4798      	blx	r3
 800401e:	3601      	adds	r6, #1
 8004020:	e7ee      	b.n	8004000 <__libc_init_array+0xc>
 8004022:	f855 3b04 	ldr.w	r3, [r5], #4
 8004026:	4798      	blx	r3
 8004028:	3601      	adds	r6, #1
 800402a:	e7f2      	b.n	8004012 <__libc_init_array+0x1e>
 800402c:	08005714 	.word	0x08005714
 8004030:	08005714 	.word	0x08005714
 8004034:	08005714 	.word	0x08005714
 8004038:	08005718 	.word	0x08005718

0800403c <isprint>:
 800403c:	4b02      	ldr	r3, [pc, #8]	; (8004048 <isprint+0xc>)
 800403e:	4418      	add	r0, r3
 8004040:	7840      	ldrb	r0, [r0, #1]
 8004042:	f000 0097 	and.w	r0, r0, #151	; 0x97
 8004046:	4770      	bx	lr
 8004048:	0800555c 	.word	0x0800555c

0800404c <memset>:
 800404c:	4402      	add	r2, r0
 800404e:	4603      	mov	r3, r0
 8004050:	4293      	cmp	r3, r2
 8004052:	d100      	bne.n	8004056 <memset+0xa>
 8004054:	4770      	bx	lr
 8004056:	f803 1b01 	strb.w	r1, [r3], #1
 800405a:	e7f9      	b.n	8004050 <memset+0x4>

0800405c <siscanf>:
 800405c:	b40e      	push	{r1, r2, r3}
 800405e:	b510      	push	{r4, lr}
 8004060:	b09f      	sub	sp, #124	; 0x7c
 8004062:	ac21      	add	r4, sp, #132	; 0x84
 8004064:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004068:	f854 2b04 	ldr.w	r2, [r4], #4
 800406c:	9201      	str	r2, [sp, #4]
 800406e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8004072:	9004      	str	r0, [sp, #16]
 8004074:	9008      	str	r0, [sp, #32]
 8004076:	f7fc f8bd 	bl	80001f4 <strlen>
 800407a:	4b0c      	ldr	r3, [pc, #48]	; (80040ac <siscanf+0x50>)
 800407c:	9005      	str	r0, [sp, #20]
 800407e:	9009      	str	r0, [sp, #36]	; 0x24
 8004080:	930d      	str	r3, [sp, #52]	; 0x34
 8004082:	480b      	ldr	r0, [pc, #44]	; (80040b0 <siscanf+0x54>)
 8004084:	9a01      	ldr	r2, [sp, #4]
 8004086:	6800      	ldr	r0, [r0, #0]
 8004088:	9403      	str	r4, [sp, #12]
 800408a:	2300      	movs	r3, #0
 800408c:	9311      	str	r3, [sp, #68]	; 0x44
 800408e:	9316      	str	r3, [sp, #88]	; 0x58
 8004090:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004094:	f8ad 301e 	strh.w	r3, [sp, #30]
 8004098:	a904      	add	r1, sp, #16
 800409a:	4623      	mov	r3, r4
 800409c:	f000 f9e2 	bl	8004464 <__ssvfiscanf_r>
 80040a0:	b01f      	add	sp, #124	; 0x7c
 80040a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040a6:	b003      	add	sp, #12
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	080040b5 	.word	0x080040b5
 80040b0:	2000000c 	.word	0x2000000c

080040b4 <__seofread>:
 80040b4:	2000      	movs	r0, #0
 80040b6:	4770      	bx	lr

080040b8 <_vsiprintf_r>:
 80040b8:	b500      	push	{lr}
 80040ba:	b09b      	sub	sp, #108	; 0x6c
 80040bc:	9100      	str	r1, [sp, #0]
 80040be:	9104      	str	r1, [sp, #16]
 80040c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80040c4:	9105      	str	r1, [sp, #20]
 80040c6:	9102      	str	r1, [sp, #8]
 80040c8:	4905      	ldr	r1, [pc, #20]	; (80040e0 <_vsiprintf_r+0x28>)
 80040ca:	9103      	str	r1, [sp, #12]
 80040cc:	4669      	mov	r1, sp
 80040ce:	f000 f86f 	bl	80041b0 <_svfiprintf_r>
 80040d2:	9b00      	ldr	r3, [sp, #0]
 80040d4:	2200      	movs	r2, #0
 80040d6:	701a      	strb	r2, [r3, #0]
 80040d8:	b01b      	add	sp, #108	; 0x6c
 80040da:	f85d fb04 	ldr.w	pc, [sp], #4
 80040de:	bf00      	nop
 80040e0:	ffff0208 	.word	0xffff0208

080040e4 <vsiprintf>:
 80040e4:	4613      	mov	r3, r2
 80040e6:	460a      	mov	r2, r1
 80040e8:	4601      	mov	r1, r0
 80040ea:	4802      	ldr	r0, [pc, #8]	; (80040f4 <vsiprintf+0x10>)
 80040ec:	6800      	ldr	r0, [r0, #0]
 80040ee:	f7ff bfe3 	b.w	80040b8 <_vsiprintf_r>
 80040f2:	bf00      	nop
 80040f4:	2000000c 	.word	0x2000000c

080040f8 <__ssputs_r>:
 80040f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040fc:	688e      	ldr	r6, [r1, #8]
 80040fe:	429e      	cmp	r6, r3
 8004100:	4682      	mov	sl, r0
 8004102:	460c      	mov	r4, r1
 8004104:	4690      	mov	r8, r2
 8004106:	461f      	mov	r7, r3
 8004108:	d838      	bhi.n	800417c <__ssputs_r+0x84>
 800410a:	898a      	ldrh	r2, [r1, #12]
 800410c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004110:	d032      	beq.n	8004178 <__ssputs_r+0x80>
 8004112:	6825      	ldr	r5, [r4, #0]
 8004114:	6909      	ldr	r1, [r1, #16]
 8004116:	eba5 0901 	sub.w	r9, r5, r1
 800411a:	6965      	ldr	r5, [r4, #20]
 800411c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004120:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004124:	3301      	adds	r3, #1
 8004126:	444b      	add	r3, r9
 8004128:	106d      	asrs	r5, r5, #1
 800412a:	429d      	cmp	r5, r3
 800412c:	bf38      	it	cc
 800412e:	461d      	movcc	r5, r3
 8004130:	0553      	lsls	r3, r2, #21
 8004132:	d531      	bpl.n	8004198 <__ssputs_r+0xa0>
 8004134:	4629      	mov	r1, r5
 8004136:	f000 fff3 	bl	8005120 <_malloc_r>
 800413a:	4606      	mov	r6, r0
 800413c:	b950      	cbnz	r0, 8004154 <__ssputs_r+0x5c>
 800413e:	230c      	movs	r3, #12
 8004140:	f8ca 3000 	str.w	r3, [sl]
 8004144:	89a3      	ldrh	r3, [r4, #12]
 8004146:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800414a:	81a3      	strh	r3, [r4, #12]
 800414c:	f04f 30ff 	mov.w	r0, #4294967295
 8004150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004154:	6921      	ldr	r1, [r4, #16]
 8004156:	464a      	mov	r2, r9
 8004158:	f000 ff4e 	bl	8004ff8 <memcpy>
 800415c:	89a3      	ldrh	r3, [r4, #12]
 800415e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004162:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004166:	81a3      	strh	r3, [r4, #12]
 8004168:	6126      	str	r6, [r4, #16]
 800416a:	6165      	str	r5, [r4, #20]
 800416c:	444e      	add	r6, r9
 800416e:	eba5 0509 	sub.w	r5, r5, r9
 8004172:	6026      	str	r6, [r4, #0]
 8004174:	60a5      	str	r5, [r4, #8]
 8004176:	463e      	mov	r6, r7
 8004178:	42be      	cmp	r6, r7
 800417a:	d900      	bls.n	800417e <__ssputs_r+0x86>
 800417c:	463e      	mov	r6, r7
 800417e:	6820      	ldr	r0, [r4, #0]
 8004180:	4632      	mov	r2, r6
 8004182:	4641      	mov	r1, r8
 8004184:	f000 ff46 	bl	8005014 <memmove>
 8004188:	68a3      	ldr	r3, [r4, #8]
 800418a:	1b9b      	subs	r3, r3, r6
 800418c:	60a3      	str	r3, [r4, #8]
 800418e:	6823      	ldr	r3, [r4, #0]
 8004190:	4433      	add	r3, r6
 8004192:	6023      	str	r3, [r4, #0]
 8004194:	2000      	movs	r0, #0
 8004196:	e7db      	b.n	8004150 <__ssputs_r+0x58>
 8004198:	462a      	mov	r2, r5
 800419a:	f001 f835 	bl	8005208 <_realloc_r>
 800419e:	4606      	mov	r6, r0
 80041a0:	2800      	cmp	r0, #0
 80041a2:	d1e1      	bne.n	8004168 <__ssputs_r+0x70>
 80041a4:	6921      	ldr	r1, [r4, #16]
 80041a6:	4650      	mov	r0, sl
 80041a8:	f000 ff4e 	bl	8005048 <_free_r>
 80041ac:	e7c7      	b.n	800413e <__ssputs_r+0x46>
	...

080041b0 <_svfiprintf_r>:
 80041b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041b4:	4698      	mov	r8, r3
 80041b6:	898b      	ldrh	r3, [r1, #12]
 80041b8:	061b      	lsls	r3, r3, #24
 80041ba:	b09d      	sub	sp, #116	; 0x74
 80041bc:	4607      	mov	r7, r0
 80041be:	460d      	mov	r5, r1
 80041c0:	4614      	mov	r4, r2
 80041c2:	d50e      	bpl.n	80041e2 <_svfiprintf_r+0x32>
 80041c4:	690b      	ldr	r3, [r1, #16]
 80041c6:	b963      	cbnz	r3, 80041e2 <_svfiprintf_r+0x32>
 80041c8:	2140      	movs	r1, #64	; 0x40
 80041ca:	f000 ffa9 	bl	8005120 <_malloc_r>
 80041ce:	6028      	str	r0, [r5, #0]
 80041d0:	6128      	str	r0, [r5, #16]
 80041d2:	b920      	cbnz	r0, 80041de <_svfiprintf_r+0x2e>
 80041d4:	230c      	movs	r3, #12
 80041d6:	603b      	str	r3, [r7, #0]
 80041d8:	f04f 30ff 	mov.w	r0, #4294967295
 80041dc:	e0d1      	b.n	8004382 <_svfiprintf_r+0x1d2>
 80041de:	2340      	movs	r3, #64	; 0x40
 80041e0:	616b      	str	r3, [r5, #20]
 80041e2:	2300      	movs	r3, #0
 80041e4:	9309      	str	r3, [sp, #36]	; 0x24
 80041e6:	2320      	movs	r3, #32
 80041e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80041ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80041f0:	2330      	movs	r3, #48	; 0x30
 80041f2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800439c <_svfiprintf_r+0x1ec>
 80041f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80041fa:	f04f 0901 	mov.w	r9, #1
 80041fe:	4623      	mov	r3, r4
 8004200:	469a      	mov	sl, r3
 8004202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004206:	b10a      	cbz	r2, 800420c <_svfiprintf_r+0x5c>
 8004208:	2a25      	cmp	r2, #37	; 0x25
 800420a:	d1f9      	bne.n	8004200 <_svfiprintf_r+0x50>
 800420c:	ebba 0b04 	subs.w	fp, sl, r4
 8004210:	d00b      	beq.n	800422a <_svfiprintf_r+0x7a>
 8004212:	465b      	mov	r3, fp
 8004214:	4622      	mov	r2, r4
 8004216:	4629      	mov	r1, r5
 8004218:	4638      	mov	r0, r7
 800421a:	f7ff ff6d 	bl	80040f8 <__ssputs_r>
 800421e:	3001      	adds	r0, #1
 8004220:	f000 80aa 	beq.w	8004378 <_svfiprintf_r+0x1c8>
 8004224:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004226:	445a      	add	r2, fp
 8004228:	9209      	str	r2, [sp, #36]	; 0x24
 800422a:	f89a 3000 	ldrb.w	r3, [sl]
 800422e:	2b00      	cmp	r3, #0
 8004230:	f000 80a2 	beq.w	8004378 <_svfiprintf_r+0x1c8>
 8004234:	2300      	movs	r3, #0
 8004236:	f04f 32ff 	mov.w	r2, #4294967295
 800423a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800423e:	f10a 0a01 	add.w	sl, sl, #1
 8004242:	9304      	str	r3, [sp, #16]
 8004244:	9307      	str	r3, [sp, #28]
 8004246:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800424a:	931a      	str	r3, [sp, #104]	; 0x68
 800424c:	4654      	mov	r4, sl
 800424e:	2205      	movs	r2, #5
 8004250:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004254:	4851      	ldr	r0, [pc, #324]	; (800439c <_svfiprintf_r+0x1ec>)
 8004256:	f7fb ffdb 	bl	8000210 <memchr>
 800425a:	9a04      	ldr	r2, [sp, #16]
 800425c:	b9d8      	cbnz	r0, 8004296 <_svfiprintf_r+0xe6>
 800425e:	06d0      	lsls	r0, r2, #27
 8004260:	bf44      	itt	mi
 8004262:	2320      	movmi	r3, #32
 8004264:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004268:	0711      	lsls	r1, r2, #28
 800426a:	bf44      	itt	mi
 800426c:	232b      	movmi	r3, #43	; 0x2b
 800426e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004272:	f89a 3000 	ldrb.w	r3, [sl]
 8004276:	2b2a      	cmp	r3, #42	; 0x2a
 8004278:	d015      	beq.n	80042a6 <_svfiprintf_r+0xf6>
 800427a:	9a07      	ldr	r2, [sp, #28]
 800427c:	4654      	mov	r4, sl
 800427e:	2000      	movs	r0, #0
 8004280:	f04f 0c0a 	mov.w	ip, #10
 8004284:	4621      	mov	r1, r4
 8004286:	f811 3b01 	ldrb.w	r3, [r1], #1
 800428a:	3b30      	subs	r3, #48	; 0x30
 800428c:	2b09      	cmp	r3, #9
 800428e:	d94e      	bls.n	800432e <_svfiprintf_r+0x17e>
 8004290:	b1b0      	cbz	r0, 80042c0 <_svfiprintf_r+0x110>
 8004292:	9207      	str	r2, [sp, #28]
 8004294:	e014      	b.n	80042c0 <_svfiprintf_r+0x110>
 8004296:	eba0 0308 	sub.w	r3, r0, r8
 800429a:	fa09 f303 	lsl.w	r3, r9, r3
 800429e:	4313      	orrs	r3, r2
 80042a0:	9304      	str	r3, [sp, #16]
 80042a2:	46a2      	mov	sl, r4
 80042a4:	e7d2      	b.n	800424c <_svfiprintf_r+0x9c>
 80042a6:	9b03      	ldr	r3, [sp, #12]
 80042a8:	1d19      	adds	r1, r3, #4
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	9103      	str	r1, [sp, #12]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	bfbb      	ittet	lt
 80042b2:	425b      	neglt	r3, r3
 80042b4:	f042 0202 	orrlt.w	r2, r2, #2
 80042b8:	9307      	strge	r3, [sp, #28]
 80042ba:	9307      	strlt	r3, [sp, #28]
 80042bc:	bfb8      	it	lt
 80042be:	9204      	strlt	r2, [sp, #16]
 80042c0:	7823      	ldrb	r3, [r4, #0]
 80042c2:	2b2e      	cmp	r3, #46	; 0x2e
 80042c4:	d10c      	bne.n	80042e0 <_svfiprintf_r+0x130>
 80042c6:	7863      	ldrb	r3, [r4, #1]
 80042c8:	2b2a      	cmp	r3, #42	; 0x2a
 80042ca:	d135      	bne.n	8004338 <_svfiprintf_r+0x188>
 80042cc:	9b03      	ldr	r3, [sp, #12]
 80042ce:	1d1a      	adds	r2, r3, #4
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	9203      	str	r2, [sp, #12]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	bfb8      	it	lt
 80042d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80042dc:	3402      	adds	r4, #2
 80042de:	9305      	str	r3, [sp, #20]
 80042e0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80043ac <_svfiprintf_r+0x1fc>
 80042e4:	7821      	ldrb	r1, [r4, #0]
 80042e6:	2203      	movs	r2, #3
 80042e8:	4650      	mov	r0, sl
 80042ea:	f7fb ff91 	bl	8000210 <memchr>
 80042ee:	b140      	cbz	r0, 8004302 <_svfiprintf_r+0x152>
 80042f0:	2340      	movs	r3, #64	; 0x40
 80042f2:	eba0 000a 	sub.w	r0, r0, sl
 80042f6:	fa03 f000 	lsl.w	r0, r3, r0
 80042fa:	9b04      	ldr	r3, [sp, #16]
 80042fc:	4303      	orrs	r3, r0
 80042fe:	3401      	adds	r4, #1
 8004300:	9304      	str	r3, [sp, #16]
 8004302:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004306:	4826      	ldr	r0, [pc, #152]	; (80043a0 <_svfiprintf_r+0x1f0>)
 8004308:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800430c:	2206      	movs	r2, #6
 800430e:	f7fb ff7f 	bl	8000210 <memchr>
 8004312:	2800      	cmp	r0, #0
 8004314:	d038      	beq.n	8004388 <_svfiprintf_r+0x1d8>
 8004316:	4b23      	ldr	r3, [pc, #140]	; (80043a4 <_svfiprintf_r+0x1f4>)
 8004318:	bb1b      	cbnz	r3, 8004362 <_svfiprintf_r+0x1b2>
 800431a:	9b03      	ldr	r3, [sp, #12]
 800431c:	3307      	adds	r3, #7
 800431e:	f023 0307 	bic.w	r3, r3, #7
 8004322:	3308      	adds	r3, #8
 8004324:	9303      	str	r3, [sp, #12]
 8004326:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004328:	4433      	add	r3, r6
 800432a:	9309      	str	r3, [sp, #36]	; 0x24
 800432c:	e767      	b.n	80041fe <_svfiprintf_r+0x4e>
 800432e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004332:	460c      	mov	r4, r1
 8004334:	2001      	movs	r0, #1
 8004336:	e7a5      	b.n	8004284 <_svfiprintf_r+0xd4>
 8004338:	2300      	movs	r3, #0
 800433a:	3401      	adds	r4, #1
 800433c:	9305      	str	r3, [sp, #20]
 800433e:	4619      	mov	r1, r3
 8004340:	f04f 0c0a 	mov.w	ip, #10
 8004344:	4620      	mov	r0, r4
 8004346:	f810 2b01 	ldrb.w	r2, [r0], #1
 800434a:	3a30      	subs	r2, #48	; 0x30
 800434c:	2a09      	cmp	r2, #9
 800434e:	d903      	bls.n	8004358 <_svfiprintf_r+0x1a8>
 8004350:	2b00      	cmp	r3, #0
 8004352:	d0c5      	beq.n	80042e0 <_svfiprintf_r+0x130>
 8004354:	9105      	str	r1, [sp, #20]
 8004356:	e7c3      	b.n	80042e0 <_svfiprintf_r+0x130>
 8004358:	fb0c 2101 	mla	r1, ip, r1, r2
 800435c:	4604      	mov	r4, r0
 800435e:	2301      	movs	r3, #1
 8004360:	e7f0      	b.n	8004344 <_svfiprintf_r+0x194>
 8004362:	ab03      	add	r3, sp, #12
 8004364:	9300      	str	r3, [sp, #0]
 8004366:	462a      	mov	r2, r5
 8004368:	4b0f      	ldr	r3, [pc, #60]	; (80043a8 <_svfiprintf_r+0x1f8>)
 800436a:	a904      	add	r1, sp, #16
 800436c:	4638      	mov	r0, r7
 800436e:	f3af 8000 	nop.w
 8004372:	1c42      	adds	r2, r0, #1
 8004374:	4606      	mov	r6, r0
 8004376:	d1d6      	bne.n	8004326 <_svfiprintf_r+0x176>
 8004378:	89ab      	ldrh	r3, [r5, #12]
 800437a:	065b      	lsls	r3, r3, #25
 800437c:	f53f af2c 	bmi.w	80041d8 <_svfiprintf_r+0x28>
 8004380:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004382:	b01d      	add	sp, #116	; 0x74
 8004384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004388:	ab03      	add	r3, sp, #12
 800438a:	9300      	str	r3, [sp, #0]
 800438c:	462a      	mov	r2, r5
 800438e:	4b06      	ldr	r3, [pc, #24]	; (80043a8 <_svfiprintf_r+0x1f8>)
 8004390:	a904      	add	r1, sp, #16
 8004392:	4638      	mov	r0, r7
 8004394:	f000 fa4c 	bl	8004830 <_printf_i>
 8004398:	e7eb      	b.n	8004372 <_svfiprintf_r+0x1c2>
 800439a:	bf00      	nop
 800439c:	0800565d 	.word	0x0800565d
 80043a0:	08005667 	.word	0x08005667
 80043a4:	00000000 	.word	0x00000000
 80043a8:	080040f9 	.word	0x080040f9
 80043ac:	08005663 	.word	0x08005663

080043b0 <_sungetc_r>:
 80043b0:	b538      	push	{r3, r4, r5, lr}
 80043b2:	1c4b      	adds	r3, r1, #1
 80043b4:	4614      	mov	r4, r2
 80043b6:	d103      	bne.n	80043c0 <_sungetc_r+0x10>
 80043b8:	f04f 35ff 	mov.w	r5, #4294967295
 80043bc:	4628      	mov	r0, r5
 80043be:	bd38      	pop	{r3, r4, r5, pc}
 80043c0:	8993      	ldrh	r3, [r2, #12]
 80043c2:	f023 0320 	bic.w	r3, r3, #32
 80043c6:	8193      	strh	r3, [r2, #12]
 80043c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80043ca:	6852      	ldr	r2, [r2, #4]
 80043cc:	b2cd      	uxtb	r5, r1
 80043ce:	b18b      	cbz	r3, 80043f4 <_sungetc_r+0x44>
 80043d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80043d2:	4293      	cmp	r3, r2
 80043d4:	dd08      	ble.n	80043e8 <_sungetc_r+0x38>
 80043d6:	6823      	ldr	r3, [r4, #0]
 80043d8:	1e5a      	subs	r2, r3, #1
 80043da:	6022      	str	r2, [r4, #0]
 80043dc:	f803 5c01 	strb.w	r5, [r3, #-1]
 80043e0:	6863      	ldr	r3, [r4, #4]
 80043e2:	3301      	adds	r3, #1
 80043e4:	6063      	str	r3, [r4, #4]
 80043e6:	e7e9      	b.n	80043bc <_sungetc_r+0xc>
 80043e8:	4621      	mov	r1, r4
 80043ea:	f000 fdc9 	bl	8004f80 <__submore>
 80043ee:	2800      	cmp	r0, #0
 80043f0:	d0f1      	beq.n	80043d6 <_sungetc_r+0x26>
 80043f2:	e7e1      	b.n	80043b8 <_sungetc_r+0x8>
 80043f4:	6921      	ldr	r1, [r4, #16]
 80043f6:	6823      	ldr	r3, [r4, #0]
 80043f8:	b151      	cbz	r1, 8004410 <_sungetc_r+0x60>
 80043fa:	4299      	cmp	r1, r3
 80043fc:	d208      	bcs.n	8004410 <_sungetc_r+0x60>
 80043fe:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8004402:	42a9      	cmp	r1, r5
 8004404:	d104      	bne.n	8004410 <_sungetc_r+0x60>
 8004406:	3b01      	subs	r3, #1
 8004408:	3201      	adds	r2, #1
 800440a:	6023      	str	r3, [r4, #0]
 800440c:	6062      	str	r2, [r4, #4]
 800440e:	e7d5      	b.n	80043bc <_sungetc_r+0xc>
 8004410:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8004414:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004418:	6363      	str	r3, [r4, #52]	; 0x34
 800441a:	2303      	movs	r3, #3
 800441c:	63a3      	str	r3, [r4, #56]	; 0x38
 800441e:	4623      	mov	r3, r4
 8004420:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004424:	6023      	str	r3, [r4, #0]
 8004426:	2301      	movs	r3, #1
 8004428:	e7dc      	b.n	80043e4 <_sungetc_r+0x34>

0800442a <__ssrefill_r>:
 800442a:	b510      	push	{r4, lr}
 800442c:	460c      	mov	r4, r1
 800442e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004430:	b169      	cbz	r1, 800444e <__ssrefill_r+0x24>
 8004432:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004436:	4299      	cmp	r1, r3
 8004438:	d001      	beq.n	800443e <__ssrefill_r+0x14>
 800443a:	f000 fe05 	bl	8005048 <_free_r>
 800443e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004440:	6063      	str	r3, [r4, #4]
 8004442:	2000      	movs	r0, #0
 8004444:	6360      	str	r0, [r4, #52]	; 0x34
 8004446:	b113      	cbz	r3, 800444e <__ssrefill_r+0x24>
 8004448:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800444a:	6023      	str	r3, [r4, #0]
 800444c:	bd10      	pop	{r4, pc}
 800444e:	6923      	ldr	r3, [r4, #16]
 8004450:	6023      	str	r3, [r4, #0]
 8004452:	2300      	movs	r3, #0
 8004454:	6063      	str	r3, [r4, #4]
 8004456:	89a3      	ldrh	r3, [r4, #12]
 8004458:	f043 0320 	orr.w	r3, r3, #32
 800445c:	81a3      	strh	r3, [r4, #12]
 800445e:	f04f 30ff 	mov.w	r0, #4294967295
 8004462:	e7f3      	b.n	800444c <__ssrefill_r+0x22>

08004464 <__ssvfiscanf_r>:
 8004464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004468:	460c      	mov	r4, r1
 800446a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800446e:	2100      	movs	r1, #0
 8004470:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8004474:	49a6      	ldr	r1, [pc, #664]	; (8004710 <__ssvfiscanf_r+0x2ac>)
 8004476:	91a0      	str	r1, [sp, #640]	; 0x280
 8004478:	f10d 0804 	add.w	r8, sp, #4
 800447c:	49a5      	ldr	r1, [pc, #660]	; (8004714 <__ssvfiscanf_r+0x2b0>)
 800447e:	4fa6      	ldr	r7, [pc, #664]	; (8004718 <__ssvfiscanf_r+0x2b4>)
 8004480:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800471c <__ssvfiscanf_r+0x2b8>
 8004484:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8004488:	4606      	mov	r6, r0
 800448a:	91a1      	str	r1, [sp, #644]	; 0x284
 800448c:	9300      	str	r3, [sp, #0]
 800448e:	7813      	ldrb	r3, [r2, #0]
 8004490:	2b00      	cmp	r3, #0
 8004492:	f000 815a 	beq.w	800474a <__ssvfiscanf_r+0x2e6>
 8004496:	5dd9      	ldrb	r1, [r3, r7]
 8004498:	f011 0108 	ands.w	r1, r1, #8
 800449c:	f102 0501 	add.w	r5, r2, #1
 80044a0:	d019      	beq.n	80044d6 <__ssvfiscanf_r+0x72>
 80044a2:	6863      	ldr	r3, [r4, #4]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	dd0f      	ble.n	80044c8 <__ssvfiscanf_r+0x64>
 80044a8:	6823      	ldr	r3, [r4, #0]
 80044aa:	781a      	ldrb	r2, [r3, #0]
 80044ac:	5cba      	ldrb	r2, [r7, r2]
 80044ae:	0712      	lsls	r2, r2, #28
 80044b0:	d401      	bmi.n	80044b6 <__ssvfiscanf_r+0x52>
 80044b2:	462a      	mov	r2, r5
 80044b4:	e7eb      	b.n	800448e <__ssvfiscanf_r+0x2a>
 80044b6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80044b8:	3201      	adds	r2, #1
 80044ba:	9245      	str	r2, [sp, #276]	; 0x114
 80044bc:	6862      	ldr	r2, [r4, #4]
 80044be:	3301      	adds	r3, #1
 80044c0:	3a01      	subs	r2, #1
 80044c2:	6062      	str	r2, [r4, #4]
 80044c4:	6023      	str	r3, [r4, #0]
 80044c6:	e7ec      	b.n	80044a2 <__ssvfiscanf_r+0x3e>
 80044c8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80044ca:	4621      	mov	r1, r4
 80044cc:	4630      	mov	r0, r6
 80044ce:	4798      	blx	r3
 80044d0:	2800      	cmp	r0, #0
 80044d2:	d0e9      	beq.n	80044a8 <__ssvfiscanf_r+0x44>
 80044d4:	e7ed      	b.n	80044b2 <__ssvfiscanf_r+0x4e>
 80044d6:	2b25      	cmp	r3, #37	; 0x25
 80044d8:	d012      	beq.n	8004500 <__ssvfiscanf_r+0x9c>
 80044da:	469a      	mov	sl, r3
 80044dc:	6863      	ldr	r3, [r4, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	f340 8091 	ble.w	8004606 <__ssvfiscanf_r+0x1a2>
 80044e4:	6822      	ldr	r2, [r4, #0]
 80044e6:	7813      	ldrb	r3, [r2, #0]
 80044e8:	4553      	cmp	r3, sl
 80044ea:	f040 812e 	bne.w	800474a <__ssvfiscanf_r+0x2e6>
 80044ee:	6863      	ldr	r3, [r4, #4]
 80044f0:	3b01      	subs	r3, #1
 80044f2:	6063      	str	r3, [r4, #4]
 80044f4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80044f6:	3201      	adds	r2, #1
 80044f8:	3301      	adds	r3, #1
 80044fa:	6022      	str	r2, [r4, #0]
 80044fc:	9345      	str	r3, [sp, #276]	; 0x114
 80044fe:	e7d8      	b.n	80044b2 <__ssvfiscanf_r+0x4e>
 8004500:	9141      	str	r1, [sp, #260]	; 0x104
 8004502:	9143      	str	r1, [sp, #268]	; 0x10c
 8004504:	7853      	ldrb	r3, [r2, #1]
 8004506:	2b2a      	cmp	r3, #42	; 0x2a
 8004508:	bf02      	ittt	eq
 800450a:	2310      	moveq	r3, #16
 800450c:	1c95      	addeq	r5, r2, #2
 800450e:	9341      	streq	r3, [sp, #260]	; 0x104
 8004510:	220a      	movs	r2, #10
 8004512:	46aa      	mov	sl, r5
 8004514:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8004518:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800451c:	2b09      	cmp	r3, #9
 800451e:	d91d      	bls.n	800455c <__ssvfiscanf_r+0xf8>
 8004520:	487e      	ldr	r0, [pc, #504]	; (800471c <__ssvfiscanf_r+0x2b8>)
 8004522:	2203      	movs	r2, #3
 8004524:	f7fb fe74 	bl	8000210 <memchr>
 8004528:	b140      	cbz	r0, 800453c <__ssvfiscanf_r+0xd8>
 800452a:	2301      	movs	r3, #1
 800452c:	eba0 0009 	sub.w	r0, r0, r9
 8004530:	fa03 f000 	lsl.w	r0, r3, r0
 8004534:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004536:	4318      	orrs	r0, r3
 8004538:	9041      	str	r0, [sp, #260]	; 0x104
 800453a:	4655      	mov	r5, sl
 800453c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004540:	2b78      	cmp	r3, #120	; 0x78
 8004542:	d806      	bhi.n	8004552 <__ssvfiscanf_r+0xee>
 8004544:	2b57      	cmp	r3, #87	; 0x57
 8004546:	d810      	bhi.n	800456a <__ssvfiscanf_r+0x106>
 8004548:	2b25      	cmp	r3, #37	; 0x25
 800454a:	d0c6      	beq.n	80044da <__ssvfiscanf_r+0x76>
 800454c:	d856      	bhi.n	80045fc <__ssvfiscanf_r+0x198>
 800454e:	2b00      	cmp	r3, #0
 8004550:	d064      	beq.n	800461c <__ssvfiscanf_r+0x1b8>
 8004552:	2303      	movs	r3, #3
 8004554:	9347      	str	r3, [sp, #284]	; 0x11c
 8004556:	230a      	movs	r3, #10
 8004558:	9342      	str	r3, [sp, #264]	; 0x108
 800455a:	e071      	b.n	8004640 <__ssvfiscanf_r+0x1dc>
 800455c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800455e:	fb02 1103 	mla	r1, r2, r3, r1
 8004562:	3930      	subs	r1, #48	; 0x30
 8004564:	9143      	str	r1, [sp, #268]	; 0x10c
 8004566:	4655      	mov	r5, sl
 8004568:	e7d3      	b.n	8004512 <__ssvfiscanf_r+0xae>
 800456a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800456e:	2a20      	cmp	r2, #32
 8004570:	d8ef      	bhi.n	8004552 <__ssvfiscanf_r+0xee>
 8004572:	a101      	add	r1, pc, #4	; (adr r1, 8004578 <__ssvfiscanf_r+0x114>)
 8004574:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004578:	0800462b 	.word	0x0800462b
 800457c:	08004553 	.word	0x08004553
 8004580:	08004553 	.word	0x08004553
 8004584:	08004689 	.word	0x08004689
 8004588:	08004553 	.word	0x08004553
 800458c:	08004553 	.word	0x08004553
 8004590:	08004553 	.word	0x08004553
 8004594:	08004553 	.word	0x08004553
 8004598:	08004553 	.word	0x08004553
 800459c:	08004553 	.word	0x08004553
 80045a0:	08004553 	.word	0x08004553
 80045a4:	0800469f 	.word	0x0800469f
 80045a8:	08004675 	.word	0x08004675
 80045ac:	08004603 	.word	0x08004603
 80045b0:	08004603 	.word	0x08004603
 80045b4:	08004603 	.word	0x08004603
 80045b8:	08004553 	.word	0x08004553
 80045bc:	08004679 	.word	0x08004679
 80045c0:	08004553 	.word	0x08004553
 80045c4:	08004553 	.word	0x08004553
 80045c8:	08004553 	.word	0x08004553
 80045cc:	08004553 	.word	0x08004553
 80045d0:	080046af 	.word	0x080046af
 80045d4:	08004681 	.word	0x08004681
 80045d8:	08004623 	.word	0x08004623
 80045dc:	08004553 	.word	0x08004553
 80045e0:	08004553 	.word	0x08004553
 80045e4:	080046ab 	.word	0x080046ab
 80045e8:	08004553 	.word	0x08004553
 80045ec:	08004675 	.word	0x08004675
 80045f0:	08004553 	.word	0x08004553
 80045f4:	08004553 	.word	0x08004553
 80045f8:	0800462b 	.word	0x0800462b
 80045fc:	3b45      	subs	r3, #69	; 0x45
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d8a7      	bhi.n	8004552 <__ssvfiscanf_r+0xee>
 8004602:	2305      	movs	r3, #5
 8004604:	e01b      	b.n	800463e <__ssvfiscanf_r+0x1da>
 8004606:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004608:	4621      	mov	r1, r4
 800460a:	4630      	mov	r0, r6
 800460c:	4798      	blx	r3
 800460e:	2800      	cmp	r0, #0
 8004610:	f43f af68 	beq.w	80044e4 <__ssvfiscanf_r+0x80>
 8004614:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004616:	2800      	cmp	r0, #0
 8004618:	f040 808d 	bne.w	8004736 <__ssvfiscanf_r+0x2d2>
 800461c:	f04f 30ff 	mov.w	r0, #4294967295
 8004620:	e08f      	b.n	8004742 <__ssvfiscanf_r+0x2de>
 8004622:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004624:	f042 0220 	orr.w	r2, r2, #32
 8004628:	9241      	str	r2, [sp, #260]	; 0x104
 800462a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800462c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004630:	9241      	str	r2, [sp, #260]	; 0x104
 8004632:	2210      	movs	r2, #16
 8004634:	2b6f      	cmp	r3, #111	; 0x6f
 8004636:	9242      	str	r2, [sp, #264]	; 0x108
 8004638:	bf34      	ite	cc
 800463a:	2303      	movcc	r3, #3
 800463c:	2304      	movcs	r3, #4
 800463e:	9347      	str	r3, [sp, #284]	; 0x11c
 8004640:	6863      	ldr	r3, [r4, #4]
 8004642:	2b00      	cmp	r3, #0
 8004644:	dd42      	ble.n	80046cc <__ssvfiscanf_r+0x268>
 8004646:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004648:	0659      	lsls	r1, r3, #25
 800464a:	d404      	bmi.n	8004656 <__ssvfiscanf_r+0x1f2>
 800464c:	6823      	ldr	r3, [r4, #0]
 800464e:	781a      	ldrb	r2, [r3, #0]
 8004650:	5cba      	ldrb	r2, [r7, r2]
 8004652:	0712      	lsls	r2, r2, #28
 8004654:	d441      	bmi.n	80046da <__ssvfiscanf_r+0x276>
 8004656:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8004658:	2b02      	cmp	r3, #2
 800465a:	dc50      	bgt.n	80046fe <__ssvfiscanf_r+0x29a>
 800465c:	466b      	mov	r3, sp
 800465e:	4622      	mov	r2, r4
 8004660:	a941      	add	r1, sp, #260	; 0x104
 8004662:	4630      	mov	r0, r6
 8004664:	f000 fa0a 	bl	8004a7c <_scanf_chars>
 8004668:	2801      	cmp	r0, #1
 800466a:	d06e      	beq.n	800474a <__ssvfiscanf_r+0x2e6>
 800466c:	2802      	cmp	r0, #2
 800466e:	f47f af20 	bne.w	80044b2 <__ssvfiscanf_r+0x4e>
 8004672:	e7cf      	b.n	8004614 <__ssvfiscanf_r+0x1b0>
 8004674:	220a      	movs	r2, #10
 8004676:	e7dd      	b.n	8004634 <__ssvfiscanf_r+0x1d0>
 8004678:	2300      	movs	r3, #0
 800467a:	9342      	str	r3, [sp, #264]	; 0x108
 800467c:	2303      	movs	r3, #3
 800467e:	e7de      	b.n	800463e <__ssvfiscanf_r+0x1da>
 8004680:	2308      	movs	r3, #8
 8004682:	9342      	str	r3, [sp, #264]	; 0x108
 8004684:	2304      	movs	r3, #4
 8004686:	e7da      	b.n	800463e <__ssvfiscanf_r+0x1da>
 8004688:	4629      	mov	r1, r5
 800468a:	4640      	mov	r0, r8
 800468c:	f000 fb48 	bl	8004d20 <__sccl>
 8004690:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004692:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004696:	9341      	str	r3, [sp, #260]	; 0x104
 8004698:	4605      	mov	r5, r0
 800469a:	2301      	movs	r3, #1
 800469c:	e7cf      	b.n	800463e <__ssvfiscanf_r+0x1da>
 800469e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80046a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046a4:	9341      	str	r3, [sp, #260]	; 0x104
 80046a6:	2300      	movs	r3, #0
 80046a8:	e7c9      	b.n	800463e <__ssvfiscanf_r+0x1da>
 80046aa:	2302      	movs	r3, #2
 80046ac:	e7c7      	b.n	800463e <__ssvfiscanf_r+0x1da>
 80046ae:	9841      	ldr	r0, [sp, #260]	; 0x104
 80046b0:	06c3      	lsls	r3, r0, #27
 80046b2:	f53f aefe 	bmi.w	80044b2 <__ssvfiscanf_r+0x4e>
 80046b6:	9b00      	ldr	r3, [sp, #0]
 80046b8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80046ba:	1d19      	adds	r1, r3, #4
 80046bc:	9100      	str	r1, [sp, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f010 0f01 	tst.w	r0, #1
 80046c4:	bf14      	ite	ne
 80046c6:	801a      	strhne	r2, [r3, #0]
 80046c8:	601a      	streq	r2, [r3, #0]
 80046ca:	e6f2      	b.n	80044b2 <__ssvfiscanf_r+0x4e>
 80046cc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80046ce:	4621      	mov	r1, r4
 80046d0:	4630      	mov	r0, r6
 80046d2:	4798      	blx	r3
 80046d4:	2800      	cmp	r0, #0
 80046d6:	d0b6      	beq.n	8004646 <__ssvfiscanf_r+0x1e2>
 80046d8:	e79c      	b.n	8004614 <__ssvfiscanf_r+0x1b0>
 80046da:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80046dc:	3201      	adds	r2, #1
 80046de:	9245      	str	r2, [sp, #276]	; 0x114
 80046e0:	6862      	ldr	r2, [r4, #4]
 80046e2:	3a01      	subs	r2, #1
 80046e4:	2a00      	cmp	r2, #0
 80046e6:	6062      	str	r2, [r4, #4]
 80046e8:	dd02      	ble.n	80046f0 <__ssvfiscanf_r+0x28c>
 80046ea:	3301      	adds	r3, #1
 80046ec:	6023      	str	r3, [r4, #0]
 80046ee:	e7ad      	b.n	800464c <__ssvfiscanf_r+0x1e8>
 80046f0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80046f2:	4621      	mov	r1, r4
 80046f4:	4630      	mov	r0, r6
 80046f6:	4798      	blx	r3
 80046f8:	2800      	cmp	r0, #0
 80046fa:	d0a7      	beq.n	800464c <__ssvfiscanf_r+0x1e8>
 80046fc:	e78a      	b.n	8004614 <__ssvfiscanf_r+0x1b0>
 80046fe:	2b04      	cmp	r3, #4
 8004700:	dc0e      	bgt.n	8004720 <__ssvfiscanf_r+0x2bc>
 8004702:	466b      	mov	r3, sp
 8004704:	4622      	mov	r2, r4
 8004706:	a941      	add	r1, sp, #260	; 0x104
 8004708:	4630      	mov	r0, r6
 800470a:	f000 fa11 	bl	8004b30 <_scanf_i>
 800470e:	e7ab      	b.n	8004668 <__ssvfiscanf_r+0x204>
 8004710:	080043b1 	.word	0x080043b1
 8004714:	0800442b 	.word	0x0800442b
 8004718:	0800555d 	.word	0x0800555d
 800471c:	08005663 	.word	0x08005663
 8004720:	4b0b      	ldr	r3, [pc, #44]	; (8004750 <__ssvfiscanf_r+0x2ec>)
 8004722:	2b00      	cmp	r3, #0
 8004724:	f43f aec5 	beq.w	80044b2 <__ssvfiscanf_r+0x4e>
 8004728:	466b      	mov	r3, sp
 800472a:	4622      	mov	r2, r4
 800472c:	a941      	add	r1, sp, #260	; 0x104
 800472e:	4630      	mov	r0, r6
 8004730:	f3af 8000 	nop.w
 8004734:	e798      	b.n	8004668 <__ssvfiscanf_r+0x204>
 8004736:	89a3      	ldrh	r3, [r4, #12]
 8004738:	f013 0f40 	tst.w	r3, #64	; 0x40
 800473c:	bf18      	it	ne
 800473e:	f04f 30ff 	movne.w	r0, #4294967295
 8004742:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8004746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800474a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800474c:	e7f9      	b.n	8004742 <__ssvfiscanf_r+0x2de>
 800474e:	bf00      	nop
 8004750:	00000000 	.word	0x00000000

08004754 <_printf_common>:
 8004754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004758:	4616      	mov	r6, r2
 800475a:	4699      	mov	r9, r3
 800475c:	688a      	ldr	r2, [r1, #8]
 800475e:	690b      	ldr	r3, [r1, #16]
 8004760:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004764:	4293      	cmp	r3, r2
 8004766:	bfb8      	it	lt
 8004768:	4613      	movlt	r3, r2
 800476a:	6033      	str	r3, [r6, #0]
 800476c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004770:	4607      	mov	r7, r0
 8004772:	460c      	mov	r4, r1
 8004774:	b10a      	cbz	r2, 800477a <_printf_common+0x26>
 8004776:	3301      	adds	r3, #1
 8004778:	6033      	str	r3, [r6, #0]
 800477a:	6823      	ldr	r3, [r4, #0]
 800477c:	0699      	lsls	r1, r3, #26
 800477e:	bf42      	ittt	mi
 8004780:	6833      	ldrmi	r3, [r6, #0]
 8004782:	3302      	addmi	r3, #2
 8004784:	6033      	strmi	r3, [r6, #0]
 8004786:	6825      	ldr	r5, [r4, #0]
 8004788:	f015 0506 	ands.w	r5, r5, #6
 800478c:	d106      	bne.n	800479c <_printf_common+0x48>
 800478e:	f104 0a19 	add.w	sl, r4, #25
 8004792:	68e3      	ldr	r3, [r4, #12]
 8004794:	6832      	ldr	r2, [r6, #0]
 8004796:	1a9b      	subs	r3, r3, r2
 8004798:	42ab      	cmp	r3, r5
 800479a:	dc26      	bgt.n	80047ea <_printf_common+0x96>
 800479c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80047a0:	1e13      	subs	r3, r2, #0
 80047a2:	6822      	ldr	r2, [r4, #0]
 80047a4:	bf18      	it	ne
 80047a6:	2301      	movne	r3, #1
 80047a8:	0692      	lsls	r2, r2, #26
 80047aa:	d42b      	bmi.n	8004804 <_printf_common+0xb0>
 80047ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80047b0:	4649      	mov	r1, r9
 80047b2:	4638      	mov	r0, r7
 80047b4:	47c0      	blx	r8
 80047b6:	3001      	adds	r0, #1
 80047b8:	d01e      	beq.n	80047f8 <_printf_common+0xa4>
 80047ba:	6823      	ldr	r3, [r4, #0]
 80047bc:	68e5      	ldr	r5, [r4, #12]
 80047be:	6832      	ldr	r2, [r6, #0]
 80047c0:	f003 0306 	and.w	r3, r3, #6
 80047c4:	2b04      	cmp	r3, #4
 80047c6:	bf08      	it	eq
 80047c8:	1aad      	subeq	r5, r5, r2
 80047ca:	68a3      	ldr	r3, [r4, #8]
 80047cc:	6922      	ldr	r2, [r4, #16]
 80047ce:	bf0c      	ite	eq
 80047d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80047d4:	2500      	movne	r5, #0
 80047d6:	4293      	cmp	r3, r2
 80047d8:	bfc4      	itt	gt
 80047da:	1a9b      	subgt	r3, r3, r2
 80047dc:	18ed      	addgt	r5, r5, r3
 80047de:	2600      	movs	r6, #0
 80047e0:	341a      	adds	r4, #26
 80047e2:	42b5      	cmp	r5, r6
 80047e4:	d11a      	bne.n	800481c <_printf_common+0xc8>
 80047e6:	2000      	movs	r0, #0
 80047e8:	e008      	b.n	80047fc <_printf_common+0xa8>
 80047ea:	2301      	movs	r3, #1
 80047ec:	4652      	mov	r2, sl
 80047ee:	4649      	mov	r1, r9
 80047f0:	4638      	mov	r0, r7
 80047f2:	47c0      	blx	r8
 80047f4:	3001      	adds	r0, #1
 80047f6:	d103      	bne.n	8004800 <_printf_common+0xac>
 80047f8:	f04f 30ff 	mov.w	r0, #4294967295
 80047fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004800:	3501      	adds	r5, #1
 8004802:	e7c6      	b.n	8004792 <_printf_common+0x3e>
 8004804:	18e1      	adds	r1, r4, r3
 8004806:	1c5a      	adds	r2, r3, #1
 8004808:	2030      	movs	r0, #48	; 0x30
 800480a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800480e:	4422      	add	r2, r4
 8004810:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004814:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004818:	3302      	adds	r3, #2
 800481a:	e7c7      	b.n	80047ac <_printf_common+0x58>
 800481c:	2301      	movs	r3, #1
 800481e:	4622      	mov	r2, r4
 8004820:	4649      	mov	r1, r9
 8004822:	4638      	mov	r0, r7
 8004824:	47c0      	blx	r8
 8004826:	3001      	adds	r0, #1
 8004828:	d0e6      	beq.n	80047f8 <_printf_common+0xa4>
 800482a:	3601      	adds	r6, #1
 800482c:	e7d9      	b.n	80047e2 <_printf_common+0x8e>
	...

08004830 <_printf_i>:
 8004830:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004834:	7e0f      	ldrb	r7, [r1, #24]
 8004836:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004838:	2f78      	cmp	r7, #120	; 0x78
 800483a:	4691      	mov	r9, r2
 800483c:	4680      	mov	r8, r0
 800483e:	460c      	mov	r4, r1
 8004840:	469a      	mov	sl, r3
 8004842:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004846:	d807      	bhi.n	8004858 <_printf_i+0x28>
 8004848:	2f62      	cmp	r7, #98	; 0x62
 800484a:	d80a      	bhi.n	8004862 <_printf_i+0x32>
 800484c:	2f00      	cmp	r7, #0
 800484e:	f000 80d8 	beq.w	8004a02 <_printf_i+0x1d2>
 8004852:	2f58      	cmp	r7, #88	; 0x58
 8004854:	f000 80a3 	beq.w	800499e <_printf_i+0x16e>
 8004858:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800485c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004860:	e03a      	b.n	80048d8 <_printf_i+0xa8>
 8004862:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004866:	2b15      	cmp	r3, #21
 8004868:	d8f6      	bhi.n	8004858 <_printf_i+0x28>
 800486a:	a101      	add	r1, pc, #4	; (adr r1, 8004870 <_printf_i+0x40>)
 800486c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004870:	080048c9 	.word	0x080048c9
 8004874:	080048dd 	.word	0x080048dd
 8004878:	08004859 	.word	0x08004859
 800487c:	08004859 	.word	0x08004859
 8004880:	08004859 	.word	0x08004859
 8004884:	08004859 	.word	0x08004859
 8004888:	080048dd 	.word	0x080048dd
 800488c:	08004859 	.word	0x08004859
 8004890:	08004859 	.word	0x08004859
 8004894:	08004859 	.word	0x08004859
 8004898:	08004859 	.word	0x08004859
 800489c:	080049e9 	.word	0x080049e9
 80048a0:	0800490d 	.word	0x0800490d
 80048a4:	080049cb 	.word	0x080049cb
 80048a8:	08004859 	.word	0x08004859
 80048ac:	08004859 	.word	0x08004859
 80048b0:	08004a0b 	.word	0x08004a0b
 80048b4:	08004859 	.word	0x08004859
 80048b8:	0800490d 	.word	0x0800490d
 80048bc:	08004859 	.word	0x08004859
 80048c0:	08004859 	.word	0x08004859
 80048c4:	080049d3 	.word	0x080049d3
 80048c8:	682b      	ldr	r3, [r5, #0]
 80048ca:	1d1a      	adds	r2, r3, #4
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	602a      	str	r2, [r5, #0]
 80048d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80048d8:	2301      	movs	r3, #1
 80048da:	e0a3      	b.n	8004a24 <_printf_i+0x1f4>
 80048dc:	6820      	ldr	r0, [r4, #0]
 80048de:	6829      	ldr	r1, [r5, #0]
 80048e0:	0606      	lsls	r6, r0, #24
 80048e2:	f101 0304 	add.w	r3, r1, #4
 80048e6:	d50a      	bpl.n	80048fe <_printf_i+0xce>
 80048e8:	680e      	ldr	r6, [r1, #0]
 80048ea:	602b      	str	r3, [r5, #0]
 80048ec:	2e00      	cmp	r6, #0
 80048ee:	da03      	bge.n	80048f8 <_printf_i+0xc8>
 80048f0:	232d      	movs	r3, #45	; 0x2d
 80048f2:	4276      	negs	r6, r6
 80048f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048f8:	485e      	ldr	r0, [pc, #376]	; (8004a74 <_printf_i+0x244>)
 80048fa:	230a      	movs	r3, #10
 80048fc:	e019      	b.n	8004932 <_printf_i+0x102>
 80048fe:	680e      	ldr	r6, [r1, #0]
 8004900:	602b      	str	r3, [r5, #0]
 8004902:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004906:	bf18      	it	ne
 8004908:	b236      	sxthne	r6, r6
 800490a:	e7ef      	b.n	80048ec <_printf_i+0xbc>
 800490c:	682b      	ldr	r3, [r5, #0]
 800490e:	6820      	ldr	r0, [r4, #0]
 8004910:	1d19      	adds	r1, r3, #4
 8004912:	6029      	str	r1, [r5, #0]
 8004914:	0601      	lsls	r1, r0, #24
 8004916:	d501      	bpl.n	800491c <_printf_i+0xec>
 8004918:	681e      	ldr	r6, [r3, #0]
 800491a:	e002      	b.n	8004922 <_printf_i+0xf2>
 800491c:	0646      	lsls	r6, r0, #25
 800491e:	d5fb      	bpl.n	8004918 <_printf_i+0xe8>
 8004920:	881e      	ldrh	r6, [r3, #0]
 8004922:	4854      	ldr	r0, [pc, #336]	; (8004a74 <_printf_i+0x244>)
 8004924:	2f6f      	cmp	r7, #111	; 0x6f
 8004926:	bf0c      	ite	eq
 8004928:	2308      	moveq	r3, #8
 800492a:	230a      	movne	r3, #10
 800492c:	2100      	movs	r1, #0
 800492e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004932:	6865      	ldr	r5, [r4, #4]
 8004934:	60a5      	str	r5, [r4, #8]
 8004936:	2d00      	cmp	r5, #0
 8004938:	bfa2      	ittt	ge
 800493a:	6821      	ldrge	r1, [r4, #0]
 800493c:	f021 0104 	bicge.w	r1, r1, #4
 8004940:	6021      	strge	r1, [r4, #0]
 8004942:	b90e      	cbnz	r6, 8004948 <_printf_i+0x118>
 8004944:	2d00      	cmp	r5, #0
 8004946:	d04d      	beq.n	80049e4 <_printf_i+0x1b4>
 8004948:	4615      	mov	r5, r2
 800494a:	fbb6 f1f3 	udiv	r1, r6, r3
 800494e:	fb03 6711 	mls	r7, r3, r1, r6
 8004952:	5dc7      	ldrb	r7, [r0, r7]
 8004954:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004958:	4637      	mov	r7, r6
 800495a:	42bb      	cmp	r3, r7
 800495c:	460e      	mov	r6, r1
 800495e:	d9f4      	bls.n	800494a <_printf_i+0x11a>
 8004960:	2b08      	cmp	r3, #8
 8004962:	d10b      	bne.n	800497c <_printf_i+0x14c>
 8004964:	6823      	ldr	r3, [r4, #0]
 8004966:	07de      	lsls	r6, r3, #31
 8004968:	d508      	bpl.n	800497c <_printf_i+0x14c>
 800496a:	6923      	ldr	r3, [r4, #16]
 800496c:	6861      	ldr	r1, [r4, #4]
 800496e:	4299      	cmp	r1, r3
 8004970:	bfde      	ittt	le
 8004972:	2330      	movle	r3, #48	; 0x30
 8004974:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004978:	f105 35ff 	addle.w	r5, r5, #4294967295
 800497c:	1b52      	subs	r2, r2, r5
 800497e:	6122      	str	r2, [r4, #16]
 8004980:	f8cd a000 	str.w	sl, [sp]
 8004984:	464b      	mov	r3, r9
 8004986:	aa03      	add	r2, sp, #12
 8004988:	4621      	mov	r1, r4
 800498a:	4640      	mov	r0, r8
 800498c:	f7ff fee2 	bl	8004754 <_printf_common>
 8004990:	3001      	adds	r0, #1
 8004992:	d14c      	bne.n	8004a2e <_printf_i+0x1fe>
 8004994:	f04f 30ff 	mov.w	r0, #4294967295
 8004998:	b004      	add	sp, #16
 800499a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800499e:	4835      	ldr	r0, [pc, #212]	; (8004a74 <_printf_i+0x244>)
 80049a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80049a4:	6829      	ldr	r1, [r5, #0]
 80049a6:	6823      	ldr	r3, [r4, #0]
 80049a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80049ac:	6029      	str	r1, [r5, #0]
 80049ae:	061d      	lsls	r5, r3, #24
 80049b0:	d514      	bpl.n	80049dc <_printf_i+0x1ac>
 80049b2:	07df      	lsls	r7, r3, #31
 80049b4:	bf44      	itt	mi
 80049b6:	f043 0320 	orrmi.w	r3, r3, #32
 80049ba:	6023      	strmi	r3, [r4, #0]
 80049bc:	b91e      	cbnz	r6, 80049c6 <_printf_i+0x196>
 80049be:	6823      	ldr	r3, [r4, #0]
 80049c0:	f023 0320 	bic.w	r3, r3, #32
 80049c4:	6023      	str	r3, [r4, #0]
 80049c6:	2310      	movs	r3, #16
 80049c8:	e7b0      	b.n	800492c <_printf_i+0xfc>
 80049ca:	6823      	ldr	r3, [r4, #0]
 80049cc:	f043 0320 	orr.w	r3, r3, #32
 80049d0:	6023      	str	r3, [r4, #0]
 80049d2:	2378      	movs	r3, #120	; 0x78
 80049d4:	4828      	ldr	r0, [pc, #160]	; (8004a78 <_printf_i+0x248>)
 80049d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80049da:	e7e3      	b.n	80049a4 <_printf_i+0x174>
 80049dc:	0659      	lsls	r1, r3, #25
 80049de:	bf48      	it	mi
 80049e0:	b2b6      	uxthmi	r6, r6
 80049e2:	e7e6      	b.n	80049b2 <_printf_i+0x182>
 80049e4:	4615      	mov	r5, r2
 80049e6:	e7bb      	b.n	8004960 <_printf_i+0x130>
 80049e8:	682b      	ldr	r3, [r5, #0]
 80049ea:	6826      	ldr	r6, [r4, #0]
 80049ec:	6961      	ldr	r1, [r4, #20]
 80049ee:	1d18      	adds	r0, r3, #4
 80049f0:	6028      	str	r0, [r5, #0]
 80049f2:	0635      	lsls	r5, r6, #24
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	d501      	bpl.n	80049fc <_printf_i+0x1cc>
 80049f8:	6019      	str	r1, [r3, #0]
 80049fa:	e002      	b.n	8004a02 <_printf_i+0x1d2>
 80049fc:	0670      	lsls	r0, r6, #25
 80049fe:	d5fb      	bpl.n	80049f8 <_printf_i+0x1c8>
 8004a00:	8019      	strh	r1, [r3, #0]
 8004a02:	2300      	movs	r3, #0
 8004a04:	6123      	str	r3, [r4, #16]
 8004a06:	4615      	mov	r5, r2
 8004a08:	e7ba      	b.n	8004980 <_printf_i+0x150>
 8004a0a:	682b      	ldr	r3, [r5, #0]
 8004a0c:	1d1a      	adds	r2, r3, #4
 8004a0e:	602a      	str	r2, [r5, #0]
 8004a10:	681d      	ldr	r5, [r3, #0]
 8004a12:	6862      	ldr	r2, [r4, #4]
 8004a14:	2100      	movs	r1, #0
 8004a16:	4628      	mov	r0, r5
 8004a18:	f7fb fbfa 	bl	8000210 <memchr>
 8004a1c:	b108      	cbz	r0, 8004a22 <_printf_i+0x1f2>
 8004a1e:	1b40      	subs	r0, r0, r5
 8004a20:	6060      	str	r0, [r4, #4]
 8004a22:	6863      	ldr	r3, [r4, #4]
 8004a24:	6123      	str	r3, [r4, #16]
 8004a26:	2300      	movs	r3, #0
 8004a28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a2c:	e7a8      	b.n	8004980 <_printf_i+0x150>
 8004a2e:	6923      	ldr	r3, [r4, #16]
 8004a30:	462a      	mov	r2, r5
 8004a32:	4649      	mov	r1, r9
 8004a34:	4640      	mov	r0, r8
 8004a36:	47d0      	blx	sl
 8004a38:	3001      	adds	r0, #1
 8004a3a:	d0ab      	beq.n	8004994 <_printf_i+0x164>
 8004a3c:	6823      	ldr	r3, [r4, #0]
 8004a3e:	079b      	lsls	r3, r3, #30
 8004a40:	d413      	bmi.n	8004a6a <_printf_i+0x23a>
 8004a42:	68e0      	ldr	r0, [r4, #12]
 8004a44:	9b03      	ldr	r3, [sp, #12]
 8004a46:	4298      	cmp	r0, r3
 8004a48:	bfb8      	it	lt
 8004a4a:	4618      	movlt	r0, r3
 8004a4c:	e7a4      	b.n	8004998 <_printf_i+0x168>
 8004a4e:	2301      	movs	r3, #1
 8004a50:	4632      	mov	r2, r6
 8004a52:	4649      	mov	r1, r9
 8004a54:	4640      	mov	r0, r8
 8004a56:	47d0      	blx	sl
 8004a58:	3001      	adds	r0, #1
 8004a5a:	d09b      	beq.n	8004994 <_printf_i+0x164>
 8004a5c:	3501      	adds	r5, #1
 8004a5e:	68e3      	ldr	r3, [r4, #12]
 8004a60:	9903      	ldr	r1, [sp, #12]
 8004a62:	1a5b      	subs	r3, r3, r1
 8004a64:	42ab      	cmp	r3, r5
 8004a66:	dcf2      	bgt.n	8004a4e <_printf_i+0x21e>
 8004a68:	e7eb      	b.n	8004a42 <_printf_i+0x212>
 8004a6a:	2500      	movs	r5, #0
 8004a6c:	f104 0619 	add.w	r6, r4, #25
 8004a70:	e7f5      	b.n	8004a5e <_printf_i+0x22e>
 8004a72:	bf00      	nop
 8004a74:	0800566e 	.word	0x0800566e
 8004a78:	0800567f 	.word	0x0800567f

08004a7c <_scanf_chars>:
 8004a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a80:	4615      	mov	r5, r2
 8004a82:	688a      	ldr	r2, [r1, #8]
 8004a84:	4680      	mov	r8, r0
 8004a86:	460c      	mov	r4, r1
 8004a88:	b932      	cbnz	r2, 8004a98 <_scanf_chars+0x1c>
 8004a8a:	698a      	ldr	r2, [r1, #24]
 8004a8c:	2a00      	cmp	r2, #0
 8004a8e:	bf0c      	ite	eq
 8004a90:	2201      	moveq	r2, #1
 8004a92:	f04f 32ff 	movne.w	r2, #4294967295
 8004a96:	608a      	str	r2, [r1, #8]
 8004a98:	6822      	ldr	r2, [r4, #0]
 8004a9a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8004b2c <_scanf_chars+0xb0>
 8004a9e:	06d1      	lsls	r1, r2, #27
 8004aa0:	bf5f      	itttt	pl
 8004aa2:	681a      	ldrpl	r2, [r3, #0]
 8004aa4:	1d11      	addpl	r1, r2, #4
 8004aa6:	6019      	strpl	r1, [r3, #0]
 8004aa8:	6816      	ldrpl	r6, [r2, #0]
 8004aaa:	2700      	movs	r7, #0
 8004aac:	69a0      	ldr	r0, [r4, #24]
 8004aae:	b188      	cbz	r0, 8004ad4 <_scanf_chars+0x58>
 8004ab0:	2801      	cmp	r0, #1
 8004ab2:	d107      	bne.n	8004ac4 <_scanf_chars+0x48>
 8004ab4:	682a      	ldr	r2, [r5, #0]
 8004ab6:	7811      	ldrb	r1, [r2, #0]
 8004ab8:	6962      	ldr	r2, [r4, #20]
 8004aba:	5c52      	ldrb	r2, [r2, r1]
 8004abc:	b952      	cbnz	r2, 8004ad4 <_scanf_chars+0x58>
 8004abe:	2f00      	cmp	r7, #0
 8004ac0:	d031      	beq.n	8004b26 <_scanf_chars+0xaa>
 8004ac2:	e022      	b.n	8004b0a <_scanf_chars+0x8e>
 8004ac4:	2802      	cmp	r0, #2
 8004ac6:	d120      	bne.n	8004b0a <_scanf_chars+0x8e>
 8004ac8:	682b      	ldr	r3, [r5, #0]
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	f813 3009 	ldrb.w	r3, [r3, r9]
 8004ad0:	071b      	lsls	r3, r3, #28
 8004ad2:	d41a      	bmi.n	8004b0a <_scanf_chars+0x8e>
 8004ad4:	6823      	ldr	r3, [r4, #0]
 8004ad6:	06da      	lsls	r2, r3, #27
 8004ad8:	bf5e      	ittt	pl
 8004ada:	682b      	ldrpl	r3, [r5, #0]
 8004adc:	781b      	ldrbpl	r3, [r3, #0]
 8004ade:	f806 3b01 	strbpl.w	r3, [r6], #1
 8004ae2:	682a      	ldr	r2, [r5, #0]
 8004ae4:	686b      	ldr	r3, [r5, #4]
 8004ae6:	3201      	adds	r2, #1
 8004ae8:	602a      	str	r2, [r5, #0]
 8004aea:	68a2      	ldr	r2, [r4, #8]
 8004aec:	3b01      	subs	r3, #1
 8004aee:	3a01      	subs	r2, #1
 8004af0:	606b      	str	r3, [r5, #4]
 8004af2:	3701      	adds	r7, #1
 8004af4:	60a2      	str	r2, [r4, #8]
 8004af6:	b142      	cbz	r2, 8004b0a <_scanf_chars+0x8e>
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	dcd7      	bgt.n	8004aac <_scanf_chars+0x30>
 8004afc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004b00:	4629      	mov	r1, r5
 8004b02:	4640      	mov	r0, r8
 8004b04:	4798      	blx	r3
 8004b06:	2800      	cmp	r0, #0
 8004b08:	d0d0      	beq.n	8004aac <_scanf_chars+0x30>
 8004b0a:	6823      	ldr	r3, [r4, #0]
 8004b0c:	f013 0310 	ands.w	r3, r3, #16
 8004b10:	d105      	bne.n	8004b1e <_scanf_chars+0xa2>
 8004b12:	68e2      	ldr	r2, [r4, #12]
 8004b14:	3201      	adds	r2, #1
 8004b16:	60e2      	str	r2, [r4, #12]
 8004b18:	69a2      	ldr	r2, [r4, #24]
 8004b1a:	b102      	cbz	r2, 8004b1e <_scanf_chars+0xa2>
 8004b1c:	7033      	strb	r3, [r6, #0]
 8004b1e:	6923      	ldr	r3, [r4, #16]
 8004b20:	443b      	add	r3, r7
 8004b22:	6123      	str	r3, [r4, #16]
 8004b24:	2000      	movs	r0, #0
 8004b26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b2a:	bf00      	nop
 8004b2c:	0800555d 	.word	0x0800555d

08004b30 <_scanf_i>:
 8004b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b34:	4698      	mov	r8, r3
 8004b36:	4b76      	ldr	r3, [pc, #472]	; (8004d10 <_scanf_i+0x1e0>)
 8004b38:	460c      	mov	r4, r1
 8004b3a:	4682      	mov	sl, r0
 8004b3c:	4616      	mov	r6, r2
 8004b3e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004b42:	b087      	sub	sp, #28
 8004b44:	ab03      	add	r3, sp, #12
 8004b46:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004b4a:	4b72      	ldr	r3, [pc, #456]	; (8004d14 <_scanf_i+0x1e4>)
 8004b4c:	69a1      	ldr	r1, [r4, #24]
 8004b4e:	4a72      	ldr	r2, [pc, #456]	; (8004d18 <_scanf_i+0x1e8>)
 8004b50:	2903      	cmp	r1, #3
 8004b52:	bf18      	it	ne
 8004b54:	461a      	movne	r2, r3
 8004b56:	68a3      	ldr	r3, [r4, #8]
 8004b58:	9201      	str	r2, [sp, #4]
 8004b5a:	1e5a      	subs	r2, r3, #1
 8004b5c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004b60:	bf88      	it	hi
 8004b62:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004b66:	4627      	mov	r7, r4
 8004b68:	bf82      	ittt	hi
 8004b6a:	eb03 0905 	addhi.w	r9, r3, r5
 8004b6e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004b72:	60a3      	strhi	r3, [r4, #8]
 8004b74:	f857 3b1c 	ldr.w	r3, [r7], #28
 8004b78:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8004b7c:	bf98      	it	ls
 8004b7e:	f04f 0900 	movls.w	r9, #0
 8004b82:	6023      	str	r3, [r4, #0]
 8004b84:	463d      	mov	r5, r7
 8004b86:	f04f 0b00 	mov.w	fp, #0
 8004b8a:	6831      	ldr	r1, [r6, #0]
 8004b8c:	ab03      	add	r3, sp, #12
 8004b8e:	7809      	ldrb	r1, [r1, #0]
 8004b90:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8004b94:	2202      	movs	r2, #2
 8004b96:	f7fb fb3b 	bl	8000210 <memchr>
 8004b9a:	b328      	cbz	r0, 8004be8 <_scanf_i+0xb8>
 8004b9c:	f1bb 0f01 	cmp.w	fp, #1
 8004ba0:	d159      	bne.n	8004c56 <_scanf_i+0x126>
 8004ba2:	6862      	ldr	r2, [r4, #4]
 8004ba4:	b92a      	cbnz	r2, 8004bb2 <_scanf_i+0x82>
 8004ba6:	6822      	ldr	r2, [r4, #0]
 8004ba8:	2308      	movs	r3, #8
 8004baa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bae:	6063      	str	r3, [r4, #4]
 8004bb0:	6022      	str	r2, [r4, #0]
 8004bb2:	6822      	ldr	r2, [r4, #0]
 8004bb4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8004bb8:	6022      	str	r2, [r4, #0]
 8004bba:	68a2      	ldr	r2, [r4, #8]
 8004bbc:	1e51      	subs	r1, r2, #1
 8004bbe:	60a1      	str	r1, [r4, #8]
 8004bc0:	b192      	cbz	r2, 8004be8 <_scanf_i+0xb8>
 8004bc2:	6832      	ldr	r2, [r6, #0]
 8004bc4:	1c51      	adds	r1, r2, #1
 8004bc6:	6031      	str	r1, [r6, #0]
 8004bc8:	7812      	ldrb	r2, [r2, #0]
 8004bca:	f805 2b01 	strb.w	r2, [r5], #1
 8004bce:	6872      	ldr	r2, [r6, #4]
 8004bd0:	3a01      	subs	r2, #1
 8004bd2:	2a00      	cmp	r2, #0
 8004bd4:	6072      	str	r2, [r6, #4]
 8004bd6:	dc07      	bgt.n	8004be8 <_scanf_i+0xb8>
 8004bd8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8004bdc:	4631      	mov	r1, r6
 8004bde:	4650      	mov	r0, sl
 8004be0:	4790      	blx	r2
 8004be2:	2800      	cmp	r0, #0
 8004be4:	f040 8085 	bne.w	8004cf2 <_scanf_i+0x1c2>
 8004be8:	f10b 0b01 	add.w	fp, fp, #1
 8004bec:	f1bb 0f03 	cmp.w	fp, #3
 8004bf0:	d1cb      	bne.n	8004b8a <_scanf_i+0x5a>
 8004bf2:	6863      	ldr	r3, [r4, #4]
 8004bf4:	b90b      	cbnz	r3, 8004bfa <_scanf_i+0xca>
 8004bf6:	230a      	movs	r3, #10
 8004bf8:	6063      	str	r3, [r4, #4]
 8004bfa:	6863      	ldr	r3, [r4, #4]
 8004bfc:	4947      	ldr	r1, [pc, #284]	; (8004d1c <_scanf_i+0x1ec>)
 8004bfe:	6960      	ldr	r0, [r4, #20]
 8004c00:	1ac9      	subs	r1, r1, r3
 8004c02:	f000 f88d 	bl	8004d20 <__sccl>
 8004c06:	f04f 0b00 	mov.w	fp, #0
 8004c0a:	68a3      	ldr	r3, [r4, #8]
 8004c0c:	6822      	ldr	r2, [r4, #0]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d03d      	beq.n	8004c8e <_scanf_i+0x15e>
 8004c12:	6831      	ldr	r1, [r6, #0]
 8004c14:	6960      	ldr	r0, [r4, #20]
 8004c16:	f891 c000 	ldrb.w	ip, [r1]
 8004c1a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8004c1e:	2800      	cmp	r0, #0
 8004c20:	d035      	beq.n	8004c8e <_scanf_i+0x15e>
 8004c22:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8004c26:	d124      	bne.n	8004c72 <_scanf_i+0x142>
 8004c28:	0510      	lsls	r0, r2, #20
 8004c2a:	d522      	bpl.n	8004c72 <_scanf_i+0x142>
 8004c2c:	f10b 0b01 	add.w	fp, fp, #1
 8004c30:	f1b9 0f00 	cmp.w	r9, #0
 8004c34:	d003      	beq.n	8004c3e <_scanf_i+0x10e>
 8004c36:	3301      	adds	r3, #1
 8004c38:	f109 39ff 	add.w	r9, r9, #4294967295
 8004c3c:	60a3      	str	r3, [r4, #8]
 8004c3e:	6873      	ldr	r3, [r6, #4]
 8004c40:	3b01      	subs	r3, #1
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	6073      	str	r3, [r6, #4]
 8004c46:	dd1b      	ble.n	8004c80 <_scanf_i+0x150>
 8004c48:	6833      	ldr	r3, [r6, #0]
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	6033      	str	r3, [r6, #0]
 8004c4e:	68a3      	ldr	r3, [r4, #8]
 8004c50:	3b01      	subs	r3, #1
 8004c52:	60a3      	str	r3, [r4, #8]
 8004c54:	e7d9      	b.n	8004c0a <_scanf_i+0xda>
 8004c56:	f1bb 0f02 	cmp.w	fp, #2
 8004c5a:	d1ae      	bne.n	8004bba <_scanf_i+0x8a>
 8004c5c:	6822      	ldr	r2, [r4, #0]
 8004c5e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8004c62:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8004c66:	d1bf      	bne.n	8004be8 <_scanf_i+0xb8>
 8004c68:	2310      	movs	r3, #16
 8004c6a:	6063      	str	r3, [r4, #4]
 8004c6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c70:	e7a2      	b.n	8004bb8 <_scanf_i+0x88>
 8004c72:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8004c76:	6022      	str	r2, [r4, #0]
 8004c78:	780b      	ldrb	r3, [r1, #0]
 8004c7a:	f805 3b01 	strb.w	r3, [r5], #1
 8004c7e:	e7de      	b.n	8004c3e <_scanf_i+0x10e>
 8004c80:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004c84:	4631      	mov	r1, r6
 8004c86:	4650      	mov	r0, sl
 8004c88:	4798      	blx	r3
 8004c8a:	2800      	cmp	r0, #0
 8004c8c:	d0df      	beq.n	8004c4e <_scanf_i+0x11e>
 8004c8e:	6823      	ldr	r3, [r4, #0]
 8004c90:	05db      	lsls	r3, r3, #23
 8004c92:	d50d      	bpl.n	8004cb0 <_scanf_i+0x180>
 8004c94:	42bd      	cmp	r5, r7
 8004c96:	d909      	bls.n	8004cac <_scanf_i+0x17c>
 8004c98:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8004c9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004ca0:	4632      	mov	r2, r6
 8004ca2:	4650      	mov	r0, sl
 8004ca4:	4798      	blx	r3
 8004ca6:	f105 39ff 	add.w	r9, r5, #4294967295
 8004caa:	464d      	mov	r5, r9
 8004cac:	42bd      	cmp	r5, r7
 8004cae:	d02d      	beq.n	8004d0c <_scanf_i+0x1dc>
 8004cb0:	6822      	ldr	r2, [r4, #0]
 8004cb2:	f012 0210 	ands.w	r2, r2, #16
 8004cb6:	d113      	bne.n	8004ce0 <_scanf_i+0x1b0>
 8004cb8:	702a      	strb	r2, [r5, #0]
 8004cba:	6863      	ldr	r3, [r4, #4]
 8004cbc:	9e01      	ldr	r6, [sp, #4]
 8004cbe:	4639      	mov	r1, r7
 8004cc0:	4650      	mov	r0, sl
 8004cc2:	47b0      	blx	r6
 8004cc4:	6821      	ldr	r1, [r4, #0]
 8004cc6:	f8d8 3000 	ldr.w	r3, [r8]
 8004cca:	f011 0f20 	tst.w	r1, #32
 8004cce:	d013      	beq.n	8004cf8 <_scanf_i+0x1c8>
 8004cd0:	1d1a      	adds	r2, r3, #4
 8004cd2:	f8c8 2000 	str.w	r2, [r8]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	6018      	str	r0, [r3, #0]
 8004cda:	68e3      	ldr	r3, [r4, #12]
 8004cdc:	3301      	adds	r3, #1
 8004cde:	60e3      	str	r3, [r4, #12]
 8004ce0:	1bed      	subs	r5, r5, r7
 8004ce2:	44ab      	add	fp, r5
 8004ce4:	6925      	ldr	r5, [r4, #16]
 8004ce6:	445d      	add	r5, fp
 8004ce8:	6125      	str	r5, [r4, #16]
 8004cea:	2000      	movs	r0, #0
 8004cec:	b007      	add	sp, #28
 8004cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cf2:	f04f 0b00 	mov.w	fp, #0
 8004cf6:	e7ca      	b.n	8004c8e <_scanf_i+0x15e>
 8004cf8:	1d1a      	adds	r2, r3, #4
 8004cfa:	f8c8 2000 	str.w	r2, [r8]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f011 0f01 	tst.w	r1, #1
 8004d04:	bf14      	ite	ne
 8004d06:	8018      	strhne	r0, [r3, #0]
 8004d08:	6018      	streq	r0, [r3, #0]
 8004d0a:	e7e6      	b.n	8004cda <_scanf_i+0x1aa>
 8004d0c:	2001      	movs	r0, #1
 8004d0e:	e7ed      	b.n	8004cec <_scanf_i+0x1bc>
 8004d10:	080053b0 	.word	0x080053b0
 8004d14:	08004f7d 	.word	0x08004f7d
 8004d18:	08004e95 	.word	0x08004e95
 8004d1c:	080056a9 	.word	0x080056a9

08004d20 <__sccl>:
 8004d20:	b570      	push	{r4, r5, r6, lr}
 8004d22:	780b      	ldrb	r3, [r1, #0]
 8004d24:	4604      	mov	r4, r0
 8004d26:	2b5e      	cmp	r3, #94	; 0x5e
 8004d28:	bf0b      	itete	eq
 8004d2a:	784b      	ldrbeq	r3, [r1, #1]
 8004d2c:	1c48      	addne	r0, r1, #1
 8004d2e:	1c88      	addeq	r0, r1, #2
 8004d30:	2200      	movne	r2, #0
 8004d32:	bf08      	it	eq
 8004d34:	2201      	moveq	r2, #1
 8004d36:	1e61      	subs	r1, r4, #1
 8004d38:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8004d3c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8004d40:	42a9      	cmp	r1, r5
 8004d42:	d1fb      	bne.n	8004d3c <__sccl+0x1c>
 8004d44:	b90b      	cbnz	r3, 8004d4a <__sccl+0x2a>
 8004d46:	3801      	subs	r0, #1
 8004d48:	bd70      	pop	{r4, r5, r6, pc}
 8004d4a:	f082 0201 	eor.w	r2, r2, #1
 8004d4e:	54e2      	strb	r2, [r4, r3]
 8004d50:	4605      	mov	r5, r0
 8004d52:	4628      	mov	r0, r5
 8004d54:	f810 1b01 	ldrb.w	r1, [r0], #1
 8004d58:	292d      	cmp	r1, #45	; 0x2d
 8004d5a:	d006      	beq.n	8004d6a <__sccl+0x4a>
 8004d5c:	295d      	cmp	r1, #93	; 0x5d
 8004d5e:	d0f3      	beq.n	8004d48 <__sccl+0x28>
 8004d60:	b909      	cbnz	r1, 8004d66 <__sccl+0x46>
 8004d62:	4628      	mov	r0, r5
 8004d64:	e7f0      	b.n	8004d48 <__sccl+0x28>
 8004d66:	460b      	mov	r3, r1
 8004d68:	e7f1      	b.n	8004d4e <__sccl+0x2e>
 8004d6a:	786e      	ldrb	r6, [r5, #1]
 8004d6c:	2e5d      	cmp	r6, #93	; 0x5d
 8004d6e:	d0fa      	beq.n	8004d66 <__sccl+0x46>
 8004d70:	42b3      	cmp	r3, r6
 8004d72:	dcf8      	bgt.n	8004d66 <__sccl+0x46>
 8004d74:	3502      	adds	r5, #2
 8004d76:	4619      	mov	r1, r3
 8004d78:	3101      	adds	r1, #1
 8004d7a:	428e      	cmp	r6, r1
 8004d7c:	5462      	strb	r2, [r4, r1]
 8004d7e:	dcfb      	bgt.n	8004d78 <__sccl+0x58>
 8004d80:	1af1      	subs	r1, r6, r3
 8004d82:	3901      	subs	r1, #1
 8004d84:	1c58      	adds	r0, r3, #1
 8004d86:	42b3      	cmp	r3, r6
 8004d88:	bfa8      	it	ge
 8004d8a:	2100      	movge	r1, #0
 8004d8c:	1843      	adds	r3, r0, r1
 8004d8e:	e7e0      	b.n	8004d52 <__sccl+0x32>

08004d90 <_strtol_l.constprop.0>:
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d96:	d001      	beq.n	8004d9c <_strtol_l.constprop.0+0xc>
 8004d98:	2b24      	cmp	r3, #36	; 0x24
 8004d9a:	d906      	bls.n	8004daa <_strtol_l.constprop.0+0x1a>
 8004d9c:	f7ff f924 	bl	8003fe8 <__errno>
 8004da0:	2316      	movs	r3, #22
 8004da2:	6003      	str	r3, [r0, #0]
 8004da4:	2000      	movs	r0, #0
 8004da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004daa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004e90 <_strtol_l.constprop.0+0x100>
 8004dae:	460d      	mov	r5, r1
 8004db0:	462e      	mov	r6, r5
 8004db2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004db6:	f814 700c 	ldrb.w	r7, [r4, ip]
 8004dba:	f017 0708 	ands.w	r7, r7, #8
 8004dbe:	d1f7      	bne.n	8004db0 <_strtol_l.constprop.0+0x20>
 8004dc0:	2c2d      	cmp	r4, #45	; 0x2d
 8004dc2:	d132      	bne.n	8004e2a <_strtol_l.constprop.0+0x9a>
 8004dc4:	782c      	ldrb	r4, [r5, #0]
 8004dc6:	2701      	movs	r7, #1
 8004dc8:	1cb5      	adds	r5, r6, #2
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d05b      	beq.n	8004e86 <_strtol_l.constprop.0+0xf6>
 8004dce:	2b10      	cmp	r3, #16
 8004dd0:	d109      	bne.n	8004de6 <_strtol_l.constprop.0+0x56>
 8004dd2:	2c30      	cmp	r4, #48	; 0x30
 8004dd4:	d107      	bne.n	8004de6 <_strtol_l.constprop.0+0x56>
 8004dd6:	782c      	ldrb	r4, [r5, #0]
 8004dd8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004ddc:	2c58      	cmp	r4, #88	; 0x58
 8004dde:	d14d      	bne.n	8004e7c <_strtol_l.constprop.0+0xec>
 8004de0:	786c      	ldrb	r4, [r5, #1]
 8004de2:	2310      	movs	r3, #16
 8004de4:	3502      	adds	r5, #2
 8004de6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8004dea:	f108 38ff 	add.w	r8, r8, #4294967295
 8004dee:	f04f 0c00 	mov.w	ip, #0
 8004df2:	fbb8 f9f3 	udiv	r9, r8, r3
 8004df6:	4666      	mov	r6, ip
 8004df8:	fb03 8a19 	mls	sl, r3, r9, r8
 8004dfc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8004e00:	f1be 0f09 	cmp.w	lr, #9
 8004e04:	d816      	bhi.n	8004e34 <_strtol_l.constprop.0+0xa4>
 8004e06:	4674      	mov	r4, lr
 8004e08:	42a3      	cmp	r3, r4
 8004e0a:	dd24      	ble.n	8004e56 <_strtol_l.constprop.0+0xc6>
 8004e0c:	f1bc 0f00 	cmp.w	ip, #0
 8004e10:	db1e      	blt.n	8004e50 <_strtol_l.constprop.0+0xc0>
 8004e12:	45b1      	cmp	r9, r6
 8004e14:	d31c      	bcc.n	8004e50 <_strtol_l.constprop.0+0xc0>
 8004e16:	d101      	bne.n	8004e1c <_strtol_l.constprop.0+0x8c>
 8004e18:	45a2      	cmp	sl, r4
 8004e1a:	db19      	blt.n	8004e50 <_strtol_l.constprop.0+0xc0>
 8004e1c:	fb06 4603 	mla	r6, r6, r3, r4
 8004e20:	f04f 0c01 	mov.w	ip, #1
 8004e24:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004e28:	e7e8      	b.n	8004dfc <_strtol_l.constprop.0+0x6c>
 8004e2a:	2c2b      	cmp	r4, #43	; 0x2b
 8004e2c:	bf04      	itt	eq
 8004e2e:	782c      	ldrbeq	r4, [r5, #0]
 8004e30:	1cb5      	addeq	r5, r6, #2
 8004e32:	e7ca      	b.n	8004dca <_strtol_l.constprop.0+0x3a>
 8004e34:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8004e38:	f1be 0f19 	cmp.w	lr, #25
 8004e3c:	d801      	bhi.n	8004e42 <_strtol_l.constprop.0+0xb2>
 8004e3e:	3c37      	subs	r4, #55	; 0x37
 8004e40:	e7e2      	b.n	8004e08 <_strtol_l.constprop.0+0x78>
 8004e42:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8004e46:	f1be 0f19 	cmp.w	lr, #25
 8004e4a:	d804      	bhi.n	8004e56 <_strtol_l.constprop.0+0xc6>
 8004e4c:	3c57      	subs	r4, #87	; 0x57
 8004e4e:	e7db      	b.n	8004e08 <_strtol_l.constprop.0+0x78>
 8004e50:	f04f 3cff 	mov.w	ip, #4294967295
 8004e54:	e7e6      	b.n	8004e24 <_strtol_l.constprop.0+0x94>
 8004e56:	f1bc 0f00 	cmp.w	ip, #0
 8004e5a:	da05      	bge.n	8004e68 <_strtol_l.constprop.0+0xd8>
 8004e5c:	2322      	movs	r3, #34	; 0x22
 8004e5e:	6003      	str	r3, [r0, #0]
 8004e60:	4646      	mov	r6, r8
 8004e62:	b942      	cbnz	r2, 8004e76 <_strtol_l.constprop.0+0xe6>
 8004e64:	4630      	mov	r0, r6
 8004e66:	e79e      	b.n	8004da6 <_strtol_l.constprop.0+0x16>
 8004e68:	b107      	cbz	r7, 8004e6c <_strtol_l.constprop.0+0xdc>
 8004e6a:	4276      	negs	r6, r6
 8004e6c:	2a00      	cmp	r2, #0
 8004e6e:	d0f9      	beq.n	8004e64 <_strtol_l.constprop.0+0xd4>
 8004e70:	f1bc 0f00 	cmp.w	ip, #0
 8004e74:	d000      	beq.n	8004e78 <_strtol_l.constprop.0+0xe8>
 8004e76:	1e69      	subs	r1, r5, #1
 8004e78:	6011      	str	r1, [r2, #0]
 8004e7a:	e7f3      	b.n	8004e64 <_strtol_l.constprop.0+0xd4>
 8004e7c:	2430      	movs	r4, #48	; 0x30
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1b1      	bne.n	8004de6 <_strtol_l.constprop.0+0x56>
 8004e82:	2308      	movs	r3, #8
 8004e84:	e7af      	b.n	8004de6 <_strtol_l.constprop.0+0x56>
 8004e86:	2c30      	cmp	r4, #48	; 0x30
 8004e88:	d0a5      	beq.n	8004dd6 <_strtol_l.constprop.0+0x46>
 8004e8a:	230a      	movs	r3, #10
 8004e8c:	e7ab      	b.n	8004de6 <_strtol_l.constprop.0+0x56>
 8004e8e:	bf00      	nop
 8004e90:	0800555d 	.word	0x0800555d

08004e94 <_strtol_r>:
 8004e94:	f7ff bf7c 	b.w	8004d90 <_strtol_l.constprop.0>

08004e98 <_strtoul_l.constprop.0>:
 8004e98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004e9c:	4f36      	ldr	r7, [pc, #216]	; (8004f78 <_strtoul_l.constprop.0+0xe0>)
 8004e9e:	4686      	mov	lr, r0
 8004ea0:	460d      	mov	r5, r1
 8004ea2:	4628      	mov	r0, r5
 8004ea4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004ea8:	5de6      	ldrb	r6, [r4, r7]
 8004eaa:	f016 0608 	ands.w	r6, r6, #8
 8004eae:	d1f8      	bne.n	8004ea2 <_strtoul_l.constprop.0+0xa>
 8004eb0:	2c2d      	cmp	r4, #45	; 0x2d
 8004eb2:	d12f      	bne.n	8004f14 <_strtoul_l.constprop.0+0x7c>
 8004eb4:	782c      	ldrb	r4, [r5, #0]
 8004eb6:	2601      	movs	r6, #1
 8004eb8:	1c85      	adds	r5, r0, #2
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d057      	beq.n	8004f6e <_strtoul_l.constprop.0+0xd6>
 8004ebe:	2b10      	cmp	r3, #16
 8004ec0:	d109      	bne.n	8004ed6 <_strtoul_l.constprop.0+0x3e>
 8004ec2:	2c30      	cmp	r4, #48	; 0x30
 8004ec4:	d107      	bne.n	8004ed6 <_strtoul_l.constprop.0+0x3e>
 8004ec6:	7828      	ldrb	r0, [r5, #0]
 8004ec8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004ecc:	2858      	cmp	r0, #88	; 0x58
 8004ece:	d149      	bne.n	8004f64 <_strtoul_l.constprop.0+0xcc>
 8004ed0:	786c      	ldrb	r4, [r5, #1]
 8004ed2:	2310      	movs	r3, #16
 8004ed4:	3502      	adds	r5, #2
 8004ed6:	f04f 38ff 	mov.w	r8, #4294967295
 8004eda:	2700      	movs	r7, #0
 8004edc:	fbb8 f8f3 	udiv	r8, r8, r3
 8004ee0:	fb03 f908 	mul.w	r9, r3, r8
 8004ee4:	ea6f 0909 	mvn.w	r9, r9
 8004ee8:	4638      	mov	r0, r7
 8004eea:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004eee:	f1bc 0f09 	cmp.w	ip, #9
 8004ef2:	d814      	bhi.n	8004f1e <_strtoul_l.constprop.0+0x86>
 8004ef4:	4664      	mov	r4, ip
 8004ef6:	42a3      	cmp	r3, r4
 8004ef8:	dd22      	ble.n	8004f40 <_strtoul_l.constprop.0+0xa8>
 8004efa:	2f00      	cmp	r7, #0
 8004efc:	db1d      	blt.n	8004f3a <_strtoul_l.constprop.0+0xa2>
 8004efe:	4580      	cmp	r8, r0
 8004f00:	d31b      	bcc.n	8004f3a <_strtoul_l.constprop.0+0xa2>
 8004f02:	d101      	bne.n	8004f08 <_strtoul_l.constprop.0+0x70>
 8004f04:	45a1      	cmp	r9, r4
 8004f06:	db18      	blt.n	8004f3a <_strtoul_l.constprop.0+0xa2>
 8004f08:	fb00 4003 	mla	r0, r0, r3, r4
 8004f0c:	2701      	movs	r7, #1
 8004f0e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004f12:	e7ea      	b.n	8004eea <_strtoul_l.constprop.0+0x52>
 8004f14:	2c2b      	cmp	r4, #43	; 0x2b
 8004f16:	bf04      	itt	eq
 8004f18:	782c      	ldrbeq	r4, [r5, #0]
 8004f1a:	1c85      	addeq	r5, r0, #2
 8004f1c:	e7cd      	b.n	8004eba <_strtoul_l.constprop.0+0x22>
 8004f1e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004f22:	f1bc 0f19 	cmp.w	ip, #25
 8004f26:	d801      	bhi.n	8004f2c <_strtoul_l.constprop.0+0x94>
 8004f28:	3c37      	subs	r4, #55	; 0x37
 8004f2a:	e7e4      	b.n	8004ef6 <_strtoul_l.constprop.0+0x5e>
 8004f2c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004f30:	f1bc 0f19 	cmp.w	ip, #25
 8004f34:	d804      	bhi.n	8004f40 <_strtoul_l.constprop.0+0xa8>
 8004f36:	3c57      	subs	r4, #87	; 0x57
 8004f38:	e7dd      	b.n	8004ef6 <_strtoul_l.constprop.0+0x5e>
 8004f3a:	f04f 37ff 	mov.w	r7, #4294967295
 8004f3e:	e7e6      	b.n	8004f0e <_strtoul_l.constprop.0+0x76>
 8004f40:	2f00      	cmp	r7, #0
 8004f42:	da07      	bge.n	8004f54 <_strtoul_l.constprop.0+0xbc>
 8004f44:	2322      	movs	r3, #34	; 0x22
 8004f46:	f8ce 3000 	str.w	r3, [lr]
 8004f4a:	f04f 30ff 	mov.w	r0, #4294967295
 8004f4e:	b932      	cbnz	r2, 8004f5e <_strtoul_l.constprop.0+0xc6>
 8004f50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004f54:	b106      	cbz	r6, 8004f58 <_strtoul_l.constprop.0+0xc0>
 8004f56:	4240      	negs	r0, r0
 8004f58:	2a00      	cmp	r2, #0
 8004f5a:	d0f9      	beq.n	8004f50 <_strtoul_l.constprop.0+0xb8>
 8004f5c:	b107      	cbz	r7, 8004f60 <_strtoul_l.constprop.0+0xc8>
 8004f5e:	1e69      	subs	r1, r5, #1
 8004f60:	6011      	str	r1, [r2, #0]
 8004f62:	e7f5      	b.n	8004f50 <_strtoul_l.constprop.0+0xb8>
 8004f64:	2430      	movs	r4, #48	; 0x30
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d1b5      	bne.n	8004ed6 <_strtoul_l.constprop.0+0x3e>
 8004f6a:	2308      	movs	r3, #8
 8004f6c:	e7b3      	b.n	8004ed6 <_strtoul_l.constprop.0+0x3e>
 8004f6e:	2c30      	cmp	r4, #48	; 0x30
 8004f70:	d0a9      	beq.n	8004ec6 <_strtoul_l.constprop.0+0x2e>
 8004f72:	230a      	movs	r3, #10
 8004f74:	e7af      	b.n	8004ed6 <_strtoul_l.constprop.0+0x3e>
 8004f76:	bf00      	nop
 8004f78:	0800555d 	.word	0x0800555d

08004f7c <_strtoul_r>:
 8004f7c:	f7ff bf8c 	b.w	8004e98 <_strtoul_l.constprop.0>

08004f80 <__submore>:
 8004f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f84:	460c      	mov	r4, r1
 8004f86:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004f88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f8c:	4299      	cmp	r1, r3
 8004f8e:	d11d      	bne.n	8004fcc <__submore+0x4c>
 8004f90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004f94:	f000 f8c4 	bl	8005120 <_malloc_r>
 8004f98:	b918      	cbnz	r0, 8004fa2 <__submore+0x22>
 8004f9a:	f04f 30ff 	mov.w	r0, #4294967295
 8004f9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fa6:	63a3      	str	r3, [r4, #56]	; 0x38
 8004fa8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8004fac:	6360      	str	r0, [r4, #52]	; 0x34
 8004fae:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8004fb2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004fb6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8004fba:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004fbe:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8004fc2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8004fc6:	6020      	str	r0, [r4, #0]
 8004fc8:	2000      	movs	r0, #0
 8004fca:	e7e8      	b.n	8004f9e <__submore+0x1e>
 8004fcc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8004fce:	0077      	lsls	r7, r6, #1
 8004fd0:	463a      	mov	r2, r7
 8004fd2:	f000 f919 	bl	8005208 <_realloc_r>
 8004fd6:	4605      	mov	r5, r0
 8004fd8:	2800      	cmp	r0, #0
 8004fda:	d0de      	beq.n	8004f9a <__submore+0x1a>
 8004fdc:	eb00 0806 	add.w	r8, r0, r6
 8004fe0:	4601      	mov	r1, r0
 8004fe2:	4632      	mov	r2, r6
 8004fe4:	4640      	mov	r0, r8
 8004fe6:	f000 f807 	bl	8004ff8 <memcpy>
 8004fea:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8004fee:	f8c4 8000 	str.w	r8, [r4]
 8004ff2:	e7e9      	b.n	8004fc8 <__submore+0x48>

08004ff4 <__retarget_lock_acquire_recursive>:
 8004ff4:	4770      	bx	lr

08004ff6 <__retarget_lock_release_recursive>:
 8004ff6:	4770      	bx	lr

08004ff8 <memcpy>:
 8004ff8:	440a      	add	r2, r1
 8004ffa:	4291      	cmp	r1, r2
 8004ffc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005000:	d100      	bne.n	8005004 <memcpy+0xc>
 8005002:	4770      	bx	lr
 8005004:	b510      	push	{r4, lr}
 8005006:	f811 4b01 	ldrb.w	r4, [r1], #1
 800500a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800500e:	4291      	cmp	r1, r2
 8005010:	d1f9      	bne.n	8005006 <memcpy+0xe>
 8005012:	bd10      	pop	{r4, pc}

08005014 <memmove>:
 8005014:	4288      	cmp	r0, r1
 8005016:	b510      	push	{r4, lr}
 8005018:	eb01 0402 	add.w	r4, r1, r2
 800501c:	d902      	bls.n	8005024 <memmove+0x10>
 800501e:	4284      	cmp	r4, r0
 8005020:	4623      	mov	r3, r4
 8005022:	d807      	bhi.n	8005034 <memmove+0x20>
 8005024:	1e43      	subs	r3, r0, #1
 8005026:	42a1      	cmp	r1, r4
 8005028:	d008      	beq.n	800503c <memmove+0x28>
 800502a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800502e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005032:	e7f8      	b.n	8005026 <memmove+0x12>
 8005034:	4402      	add	r2, r0
 8005036:	4601      	mov	r1, r0
 8005038:	428a      	cmp	r2, r1
 800503a:	d100      	bne.n	800503e <memmove+0x2a>
 800503c:	bd10      	pop	{r4, pc}
 800503e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005042:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005046:	e7f7      	b.n	8005038 <memmove+0x24>

08005048 <_free_r>:
 8005048:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800504a:	2900      	cmp	r1, #0
 800504c:	d044      	beq.n	80050d8 <_free_r+0x90>
 800504e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005052:	9001      	str	r0, [sp, #4]
 8005054:	2b00      	cmp	r3, #0
 8005056:	f1a1 0404 	sub.w	r4, r1, #4
 800505a:	bfb8      	it	lt
 800505c:	18e4      	addlt	r4, r4, r3
 800505e:	f000 f913 	bl	8005288 <__malloc_lock>
 8005062:	4a1e      	ldr	r2, [pc, #120]	; (80050dc <_free_r+0x94>)
 8005064:	9801      	ldr	r0, [sp, #4]
 8005066:	6813      	ldr	r3, [r2, #0]
 8005068:	b933      	cbnz	r3, 8005078 <_free_r+0x30>
 800506a:	6063      	str	r3, [r4, #4]
 800506c:	6014      	str	r4, [r2, #0]
 800506e:	b003      	add	sp, #12
 8005070:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005074:	f000 b90e 	b.w	8005294 <__malloc_unlock>
 8005078:	42a3      	cmp	r3, r4
 800507a:	d908      	bls.n	800508e <_free_r+0x46>
 800507c:	6825      	ldr	r5, [r4, #0]
 800507e:	1961      	adds	r1, r4, r5
 8005080:	428b      	cmp	r3, r1
 8005082:	bf01      	itttt	eq
 8005084:	6819      	ldreq	r1, [r3, #0]
 8005086:	685b      	ldreq	r3, [r3, #4]
 8005088:	1949      	addeq	r1, r1, r5
 800508a:	6021      	streq	r1, [r4, #0]
 800508c:	e7ed      	b.n	800506a <_free_r+0x22>
 800508e:	461a      	mov	r2, r3
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	b10b      	cbz	r3, 8005098 <_free_r+0x50>
 8005094:	42a3      	cmp	r3, r4
 8005096:	d9fa      	bls.n	800508e <_free_r+0x46>
 8005098:	6811      	ldr	r1, [r2, #0]
 800509a:	1855      	adds	r5, r2, r1
 800509c:	42a5      	cmp	r5, r4
 800509e:	d10b      	bne.n	80050b8 <_free_r+0x70>
 80050a0:	6824      	ldr	r4, [r4, #0]
 80050a2:	4421      	add	r1, r4
 80050a4:	1854      	adds	r4, r2, r1
 80050a6:	42a3      	cmp	r3, r4
 80050a8:	6011      	str	r1, [r2, #0]
 80050aa:	d1e0      	bne.n	800506e <_free_r+0x26>
 80050ac:	681c      	ldr	r4, [r3, #0]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	6053      	str	r3, [r2, #4]
 80050b2:	4421      	add	r1, r4
 80050b4:	6011      	str	r1, [r2, #0]
 80050b6:	e7da      	b.n	800506e <_free_r+0x26>
 80050b8:	d902      	bls.n	80050c0 <_free_r+0x78>
 80050ba:	230c      	movs	r3, #12
 80050bc:	6003      	str	r3, [r0, #0]
 80050be:	e7d6      	b.n	800506e <_free_r+0x26>
 80050c0:	6825      	ldr	r5, [r4, #0]
 80050c2:	1961      	adds	r1, r4, r5
 80050c4:	428b      	cmp	r3, r1
 80050c6:	bf04      	itt	eq
 80050c8:	6819      	ldreq	r1, [r3, #0]
 80050ca:	685b      	ldreq	r3, [r3, #4]
 80050cc:	6063      	str	r3, [r4, #4]
 80050ce:	bf04      	itt	eq
 80050d0:	1949      	addeq	r1, r1, r5
 80050d2:	6021      	streq	r1, [r4, #0]
 80050d4:	6054      	str	r4, [r2, #4]
 80050d6:	e7ca      	b.n	800506e <_free_r+0x26>
 80050d8:	b003      	add	sp, #12
 80050da:	bd30      	pop	{r4, r5, pc}
 80050dc:	20001b00 	.word	0x20001b00

080050e0 <sbrk_aligned>:
 80050e0:	b570      	push	{r4, r5, r6, lr}
 80050e2:	4e0e      	ldr	r6, [pc, #56]	; (800511c <sbrk_aligned+0x3c>)
 80050e4:	460c      	mov	r4, r1
 80050e6:	6831      	ldr	r1, [r6, #0]
 80050e8:	4605      	mov	r5, r0
 80050ea:	b911      	cbnz	r1, 80050f2 <sbrk_aligned+0x12>
 80050ec:	f000 f8bc 	bl	8005268 <_sbrk_r>
 80050f0:	6030      	str	r0, [r6, #0]
 80050f2:	4621      	mov	r1, r4
 80050f4:	4628      	mov	r0, r5
 80050f6:	f000 f8b7 	bl	8005268 <_sbrk_r>
 80050fa:	1c43      	adds	r3, r0, #1
 80050fc:	d00a      	beq.n	8005114 <sbrk_aligned+0x34>
 80050fe:	1cc4      	adds	r4, r0, #3
 8005100:	f024 0403 	bic.w	r4, r4, #3
 8005104:	42a0      	cmp	r0, r4
 8005106:	d007      	beq.n	8005118 <sbrk_aligned+0x38>
 8005108:	1a21      	subs	r1, r4, r0
 800510a:	4628      	mov	r0, r5
 800510c:	f000 f8ac 	bl	8005268 <_sbrk_r>
 8005110:	3001      	adds	r0, #1
 8005112:	d101      	bne.n	8005118 <sbrk_aligned+0x38>
 8005114:	f04f 34ff 	mov.w	r4, #4294967295
 8005118:	4620      	mov	r0, r4
 800511a:	bd70      	pop	{r4, r5, r6, pc}
 800511c:	20001b04 	.word	0x20001b04

08005120 <_malloc_r>:
 8005120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005124:	1ccd      	adds	r5, r1, #3
 8005126:	f025 0503 	bic.w	r5, r5, #3
 800512a:	3508      	adds	r5, #8
 800512c:	2d0c      	cmp	r5, #12
 800512e:	bf38      	it	cc
 8005130:	250c      	movcc	r5, #12
 8005132:	2d00      	cmp	r5, #0
 8005134:	4607      	mov	r7, r0
 8005136:	db01      	blt.n	800513c <_malloc_r+0x1c>
 8005138:	42a9      	cmp	r1, r5
 800513a:	d905      	bls.n	8005148 <_malloc_r+0x28>
 800513c:	230c      	movs	r3, #12
 800513e:	603b      	str	r3, [r7, #0]
 8005140:	2600      	movs	r6, #0
 8005142:	4630      	mov	r0, r6
 8005144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005148:	4e2e      	ldr	r6, [pc, #184]	; (8005204 <_malloc_r+0xe4>)
 800514a:	f000 f89d 	bl	8005288 <__malloc_lock>
 800514e:	6833      	ldr	r3, [r6, #0]
 8005150:	461c      	mov	r4, r3
 8005152:	bb34      	cbnz	r4, 80051a2 <_malloc_r+0x82>
 8005154:	4629      	mov	r1, r5
 8005156:	4638      	mov	r0, r7
 8005158:	f7ff ffc2 	bl	80050e0 <sbrk_aligned>
 800515c:	1c43      	adds	r3, r0, #1
 800515e:	4604      	mov	r4, r0
 8005160:	d14d      	bne.n	80051fe <_malloc_r+0xde>
 8005162:	6834      	ldr	r4, [r6, #0]
 8005164:	4626      	mov	r6, r4
 8005166:	2e00      	cmp	r6, #0
 8005168:	d140      	bne.n	80051ec <_malloc_r+0xcc>
 800516a:	6823      	ldr	r3, [r4, #0]
 800516c:	4631      	mov	r1, r6
 800516e:	4638      	mov	r0, r7
 8005170:	eb04 0803 	add.w	r8, r4, r3
 8005174:	f000 f878 	bl	8005268 <_sbrk_r>
 8005178:	4580      	cmp	r8, r0
 800517a:	d13a      	bne.n	80051f2 <_malloc_r+0xd2>
 800517c:	6821      	ldr	r1, [r4, #0]
 800517e:	3503      	adds	r5, #3
 8005180:	1a6d      	subs	r5, r5, r1
 8005182:	f025 0503 	bic.w	r5, r5, #3
 8005186:	3508      	adds	r5, #8
 8005188:	2d0c      	cmp	r5, #12
 800518a:	bf38      	it	cc
 800518c:	250c      	movcc	r5, #12
 800518e:	4629      	mov	r1, r5
 8005190:	4638      	mov	r0, r7
 8005192:	f7ff ffa5 	bl	80050e0 <sbrk_aligned>
 8005196:	3001      	adds	r0, #1
 8005198:	d02b      	beq.n	80051f2 <_malloc_r+0xd2>
 800519a:	6823      	ldr	r3, [r4, #0]
 800519c:	442b      	add	r3, r5
 800519e:	6023      	str	r3, [r4, #0]
 80051a0:	e00e      	b.n	80051c0 <_malloc_r+0xa0>
 80051a2:	6822      	ldr	r2, [r4, #0]
 80051a4:	1b52      	subs	r2, r2, r5
 80051a6:	d41e      	bmi.n	80051e6 <_malloc_r+0xc6>
 80051a8:	2a0b      	cmp	r2, #11
 80051aa:	d916      	bls.n	80051da <_malloc_r+0xba>
 80051ac:	1961      	adds	r1, r4, r5
 80051ae:	42a3      	cmp	r3, r4
 80051b0:	6025      	str	r5, [r4, #0]
 80051b2:	bf18      	it	ne
 80051b4:	6059      	strne	r1, [r3, #4]
 80051b6:	6863      	ldr	r3, [r4, #4]
 80051b8:	bf08      	it	eq
 80051ba:	6031      	streq	r1, [r6, #0]
 80051bc:	5162      	str	r2, [r4, r5]
 80051be:	604b      	str	r3, [r1, #4]
 80051c0:	4638      	mov	r0, r7
 80051c2:	f104 060b 	add.w	r6, r4, #11
 80051c6:	f000 f865 	bl	8005294 <__malloc_unlock>
 80051ca:	f026 0607 	bic.w	r6, r6, #7
 80051ce:	1d23      	adds	r3, r4, #4
 80051d0:	1af2      	subs	r2, r6, r3
 80051d2:	d0b6      	beq.n	8005142 <_malloc_r+0x22>
 80051d4:	1b9b      	subs	r3, r3, r6
 80051d6:	50a3      	str	r3, [r4, r2]
 80051d8:	e7b3      	b.n	8005142 <_malloc_r+0x22>
 80051da:	6862      	ldr	r2, [r4, #4]
 80051dc:	42a3      	cmp	r3, r4
 80051de:	bf0c      	ite	eq
 80051e0:	6032      	streq	r2, [r6, #0]
 80051e2:	605a      	strne	r2, [r3, #4]
 80051e4:	e7ec      	b.n	80051c0 <_malloc_r+0xa0>
 80051e6:	4623      	mov	r3, r4
 80051e8:	6864      	ldr	r4, [r4, #4]
 80051ea:	e7b2      	b.n	8005152 <_malloc_r+0x32>
 80051ec:	4634      	mov	r4, r6
 80051ee:	6876      	ldr	r6, [r6, #4]
 80051f0:	e7b9      	b.n	8005166 <_malloc_r+0x46>
 80051f2:	230c      	movs	r3, #12
 80051f4:	603b      	str	r3, [r7, #0]
 80051f6:	4638      	mov	r0, r7
 80051f8:	f000 f84c 	bl	8005294 <__malloc_unlock>
 80051fc:	e7a1      	b.n	8005142 <_malloc_r+0x22>
 80051fe:	6025      	str	r5, [r4, #0]
 8005200:	e7de      	b.n	80051c0 <_malloc_r+0xa0>
 8005202:	bf00      	nop
 8005204:	20001b00 	.word	0x20001b00

08005208 <_realloc_r>:
 8005208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800520c:	4680      	mov	r8, r0
 800520e:	4614      	mov	r4, r2
 8005210:	460e      	mov	r6, r1
 8005212:	b921      	cbnz	r1, 800521e <_realloc_r+0x16>
 8005214:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005218:	4611      	mov	r1, r2
 800521a:	f7ff bf81 	b.w	8005120 <_malloc_r>
 800521e:	b92a      	cbnz	r2, 800522c <_realloc_r+0x24>
 8005220:	f7ff ff12 	bl	8005048 <_free_r>
 8005224:	4625      	mov	r5, r4
 8005226:	4628      	mov	r0, r5
 8005228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800522c:	f000 f838 	bl	80052a0 <_malloc_usable_size_r>
 8005230:	4284      	cmp	r4, r0
 8005232:	4607      	mov	r7, r0
 8005234:	d802      	bhi.n	800523c <_realloc_r+0x34>
 8005236:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800523a:	d812      	bhi.n	8005262 <_realloc_r+0x5a>
 800523c:	4621      	mov	r1, r4
 800523e:	4640      	mov	r0, r8
 8005240:	f7ff ff6e 	bl	8005120 <_malloc_r>
 8005244:	4605      	mov	r5, r0
 8005246:	2800      	cmp	r0, #0
 8005248:	d0ed      	beq.n	8005226 <_realloc_r+0x1e>
 800524a:	42bc      	cmp	r4, r7
 800524c:	4622      	mov	r2, r4
 800524e:	4631      	mov	r1, r6
 8005250:	bf28      	it	cs
 8005252:	463a      	movcs	r2, r7
 8005254:	f7ff fed0 	bl	8004ff8 <memcpy>
 8005258:	4631      	mov	r1, r6
 800525a:	4640      	mov	r0, r8
 800525c:	f7ff fef4 	bl	8005048 <_free_r>
 8005260:	e7e1      	b.n	8005226 <_realloc_r+0x1e>
 8005262:	4635      	mov	r5, r6
 8005264:	e7df      	b.n	8005226 <_realloc_r+0x1e>
	...

08005268 <_sbrk_r>:
 8005268:	b538      	push	{r3, r4, r5, lr}
 800526a:	4d06      	ldr	r5, [pc, #24]	; (8005284 <_sbrk_r+0x1c>)
 800526c:	2300      	movs	r3, #0
 800526e:	4604      	mov	r4, r0
 8005270:	4608      	mov	r0, r1
 8005272:	602b      	str	r3, [r5, #0]
 8005274:	f7fc f908 	bl	8001488 <_sbrk>
 8005278:	1c43      	adds	r3, r0, #1
 800527a:	d102      	bne.n	8005282 <_sbrk_r+0x1a>
 800527c:	682b      	ldr	r3, [r5, #0]
 800527e:	b103      	cbz	r3, 8005282 <_sbrk_r+0x1a>
 8005280:	6023      	str	r3, [r4, #0]
 8005282:	bd38      	pop	{r3, r4, r5, pc}
 8005284:	20001af8 	.word	0x20001af8

08005288 <__malloc_lock>:
 8005288:	4801      	ldr	r0, [pc, #4]	; (8005290 <__malloc_lock+0x8>)
 800528a:	f7ff beb3 	b.w	8004ff4 <__retarget_lock_acquire_recursive>
 800528e:	bf00      	nop
 8005290:	20001afc 	.word	0x20001afc

08005294 <__malloc_unlock>:
 8005294:	4801      	ldr	r0, [pc, #4]	; (800529c <__malloc_unlock+0x8>)
 8005296:	f7ff beae 	b.w	8004ff6 <__retarget_lock_release_recursive>
 800529a:	bf00      	nop
 800529c:	20001afc 	.word	0x20001afc

080052a0 <_malloc_usable_size_r>:
 80052a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052a4:	1f18      	subs	r0, r3, #4
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	bfbc      	itt	lt
 80052aa:	580b      	ldrlt	r3, [r1, r0]
 80052ac:	18c0      	addlt	r0, r0, r3
 80052ae:	4770      	bx	lr

080052b0 <_init>:
 80052b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052b2:	bf00      	nop
 80052b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052b6:	bc08      	pop	{r3}
 80052b8:	469e      	mov	lr, r3
 80052ba:	4770      	bx	lr

080052bc <_fini>:
 80052bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052be:	bf00      	nop
 80052c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052c2:	bc08      	pop	{r3}
 80052c4:	469e      	mov	lr, r3
 80052c6:	4770      	bx	lr
